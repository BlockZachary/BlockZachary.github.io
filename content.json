{"meta":{"title":"Zachary Blog","subtitle":"","description":"","author":"Zachary Block","url":"http://example.com","root":"/"},"pages":[{"title":"category","date":"2024-12-07T20:44:44.000Z","updated":"2024-12-07T14:42:41.089Z","comments":true,"path":"category/index.html","permalink":"http://example.com/category/index.html","excerpt":"","text":""},{"title":"tag","date":"2024-12-07T20:44:51.000Z","updated":"2024-12-07T14:42:41.089Z","comments":true,"path":"tag/index.html","permalink":"http://example.com/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"FastAPI入门-学生成绩管理","slug":"FastAPI入门/学生成绩管理","date":"2024-05-26T21:20:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2024/05/26/FastAPI入门/学生成绩管理/","permalink":"http://example.com/2024/05/26/FastAPI%E5%85%A5%E9%97%A8/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86/","excerpt":"","text":"学生成绩管理成绩表设计 管理员课程打分前端添加课程打分弹窗 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;addGrade(scope.row)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;评分 &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;成绩信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.gradeForm&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.gradeForm.name&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;分数&quot;&gt; &lt;el-input v-model=&quot;data.gradeForm.score&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;评语&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.gradeForm.comment&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), gradeForm: &#123;&#125;, formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分函数，弹窗const addGrade = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.gradeForm.name = row.name; data.gradeForm.studentId = row.studentId; data.gradeForm.courseId = row.courseId; data.gradeForm.score = &quot;&quot;; data.gradeForm.comment = &quot;&quot;;&#125;;const save = () =&gt; &#123; request .post(&quot;/grade/add&quot;, data.gradeForm) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端依次创建上：gradeApi.py、gradeService.py、grade.py 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import APIRouter, Dependsfrom api import appfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.grade import GradeCreatefrom service.gradeService import GradeServicegrade_router = APIRouter(prefix=&quot;/grade&quot;)@grade_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)): GradeService.add_grade(grade, db_session) return Result.success()app.include_router(grade_router) 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi, fileApi, studentCourseApi, gradeApi 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_from common.utils import set_attrsfrom exception.customException import GradeExistExceptionfrom model import Sessionfrom model.grade import GradeCreate, Gradeclass GradeService: @staticmethod def add_grade(grade: GradeCreate, db_session: Session): query = select(Grade).where( and_(Grade.studentId == grade.studentId, Grade.courseId == grade.courseId)) exist_grade: Grade = db_session.execute(query).scalar() if exist_grade: raise GradeExistException(&quot;课程已打分&quot;) new_grade = Grade() set_attrs(new_grade, jsonable_encoder(grade)) db_session.add(new_grade) db_session.commit() return new_grade 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom pydantic import BaseModelfrom sqlalchemy import Integer, Double, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Basefrom model.course import Coursefrom model.student import Studentclass Grade(Base): __tablename__ = &quot;grade&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) score: Mapped[str] = mapped_column(Double, nullable=False) comment: Mapped[str] = mapped_column(String(255), nullable=False) feedback: Mapped[str] = mapped_column(String(255), nullable=False)class GradeBase(BaseModel): courseId: int studentId: int score: Optional[float] = None comment: Optional[str] = None feedback: Optional[str] = Noneclass GradeCreate(GradeBase): pass 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseExistException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass GradeExistException(Exception): def __init__(self, message: str): self.message = message 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\ StudentCourseExistException, StudentCourseNotExistException, GradeExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(StudentCourseExistException)async def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(StudentCourseNotExistException)async def student_course_not_exist_exception_handler(request: Request, exc: StudentCourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(GradeExistException)async def grade_exist_exception_handler(request: Request, exc: GradeExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 测试管理员评分 显示课程分数前端复制StudentCourse.vue重命名为Grade.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.courseName&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.studentName&quot; placeholder=&quot;请输入要查询的学生名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;course.name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column prop=&quot;score&quot; label=&quot;成绩&quot; /&gt; &lt;el-table-column prop=&quot;comment&quot; label=&quot;教师评语&quot; /&gt; &lt;el-table-column prop=&quot;feedback&quot; label=&quot;学生评价&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;删除 &lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;setFeedback(scope.row)&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot; &gt;评价 &lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;反馈信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;反馈&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.feedback&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; form: &#123;&#125;, courseName: &quot;&quot;, studentName: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, courseName: data.courseName, studentName: data.studentName, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/grade/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.courseName = &quot;&quot;; data.studentName = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分const setFeedback = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.form = JSON.parse(JSON.stringify(row));&#125;;const save = () =&gt; &#123; request .post(&quot;/grade/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;courseList&quot;, name: &quot;CourseList&quot;, component: () =&gt; import(&quot;@/views/manager/CourseList.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;studentCourse&quot;, name: &quot;StudentCourse&quot;, component: () =&gt; import(&quot;@/views/manager/StudentCourse.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;grade&quot;, name: &quot;Grade&quot;, component: () =&gt; import(&quot;@/views/manager/Grade.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/courseList&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;学生选课&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/studentCourse&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;选课记录&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;4&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;成绩信息&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/grade&quot;&gt; &lt;el-icon&gt; &lt;List /&gt; &lt;/el-icon&gt; &lt;span&gt;学生成绩&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.grade import GradeCreate, GradeSearch, GradeUpdatefrom service.gradeService import GradeServicegrade_router = APIRouter(prefix=&quot;/grade&quot;)@grade_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)): GradeService.add_grade(grade, db_session) return Result.success()@grade_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), studentName: Optional[str] = Query(None, description=&quot;Student name&quot;), courseName: Optional[str] = Query(None, description=&quot;Course name&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) grade_search: GradeSearch = GradeSearch(studentName=studentName, courseName=courseName, studentId=studentId) grade_list = GradeService.select_page(grade_search, db_session) return Result.success(pageInfo.of(grade_list))@grade_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(grade: GradeUpdate, db_session: Session = Depends(get_db_session)): GradeService.update_by_id(grade, db_session) return Result.success()app.include_router(grade_router) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import GradeExistExceptionfrom model import Sessionfrom model.course import Coursefrom model.grade import GradeCreate, Grade, GradeSearch, GradeUpdatefrom model.student import Studentclass GradeService: @staticmethod def add_grade(grade: GradeCreate, db_session: Session): query = select(Grade).where( and_(Grade.studentId == grade.studentId, Grade.courseId == grade.courseId)) exist_grade: Grade = db_session.execute(query).scalar() if exist_grade: raise GradeExistException(&quot;课程已打分&quot;) new_grade = Grade() set_attrs(new_grade, jsonable_encoder(grade)) db_session.add(new_grade) db_session.commit() return new_grade @staticmethod def select_page(grade_search: GradeSearch, db_session: Session): query = select(Grade, Student, Course).outerjoin(Grade.student).outerjoin(Grade.course).order_by(asc(Grade.id)) if grade_search.courseName: query = query.where(Course.name.like(f&quot;%&#123;grade_search.courseName&#125;%&quot;)) if grade_search.studentName: query = query.where(Student.name.like(f&quot;%&#123;grade_search.studentName&#125;%&quot;)) if grade_search.studentId: query = query.where(Grade.studentId == grade_search.studentId) result = db_session.execute(query).scalars().all() return result @staticmethod def update_by_id(grade: GradeUpdate, db_session: Session): exist_grade: Grade = check_grade_exist(grade.id, db_session) set_attrs(exist_grade, jsonable_encoder(grade)) db_session.commit() return exist_gradedef check_grade_exist(grade_id: int, db_session: Session): query = select(Grade).where(Grade.id == grade_id) exist_grade: Grade = db_session.execute(query).scalar() if not exist_grade: raise GradeExistException(&quot;成绩记录不存在&quot;) return exist_grade 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom pydantic import BaseModelfrom sqlalchemy import Integer, Double, ForeignKey, Stringfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.course import Coursefrom model.student import Studentclass Grade(Base): __tablename__ = &quot;grade&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, ForeignKey(&#x27;course.id&#x27;), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, ForeignKey(&#x27;student.id&#x27;), nullable=False) score: Mapped[str] = mapped_column(Double, nullable=False) comment: Mapped[str] = mapped_column(String(255), nullable=False) feedback: Mapped[str] = mapped_column(String(255), nullable=False) student: Mapped[Student] = relationship(lazy=False, backref=&quot;grade&quot;) course: Mapped[Course] = relationship(lazy=False, backref=&quot;grade&quot;)class GradeBase(BaseModel): courseId: int studentId: int score: Optional[float] = None comment: Optional[str] = None feedback: Optional[str] = Noneclass GradeCreate(GradeBase): passclass GradeSearch(BaseModel): courseName: str | None studentName: str | None studentId: str | Noneclass GradeUpdate(GradeBase): id: int 测试管理员 课程分数编辑123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.courseName&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.studentName&quot; placeholder=&quot;请输入要查询的学生名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;course.name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column prop=&quot;score&quot; label=&quot;成绩&quot; /&gt; &lt;el-table-column prop=&quot;comment&quot; label=&quot;教师评语&quot; /&gt; &lt;el-table-column prop=&quot;feedback&quot; label=&quot;学生评价&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;编辑 &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;删除 &lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot; &gt;评价 &lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;反馈信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;分数&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input v-model=&quot;data.form.score&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;教师评语&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.comment&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生评价&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.feedback&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; form: &#123;&#125;, courseName: &quot;&quot;, studentName: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, courseName: data.courseName, studentName: data.studentName, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/grade/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.courseName = &quot;&quot;; data.studentName = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分const handleEdit = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.form = JSON.parse(JSON.stringify(row));&#125;;const save = () =&gt; &#123; request .put(&quot;/grade/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 学生： 管理员： 课程分数删除前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.courseName&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.studentName&quot; placeholder=&quot;请输入要查询的学生名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;course.name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column prop=&quot;score&quot; label=&quot;成绩&quot; /&gt; &lt;el-table-column prop=&quot;comment&quot; label=&quot;教师评语&quot; /&gt; &lt;el-table-column prop=&quot;feedback&quot; label=&quot;学生评价&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;编辑 &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;删除 &lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot; &gt;评价 &lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;反馈信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;分数&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input v-model=&quot;data.form.score&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;教师评语&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.comment&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生评价&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.feedback&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; form: &#123;&#125;, courseName: &quot;&quot;, studentName: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, courseName: data.courseName, studentName: data.studentName, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/grade/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.courseName = &quot;&quot;; data.studentName = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/grade/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分const handleEdit = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.form = JSON.parse(JSON.stringify(row));&#125;;const save = () =&gt; &#123; request .put(&quot;/grade/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.grade import GradeCreate, GradeSearch, GradeUpdatefrom service.gradeService import GradeServicegrade_router = APIRouter(prefix=&quot;/grade&quot;)@grade_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)): GradeService.add_grade(grade, db_session) return Result.success()@grade_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), studentName: Optional[str] = Query(None, description=&quot;Student name&quot;), courseName: Optional[str] = Query(None, description=&quot;Course name&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) grade_search: GradeSearch = GradeSearch(studentName=studentName, courseName=courseName, studentId=studentId) grade_list = GradeService.select_page(grade_search, db_session) return Result.success(pageInfo.of(grade_list))@grade_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(grade: GradeUpdate, db_session: Session = Depends(get_db_session)): GradeService.update_by_id(grade, db_session) return Result.success()@grade_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): GradeService.delete_by_id(id, db_session) return Result.success()app.include_router(grade_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import GradeExistExceptionfrom model import Sessionfrom model.course import Coursefrom model.grade import GradeCreate, Grade, GradeSearch, GradeUpdatefrom model.student import Studentclass GradeService: @staticmethod def add_grade(grade: GradeCreate, db_session: Session): query = select(Grade).where( and_(Grade.studentId == grade.studentId, Grade.courseId == grade.courseId)) exist_grade: Grade = db_session.execute(query).scalar() if exist_grade: raise GradeExistException(&quot;课程已打分&quot;) new_grade = Grade() set_attrs(new_grade, jsonable_encoder(grade)) db_session.add(new_grade) db_session.commit() return new_grade @staticmethod def select_page(grade_search: GradeSearch, db_session: Session): query = select(Grade, Student, Course).outerjoin(Grade.student).outerjoin(Grade.course).order_by(asc(Grade.id)) if grade_search.courseName: query = query.where(Course.name.like(f&quot;%&#123;grade_search.courseName&#125;%&quot;)) if grade_search.studentName: query = query.where(Student.name.like(f&quot;%&#123;grade_search.studentName&#125;%&quot;)) if grade_search.studentId: query = query.where(Grade.studentId == grade_search.studentId) result = db_session.execute(query).scalars().all() return result @staticmethod def update_by_id(grade: GradeUpdate, db_session: Session): exist_grade: Grade = check_grade_exist(grade.id, db_session) set_attrs(exist_grade, jsonable_encoder(grade)) db_session.commit() return exist_grade @staticmethod def delete_by_id(id: int, db_session: Session): exist_grade: Grade = check_grade_exist(id, db_session) db_session.delete(exist_grade) db_session.commit() return exist_gradedef check_grade_exist(grade_id: int, db_session: Session): query = select(Grade).where(Grade.id == grade_id) exist_grade: Grade = db_session.execute(query).scalar() if not exist_grade: raise GradeExistException(&quot;成绩记录不存在&quot;) return exist_grade 测试 更新: 2024-05-26 21:20:47原文: https://www.yuque.com/zacharyblock/iacda/izxixxgu5aq8g2nw","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"FastAPI入门-学生选课功能","slug":"FastAPI入门/学生选课功能","date":"2024-05-26T18:51:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2024/05/26/FastAPI入门/学生选课功能/","permalink":"http://example.com/2024/05/26/FastAPI%E5%85%A5%E9%97%A8/%E5%AD%A6%E7%94%9F%E9%80%89%E8%AF%BE%E5%8A%9F%E8%83%BD/","excerpt":"","text":"学生选课功能学生选课功能数据库新增一张学生选课表 前端学生选课页面，把 Course 页面复制粘贴一份，命名为CourseList.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;selectCourse(scope.row)&quot; &gt;选课&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const selectCourse = (row) =&gt; &#123; request .post(&quot;/studentCourse/add&quot;, &#123; studentId: data.user.id, name: row.name, number: row.number, courseId: row.id, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;选课成功&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;courseList&quot;, name: &quot;CourseList&quot;, component: () =&gt; import(&quot;@/views/manager/CourseList.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/courseList&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;学生选课&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端选课实体类定义在项目目录/model下创建一个studentCourse.py 12345678910111213141516# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, String, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False) 学生选课接着实现学生选课的 api 部分，在/api下创建一个studentCourseApi.py 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import APIRouter, Dependsfrom api import appfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.studentCourse import StudentCourseCreatefrom service.studentCourseService import StudentCourseServicestudent_course_router = APIRouter(prefix=&quot;/studentCourse&quot;)@student_course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)): StudentCourseService.add_student_course(student_course, db_session) return Result.success()app.include_router(student_course_router) 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi, fileApi, studentCourseApi 在/servie下创建一个studentCourseService.py 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_from common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.studentCourse import StudentCourseCreate, StudentCourseclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course 123456789101112131415161718192021222324252627282930# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, String, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False)class StudentCourseBase(BaseModel): name: str number: str studentId: int courseId: intclass StudentCourseCreate(StudentCourseBase): pass 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseExistException(Exception): def __init__(self, message: str): self.message = message 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\ StudentCourseExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(StudentCourseExistException)async def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 查看数据库有无数据插入 管理员&#x2F;学生查看已选课程这个需要做到： 学生只看自己的 管理员看全部的 前端学生选课页面，将CourseList.vue复制粘贴一下作为StudentCourse.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123;&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;courseList&quot;, name: &quot;CourseList&quot;, component: () =&gt; import(&quot;@/views/manager/CourseList.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;studentCourse&quot;, name: &quot;StudentCourse&quot;, component: () =&gt; import(&quot;@/views/manager/StudentCourse.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/courseList&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;学生选课&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/studentCourse&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;选课记录&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端123456789101112131415161718192021222324252627282930313233343536# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.studentCourse import StudentCourseCreate, StudentCourseSearchfrom service.studentCourseService import StudentCourseServicestudent_course_router = APIRouter(prefix=&quot;/studentCourse&quot;)@student_course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)): StudentCourseService.add_student_course(student_course, db_session) return Result.success()@student_course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Student name&quot;), number: Optional[str] = Query(None, description=&quot;Student number&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) student_course_search = StudentCourseSearch(name=name, number=number, studentId=studentId) student_list = StudentCourseService.select_page(student_course_search, db_session) return Result.success(pageInfo.of(student_list))app.include_router(student_course_router) 123456789101112131415161718192021222324252627282930313233343536373839# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearchclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course @staticmethod def select_page(student_course_search: StudentCourseSearch, db_session: Session): query = select(StudentCourse).order_by(asc(StudentCourse.id)) if student_course_search.name: query = query.where(StudentCourse.name.like(f&quot;%&#123;student_course_search.name&#125;%&quot;)) if student_course_search.number: query = query.where(StudentCourse.number.like(f&quot;%&#123;student_course_search.number&#125;%&quot;)) if student_course_search.studentId: query = query.where(StudentCourse.studentId == student_course_search.studentId) result = db_session.execute(query).scalars().all() return result 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False)class StudentCourseBase(BaseModel): name: str number: str studentId: int courseId: intclass StudentCourseCreate(StudentCourseBase): passclass StudentCourseSearch(BaseModel): name: str | None number: str | None studentId: int | None 从学生用户这里来看是挺好的，但是如果，多插入几个学生选课 从管理员的角度来看是这样的，并不能直接看出是哪位学生选了这门课 修改我们给显示选课记录的这个表格，加一列学生姓名 学生选课表就需要追加一个表的关联，去关联一下学生表获取学生姓名 123456789101112131415161718192021222324252627282930313233343536# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, String, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, ForeignKey(&#x27;student.id&#x27;), nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False) student: Mapped[Student] = relationship(lazy=False, backref=&quot;student_course&quot;)class StudentCourseBase(BaseModel): name: str number: str studentId: int courseId: intclass StudentCourseCreate(StudentCourseBase): passclass StudentCourseSearch(BaseModel): name: str | None number: str | None studentId: int | None 123456789101112131415161718192021222324252627282930313233343536373839# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.student import Studentfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearchclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course @staticmethod def select_page(student_course_search: StudentCourseSearch, db_session: Session): query = select(StudentCourse, Student).join(StudentCourse.student).order_by(asc(StudentCourse.id)) if student_course_search.name: query = query.where(StudentCourse.name.like(f&quot;%&#123;student_course_search.name&#125;%&quot;)) if student_course_search.number: query = query.where(StudentCourse.number.like(f&quot;%&#123;student_course_search.number&#125;%&quot;)) if student_course_search.studentId: query = query.where(StudentCourse.studentId == student_course_search.studentId) result = db_session.execute(query).scalars().all() return result 然后给前端这块 数据显示加一列，同时得是管理员的时候才显示这么一列 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123;&#125;;&lt;/script&gt; 学生选课删除现在实现删除学生所选课程 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.studentCourse import StudentCourseCreate, StudentCourseSearchfrom service.studentCourseService import StudentCourseServicestudent_course_router = APIRouter(prefix=&quot;/studentCourse&quot;)@student_course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)): StudentCourseService.add_student_course(student_course, db_session) return Result.success()@student_course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Student name&quot;), number: Optional[str] = Query(None, description=&quot;Student number&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) student_course_search = StudentCourseSearch(name=name, number=number, studentId=studentId) student_list = StudentCourseService.select_page(student_course_search, db_session) return Result.success(pageInfo.of(student_list))@student_course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): StudentCourseService.delete_by_id(id, db_session) return Result.success()app.include_router(student_course_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.student import Studentfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearchclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course @staticmethod def select_page(student_course_search: StudentCourseSearch, db_session: Session): query = select(StudentCourse, Student).join(StudentCourse.student).order_by(asc(StudentCourse.id)) if student_course_search.name: query = query.where(StudentCourse.name.like(f&quot;%&#123;student_course_search.name&#125;%&quot;)) if student_course_search.number: query = query.where(StudentCourse.number.like(f&quot;%&#123;student_course_search.number&#125;%&quot;)) if student_course_search.studentId: query = query.where(StudentCourse.studentId == student_course_search.studentId) result = db_session.execute(query).scalars().all() return result @staticmethod def delete_by_id(id, db_session): exist_student_course: StudentCourse = check_student_course_exist(id, db_session) db_session.delete(exist_student_course) db_session.commit() return exist_student_coursedef check_student_course_exist(student_course_id: int, db_session: Session): query = select(StudentCourse).where(StudentCourse.id == student_course_id) exist_student_course: StudentCourse = db_session.execute(query).scalar() if not exist_student_course: raise StudentCourseNotExistException(&quot;选课记录不存在&quot;) return exist_student_course 这种写法很冗余，大家自己想想可以怎么优化，我就不改了，或者后面有空改 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseExistException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseNotExistException(Exception): def __init__(self, message: str): self.message = message 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\ StudentCourseExistException, StudentCourseNotExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(StudentCourseExistException)async def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(StudentCourseNotExistException)async def student_course_not_exist_exception_handler(request: Request, exc: StudentCourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result)) 测试管理员删除 学生自己删除 更新: 2024-05-26 18:51:54原文: https://www.yuque.com/zacharyblock/iacda/hyi625azhg5dant9","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"FastAPI入门-个人页面","slug":"FastAPI入门/个人页面","date":"2024-05-23T04:41:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2024/05/23/FastAPI入门/个人页面/","permalink":"http://example.com/2024/05/23/FastAPI%E5%85%A5%E9%97%A8/%E4%B8%AA%E4%BA%BA%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"个人页面文件上传与下载依赖包需要安装一下werkzeug这个包 123456fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23pyjwtpasslib[bcrypt]werkzeug fileApi为了实现头像上传的功能创建一个新的fileApi.py 注意： StreamingResponse 引得是from fastapi.responses import StreamingResponse secure_filename 引得是from werkzeug.utils import secure_filename 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# -*- coding:utf-8 -*-# Author: Zacharyimport mimetypesimport osfrom datetime import datetimefrom fastapi.encoders import jsonable_encoderfrom werkzeug.utils import secure_filenamefrom fastapi.responses import StreamingResponsefrom fastapi import APIRouter, UploadFilefrom api import appfrom common.constant import HOST, PORTfrom common.profile import Profilefrom common.result import ResultModel, Resultfrom exception.customException import FileNotFoundExceptionfile_router = APIRouter(prefix=&quot;/files&quot;)@file_router.post(&quot;/upload&quot;, response_model=ResultModel)async def upload(file: UploadFile): original_filename = secure_filename(file.filename) timestamp = int(datetime.now().timestamp()) unique_filename = f&quot;&#123;timestamp&#125;_&#123;original_filename&#125;&quot; file_save_path = Profile.get_files_path() # 创建保存文件的完整路径 file_final_path = file_save_path.joinpath(unique_filename) # 将文件保存到指定位置 with open(file_final_path, &#x27;wb&#x27;) as buffer_file: content = await file.read() buffer_file.write(content) # 构建文件访问URL url = f&quot;http://&#123;HOST&#125;:&#123;PORT&#125;/files/download?filename=&#123;unique_filename&#125;&quot; return Result.success(jsonable_encoder(&#123;&quot;url&quot;: url&#125;))@file_router.get(&quot;/download&quot;)async def download(filename: str): file_save_path = Profile.get_files_path() file_path = file_save_path.joinpath(filename) if not file_path.exists(): raise FileNotFoundException(&quot;文件不存在&quot;) # 用于触发下载文件的 # return FileResponse(file_path, media_type=&#x27;image/png&#x27;, filename=filename) mime_type, _ = mimetypes.guess_type(file_path) # 创建一个StreamingResponse，以便流式传输大文件，同时设置正确的MIME类型 response = StreamingResponse( open(file_path, &#x27;rb&#x27;), media_type=mime_type, ) # 不设置Content-Disposition，避免浏览器触发下载 return responseapp.include_router(file_router) 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi, fileApi Profile在项目目录/common下创建一个profile.py，用于获取项目目录路径 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom pathlib import Pathclass Profile: __file_path = None @staticmethod def get_files_path(): project_path = Path(__file__).parent.parent # 获取项目根目录 file_path = project_path.joinpath(&quot;files&quot;) if not file_path.exists(): file_path.mkdir(parents=True) Profile.__file_path = file_path return file_path 自定义异常123456789101112131415161718192021222324252627282930313233343536# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = message 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result)) 测试使用 postman 测试一下 上传 下载 完善图片上传修改一下Student.vue头像上传的功能lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.username&quot; placeholder=&quot;请输入要查询的学生学号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的学生姓名&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;username&quot; label=&quot;学生学号&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;学生姓名&quot; /&gt; &lt;el-table-column prop=&quot;gender&quot; label=&quot;性别&quot; /&gt; &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机号&quot; /&gt; &lt;el-table-column prop=&quot;birthday&quot; label=&quot;出生日期&quot; /&gt; &lt;el-table-column prop=&quot;avatar&quot; label=&quot;头像&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-image v-if=&quot;scope.row.avatar&quot; :src=&quot;scope.row.avatar&quot; :preview-src-list=&quot;[scope.row.avatar]&quot; style=&quot;width: 40px; height: 40px&quot; &gt;&lt;/el-image&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;学生信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; :rules=&quot;rules&quot; ref=&quot;formRef&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;学生学号&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;data.form.username&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input v-model=&quot;data.form.password&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生姓名&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;性别&quot;&gt; &lt;el-radio-group v-model=&quot;data.form.gender&quot;&gt; &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt; &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机号&quot;&gt; &lt;el-input v-model=&quot;data.form.phone&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;出生日期&quot;&gt; &lt;el-date-picker format=&quot;YYYY-MM-DD&quot; value-format=&quot;YYYY-MM-DD&quot; v-model=&quot;data.form.birthday&quot; &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;头像&quot;&gt; &lt;el-upload action=&quot;http://localhost:9090/files/upload&quot; list-type=&quot;picture&quot; :on-success=&quot;handleImgUploadSuccess&quot; &gt; &lt;el-button type=&quot;primary&quot;&gt;上传头像 &lt;/el-button&gt; &lt;/el-upload&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; username: &quot;&quot;, name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123; password: &quot;123456&quot; &#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/student/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, username: data.username, name: data.name, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.username = &quot;&quot;; data.name = &quot;&quot;; load();&#125;;const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入学生学号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123; password: &quot;123456&quot; &#125;;&#125;;const save = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .request(&#123; url: data.form.id ? &quot;/student/update&quot; : &quot;/student/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true; data.form.password = &quot;123456&quot;;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/student/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;const handleImgUploadSuccess = (res) =&gt; &#123; data.form.avatar = res.data.url;&#125;;&lt;/script&gt; 个人资料在项目目录/manager文件夹下面创建一个Person.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;width: 50%; padding: 40px&quot;&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;头像&quot;&gt; &lt;el-upload class=&quot;avatar-uploader&quot; action=&quot;http://localhost:9090/files/upload&quot; :show-file-list=&quot;false&quot; :on-success=&quot;handleImgUploadSuccess&quot; &gt; &lt;img v-if=&quot;data.form.avatar&quot; :src=&quot;data.form.avatar&quot; class=&quot;avatar&quot; /&gt; &lt;el-icon v-else class=&quot;avatar-uploader-icon&quot;&gt; &lt;Plus /&gt; &lt;/el-icon&gt; &lt;/el-upload&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生学号&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;data.form.username&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input show-password v-model=&quot;data.form.password&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生姓名&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;性别&quot;&gt; &lt;el-radio-group v-model=&quot;data.form.gender&quot;&gt; &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt; &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机号&quot;&gt; &lt;el-input v-model=&quot;data.form.phone&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;出生日期&quot;&gt; &lt;el-date-picker format=&quot;YYYY-MM-DD&quot; value-format=&quot;YYYY-MM-DD&quot; v-model=&quot;data.form.birthday&quot; &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item style=&quot;padding-left: 60%&quot;&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;update&quot;&gt;保存&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref, reactive &#125; from &quot;vue&quot;;import &#123; Plus &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);if (data.form) &#123; data.form.password = &quot;&quot;;&#125;const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [ &#123; required: true, message: &quot;修改个人资料必须重新输入密码&quot;, trigger: &quot;blur&quot;, &#125;, ],&#125;);const update = () =&gt; &#123; request .put(&quot;/student/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); router.push(&quot;/login&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;const handleImgUploadSuccess = (res) =&gt; &#123; data.form.avatar = res.data;&#125;;&lt;/script&gt;&lt;style&gt;.avatar-uploader .el-upload &#123; border: 1px dashed #d9d9d9; border-radius: 6px; cursor: pointer; position: relative; overflow: hidden;&#125;.avatar-uploader .el-upload:hover &#123; border-color: #409eff;&#125;.el-icon.avatar-uploader-icon &#123; font-size: 28px; color: #8c939d; width: 100px; height: 100px; line-height: 100px; text-align: center;&#125;.avatar &#123; width: 100px; height: 100px; display: block;&#125;&lt;/style&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt;","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"FastAPI入门-学生管理","slug":"FastAPI入门/学生管理","date":"2024-05-20T00:10:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2024/05/20/FastAPI入门/学生管理/","permalink":"http://example.com/2024/05/20/FastAPI%E5%85%A5%E9%97%A8/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86/","excerpt":"","text":"学生管理数据库先在数据库中创建一张学生信息表 Student 实体类定义在/model的包下创建一个student.py 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Student(Base): __tablename__ = &quot;student&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) phone: Mapped[str] = mapped_column(String(255), nullable=False) gender: Mapped[str] = mapped_column(String(255), nullable=False) birthday: Mapped[str] = mapped_column(String(255), nullable=False) avatar: Mapped[str] = mapped_column(String(255), nullable=False 学生登录前端-登录页面学生登录和 admin 的登录，我们复用同一个前端页面和后端接口，所以需要加一个role用以区分是 admin 登录了还是普通的 student 登录了；同时，不同用户进入页面之后。看到的内容应该是不同的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118&lt;template&gt; &lt;div&gt; &lt;div class=&quot;login-container&quot;&gt; &lt;div style=&quot;width: 420px&quot; class=&quot;login-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 登录&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot;&gt; &lt;el-form-item prop=&quot;username&quot;&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Avatar&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot;&gt; &lt;el-input show-password style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;role&quot;&gt; &lt;el-radio-group size=&quot;large&quot; v-model=&quot;data.form.role&quot;&gt; &lt;el-radio-button style=&quot;margin-left: 70px&quot; label=&quot;管理员&quot; value=&quot;ADMIN&quot; /&gt; &lt;el-radio-button style=&quot;margin-left: 50px&quot; label=&quot;学生&quot; value=&quot;STUDENT&quot; /&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%;font-size: 18px&quot; plain @click=&quot;login&quot; &gt;登 录&lt;/el-button &gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:35px;text-align: right;font-size: 15px&quot;&gt; 还没有账号？请&lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: &#123; role: &quot;ADMIN&quot; &#125;,&#125;);const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const login = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .post(&quot;/login&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; localStorage.setItem(&quot;student-user&quot;, JSON.stringify(res.data)); ElMessage.success(&quot;登录成功&quot;); router.push(&quot;/home&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.login-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.login-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 后端-管理员&#x2F;学生登录的 api 接口管理员和学生的登录复用同一个 api 接口 所以需要修改一下之前的登录逻辑 Account在/model下创建一个account.py，接收前端传递来的账号、密码、角色 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelclass AccountLogin(BaseModel): username: str password: str role: strclass AccountLoginResponse: id: int username: str name: str role: str token: str Student给 student 表追加role字段 给/model/student.py更新一下 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Student(Base): __tablename__ = &quot;student&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) phone: Mapped[str] = mapped_column(String(255), nullable=False) gender: Mapped[str] = mapped_column(String(255), nullable=False) birthday: Mapped[str] = mapped_column(String(255), nullable=False) avatar: Mapped[str] = mapped_column(String(255), nullable=False) role: Mapped[str] = mapped_column(String(255), nullable=False) Admin给 admin 表追加name字段和role字段 给/model/admin.py更新一下 12345678910111213141516171819202122232425262728# -*- coding:utf-8 -*-# Author: Zacharyimport bcryptfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) role: Mapped[str] = mapped_column(String(255), nullable=False)class AdminModel(BaseModel): username: str password: strclass AdminLoginResponse(BaseModel): id: int username: str token: str Service在项目目录/service下创建一个studentService.py 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.account import AccountLogin, AccountLoginResponsefrom model.student import Studentclass StudentService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Student).where(Student.username == account.username) exist_student: Student = db_session.execute(query).scalars().first() if not exist_student: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_student.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_student)) account_login_response.token = auth_handler.encode_token(exist_student.id) return account_login_response 然后修改adminService.py 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.account import AccountLoginResponse, AccountLoginfrom model.admin import Adminclass AdminService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Admin).where(Admin.username == account.username) exist_admin: Admin = db_session.execute(query).scalars().first() if not exist_admin: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_admin.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_admin)) account_login_response.token = auth_handler.encode_token(exist_admin.id) return account_login_response Role创建一个枚举类 Role，用以区分学生和管理员 在/common下创建一个Enum.py 12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumclass Role(str, Enum): ADMIN = &quot;管理员&quot; STUDENT = &quot;学生&quot; API然后修改一下登录的 api 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import Dependsfrom fastapi.encoders import jsonable_encoderfrom api import appfrom common.Enum import Rolefrom common.result import Result, ResultModelfrom model import Session, get_db_sessionfrom model.account import AccountLoginfrom service.adminService import AdminServicefrom service.studentService import StudentService@app.post(&quot;/login&quot;, response_model=ResultModel)async def login(account: AccountLogin, db_session: Session = Depends(get_db_session)): if Role.ADMIN.name.__eq__(account.role): db_account = AdminService.login(account, db_session) elif Role.STUDENT.name.__eq__(account.role): db_account = StudentService.login(account, db_session) else: return Result.error(&quot;角色错误&quot;) return Result.success(jsonable_encoder(db_account)) 学生注册前端-注册页面写一下学生的注册页面，这里管理员就不参与注册了 在前端项目目录/views下创建一个Register.vue（这里我偷懒了，没有替换注册页的背景图，大家可以自行替换） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;template&gt; &lt;div&gt; &lt;div class=&quot;register-container&quot;&gt; &lt;div style=&quot;width: 400px&quot; class=&quot;register-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 注册&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot;&gt; &lt;el-form-item prop=&quot;username&quot;&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;User&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot;&gt; &lt;el-input show-password style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%&quot; plain @click=&quot;register&quot; &gt;注 册&lt;/el-button &gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:30px;text-align: right&quot;&gt; 已有账号？请直接&lt;a href=&quot;/login&quot;&gt;登录&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: &#123;&#125;,&#125;);const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const register = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .post(&quot;/register&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;注册成功&quot;); router.push(&quot;/login&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.register-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.register-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 添加一下注册页面的路由 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 后端-注册的 api 接口接下来实现一下，后端注册的逻辑 API因为这个注册只是给学生使用的，在项目目录/api下新建一个studentApi.py 123456789101112131415# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import Dependsfrom api import appfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.account import AccountRegisterfrom service.studentService import StudentService@app.post(&quot;/register&quot;, response_model=ResultModel)async def register(account: AccountRegister, db_session: Session = Depends(get_db_session)): StudentService.register(account, db_session) return Result.success() 添加一下 studentApi 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi 给account.py添加注册的请求体 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelclass AccountLogin(BaseModel): username: str password: str role: strclass AccountLoginResponse: id: int username: str name: str role: str token: strclass AccountRegister(BaseModel): username: str password: str Service实现一下注册的 service 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import selectfrom common.Enum import Rolefrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchException, UserExistExceptionfrom model import Sessionfrom model.account import AccountLogin, AccountLoginResponse, AccountRegisterfrom model.student import Studentclass StudentService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Student).where(Student.username == account.username) exist_student: Student = db_session.execute(query).scalars().first() if not exist_student: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_student.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_student)) account_login_response.token = auth_handler.encode_token(exist_student.id) return account_login_response @staticmethod def register(account: AccountRegister, db_session: Session): query = select(Student).where(Student.username == account.username) exist_student = db_session.execute(query).scalars().first() if exist_student: raise UserExistException(&quot;账号已存在&quot;) new_student = Student() account.password = auth_handler.get_password_hash(account.password) set_attrs(new_student, jsonable_encoder(account)) if new_student.name is None: new_student.name = account.username new_student.role = Role.STUDENT.name db_session.add(new_student) db_session.commit() return new_student 添加自定义异常 12345678910111213141516171819202122232425262728293031# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = message 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 登录&#x2F;注册测试现在测试一下学生登录和注册的逻辑 学生注册 学生登录 现在登录进来了，但是右上角的显示不太对，等下改改 管理员登录 学生管理这块咱们做个设定，当管理员新增用户、替用户修改用户数据，密码必须重新设置为初始密码-123456 前端复制粘贴一下之前的Course.vue，命名为Student.vuelt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.username&quot; placeholder=&quot;请输入要查询的学生学号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的学生姓名&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;username&quot; label=&quot;学生学号&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;学生姓名&quot; /&gt; &lt;el-table-column prop=&quot;gender&quot; label=&quot;性别&quot; /&gt; &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机号&quot; /&gt; &lt;el-table-column prop=&quot;birthday&quot; label=&quot;出生日期&quot; /&gt; &lt;el-table-column prop=&quot;avatar&quot; label=&quot;头像&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;学生信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; :rules=&quot;rules&quot; ref=&quot;formRef&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;学生学号&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;data.form.username&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input v-model=&quot;data.form.password&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生姓名&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;性别&quot;&gt; &lt;el-radio-group v-model=&quot;data.form.gender&quot;&gt; &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt; &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机号&quot;&gt; &lt;el-input v-model=&quot;data.form.phone&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;出生日期&quot;&gt; &lt;el-date-picker format=&quot;YYYY-MM-DD&quot; value-format=&quot;YYYY-MM-DD&quot; v-model=&quot;data.form.birthday&quot; &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;头像&quot;&gt; &lt;el-input v-model=&quot;data.form.avatar&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; username: &quot;&quot;, name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123; password: &quot;123456&quot; &#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/student/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, username: data.username, name: data.name, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.username = &quot;&quot;; data.name = &quot;&quot;; load();&#125;;const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入学生学号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123; password: &quot;123456&quot; &#125;;&#125;;const save = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .request(&#123; url: data.form.id ? &quot;/student/update&quot; : &quot;/student/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true; data.form.password = &quot;123456&quot;;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/student/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;管理员&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端直接一次性实现学生管理的增删查改 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import Depends, APIRouter, Queryfrom api import appfrom common.auth import auth_handlerfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.account import AccountRegisterfrom model.student import StudentSearch, StudentCreate, StudentUpdatefrom service.studentService import StudentService@app.post(&quot;/register&quot;, response_model=ResultModel)async def register(account: AccountRegister, db_session: Session = Depends(get_db_session)): StudentService.register(account, db_session) return Result.success()student_router = APIRouter(prefix=&quot;/student&quot;)@student_router.get(&quot;/selectPage&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), username: Optional[str] = Query(None, description=&quot;Student username&quot;), name: Optional[str] = Query(None, description=&quot;Student name&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) student_search = StudentSearch(username=username, name=name) student_list = StudentService.select_page(student_search, db_session) return Result.success(pageInfo.of(student_list))@student_router.post(&quot;/add&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def add(student: StudentCreate, db_session: Session = Depends(get_db_session)): StudentService.add_student(student, db_session) return Result.success()@student_router.put(&quot;/update&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def update(student: StudentUpdate, db_session: Session = Depends(get_db_session)): StudentService.update_by_id(student, db_session) return Result.success()@student_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def delete(id: int, db_session: Session = Depends(get_db_session)): StudentService.delete_by_id(id, db_session) return Result.success()app.include_router(student_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, ascfrom common.Enum import Rolefrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchException, UserExistExceptionfrom model import Sessionfrom model.account import AccountLogin, AccountLoginResponse, AccountRegisterfrom model.student import Student, StudentCreate, StudentUpdateclass StudentService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Student).where(Student.username == account.username) exist_student: Student = db_session.execute(query).scalars().first() if not exist_student: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_student.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_student)) account_login_response.token = auth_handler.encode_token(exist_student.id) return account_login_response @staticmethod def register(account: AccountRegister, db_session: Session): query = select(Student).where(Student.username == account.username) exist_student = db_session.execute(query).scalars().first() if exist_student: raise UserExistException(&quot;账号已存在&quot;) new_student = Student() account.password = auth_handler.get_password_hash(account.password) set_attrs(new_student, jsonable_encoder(account)) if new_student.name is None: new_student.name = account.username new_student.role = Role.STUDENT.name db_session.add(new_student) db_session.commit() return new_student @staticmethod def select_page(student_search: Student, db_session: Session): query = select(Student).order_by(asc(Student.id)) if student_search.username: query = query.where(Student.username.like(f&quot;%&#123;student_search.username&#125;%&quot;)) if student_search.name: query = query.where(Student.name.like(f&quot;%&#123;student_search.name&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_student(student: StudentCreate, db_session: Session): query = select(Student).where(Student.username == student.username) exist_student = db_session.execute(query).scalars().all() if exist_student: raise UserExistException(&quot;账号已存在&quot;) student.password = auth_handler.get_password_hash(student.password) student = Student(**student.dict()) if student.name is None: student.name = student.username student.role = Role.STUDENT.name db_session.add(student) db_session.commit() return student @staticmethod def update_by_id(student: StudentUpdate, db_session: Session): exist_student: Student = check_student_exist(student.id, db_session) student.password = auth_handler.get_password_hash(student.password) set_attrs(exist_student, jsonable_encoder(student)) db_session.commit() return exist_student @staticmethod def delete_by_id(id: int, db_session: Session): exist_student: Student = check_student_exist(id, db_session) db_session.delete(exist_student) db_session.commit() return exist_studentdef check_student_exist(student_id: int, db_session: Session): query = select(Student).where(Student.id == student_id) exist_student: Student = db_session.execute(query).scalar() if not exist_student: raise UserNotFoundException(&quot;账号不存在&quot;) return exist_student 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom pydantic import BaseModel, Fieldfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Student(Base): __tablename__ = &quot;student&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) phone: Mapped[str] = mapped_column(String(255), nullable=False) gender: Mapped[str] = mapped_column(String(255), nullable=False) birthday: Mapped[str] = mapped_column(String(255), nullable=False) avatar: Mapped[str] = mapped_column(String(255), nullable=False) role: Mapped[str] = mapped_column(String(255), nullable=False)class StudentBase(BaseModel): username: str password: str = Field(..., min_length=1) name: Optional[str] = None role: Optional[str] = Noneclass StudentSearch(BaseModel): username: str | None name: str | Noneclass StudentCreate(StudentBase): phone: Optional[str] = None gender: Optional[str] = None birthday: Optional[str] = Field(None) avatar: Optional[str] = Field(None)class StudentUpdate(StudentCreate): id: int 测试增 删 查 改 但是修改过后，密码会被强制重置为 123456 限制权限现在不管普通的学生还是管理员都能看到管理页面 这不符合 需要加入一个权限v-if=&quot;user.role === &#39;ADMIN&#39;&quot; 顺便修改一下右上角和主页显示的用户名称 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div class=&quot;welcome-container&quot;&gt; &lt;div class=&quot;custom-card bg-white shadow rounded p-4 mb-5&quot;&gt; &lt;h2 class=&quot;text-center text-primary&quot;&gt;欢迎来到本系统&lt;/h2&gt; &lt;p class=&quot;text-center mt-3&quot;&gt; 您好 &lt;span :style=&quot;&#123; color: &#x27;#116ca9&#x27; &#125;&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span &gt;，祝您使用愉快！ &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import request from &quot;@/utils/request&quot;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.welcome-container &#123; display: flex; justify-content: center; align-items: center; min-height: calc(100vh - 100px); /* 根据实际项目需要调整高度 */&#125;.custom-card &#123; max-width: 400px; border: none;&#125;&lt;/style&gt; 普通学生登录 管理员登录 更新: 2024-05-20 00:11:43原文: https://www.yuque.com/zacharyblock/iacda/uuigf300461wndud","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"FastAPI入门-API鉴权","slug":"FastAPI入门/API鉴权","date":"2024-05-03T22:10:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2024/05/03/FastAPI入门/API鉴权/","permalink":"http://example.com/2024/05/03/FastAPI%E5%85%A5%E9%97%A8/API%E9%89%B4%E6%9D%83/","excerpt":"","text":"API 鉴权为了不允许，任何人都可以调用后端的 api 接口，现在给 api 接口加上权限校验，只有登录过的才能调用后端的 api 接口，之前在auth.py中实现了一个校验，通过依赖注入给 api 直接加上即可 依赖注入比如给courseApi.py的所有接口加上 token 校验的依赖 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.auth import auth_handlerfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return result@course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def delete(id: int, db_session: Session = Depends(get_db_session)): CourseService.delete_by_id(id, db_session) result = Result.success() return resultapp.include_router(course_router) 或者给整个&#x2F;course 下的 api 都注入依赖， 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.auth import auth_handlerfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&#x27;/course&#x27;, dependencies=[Depends(auth_handler.auth_required)])@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return result@course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): CourseService.delete_by_id(id, db_session) result = Result.success() return resultapp.include_router(course_router) 这样如果没有登录的情况下，直接用 postman 是无法调用接口的 登录 token虽然现在前端页面上已经登录了，但由于请求头没有带上 token，所以无法获取数据 为了让浏览器拿到后端生成的这个 token，需要改变一下登录后的返回结果 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModel, AdminLoginResponseclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) exist_admin: Admin = db_session.execute(query).scalars().first() if not exist_admin: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(admin.password, exist_admin.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) admin_login_response = AdminLoginResponse(id=exist_admin.id, username=exist_admin.username, token=auth_handler.encode_token(exist_admin.id)) return admin_login_response 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyimport bcryptfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False)class AdminModel(BaseModel): username: str password: strclass AdminLoginResponse(BaseModel): id: int username: str token: str 这样子在重新登录之后就可以获得后端返回的 token，前端 axios 会在发起请求之前，将 token 放到请求头中，再向后端请求 api 接口 登录后会返回 token： 能正确获取数据： token 超时失效为了让前端的 token 失效之后，自动回到 Login 页面，需要做些调整 当请求 api 接口的时候返回的状态值为 401 的时候，移除存储的 student-user，这样就会自动跳转回 login 页面重新进行登录lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .request(&#123; url: data.form.id ? &quot;/course/update&quot; : &quot;/course/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/course/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; \u0000 token 超时配置为了更便捷地配置 token 的超时时间，设置一下超时时间常量 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom common.config import configHOST = config.env.get(&quot;HOST&quot;)PORT = config.env.get(&quot;PORT&quot;)MYSQL_DIALECT = config.env.get(&quot;MYSQL_DIALECT&quot;)MYSQL_HOST = config.env.get(&quot;MYSQL_HOST&quot;)MYSQL_PORT = config.env.get(&quot;MYSQL_PORT&quot;)MYSQL_USER = config.env.get(&quot;MYSQL_USER&quot;)MYSQL_PASSWORD = config.env.get(&quot;MYSQL_PASSWORD&quot;)MYSQL_DATABASE = config.env.get(&quot;MYSQL_DATABASE&quot;)TOKEN_EXPIRE_DAYS = 7TOKEN_EXPIRE_MINUTES = 0TOKEN_EXPIRE_SECONDS = 0 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetime, timedeltaimport jwtfrom fastapi import Securityfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentialsfrom passlib.context import CryptContextfrom common.constant import TOKEN_EXPIRE_DAYS, TOKEN_EXPIRE_MINUTES, TOKEN_EXPIRE_SECONDSfrom exception.customException import TokenExceptionclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password) def encode_token(self, user_id): payload = &#123; &#x27;exp&#x27;: datetime.utcnow() + timedelta(days=TOKEN_EXPIRE_DAYS, minutes=TOKEN_EXPIRE_MINUTES, seconds=TOKEN_EXPIRE_SECONDS), &#x27;iat&#x27;: datetime.utcnow(), &#x27;sub&#x27;: user_id &#125; return jwt.encode( payload, self.secret, algorithm=&#x27;HS256&#x27; ) def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=[&#x27;HS256&#x27;]) return payload[&#x27;sub&#x27;] except jwt.ExpiredSignatureError: raise TokenException(&quot;token过期&quot;) except jwt.InvalidTokenError: raise TokenException(&quot;无效token&quot;) def auth_required(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials)auth_handler = AuthHandler() 更新: 2024-05-03 21:07:51原文: https://www.yuque.com/zacharyblock/iacda/po1gqzqal77c94sl","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"FastAPI入门-课程管理","slug":"FastAPI入门/课程管理","date":"2024-05-03T22:00:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2024/05/03/FastAPI入门/课程管理/","permalink":"http://example.com/2024/05/03/FastAPI%E5%85%A5%E9%97%A8/%E8%AF%BE%E7%A8%8B%E7%AE%A1%E7%90%86/","excerpt":"","text":"课程管理接下来开发一个课程管理功能，用于管理和显示学生课程的 数据库先设计一下课程数据表，命名为 course，字段（课程名称、课程编号、课程描述、课时、任课老师） 课程页面在前端的项目目录下的/manage下创建一个Course.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin: 0 0 0 10px&quot; plain &gt;查询&lt;/el-button &gt; &lt;el-button type=&quot;info&quot; plain&gt;重置&lt;/el-button&gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination background layout=&quot;prev, pager, next&quot; :total=&quot;1000&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [ &#123; id: 1, name: &quot;大学英语&quot;, number: &quot;001&quot;, description: &quot;大学英语不想学-6学分&quot;, periods: &quot;36课时&quot;, teacher: &quot;张三&quot;, &#125;, &#123; id: 2, name: &quot;高等数学&quot;, number: &quot;002&quot;, description: &quot;高等数学好难学-4学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;李四&quot;, &#125;, &#123; id: 3, name: &quot;必修物理&quot;, number: &quot;003&quot;, description: &quot;必修物理有难度-2学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;王五&quot;, &#125;, &#123; id: 4, name: &quot;思想政治&quot;, number: &quot;004&quot;, description: &quot;思想政治必修课-4学分&quot;, periods: &quot;18课时&quot;, teacher: &quot;赵六&quot;, &#125;, &#123; id: 5, name: &quot;微机原理&quot;, number: &quot;005&quot;, description: &quot;微机原理很基础-3学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;钱七&quot;, &#125;, &#123; id: 6, name: &quot;通信原理&quot;, number: &quot;006&quot;, description: &quot;通信原理很难懂-4学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;孙八&quot;, &#125;, &#123; id: 7, name: &quot;离散数学&quot;, number: &quot;007&quot;, description: &quot;离散数学很离散-2学分&quot;, periods: &quot;18课时&quot;, teacher: &quot;周九&quot;, &#125;, &#123; id: 8, name: &quot;工程制图&quot;, number: &quot;008&quot;, description: &quot;工程制图好有趣-3学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;吴十&quot;, &#125;, ],&#125;);&lt;/script&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;管理员&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 课程查询 apiCourse 实体类定义在项目目录/model下创建一个course.py 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False) 课程管理 Api 接口courseApi在项目目录/api下创建一个courseApi.py 123456789101112131415161718192021222324# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_list = CourseService.select_page(db_session) result = Result.success(pageInfo.of(course_list)) return resultapp.include_router(course_router) 需要在/api/__init__.py下增加 courseApi 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi courseService在项目目录/service下创建一个courseService.py 123456789101112131415# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom model import Sessionfrom model.course import Courseclass CourseService: @staticmethod def select_page(db_session: Session): query = select(Course).order_by(desc(Course.id)) result = db_session.execute(query).scalars().all() return result 分页插件在项目路径的/common下创建一个pageHelper.py 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderclass Page: list: list total: int pageNum: int pageSize: int def __init__(self, list: list, total: int, pageNum: int, pageSize: int): self.list = list self.total = total self.pageNum = pageNum self.pageSize = pageSizeclass PageHelper: page: int size: int limit: int offset: int def __init__(self, page: int, size: int, limit: int, offset: int): self.page = page self.size = size self.limit = limit self.offset = offset @classmethod def startPage(cls, page: int, size: int): limit = size offset = size * (page - 1) return cls(page, size, limit, offset) def of(self, data): data_list = [jsonable_encoder(dataitem) for dataitem in data[self.offset:self.offset + self.limit]] data_total = len(data) page = Page(data_list, data_total, self.page, self.size) return jsonable_encoder(page) 测试 可以发现，请求是成功的，但就是没数据，因为数据库里面是空的，给数据库中插入数据 再次使用 postman 测试一下 增删查改实现数据分页前端这块需要调用分页查询的请求接口，并将结果显示出来 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin: 0 0 0 10px&quot; plain &gt;查询&lt;/el-button &gt; &lt;el-button type=&quot;info&quot; plain&gt;重置&lt;/el-button&gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [], total: 0,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: 1, pageSize: 5, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();&lt;/script&gt; 虽然可以显示一部分数据，但是这个换页有问题，不显示后续跳转的页面按钮 需要绑定一下这两个值 同时还需要，在换了页面之后也重新刷新一下数据，触发 current-change 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin: 0 0 0 10px&quot; plain &gt;查询&lt;/el-button &gt; &lt;el-button type=&quot;info&quot; plain&gt;重置&lt;/el-button&gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;&lt;/script&gt; 分页成功实现了 查询和重置为了依据课程名称实现筛查的功能，需要传递一个name字段传给后端进行数据库层面的模糊查询 重置按钮要将查询的内容清空，同时显示回完整的数据 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; load();&#125;;&lt;/script&gt; 后端123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_list = CourseService.select_page(name, db_session) result = Result.success(pageInfo.of(course_list)) return resultapp.include_router(course_router) 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom model import Sessionfrom model.course import Courseclass CourseService: @staticmethod def select_page(name, db_session: Session): query = select(Course).order_by(desc(Course.id)) if name: query = query.where(Course.name.like(f&quot;%&#123;name&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result 测试 查询扩展当需要筛选的字段不只是课程名称时，需要怎么处理；比如加上课程编号、任课教师进行多条件模糊查询 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;&lt;/script&gt; 后端12345678910111213141516171819202122232425262728293031# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearchfrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return resultapp.include_router(course_router) 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom model import Sessionfrom model.course import Course, CourseSearchclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False)class CourseSearch(BaseModel): name: str | None number: str | None teacher: str | None 测试 新增下面实现给课程表新增数据的功能，需要点击新增按钮后，出现弹窗 在官网找一个Dialog组件 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .post(&quot;/course/add&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;新增成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端1234567891011121314151617181920212223242526272829303132333435363738# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearch, CourseCreatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return resultapp.include_router(course_router) 123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom exception.customException import CourseExistExceptionfrom model import Sessionfrom model.course import Course, CourseSearch, CourseCreateclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_course(course: CourseCreate, db_session: Session): query = select(Course).where(Course.name == course.name) exist_course: Course = db_session.execute(query).scalars().all() if exist_course: raise CourseExistException(&quot;课程名已存在&quot;) course = Course(**course.dict()) db_session.add(course) db_session.commit() return course 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False)class CourseSearch(BaseModel): name: str | None number: str | None teacher: str | Noneclass CourseBase(BaseModel): name: str number: str description: str periods: str teacher: strclass CourseCreate(CourseBase): ... 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = message 1234567891011121314151617181920212223242526272829303132333435363738394041# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 测试 编辑点击数据中的编辑按钮可以对已有的课程数据，进行修改 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .request(&#123; url: data.form.id ? &quot;/course/update&quot; : &quot;/course/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true;&#125;;&lt;/script&gt; 后端123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return resultapp.include_router(course_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import desc, selectfrom common.utils import set_attrsfrom exception.customException import CourseExistException, CourseNotExistExceptionfrom model import Sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdateclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_course(course: CourseCreate, db_session: Session): query = select(Course).where(Course.name == course.name) exist_course: Course = db_session.execute(query).scalars().all() if exist_course: raise CourseExistException(&quot;课程名已存在&quot;) course = Course(**course.dict()) db_session.add(course) db_session.commit() return course @staticmethod def update_by_id(course: CourseUpdate, db_session: Session): query = select(Course).where(Course.id == course.id) exist_course: Course = db_session.execute(query).scalar() if not exist_course: raise CourseNotExistException(&quot;课程不存在&quot;) set_attrs(exist_course, jsonable_encoder(course)) db_session.commit() return exist_course 123456789101112131415161718192021222324252627282930313233343536373839# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False)class CourseSearch(BaseModel): name: str | None number: str | None teacher: str | Noneclass CourseBase(BaseModel): name: str number: str description: str periods: str teacher: strclass CourseCreate(CourseBase): ...class CourseUpdate(CourseBase): id: int 实现给对象的属性更新的一个方法，在项目目录/common下，新建一个utils.py 123456789# -*- coding:utf-8 -*-# Author: Zachary# 用于更新对象属性def set_attrs(obj, data: dict): if data: for key, value in data.items(): setattr(obj, key, value) 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = message 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result)) 测试 删除点击已有课程数据中的删除按钮，实现删除数据表中对应数据 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .request(&#123; url: data.form.id ? &quot;/course/update&quot; : &quot;/course/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/course/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return result@course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): CourseService.delete_by_id(id, db_session) result = Result.success() return resultapp.include_router(course_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import desc, selectfrom common.utils import set_attrsfrom exception.customException import CourseExistException, CourseNotExistExceptionfrom model import Sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdateclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_course(course: CourseCreate, db_session: Session): query = select(Course).where(Course.name == course.name) exist_course: Course = db_session.execute(query).scalars().all() if exist_course: raise CourseExistException(&quot;课程名已存在&quot;) course = Course(**course.dict()) db_session.add(course) db_session.commit() return course @staticmethod def update_by_id(course: CourseUpdate, db_session: Session): exist_course: Course = check_course_exist(course.id, db_session) set_attrs(exist_course, jsonable_encoder(course)) db_session.commit() return exist_course @staticmethod def delete_by_id(id: int, db_session: Session): exist_course: Course = check_course_exist(id, db_session) db_session.delete(exist_course) db_session.commit() return exist_coursedef check_course_exist(course_id: int, db_session: Session): query = select(Course).where(Course.id == course_id) exist_course: Course = db_session.execute(query).scalar() if not exist_course: raise CourseNotExistException(&quot;课程不存在&quot;) return exist_course 测试先创建一个课程 然后删除 删除成功 更新: 2024-05-03 22:02:17原文: https://www.yuque.com/zacharyblock/iacda/lsqxkzaok37g7aaz","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"FastAPI入门-JWT权限校验","slug":"FastAPI入门/JWT权限校验","date":"2024-05-03T21:50:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2024/05/03/FastAPI入门/JWT权限校验/","permalink":"http://example.com/2024/05/03/FastAPI%E5%85%A5%E9%97%A8/JWT%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C/","excerpt":"","text":"JWT 权限校验在退出登录之后，依旧可以进入到主页面；同样后续其他 api 接口也需要在登录之后才能调用，需要加上 token，使用 JWT 实现。 前端首先从前端这块处理，除了 login 和后续会增加的 register 页面不需要登录才能访问，其他页面，都需要登录用户之后才能访问，否则自动跳转回 login 页面 请求头给请求头带上 token，提供给后端进行验证 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;../router&quot;;import axios from &quot;axios&quot;;const request = axios.create(&#123; baseURL: import.meta.env.VITE_BASE_URL, timeout: 30000, // 后台接口超时时间设置&#125;);// request 拦截器// 可以自请求发送前对请求做一些处理request.interceptors.request.use( (config) =&gt; &#123; const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); config.headers[&quot;Content-Type&quot;] = &quot;application/json;charset=utf-8&quot;; if (user) &#123; config.headers.Authorization = `Bearer $&#123;user.token&#125;`; &#125; return config; &#125;, (error) =&gt; &#123; return Promise.reject(error); &#125;);// response 拦截器// 可以在接口响应后统一处理结果request.interceptors.response.use( (response) =&gt; &#123; let res = response.data; // 如果是返回的文件 if (response.config.responseType === &quot;blob&quot;) &#123; return res; &#125; // 兼容服务端返回的字符串数据 if (typeof res === &quot;string&quot;) &#123; res = res ? JSON.parse(res) : res; &#125; // 当权限验证不通过的时候给出提示 if (res.code === &quot;401&quot;) &#123; ElMessage.error(res.msg); router.push(&quot;/login&quot;); &#125; return res; &#125;, (error) =&gt; &#123; console.log(&quot;err&quot; + error); return Promise.reject(error); &#125;);export default request; 路由实现在没有 token 的情况下无法进入主页而跳转到 login 页面，在路由守卫中进行判断和处理 123456789101112131415161718192021222324252627282930313233343536373839import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; \u0000 测试不登录，无法进入 home 页面 登录后，才可以进入 home 页面 后端后端这块需要实现一下 jwt，包括密码的校验和生成，以及 token 的生成和校验；那么之前的密码校验就可以舍去了，写一个统一的 auth 验证 安装依赖这里需要两个依赖：pyjwt、passlib[bcrypt] 12345fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23pyjwtpasslib[bcrypt] AuthHandler密码生成与校验接下先来编写 密码的生成和校验，在项目目录的/common下创建一个auth.py 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.security import HTTPBearerfrom passlib.context import CryptContextclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password)if __name__ == &#x27;__main__&#x27;: auth = AuthHandler() print(auth.get_password_hash(&quot;admin&quot;)) print(auth.verify_password(&quot;admin&quot;, &#x27;$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum&#x27;)) print(auth.verify_password(&quot;123&quot;, &#x27;$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum&#x27;)) 其中的$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum是数据库中存储的 admin 的密码 运行一下 可以看到，之前使用 bcrypt 直接生成的 hash 密码，虽然与现在生成的不一样，但是依旧可以用于验证 修改一下 adminService 的验证逻辑，尝试一下登录 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.security import HTTPBearerfrom passlib.context import CryptContextclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password)auth_handler = AuthHandler() 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModelclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) result = db_session.execute(query).scalars().first() if not result: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(admin.password, result.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) return result token 的生成与校验通过装饰器实现一个，登录验证 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetime, timedeltaimport jwtfrom fastapi import Securityfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentialsfrom passlib.context import CryptContextfrom exception.customException import TokenExceptionclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password) def encode_token(self, user_id): payload = &#123; &#x27;exp&#x27;: datetime.utcnow() + timedelta(days=7, minutes=0, seconds=0), &#x27;iat&#x27;: datetime.utcnow(), &#x27;sub&#x27;: user_id &#125; return jwt.encode( payload, self.secret, algorithm=&#x27;HS256&#x27; ) def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=[&#x27;HS256&#x27;]) return payload[&#x27;sub&#x27;] except jwt.ExpiredSignatureError: raise TokenException(&quot;token过期&quot;) except jwt.InvalidTokenError: raise TokenException(&quot;无效token&quot;) def auth_required(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials)auth_handler = AuthHandler() 给customException.py添加一个自定义异常 123class TokenException(Exception): def __init__(self, message: str): self.message = message 给exceptionHandler.py添加一个异常处理 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result)) 这个先写到这，后面新增加 api 的时候进行一个验证 更新: 2024-07-30 17:40:29原文: https://www.yuque.com/zacharyblock/iacda/pkecek3noxmavqwz","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"FastAPI入门-管理员登录","slug":"FastAPI入门/管理员登录","date":"2024-05-03T21:30:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2024/05/03/FastAPI入门/管理员登录/","permalink":"http://example.com/2024/05/03/FastAPI%E5%85%A5%E9%97%A8/%E7%AE%A1%E7%90%86%E5%91%98%E7%99%BB%E5%BD%95/","excerpt":"","text":"管理员登录前端Login首先绘制一个登录页面 参考element-plus官网提供的表单https://element-plus.org/zh-CN/component/form.html 在项目路径/src/views下创建一个Login.vue 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;template&gt; &lt;div&gt; &lt;div class=&quot;login-container&quot;&gt; &lt;div style=&quot;width: 420px&quot; class=&quot;login-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 登录&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot;&gt; &lt;el-form-item&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Avatar&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%;font-size: 18px&quot;&gt;登 录&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:35px;text-align: right;font-size: 15px&quot;&gt; 还没有账号？请&lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123;reactive&#125; from &#x27;vue&#x27;const data = reactive(&#123; form: &#123;&#125;&#125;)&lt;/script&gt;&lt;style scoped&gt;.login-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.login-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 背景图片添加一张登录背景图片到/src/assets/imags/login_background.png https://iconscout.com/free-illustration/children-are-doing-chemical-experiments-10946611 路由添加在/src/router/index.js中添加一下上面这个Login的路由 1234567891011121314151617181920212223import &#123;createRouter, createWebHistory&#125; from &#x27;vue-router&#x27;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &#x27;/&#x27;, name: &#x27;Manager&#x27;, component: () =&gt; import(&#x27;@/views/Manager.vue&#x27;), redirect: &#x27;/home&#x27;, children: [ &#123;path: &#x27;home&#x27;, name: &#x27;Home&#x27;, component: () =&gt; import(&#x27;@/views/manager/Home.vue&#x27;)&#125;, ] &#125;, &#123; path: &#x27;/login&#x27;, name: &#x27;Login&#x27;, component: () =&gt; import(&#x27;@/views/Login.vue&#x27;) &#125; ]&#125;)export default router 通过http://localhost:5173/login可以访问到登录页面 表单校验和登录1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;template&gt; &lt;div&gt; &lt;div class=&quot;login-container&quot;&gt; &lt;div style=&quot;width: 420px&quot; class=&quot;login-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 登录&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot;&gt; &lt;el-form-item prop=&quot;username&quot;&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Avatar&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot;&gt; &lt;el-input show-password style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%;font-size: 18px&quot; @click=&quot;login&quot;&gt;登 录&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:35px;text-align: right;font-size: 15px&quot;&gt; 还没有账号？请&lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123;reactive, ref&#125; from &#x27;vue&#x27;import request from &quot;@/utils/request&quot;;import &#123;ElMessage&#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: &#123;&#125;&#125;)const rules = reactive(&#123; username: [ &#123;required: true, message: &#x27;请输入账号&#x27;, trigger: &#x27;blur&#x27;&#125; ], password: [ &#123;required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27;&#125; ]&#125;)const formRef = ref()const login = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request.post(&#x27;/login&#x27;, data.form).then(res =&gt; &#123; if (res.code === &#x27;200&#x27;) &#123; localStorage.setItem(&#x27;student-user&#x27;, JSON.stringify(res.data)) ElMessage.success(&#x27;登录成功&#x27;) router.push(&#x27;/home&#x27;) &#125; else &#123; ElMessage.error(res.msg) &#125; &#125;).catch(err =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message) &#125;) &#125; &#125;)&#125;&lt;/script&gt;&lt;style scoped&gt;.login-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.login-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 后端数据库IDE连接MySQL 创建库首先在数据库中创建一个student_info库 创建admin表 插入一条数据 数据库配置查看sqlalchemy官方文档https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb requirements.txt通过sqlalchemy连接数据库需要增加两个驱动 123fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23 .env在.env文件下添加数据库的配置信息（记得改成你们自己的内容） 123456789HOST = &quot;localhost&quot;PORT = &quot;9090&quot;MYSQL_DIALECT = &quot;mysql+mysqldb&quot;MYSQL_HOST = &quot;localhost&quot;MYSQL_PORT = &quot;3306&quot;MYSQL_USER = &quot;root&quot;MYSQL_PASSWORD = &quot;XXXXXX&quot;MYSQL_DATABASE = &quot;student_info&quot; constant.py添加数据库配置常量 1234567891011121314# -*- coding:utf-8 -*-# Author: Zacharyfrom common.config import configHOST = config.env.get(&quot;HOST&quot;)PORT = config.env.get(&quot;PORT&quot;)MYSQL_DIALECT = config.env.get(&quot;MYSQL_DIALECT&quot;)MYSQL_HOST = config.env.get(&quot;MYSQL_HOST&quot;)MYSQL_PORT = config.env.get(&quot;MYSQL_PORT&quot;)MYSQL_USER = config.env.get(&quot;MYSQL_USER&quot;)MYSQL_PASSWORD = config.env.get(&quot;MYSQL_PASSWORD&quot;)MYSQL_DATABASE = config.env.get(&quot;MYSQL_DATABASE&quot;) model&#x2F;init.py12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import create_enginefrom sqlalchemy.orm import DeclarativeBase, sessionmakerfrom common.constant import *class Base(DeclarativeBase): pass# mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;engine = create_engine( f&quot;&#123;MYSQL_DIALECT&#125;://&#123;MYSQL_USER&#125;:&#123;MYSQL_PASSWORD&#125;@&#123;MYSQL_HOST&#125;:&#123;MYSQL_PORT&#125;/&#123;MYSQL_DATABASE&#125;?charset=utf8mb4&quot;, echo=True)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine) 管理员实体类定义在/model下创建一个admin.py文件 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False)class AdminModel(BaseModel): username: str password: str 管理员登录的api接口为了实现每一个api都能拿到一个连接数据库的session，在/model/__init__.py中实现一个session的获取方法 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import create_enginefrom sqlalchemy.orm import DeclarativeBase, sessionmakerfrom common.constant import *class Base(DeclarativeBase): pass# mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;engine = create_engine( f&quot;&#123;MYSQL_DIALECT&#125;://&#123;MYSQL_USER&#125;:&#123;MYSQL_PASSWORD&#125;@&#123;MYSQL_HOST&#125;:&#123;MYSQL_PORT&#125;/&#123;MYSQL_DATABASE&#125;?charset=utf8mb4&quot;, echo=True)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)def get_db_session(): session = Session() try: yield session finally: session.close() adminApi12345678910111213141516# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import Body, Dependsfrom fastapi.encoders import jsonable_encoderfrom api import appfrom common.result import Result, ResultModelfrom model import Session, get_db_sessionfrom model.admin import AdminModelfrom service.adminService import AdminService@app.post(&quot;/login&quot;, response_model=ResultModel)async def login(admin: AdminModel = Body(...), db_session: Session = Depends(get_db_session)): dbadmin = AdminService.login(admin, db_session) return Result.success(jsonable_encoder(dbadmin)) adminService12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModelclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) result = db_session.execute(query).scalars().first() if not result: raise UserNotFoundException(&quot;用户不存在&quot;) if result.password != admin.password: raise PasswordNotMatchException(&quot;身份验证未通过&quot;) return result exception创建自定义异常的exception的package 然后创建一个customException.py 1234567891011# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = message exceptionHandler在/api包下面创建一个exceptionHandler.py用于处理异常 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result)) &#x2F;api&#x2F;init.py12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()from api import adminApi, exceptionHandler 测试postman测试后端接口正确登录： 密码错误： 账号错误： 前后端测试跨域问题 发生了跨域CORS的问题 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler 正确账号密码： 错误账号： 错误密码： 数据库密码为了安全，数据库中的password不应该以明文显示，需要做个加密 这里需要使用到一个库 bcrypt 1234fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23bcrypt==4.1.1 密码加密通过hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt()) 依据生成的盐值，生成hash后的密码值，结果是字节码 12345678910(venv) ➜ studentbackend python3Python 3.10.11 (v3.10.11:7d4cc5aa85, Apr 4 2023, 19:05:19) [Clang 13.0.0 (clang-1300.0.29.30)] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import bcrypt&gt;&gt;&gt; password = &quot;admin&quot;&gt;&gt;&gt; hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())&gt;&gt;&gt; print(hashed_pw)b&#x27;$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum&#x27;&gt;&gt;&gt; print(hashed_pw.decode(&#x27;utf-8&#x27;))$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum 将密码对应的加密密码 $2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum 替换到数据库中的admin账号中（这一步操作其实应该是，在注册的时候将这个密码值写入数据库de~） 密码验证通过bcrypt.check(check_pw.encode(), hashed_pw)检验密码是否匹配 给Admin实体类定义一个密码检查方法 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyimport bcryptfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) def password_check(self, password): return bcrypt.checkpw(password.encode(), self.password.encode())class AdminModel(BaseModel): username: str password: str 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModelclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) result = db_session.execute(query).scalars().first() if not result: raise UserNotFoundException(&quot;用户不存在&quot;) if result.password_check(admin.password) is False: raise PasswordNotMatchException(&quot;身份验证未通过&quot;) return result 前后端测试密码错误： 密码正确： 更新: 2024-05-03 22:08:05原文: https://www.yuque.com/zacharyblock/iacda/qhg30r2hbk5wb58m","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"FastAPI入门-环境及项目初始化","slug":"FastAPI入门/环境及项目初始化","date":"2024-05-03T21:00:30.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2024/05/03/FastAPI入门/环境及项目初始化/","permalink":"http://example.com/2024/05/03/FastAPI%E5%85%A5%E9%97%A8/%E7%8E%AF%E5%A2%83%E5%8F%8A%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/","excerpt":"","text":"环境及项目初始化环境介绍开发环境版本： Python3.10.11、Node.js16.9.0、Vue3、MySQL5.7.31 官方文档Node.js：https://nodejs.org/en Vue：https://cn.vuejs.org/ Vite：https://cn.vitejs.dev/guide/ Element-Plus：https://element-plus.org/zh-CN/ FastAPI：https://fastapi.tiangolo.com/zh/ SQLAlchemy：https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb 图片素材库：https://iconscout.com/ 前端 Vue安装 Node.js进入官网 https://nodejs.org/download/release/v16.19.0/安装好 node.js 安装 vue-cli然后使用npm install -g @vue/cli命令安装 vue-cli 创建 vue 项目使用 vite 进行构建 通过npm create vite@latest studentfontend -- --template vue构建前端项目 1234567891011121314151617➜ ~ cd Documents/PythonCode➜ PythonCode mkdir studentProject➜ PythonCode cd studentProject➜ studentProject npm create vite@latest studentfontend -- --template vueScaffolding project in /Users/zachary/Documents/PythonCode/studentProject/studentfontend...Done. Now run: cd studentfontend npm install npm run dev➜ studentProject cd studentfontend➜ studentfontend lsREADME.md package.json srcindex.html public vite.config.js npm 源如果 npm 命令运行的时候很卡的话，尝试换源 npm config set registry [https://registry.npmmirror.com](https://registry.npmmirror.com) 打开 vue 项目使用 WebStorm 打开创建好的前端项目 先什么都不做，尝试把项目运行起来 123456789101112131415161718192021222324252627282930➜ studentfontend npm installnpm WARN EBADENGINE Unsupported engine &#123;npm WARN EBADENGINE package: &#x27;@vitejs/plugin-vue@5.0.4&#x27;,npm WARN EBADENGINE required: &#123; node: &#x27;^18.0.0 || &gt;=20.0.0&#x27; &#125;,npm WARN EBADENGINE current: &#123; node: &#x27;v16.19.0&#x27;, npm: &#x27;8.19.3&#x27; &#125;npm WARN EBADENGINE &#125;npm WARN EBADENGINE Unsupported engine &#123;npm WARN EBADENGINE package: &#x27;rollup@4.12.1&#x27;,npm WARN EBADENGINE required: &#123; node: &#x27;&gt;=18.0.0&#x27;, npm: &#x27;&gt;=8.0.0&#x27; &#125;,npm WARN EBADENGINE current: &#123; node: &#x27;v16.19.0&#x27;, npm: &#x27;8.19.3&#x27; &#125;npm WARN EBADENGINE &#125;npm WARN EBADENGINE Unsupported engine &#123;npm WARN EBADENGINE package: &#x27;vite@5.1.5&#x27;,npm WARN EBADENGINE required: &#123; node: &#x27;^18.0.0 || &gt;=20.0.0&#x27; &#125;,npm WARN EBADENGINE current: &#123; node: &#x27;v16.19.0&#x27;, npm: &#x27;8.19.3&#x27; &#125;npm WARN EBADENGINE &#125;up to date in 649ms➜ studentfontend npm run dev&gt; studentfontend@0.0.0 dev&gt; vite VITE v5.1.5 ready in 814 ms ➜ Local: http://127.0.0.1:5173/ ➜ Network: use --host to expose ➜ press h + enter to show help 项目整改现在我们把这个项目做好看些，为了学生信息管理系统做准备的， 需要把路由写好，同时修改主题色，还有 request http 的请求封装，选择一个自己喜欢的页面标题及 icon index.html修改项目下的 index.html 文件 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;学生信息管理系统&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;app&quot;&gt;&lt;/div&gt; &lt;script type=&quot;module&quot; src=&quot;/src/main.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; css&amp;imgs删除/assets下的vue.svg 在/src/assets路径下创建一个css和imgs目录 在创建好的/css目录下分别创建global.css和index.scss 全局 css 样式 1234567891011121314151617181920* &#123; box-sizing: border-box;&#125;body &#123; margin: 0; padding: 0; color: #252424;&#125;a &#123; text-decoration: none;&#125;.card &#123; background-color: rgb(255, 255, 255); border-radius: 5px; padding: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);&#125; 主题色配置文件 12345678910111213141516171819@forward &quot;element-plus/theme-chalk/src/common/var.scss&quot; with ( $colors: ( &quot;primary&quot;: ( &quot;base&quot;: #0a7fce ), &quot;success&quot;: ( &quot;base&quot;: #08b41f ), &quot;warning&quot;: ( &quot;base&quot;: #e8af56 ), &quot;danger&quot;: ( &quot;base&quot;: #ef3030 ), &quot;info&quot;: ( &quot;base&quot;: #5d66ea ) )); 路由设置在/src路径下创建一个router目录，在其中创建一个index.js文件 12345678910111213141516171819202122import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), &#125;, ], &#125;, ],&#125;);export default router; request 请求/src路径下创建一个utils目录，在其中创建一个request.js文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;../router&quot;;import axios from &quot;axios&quot;;const request = axios.create(&#123; baseURL: import.meta.env.VITE_BASE_URL, timeout: 30000, // 后台接口超时时间设置&#125;);// request 拦截器// 可以自请求发送前对请求做一些处理request.interceptors.request.use( (config) =&gt; &#123; config.headers[&quot;Content-Type&quot;] = &quot;application/json;charset=utf-8&quot;; return config; &#125;, (error) =&gt; &#123; return Promise.reject(error); &#125;);// response 拦截器// 可以在接口响应后统一处理结果request.interceptors.response.use( (response) =&gt; &#123; let res = response.data; // 如果是返回的文件 if (response.config.responseType === &quot;blob&quot;) &#123; return res; &#125; // 兼容服务端返回的字符串数据 if (typeof res === &quot;string&quot;) &#123; res = res ? JSON.parse(res) : res; &#125; // 当权限验证不通过的时候给出提示 if (res.code === &quot;401&quot;) &#123; ElMessage.error(res.msg); router.push(&quot;/login&quot;); &#125; return res; &#125;, (error) =&gt; &#123; console.log(&quot;err&quot; + error); return Promise.reject(error); &#125;);export default request; views/src路径下的/components修改为/views目录，将其中的HelloWorld.vue修改成Manager.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;管理员&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt;&lt;HomeFilled /&gt;&lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt;&lt;User /&gt;&lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt;&lt;SwitchButton /&gt;&lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 接着在/src/views路径下创建一个manager目录，在其中创建一个Home.vue文件 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div class=&quot;welcome-container&quot;&gt; &lt;div class=&quot;custom-card bg-white shadow rounded p-4 mb-5&quot;&gt; &lt;h2 class=&quot;text-center text-primary&quot;&gt;欢迎来到本系统&lt;/h2&gt; &lt;p class=&quot;text-center mt-3&quot;&gt; 您好 &lt;span :style=&quot;&#123; color: &#x27;#116ca9&#x27; &#125;&quot;&gt;&#123;&#123; user.username &#125;&#125;&lt;/span &gt;，祝您使用愉快！ &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import request from &quot;@/utils/request&quot;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.welcome-container &#123; display: flex; justify-content: center; align-items: center; min-height: calc(100vh - 100px); /* 根据实际项目需要调整高度 */&#125;.custom-card &#123; max-width: 400px; border: none;&#125;&lt;/style&gt; App.vue修改项目中的/src/App.vue 123&lt;template&gt; &lt;RouterView /&gt;&lt;/template&gt; main.js修改项目中的/src/main.js 1234567891011121314151617181920import &#123; createApp &#125; from &quot;vue&quot;;import App from &quot;./App.vue&quot;;import router from &quot;./router&quot;;import ElementPlus from &quot;element-plus&quot;;import zhCn from &quot;element-plus/dist/locale/zh-cn.mjs&quot;;import * as ElementPlusIconsVue from &quot;@element-plus/icons-vue&quot;;import &quot;@/assets/css/global.css&quot;;const app = createApp(App);app.use(router);app.use(ElementPlus, &#123; locale: zhCn,&#125;);app.mount(&quot;#app&quot;);for (const [key, component] of Object.entries(ElementPlusIconsVue)) &#123; app.component(key, component);&#125; .env在项目路径下创建两个文件.env.development、.env.production 1VITE_BASE_URL=&#x27;http://localhost:9090&#x27; 1VITE_BASE_URL=&#x27;http://:9090&#x27; json 配置修改项目路径下的文件：package.json 12345678910111213141516171819202122232425&#123; &quot;name&quot;: &quot;studentfontend&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vite&quot;, &quot;build&quot;: &quot;vite build&quot;, &quot;preview&quot;: &quot;vite preview&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;@element-plus/icons-vue&quot;: &quot;^2.1.0&quot;, &quot;axios&quot;: &quot;^1.6.2&quot;, &quot;element-plus&quot;: &quot;^2.4.2&quot;, &quot;sass&quot;: &quot;^1.69.5&quot;, &quot;unplugin-element-plus&quot;: &quot;^0.8.0&quot;, &quot;vue&quot;: &quot;^3.3.4&quot;, &quot;vue-router&quot;: &quot;^4.2.5&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;@vitejs/plugin-vue&quot;: &quot;^4.4.0&quot;, &quot;unplugin-auto-import&quot;: &quot;^0.16.7&quot;, &quot;unplugin-vue-components&quot;: &quot;^0.25.2&quot;, &quot;vite&quot;: &quot;^4.4.11&quot; &#125;&#125; vite.config.js修改项目路径下的文件：vite.config.js 12345678910111213141516171819202122232425262728293031323334353637383940import &#123; fileURLToPath, URL &#125; from &quot;node:url&quot;;import &#123; defineConfig &#125; from &quot;vite&quot;;import vue from &quot;@vitejs/plugin-vue&quot;;import AutoImport from &quot;unplugin-auto-import/vite&quot;;import Components from &quot;unplugin-vue-components/vite&quot;;import &#123; ElementPlusResolver &#125; from &quot;unplugin-vue-components/resolvers&quot;;import ElementPlus from &quot;unplugin-element-plus/vite&quot;;export default defineConfig(&#123; plugins: [ vue(), AutoImport(&#123; resolvers: [ElementPlusResolver(&#123; importStyle: &quot;sass&quot; &#125;)], &#125;), Components(&#123; resolvers: [ElementPlusResolver(&#123; importStyle: &quot;sass&quot; &#125;)], &#125;), ElementPlus(&#123; useSource: true, &#125;), ], resolve: &#123; alias: &#123; &quot;@&quot;: fileURLToPath(new URL(&quot;./src&quot;, import.meta.url)), &#125;, &#125;, css: &#123; preprocessorOptions: &#123; scss: &#123; additionalData: ` @use &quot;@/assets/css/index.scss&quot; as *; `, &#125;, &#125;, &#125;,&#125;); logo修改一下 logo 和标题的 icon 分别放在/public/favicon.ico和/src/assets/imgs/logo.png路径下 删除/public/vite.svg 可以去这个网站下载https://iconscout.com/icons https://iconscout.com/free-icon/library-2642818，将该图片保存为/src/assets/imgs/logo.png 或者https://iconscout.com/free-icon/student-79 https://iconscout.com/free-icon/student-reading-2909468，保存为/public/favicon.ico 运行命令运行1234567891011121314➜ studentfontend npm installadded 93 packages, removed 1 package, and changed 5 packages in 16s➜ studentfontend npm run dev&gt; studentfontend@0.0.0 dev&gt; vite VITE v4.5.2 ready in 1169 ms ➜ Local: http://127.0.0.1:5173/ ➜ Network: use --host to expose ➜ press h to show help 一键运行通过配置一个启动项，便捷运行项目 后端 FastAPI创建空项目新建一个项目进入 FastAPI 的世界 先创建项目文件夹 12345678➜ studentProject lltotal 0drwxr-xr-x@ 16 zachary staff 512B 3 10 20:25 studentfontend➜ studentProject mkdir studentbackend➜ studentProject lltotal 0drwxr-xr-x@ 2 zachary staff 64B 3 10 20:41 studentbackenddrwxr-xr-x@ 16 zachary staff 512B 3 10 20:25 studentfontend 然后使用 Pycharm 创建一个空项目 依赖包安装需要安装一个 FastAPI 的依赖包 命令安装pip install fastapi[all] requirements.txt 安装1fastapi[all] 实现一个 api创建项目目录下创建一个main.py 1234567891011# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)async def hello(): return &#123;&quot;message&quot;: &quot;Hello World&quot;&#125; 运行需要使用 fastapi 提供的一个uvicornASGI 网关服务器来启动 api 服务 命令运行uvicorn main:app --reload 一键运行 配置 main 函数 123456789101112131415# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)async def hello(): return &#123;&quot;message&quot;: &quot;Hello World&quot;&#125;if __name__ == &quot;__main__&quot;: uvicorn.run(&quot;main:app&quot;, reload=True) 启动配置项 以上两种方式均可以实现，具体看个人习惯 项目整改.env这个文件用于存放环境变量，包括项目的运行 ip、端口号等，后面的数据库环境变量也在这里存放 12HOST = &quot;localhost&quot;PORT = &quot;9090&quot; common在项目路径下创建一个/common的 package，用于实现公共类或者公共方法 环境变量配置文件在/common包下创建一个config.py文件，实现对环境变量的获取 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyimport osfrom pathlib import Pathfrom dotenv import load_dotenvclass Config: def __init__(self): dotenv_path = Path(__file__).parent.parent / &quot;.env&quot; load_dotenv(dotenv_path=dotenv_path) self._env = dict(os.environ) @property def env(self): return self._envconfig = Config() 在/common包下创建一个constant.py文件，用于配置常量 1234567# -*- coding:utf-8 -*-# Author: Zacharyfrom common.config import configHOST = config.env.get(&quot;HOST&quot;)PORT = config.env.get(&quot;PORT&quot;) 返回类 Result实现一下 api 的通用返回类，在/common包下创建一个result.py 123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelclass ResultBase: code: str msg: str data: dictclass ResultModel(BaseModel, ResultBase): passclass Result(ResultBase): def __init__(self, code, msg, data): self.code = code self.msg = msg self.data = data @classmethod def success(cls, data: object = None, code: str = &quot;200&quot;, msg: str = &quot;success&quot;): if not data: data = &#123;&#125; return cls(code, msg, data) @classmethod def error(cls, data: object = None, code: str = &quot;500&quot;, msg: str = &quot;error&quot;): if not data: data = &#123;&#125; return cls(code, msg, data) exception创建一个/exception的 package 用于自定义异常 api创建一个/api的 package，用于创建后端的 API，实际就是 Controller 层 init.py用于创建 FastAPI 应用初始化 123456# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI() adminApi.py创建一个 hello fastapi 接口测试一下项目 12345678910# -*- coding:utf-8 -*-# Author: Zacharyfrom api import appfrom common.result import Result@app.get(&quot;/&quot;)async def hello(): return Result.success() 然后新增了一个 api 文件之后需要给 api 的init.py 说明一下新增了一个 api 文件 12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()from api import adminApi service创建一个/service的 package 用于实现 Service 层的业务代码 model创建一个/model的 package 用于实现数据库的映射类 main用于启动 FastAPI 的主入口程序 12345678910# -*- coding:utf-8 -*-# Author: Zacharyfrom api import appimport uvicornfrom common.constant import HOST, PORTif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, host=HOST, port=int(PORT), reload=True) 运行直接运行 main.py 文件即可 出现这个就是访问成功啦 至此，我们的前端后端项目就都初始化好了 更新: 2024-05-03 22:13:04原文: https://www.yuque.com/zacharyblock/iacda/sengqtgphw3hc0hv","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"FastAPI入门-项目介绍","slug":"FastAPI入门/项目介绍","date":"2024-05-03T20:30:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2024/05/03/FastAPI入门/项目介绍/","permalink":"http://example.com/2024/05/03/FastAPI%E5%85%A5%E9%97%A8/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"项目介绍学生信息管理系统——前后端分离技术栈后端：FastAPI + SQLAlchemy 前端：Vue3 + Element-plus 数据库：MySQL 所需工具Pycharm、WebStorm、Postman 项目功能管理员 登录 学生管理 课程管理 选课管理 成绩管理 学生 登录、注册 查看、修改个人信息 查看课程、选课 查看成绩 查看、修改评价 链接 🔗 BiliBili：https://www.bilibili.com/video/BV1Rx4y1U79A/?vd_source&#x3D;4eb61e12ff64fa3d03cfec0f2eb09ce7 语雀：[https://www.yuque.com/zacharyblock/iacda?# 《PythonLearning》](https://www.yuque.com/zacharyblock/iacda?# 《PythonLearning》) Github： 前端：https://github.com/BlockZachary/studentfontend 后端：https://github.com/BlockZachary/studentbackend 更新: 2024-05-26 21:30:46原文: https://www.yuque.com/zacharyblock/iacda/wlw9b68ykem94qi1","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"Python进阶-异步IO","slug":"Python进阶/异步IO","date":"2023-01-14T02:50:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2023/01/14/Python进阶/异步IO/","permalink":"http://example.com/2023/01/14/Python%E8%BF%9B%E9%98%B6/%E5%BC%82%E6%AD%A5IO/","excerpt":"","text":"异步 IO协程类似于小学时候的一个计算任务，协程就类似于同时做多件家务，烧开水的同时 启动了洗衣机 之后拖地 而不是烧开水一直等，然后拖地，然后洗衣机等着 asyncio 模块该模块通过一个线程去执行并发任务 async 需要创建一个协程的时候，可以使用 async 关键字将一个函数声明为协程 协程的协有协助之意，协程就是通过一个线程去执行并发，一个任务就是一个协程，也可以是多个任务通过一个协程调用多次来实现 协程的核心是通过事件循环实现的 12async def func(): pass asyncio.run() 启动一个协程 1234567async def multi(num1: int, num2: int): res = num1 * num2 print(f&#x27;&#123;num1&#125; * &#123;num2&#125; = &#123;res&#125;&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(multi(3,7)) await 协程中调用另外一个协程 1234567891011async def multi(num1: int, num2: int): res = num1 * num2 print(f&#x27;&#123;num1&#125; * &#123;num2&#125; = &#123;res&#125;&#x27;)async def multi_api(): await multi(1, 2)if __name__ == &#x27;__main__&#x27;: asyncio.run(multi_api()) 创建任务 asyncio.create_task 先来一个没有实现并发的调用，由时间上的统计来看，是一个串行的实现 1234567891011121314151617181920212223242526272829async def process(name: str, num1: int) -&gt; None: print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;)async def process_api(): start = time.perf_counter() await process(&#x27;task1&#x27;, 1) await process(&#x27;task2&#x27;, 2) await process(&#x27;task3&#x27;, 3) print(f&#x27;finished in &#123;time.perf_counter() - start:.2f&#125; seconds&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api())# task1 started# task1 processing# task1 finished# task2 started# task2 processing# task2 finished# task3 started# task3 processing# task3 finished# finished in 6.01 seconds - 通过`asyncio.create_task`实现并发 * create_task返回task对象 * 先不用await * 再加上await 可以看出时间上运行速度的差距 12345678910111213141516171819202122async def process(name: str, num1: int) -&gt; None: print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;)async def process_api(): start = time.perf_counter() task_1 = asyncio.create_task(process(&#x27;task1&#x27;, 1)) task_2 = asyncio.create_task(process(&#x27;task2&#x27;, 2)) task_3 = asyncio.create_task(process(&#x27;task3&#x27;, 3)) # await task_1 # await task_2 # await task_3 print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) 取消任务 Task.done()用于判断任务是否完成 Task.cancel()用于取消一个未完成的任务 12345678910111213141516171819202122232425async def process(name: str, num1: int) -&gt; None: print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;)async def process_api(): start = time.perf_counter() task_1 = asyncio.create_task(process(&#x27;task1&#x27;, 1)) task_2 = asyncio.create_task(process(&#x27;task2&#x27;, 2)) task_3 = asyncio.create_task(process(&#x27;task3&#x27;, 3)) await task_1 await task_2 if not task_3.done(): task_3.cancel() else: await task_3 print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) 超时取消任务 asyncio.wait_for(Task, timeout=time) 用于设定多久未完成任务，取消任务 12345678910111213141516171819202122async def process(name: str, num1: int) -&gt; None: print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;)async def process_api(): start = time.perf_counter() task_1 = asyncio.create_task(process(&#x27;task1&#x27;, 3)) try: await asyncio.wait_for(task_1, 1) except asyncio.TimeoutError: print(&#x27;task1 timeout&#x27;) else: await task_1 print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) asyncio.shield(Task)给任务加盾，即使超时了也不会停止任务 123456789101112131415161718192021async def process(name: str, num1: int) -&gt; None: print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;)async def process_api(): start = time.perf_counter() task_1 = asyncio.create_task(process(&#x27;task1&#x27;, 3)) try: await asyncio.wait_for(asyncio.shield(task_1), 1) except asyncio.TimeoutError: print(&#x27;task1 timeout&#x27;) await task_1 print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) 等待多个任务 asyncio.gather(Task1, Task2,...)可以直接并行多个任务等待结束 123456789101112131415161718192021async def process(name: str, num1: int): print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;) return f&quot;&#123;name&#125; finished&quot;async def process_api(): start = time.perf_counter() task_1 = process(&#x27;task_1&#x27;, 1) task_2 = process(&#x27;task_2&#x27;, 2) task_3 = process(&#x27;task_3&#x27;, 3) result = await asyncio.gather(task_1, task_2, task_3) print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;) print(result)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) 协程异常 return_exceptions=True 在等待多个任务时，若有异常任务会导致整体主线程的中断，可以使用该参数保持其他任务的正常运行 123456789101112131415161718192021222324252627async def process(name: str, num1: int): print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;) return f&quot;&#123;name&#125; finished&quot;async def exception_process(): raise Exception(&#x27;error&#x27;)async def process_api(): start = time.perf_counter() task_1 = process(&#x27;task_1&#x27;, 1) task_2 = process(&#x27;task_2&#x27;, 2) task_error = exception_process() result = await asyncio.gather(task_1, task_2, task_error, return_exceptions=True) print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;) print(result)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) 更新: 2024-05-16 13:20:45原文: https://www.yuque.com/zacharyblock/cx2om6/oau1f4oo9g509hgz","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"http://example.com/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python进阶-并发","slug":"Python进阶/并发","date":"2023-01-11T23:13:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2023/01/11/Python进阶/并发/","permalink":"http://example.com/2023/01/11/Python%E8%BF%9B%E9%98%B6/%E5%B9%B6%E5%8F%91/","excerpt":"","text":"并发线程进程与线程 一个进程是操作系统中运行的一个任务 进程拥有独立的 CPU 和内存资源 多进程是支持并发的 一个线程是一个进程下运行的一个任务 线程之间共享进程的 CPU 和内存资源 创建线程 使用threading模块中的Thread类创建线程 start()方法：启动线程 join()方法： 等待线程结束 123456789101112131415def task(): for i in range(5): print(i)thread_1 = Thread(target=task)thread_2 = Thread(target=task)thread_1.start()thread_2.start()thread_1.join()print(&quot;thread_1 end&quot;)thread_2.join()print(“thread_2 end”) - 带参数的方法调用使用`args`传入参数 123456789def task(num: int): for i in range(num): print(i)thread_1 = Thread(target=task, args = (5,))thread_2 = Thread(target=task, args = (10,))thread_1.start()thread_2.start() 通过继承Thread类来创建线程类 setName()方法可以给线程设置名字 1234567891011121314151617class MyThread(Thread): def __init__(self, name:str, num: int): super().__init__() self.setName(name) self.num = num def run(self) -&gt; None: for i in range(self.num): print(f&quot;&#123;self.getName()&#125;: &#123;i&#125;&quot;) time.sleep(1)thread_1 = MyThread(&quot;A&quot;, 5)thread_2 = MyThread(&quot;B&quot;, 10)thread_1.start()thread_2.start() 守护线程 当主线程结束时，守护线程自动结束 主线程中有非守护线程时，会等待非守护线程执行完才结束 守护线程一般用于日志等 非关键线程 123456789101112131415161718192021222324# 实现方法1def task(num: int): for i in range(num): print(i)thread_1 = Thread(target=task,args=(5,), daemon=True)thread_1.start()# 实现方法2class MyThread(Thread): def __init__(self, name:str, num: int): super().__init__() self.setName(name) self.setDaemon(True) self.num = num def run(self) -&gt; None: for i in range(self.num): print(f&quot;&#123;self.getName()&#125;: &#123;i&#125;&quot;) time.sleep(1)thread_2 = MyThread(&quot;A&quot;, 5)thread_2.start() 线程安全队列queue 模块中 Queue 类提供了线程安全队列 queue.put(item, block=True) block 为 True 当 queue 满了的时候线程会等待，直到有空间 put block 为 False 当 queue 满了的时候会抛出异常 queue.put(item, timeout=5) timeout 当 queue 满了的时候等待 timeout 时长，若还是满着抛出异常，若空闲了则 put queue.get(block=True) queue.get(timeout=5) queue.qsize() queue.empty() queue.full() 通过一个生产者、消费者模型进行演示 123456789101112131415161718192021222324252627282930313233343536373839class Producer(Thread): def __init__(self, name:str, num: int, queue: Queue): super().__init__() self.setName(name) self.num = num self.queue = queue def run(self) -&gt; None: for i in range(self.num): item = f&quot;&#123;self.getName()&#125;: &#123;i&#125;&quot; queue.put(item, block=True)class Consumer(Thread): def __init__(self, name: str, queue: Queue): super().__init__() self.setName(name) self.queue = queue self.setDaemon(True) def run(self) -&gt; None: while True: item = self.queue.get(block=True) print(f&quot;&#123;self.getName()&#125;-&gt;&#123;item&#125;\\n&quot;, end=&quot;&quot;)queue = Queue(3)threads = []threads.append(Producer(&quot;P1&quot;, 5, queue))threads.append(Producer(&quot;P2&quot;, 5, queue))threads.append(Producer(&quot;P3&quot;, 5, queue))threads.append(Consumer(&quot;C1&quot;, queue))threads.append(Consumer(&quot;C1&quot;, queue))for thread in threads: thread.start() 线程锁多个线程同一时刻访问同一资源时，会出现竞争的现象，容易造成数据的丢失、覆盖等问题 12345678910111213def task(name: str): print(f&quot;&#123;name&#125;: 1\\n&quot;, end=&quot;&quot;) print(f&quot;&#123;name&#125;: 2\\n&quot;, end=&quot;&quot;) print(f&quot;&#123;name&#125;: 3\\n&quot;, end=&quot;&quot;)thread_1 = Thread(target=task, args=(&quot;A&quot;,))thread_2 = Thread(target=task, args=(&quot;B&quot;,))thread_3 = Thread(target=task, args=(&quot;C&quot;,))threads = [thread_1, thread_2, thread_3]for thread in threads: thread.start() 可以使用锁来解决这一问题 Lock lock.acquire()获取锁，当一个锁对象中的锁被获取了，另一个需要获取的需要等待 lock.release()释放锁 12345678910111213141516171819lock = Lock()def task(name: str): global lock lock.acquire() print(f&quot;&#123;name&#125;: 1\\n&quot;, end=&quot;&quot;) print(f&quot;&#123;name&#125;: 2\\n&quot;, end=&quot;&quot;) print(f&quot;&#123;name&#125;: 3\\n&quot;, end=&quot;&quot;) lock.release()thread_1 = Thread(target=task, args=(&quot;A&quot;,))thread_2 = Thread(target=task, args=(&quot;B&quot;,))thread_3 = Thread(target=task, args=(&quot;C&quot;,))threads = [thread_1, thread_2, thread_3]for thread in threads: thread.start() Condition acquire() release() wait() 等待锁的释放 notify_all() 通知其他等待锁的线程 自己实现一个线程安全队列 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465class MySafeQueue(): def __init__(self, size: int): self.__queue = [] self.size = size self.__lock = Condition() def put(self, item): self.__lock.acquire() while len(self.__queue) &gt;= self.size: self.__lock.wait() self.__queue.append(item) self.__lock.notify_all() self.__lock.release() def get(self): self.__lock.acquire() while len(self.__queue) == 0: self.__lock.wait() item = self.__queue.pop(0) self.__lock.notify_all() self.__lock.release() return itemclass Producer(Thread): def __init__(self, name: str, num: int, queue: MySafeQueue): super().__init__() self.setName(name) self.num = num self.queue = queue def run(self) -&gt; None: for i in range(self.num): item = f&quot;&#123;self.getName()&#125;: &#123;i&#125;&quot; queue.put(item)class Consumer(Thread): def __init__(self, name: str, queue: MySafeQueue): super().__init__() self.setName(name) self.queue = queue self.setDaemon(True) def run(self) -&gt; None: while True: item = self.queue.get() print(f&quot;&#123;self.getName()&#125;-&gt;&#123;item&#125;\\n&quot;, end=&quot;&quot;)queue = MySafeQueue(3)threads = []threads.append(Producer(&quot;P1&quot;, 5, queue))threads.append(Producer(&quot;P2&quot;, 5, queue))threads.append(Producer(&quot;P3&quot;, 5, queue))threads.append(Consumer(&quot;C1&quot;, queue))threads.append(Consumer(&quot;C1&quot;, queue))for thread in threads: thread.start() 锁支持上下文管理器，因此可以改成 123456789101112131415161718192021class MySafeQueue(): def __init__(self, size: int): self.__queue = [] self.size = size self.__lock = Condition() def put(self, item): with self.__lock: while len(self.__queue) &gt;= self.size: self.__lock.wait() self.__queue.append(item) self.__lock.notify_all() def get(self): with self.__lock: while len(self.__queue) == 0: self.__lock.wait() item = self.__queue.pop(0) self.__lock.notify_all() return item 线程池 线程的创建和销毁昂贵 频繁操作（创建与销毁）造成性能低 线程池的出现使得便于对 Python 的线程进行管理、提高性能 ThreadPoolExecutor submit()告诉线程池执行者，启动一个任务，返回值为 future 对象，包含执行结果或者异常 result() exception() map()执行多个任务 shutdown()关闭线程池 12345678910111213141516def task(name: str): print(f&#x27;&#123;name&#125; started&#x27;) time.sleep(1) print(f&#x27;&#123;name&#125; processed&#x27;) return f&quot;&#123;name&#125; finished&quot;with ThreadPoolExecutor() as executor: result_1 = executor.submit(task, &#x27;task1&#x27;) result_2 = executor.submit(task, &#x27;task2&#x27;) print(result_1.result()) print(result_2.result())with ThreadPoolExecutor() as executor: result_1 = executor.map(task, [&#x27;task3&#x27;, &#x27;task4&#x27;]) print(list(result_1)) 多进程 multiprocessing模块用于提供多进程的实现 multiprocessing.Process用于创建进程 start()用于启动进程 join()用于等待进程结束 12345678910111213141516171819202122232425262728def task(name: str, num: int): print(f&#x27;&#123;name&#125;:&#123;num&#125;-&gt;start process\\n&#x27;, end=&quot;&quot;) res = 0 for i in range(num): res += i print(f&#x27;&#123;name&#125;:&#123;num&#125;-&gt;end process, result:&#123;res&#125;\\n&#x27;, end=&quot;&quot;)def process_1(): task_process = multiprocessing.Process(target=task, args=(&quot;task1&quot;, 10)) task_process.start() task_process.join() print(&quot;process_1 end&quot;)def process_2(): task_process_args = [(&quot;task2&quot;, 10), (&quot;task3&quot;, 10), (&quot;task4&quot;, 10)] task_processes = [multiprocessing.Process(target=task, args=arg) for arg in task_process_args] for task_process in task_processes: task_process.start() for task_process in task_processes: task_process.join() print(&quot;process_2 end&quot;)if __name__ == &#x27;__main__&#x27;: process_1() process_2() 可以使用ps -ef | grep python来查看是否有这么多进程 进程池 进程的创建与销毁同样是昂贵的 频繁地操作（创建与销毁）对性能影响很大 ProcessPoolExecutor submit()告诉进程池执行者，启动一个任务，返回值为 future 对象，包含执行结果或者异常 result() exception() map()执行多个进程 shutdown()关闭进程池 1234567891011def task(name: str): print(f&#x27;&#123;name&#125; started&#x27;) time.sleep(1) print(f&#x27;&#123;name&#125; processed&#x27;) return f&quot;&#123;name&#125; finished&quot;if __name__ == &#x27;__main__&#x27;: with ProcessPoolExecutor() as executor: result_1 = executor.map(task, [&#x27;task3&#x27;, &#x27;task4&#x27;]) print(list(result_1)) 更新: 2024-05-16 13:18:58原文: https://www.yuque.com/zacharyblock/cx2om6/man8qrk3tugq2v5t","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"http://example.com/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python进阶-正则表达式","slug":"Python进阶/正则表达式","date":"2023-01-11T22:39:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2023/01/11/Python进阶/正则表达式/","permalink":"http://example.com/2023/01/11/Python%E8%BF%9B%E9%98%B6/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"正则表达式 正则是用于进行字符串内容的验证、匹配或者搜索 是一个相对独立的表达方式 需要引入re模块 import re 常用的几种 re 方法 re.search() 1234pattern = r&quot;\\d&#123;4&#125;&quot;text = &quot;I was born in 1998&quot;result = re.search(pattern, text)print(result) re.match() 1234pattern = r&quot;\\d&#123;4&#125;&quot;text = &quot;1998 year, I was born&quot;result = re.match(pattern, text)print(result) re.fullmatch() 1234pattern = r&quot;\\d&#123;4&#125;&quot;text = &quot;1998&quot;result = re.fullmatch(pattern, text)print(result) re.findall() 1234pattern = r&quot;\\d&#123;4&#125;&quot;text = &quot;1998 2 22, I was born. My sister was born in 2006&quot;result = re.findall(pattern, text)print(result) re.finditer() 12345pattern = r&quot;\\d&#123;4&#125;&quot;text = &quot;1998 2 22, I was born. My sister was born in 2006&quot;result = re.finditer(pattern, text)for res in result: print(res) re.compile() 可以直接生成一个 re 对象，直接调用相应方法对字符串进行校验 12341998 2 22, I was born. My sister was born in 2006pattern_str = r&quot;\\d&#123;4&#125;&quot;pattern_obj = re.compile(pattern_str)print(pattern_obj.search(&quot;I was born in 1998&quot;))print(pattern_obj.findall(&quot;1998 2 22, I was born. My sister was born in 2006&quot;)) 更新: 2024-01-11 23:12:10原文: https://www.yuque.com/zacharyblock/cx2om6/qegza164lpgh11hq","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"http://example.com/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python进阶-dataclass-数据类","slug":"Python进阶/dataclass-数据类","date":"2023-01-10T19:49:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2023/01/10/Python进阶/dataclass-数据类/","permalink":"http://example.com/2023/01/10/Python%E8%BF%9B%E9%98%B6/dataclass-%E6%95%B0%E6%8D%AE%E7%B1%BB/","excerpt":"","text":"dataclass-数据类在通常我们设计一个类时，需要初始化一些属性，如： 1234class Car: def __init__(self, origin, auto): self.origin = origin self.auto = auto 当有了 dataclass 后就可以使用装饰器@dataclass来实现 1234567891011@dataclassclass Car: origin: str auto: boolporsche = Car(&quot;Germany&quot;, True)print(porsche)benz = Car(&quot;Germany&quot;, True)print(benz)# eq方法也给我们提供了print(porsche == benz) dataclass 给属性提供缺省值 1234567@dataclassclass Car: origin: str auto: bool = Trueporsche = Car(&quot;Germany&quot;)print(porsche) 创建一个不可变对象 1234567@dataclass(frozen=True)class Car: origin: str auto: boolporsche = Car(&quot;Germany&quot;, True)porsche.auto = False # 报错 field()定制属性，可以看一下 field 的源代码 1234567891011@dataclass(frozen=True)class Car: origin: str auto: bool = True age: int = field(default=5, init=False, repr=False) def __post_init__(self): self.auto = self.age &lt; 5porsche = Car(&quot;Germany&quot;, False)print(porsche) 排序，order=True默认按照第一个属性进行排序， 12345678910@dataclass(order=True)class Car: origin: str auto: boolporsche = Car(&quot;Germany&quot;, True)benz = Car(&quot;Germany&quot;, False)cars = [porsche, benz]sorted(cars)print(cars) 当想依照另一个属性进行排序时，有两种方法 在类中创建一个不参与 init 与 repr 的变量，并放到第一个参数位置 123456789101112131415@dataclass(order=True)class Car: sortIndex: int = field(init=False, repr=False) origin: str age: int auto: bool = True def __post_init__(self): self.sortIndex = self.ageporsche = Car(&quot;Germany&quot;, 4, True)benz = Car(&quot;Germany&quot;, 5, False)cars = [porsche, benz]cars = sorted(cars)print(cars) - 另一个方法就是直接使用`sort()`方法中的`key=operator.attrgetter(&#39;属性名&#39;)`来实现按照哪一个属性进行排序`建议使用这个` 1234567891011@dataclass()class Car: origin: str age: int auto: bool = Trueporsche = Car(&quot;Germany&quot;, 4, True)benz = Car(&quot;Germany&quot;, 5, False)cars = [porsche, benz]cars.sort(key=operator.attrgetter(&#x27;age&#x27;))print(cars) 更新: 2024-01-10 21:24:23原文: https://www.yuque.com/zacharyblock/cx2om6/ehmlkmargqm4bti5","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"http://example.com/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python进阶-metaclass-元类","slug":"Python进阶/metaclass-元类","date":"2023-01-09T21:20:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2023/01/09/Python进阶/metaclass-元类/","permalink":"http://example.com/2023/01/09/Python%E8%BF%9B%E9%98%B6/metaclass-%E5%85%83%E7%B1%BB/","excerpt":"","text":"metaclass-元类 metaclass 就是一个用来创建其他 class 的类 type 类就是所有 class 默认的 metaclass 可以在定义类时，声明 metaclass 1234567891011class Car(type): @staticmethod def __new__(mcs, *args): class_ = super().__new__(mcs, *args) class_.auto = True return class_class Porsche(object, metaclass=Car): passprint(Porsche.auto) 依据传入的关键字参数，对属性进行扩展 1234567891011121314class Car(type): @staticmethod def __new__(mcs, *args， **kwargs): class_ = super().__new__(mcs, *args) if kwargs: for key, value in kwargs.items(): setattr(class_, key, value) return class_class Porsche(object, metaclass=Car, auto = True, origin = &quot;Germany&quot;): passprint(Porsche.auto)print(Porsche.origin) 在元类中获取使用了元类的类的属性 12345678910111213141516171819202122232425262728293031323334353637383940414243class PropUtil: def __init__(self,attr): self._attr = f&quot;_&#123;attr&#125;&quot; # 避免递归调用 def get(self,obj): if not hasattr(obj, self._attr): return None return getattr(obj, self._attr) def set(self,obj,value): setattr(obj,self._attr, value)class Car(type): @staticmethod def __new__(mcs, *args， **kwargs): class_ = super().__new__(mcs, *args) for attr in class_.attrs: prop = PropUtil(attr) pObj = property(fget=prop.get, fset=prop.set) setattr(class_, attr, pObj) return class_class Porsche(object, metaclass=Car): attrs = [&quot;origin&quot;, &quot;auto&quot;]panamera = Porsche()print(panamera.auto)panamera.auto = Trueprint(panamera.auto)# 使用装饰器实现def car(cls): return Car(cls.__name__, cls.__bases__, dict(cls.__dict__))@carclass Benz: attrs = [&quot;origin&quot;, &quot;auto&quot;]benz = Benz()print(benz.auto)print(benz.origin)benz.auto = Falseprint(benz.auto) 更新: 2024-01-10 00:47:48原文: https://www.yuque.com/zacharyblock/cx2om6/ed59q8lf72v6ibfn","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"http://example.com/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python进阶-type类","slug":"Python进阶/type类","date":"2023-01-09T20:27:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2023/01/09/Python进阶/type类/","permalink":"http://example.com/2023/01/09/Python%E8%BF%9B%E9%98%B6/type%E7%B1%BB/","excerpt":"","text":"type 类 任何 class 在内存中 就是一个 type()类的对象 123456class Person: def hello(self): print(&quot;hello world!&quot;)print(type(Person))print(isinstance(Person,type)) 这种一般是在写源码时还不知道需求，不知道需要具体创建什么样的类，从而在运行时动态创建类出来 可以使用 type()来创建其他 class -&gt; type(class_name, parents, class_dict) 可以使用 type()来动态创建 class 123456789101112class_content = &quot;&quot;&quot;def hello(self): print(&quot;hello myclass...&quot;)&quot;&quot;&quot;class_dict = &#123;&#125;exec(class_content, globals(), class_dict)type(&quot;myClass&quot;, (object,), class_dict)mc = myClass()mc.hello() 更新: 2024-01-09 21:20:07原文: https://www.yuque.com/zacharyblock/cx2om6/qvpca56gofn7sipm","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"http://example.com/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python进阶-装饰器","slug":"Python进阶/装饰器","date":"2023-01-08T12:45:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2023/01/08/Python进阶/装饰器/","permalink":"http://example.com/2023/01/08/Python%E8%BF%9B%E9%98%B6/%E8%A3%85%E9%A5%B0%E5%99%A8/","excerpt":"","text":"装饰器装饰器 decorator在不改变原有函数代码，且保持原函数调用方法不变的情况下，给原函数增加新的功能（或者给类增加属性和方法） 装饰器定义与原型 核心思想 用一个函数（或者类）去装饰一个旧函数（或者类），造出一个新函数（或者新类） 语法规则 在原有的函数上加上@符号，装饰器会把下面的函数当做参数传递到装饰器中，@符又被称为语法糖 应用场景 引入日志，函数执行时间的统计，执行函数前的准备工作，执行函数后的处理工作，权限校验，缓存等场景中 123456789101112131415161718192021222324252627282930313233# 装饰器的原型，利用闭包实现def outer(f): def inner(): print(&#x27;这是inner函数的语句1&#x27;) f() print(&#x27;这是inner函数的语句2&#x27;) return innerdef demo(): print(&#x27;这是demo函数的语句&#x27;)obj = outer(demo)obj()# 这是inner函数的语句1# 这是demo函数的语句# 这是inner函数的语句2print()# 改为装饰器的定义# 此处等同于 demo2=outer(demo2)@outerdef demo2(): print(&#x27;这是使用装饰器的demo&#x27;)demo2()# 这是inner函数的语句1# 这是将要使用装饰器的demo# 这是inner函数的语句2 统计函数执行时间12345678910111213141516171819202122232425import timedef cal_time(f): def inner(): time1 = time.perf_counter() f() time2 = time.perf_counter() elapsed = time2 - time1 print(f&#x27;函数运行了&#123;elapsed&#125;s&#x27;) return elapsed return inner@cal_timedef func(): for i in range(5): time.sleep(0.1) print(&#x27;func运行结束&#x27;)func()# func运行结束# 函数运行了0.5152184049999999s @wraps1234567891011121314151617181920import timedef cal_time(f): @wraps(f) def inner(): time1 = time.perf_counter() f() time2 = time.perf_counter() print(f&#x27;函数运行了&#123;time2 - time1&#125;s&#x27;) return inner@cal_timedef func(): for i in range(5): time.sleep(0.1) print(&#x27;func运行结束&#x27;)print(func)print(func.__name__) 装饰器的嵌套1234567891011121314151617181920212223242526272829303132# 装饰器的嵌套def outer1(func): def inner1(): print(&#x27;装饰器1————1&#x27;) func() print(&#x27;装饰器1————2&#x27;) return inner1def outer2(func): def inner2(): print(&#x27;装饰器2————3&#x27;) func() print(&#x27;装饰器2————4&#x27;) return inner2@outer2@outer1def demo(): print(&#x27;这是demo函数————5&#x27;)demo()# 装饰器2————3# 装饰器1————1# 这是demo函数————5# 装饰器1————2# 装饰器2————4 装饰带有参数的函数12345678910111213141516def outer(func): def inner(name): print(&#x27;关于谁最美丽这件事&#x27;) func(name) return inner@outerdef love(name): print(f&#x27;&#123;name&#125;女士最美丽&#x27;)love(&#x27;duandaun&#x27;)# 关于谁最美丽这件事# duandaun女士最美丽 12345678910111213141516171819202122import timedef cal_time(f): def inner(li): t1 = time.perf_counter() f(li) t2 = time.perf_counter() print(f&#x27;函数&#123;f&#125;执行了&#123;t2-t1&#125;s&#x27;) return inner@cal_timedef sort_fun(li): for i in range(len(li)-1): for j in range(len(li)-1-i): if li[j] &gt; li[j+1]: li[j],li[j+1] = li[j+1],li[j] return lili = [5,4,3,2,1]sort_fun(li)print(li) 装饰带有多参数的函数1234567891011121314151617181920def outer(func): def inner(who, name, *args, **kwargs): print(f&#x27;&#123;name&#125;回来啦&#x27;) func(who, name, *args, **kwargs) return inner@outerdef date(who, name, *args, **kwargs): print(f&#x27;&#123;who&#125;今天和&#123;name&#125;出门约会啦&#x27;) print(f&#x27;我们吃了&#123;args[0]&#125;&#x27;) print(f&#x27;还一起看了电影&#123;kwargs&#125;&#x27;)date(&#x27;huanghuang&#x27;, &#x27;duandaun&#x27;, &#x27;烤肉&#x27;, movie=&#x27;笨小孩&#x27;)# duandaun回来啦# huanghuang今天和duandaun出门约会啦# 我们吃了烤肉# 还一起看了电影&#123;&#x27;movie&#x27;: &#x27;笨小孩&#x27;&#125; 带有参数的装饰器123456789101112131415161718192021222324252627# 如果你的装饰器需要有参数，那么给当前的装饰器套一个壳，用于接收装饰器的参数def extend_m(var): def outer(func): def inner1(name): print(f&#x27;今天和&#123;name&#125;一起吃烤肉&#x27;) func(name) def inner2(name): print(f&#x27;今天和&#123;name&#125;一起吃火锅&#x27;) func(name) if var == &#x27;烤肉&#x27;: return inner1 else: return inner2 return outer@extend_m(&#x27;烤肉&#x27;)def date(name): print(f&#x27;和&#123;name&#125;约会啦，很开心!&#x27;)date(&#x27;duanduan&#x27;)# 今天和duanduan一起吃烤肉# 和duanduan约会啦，很开心! 类装饰器修饰函数12345678910111213141516171819202122232425262728293031323334353637383940414243# 类装饰器装饰函数class Outer(): # 魔术方法：当把该类的对象当做函数调用时，自动触发obj() def __call__(self, func): self.func = func return self.inner def inner(self, who): print(f&#x27;和&#123;who&#125;一起看电影啦&#x27;) self.func(who) print(&#x27;约会吃烤肉啦哇&#x27;)# 注意这里应该是Outer()# Outer() ===&gt; obj, @obj ===&gt;obj(date) , call （date）===&gt; inner()@Outer()def date(who): print(f&#x27;今天和&#123;who&#125;约会啦&#x27;)date(&#x27;duanduan&#x27;)# 和duanduan一起看电影啦# 今天和duanduan约会啦# 约会吃烤肉啦哇class Outer: def __init__(self,func): self.func = func def __call__(self,*args, **kwargs): print(&quot;今天出门啦&quot;) result = self.func(*args, **kwargs) print(&quot;今天结束啦&quot;) return result@Outerdef date(who): print(f&quot;今天和&#123;who&#125;出门约会啦&quot;) print(&quot;出门看电影、吃烤肉啦&quot;) return successprint(date(&quot;duanduan&quot;)) 带有参数的类装饰器1234567891011121314151617181920class Outer: def __init__(self, name): self.name = name def __call__(self,func): def inner(*args, **kwargs): print(&quot;今天出门啦&quot;) print(f&quot;和&#123;self.name&#125;出门约会啦&quot;) result = func(*args, **kwargs) print(&quot;今天结束啦&quot;) return result return inner@Outer(&quot;duanduan&quot;)def date(place:str): print(f&quot;今天去&#123;place&#125;&quot;) print(&quot;出门看电影、吃烤肉啦&quot;) return successprint(date(&quot;北京&quot;)) 用类方法装饰函数1234567891011121314151617class Outer(): def newinner(func): Outer.func = func # 把传递进来的函数定义为类方法 return Outer.inner # 同时返回一个新的类方法 def inner(who): print(f&#x27;和&#123;who&#125;一起看电影啦&#x27;) Outer.func(who) print(f&#x27;约会吃烤肉啦哇&#x27;)@Outer.newinner # Outer.newinner(date) ===&gt; Outer.innerdef date(who): print(f&#x27;今天和&#123;who&#125;约会啦&#x27;)date(&#x27;duanduan&#x27;) 使用函数装饰器装饰类123456789101112131415161718192021def extend_c(cls): def func2(): print(&#x27;在装饰器中扩展的新方法func2&#x27;) cls.func2 = func2 # 将刚才定义的方法赋值给类 cls.name = &#x27;在装饰器中追加的新属性&#x27; # 返回时，把追加类新成员的类返回 return cls@extend_c # extend_c(Demo) ===&gt; cls ===&gt; Democlass Demo(): # 定义一个类方法 def func(): print(&#x27;Demo类中的func方法&#x27;)Demo.func() # Demo类中的func方法Demo.func2() # 在装饰器中扩展的新方法func2print(Demo.name) # 在装饰器中追加的新属性 使用类装饰器装饰类123456789101112131415161718192021222324252627class Extend_c(): def __call__(self, cls): self.cls = cls return self.newfunc def newfunc(self): self.cls.name = &#x27;在类装饰器中追加的新属性&#x27; self.cls.func2 = self.func2 # 返回 return self.cls() def func2(self): print(&#x27;在类装饰器中追加的新方法 func2&#x27;)@Extend_c() # Extend_c() ===&gt; obj ===&gt; @obj(Demo) ===&gt; __call__(Demo) ===&gt; newfunc()class Demo(): # 定义一个普通的方法 def func(self): print(&#x27;Demo类中的一个普通的方法&#x27;)obj = Demo()obj.func() # Demo类中的一个普通的方法obj.func2() # 在类装饰器中追加的新方法 func2print(obj.name) # 在类装饰器中追加的新属性print(obj) # &lt;__main__.Demo object at 0x10e77ddd0&gt; 更新: 2024-05-16 12:24:07原文: https://www.yuque.com/zacharyblock/cx2om6/fas3gy4akb8thh3c","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"http://example.com/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python进阶-上下文管理器","slug":"Python进阶/上下文管理器","date":"2023-01-08T12:44:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2023/01/08/Python进阶/上下文管理器/","permalink":"http://example.com/2023/01/08/Python%E8%BF%9B%E9%98%B6/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/","excerpt":"","text":"上下文管理器什么是上下文管理器 context manager 是一个对象 定义了运行时的上下文 使用with语句来执行 格式： 1234with context as ct: # 对上下文对象ct的使用# 上下文对象已经被清除 文件的读写 12345678# 不用上下文管理器fileObj = open(&quot;file.txt&quot;,&quot;w&quot;)fileObj.write(&quot;This is my file&quot;)fileObj.close()# 使用上下文管理器with open(&quot;file.txt&quot;,&quot;w&quot;) as fileObj: fileObj.write(&quot;This is my file&quot;) 使用with语句，会在代码块结束时，自动帮我们关闭文件，无需手动触发 close()方法 在with语句，开始前会触发__enter__(self) 在with语句结束后会触发__exit__(self, exc_type, exc_val, exc_tb) as后面的对象 实际是在调用完__enter__后获取到的返回值 使用上下文管理器实现一个耗时计算函数 123456789101112131415161718192021222324252627# 不使用上下文管理nums = [i for i in range(10000)]random.shuffle(nums)start = time.perf_counter()sorted(nums)end = time.perf_counter()elapsed = end - startprint(elapsed)# 使用上下文管理# 创建一个Timer 上下文管理类class Timer: def __init__(self): self.elapsed = 0 def __enter__(self): self.start = time.perf_counter() return self def __exit__(self, exc_type, exc_val, exc_tb): self.end = time.perf_counter() self.elapsed = self.end - self.startwith Timer() as timer: sorted(nums)print(timer.elapsed) 应用场景： 文件的开-关 加锁-释放 启动-停止 更新: 2024-01-09 02:16:57原文: https://www.yuque.com/zacharyblock/cx2om6/ofmfwtiq1h6wysmp","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"http://example.com/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python面向对象-ATM 项目","slug":"Python面向对象/ATM项目","date":"2022-12-31T17:46:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2022/12/31/Python面向对象/ATM项目/","permalink":"http://example.com/2022/12/31/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/ATM%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"ATM 项目ATM 系统项目说明文档运用基础阶段所学的 Python 知识，来模拟出银行的 ATM 系统。 要求：使用面向对象编程来完成这个项目 ATM 系统的主要功能： 注册：用户名，手机号，身份证号（18 位），密码（两次确认，长度 6 位） 查询：账号必须存在，密码（3 次机会，不对就锁卡） 取款：账号必须存在，密码（3 次机会，不对就锁卡），取款金额不能大于存款 存款：账号必须存在，存款金额不能低于 0 元 转账：您的账户，转款账户都必须存在，密码（3 次机会，不对就锁卡），转账金额不能超过余额 锁卡：账号必须存在，可以使用密码冻结，还可以使用身份证号冻结 解卡：账号必须存在，只能使用身份证号进行解锁 补卡：使用身份证进行补卡，每个身份证只能有一张卡，之前的卡作废 改密：原密码进行改密，也可以使用身份证进行改密 退出：保存数据 项目分析根据需求进行分析，思考如何对项目进行设计和架构 思考问题一：如何使用面向对象编程思想来完成当前的项目功能和项目演示中，有几个对象？ 银行卡对象: Card 存储银行卡信息 卡号: cardid 密码: password 余额: money 是否锁卡: islock 用户对象: Person 存储用户信息 用户名: name 身份证号: userid 手机号: phone 卡号: card 控制器对象: Controller 具体的操作控制类控制器对象中主要就是去实现 ATM 这个系统中的操作 在上面定义的呐十个方法 注册：register 查询：query 取款：get_money 存款：add_money 转账：save_money 锁卡：lock 解卡：unlock 补卡：new_card 改密：change_pwd 退出：save 视图对象：Views 显示操作界面欢迎界面，操作界面 思考问题二：如何存储数据肯定是用文件进行存储 卡号：用户 &#x3D;&#x3D;&#x3D;&gt; user_dict &#x3D;&#x3D;&#x3D;&gt; user.txt 身份证：卡号 &#x3D;&#x3D;&#x3D;&gt; user_id_dict &#x3D;&#x3D;&#x3D;&gt; userid.txt 项目基本结构搭建ATM项目说明文档 项目基本功能当前的 ATM 系统模拟实现银行 ATM 机的操作系统功能 注册：register 查询：query 取款：get_money 存款：add_money 转账：save_money 锁卡：lock 解卡：unlock 补卡：new_card 改密：change_pwd 退出：save 项目基本结构123456789101112├── ATM/ # 项目目录│ ├── README.md # 项目文档│ ├── databases/ # 数据存储目录│ │ ├── user.txt # 卡号│ │ └── userid.txt # 身份证│ ├── main.py # 程序单入口文件│ └── packages/ # 包│ ├── __init__.py│ ├── cardclass.py # 银行卡类│ ├── controllerclass.py # 操作控制类│ ├── personclass.py # 用户类│ └── viewsclass.py # 视图显示类 运行环境 系统：windows、Mac OS、Linux 版本：python3.5+ 其他：无 迭代计划 增加银行操作日志 将数据存储更改为数据库 MySQL 详细内容见代码https://github.com/BlockZachary/Python_oop&#x2F;tree&#x2F;master&#x2F;ATM 更新: 2024-01-10 22:46:43原文: https://www.yuque.com/zacharyblock/cx2om6/ozwmftr5d8430maz","categories":[{"name":"Python面向对象","slug":"Python面向对象","permalink":"http://example.com/categories/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python面向对象-异常、模块、包","slug":"Python面向对象/异常、模块、包","date":"2022-12-31T17:41:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2022/12/31/Python面向对象/异常、模块、包/","permalink":"http://example.com/2022/12/31/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%BC%82%E5%B8%B8%E3%80%81%E6%A8%A1%E5%9D%97%E3%80%81%E5%8C%85/","excerpt":"","text":"异常、模块、包异常处理什么是异常异常就是 非正常 没有达到预期目标 的非语法错误，会影响程序正常执行，Python 解释器不能正常处理的问题 异常分两种： 语法错误导致的异常 逻辑错误导致的异常 对于不可预知的异常错误，可以使用 try…except…对异常进行处理 常用的异常类继承关系 1234try: 可能发生异常错误的代码except: 如果发生了异常则进入except代码块 1234567891011121314151617181920212223242526272829303132333435363738394041# 异常例子varlist = [1,2,3]print(varlist[3])&quot;&quot;&quot;运行结果为：Traceback (most recent call last): File &quot;/Users/zachary/PycharmProjects/Python教程阶段1/code_oop/41什么是异常.py&quot;, line 6, in &lt;module&gt; print(varlist[3])IndexError: list index out of range其中：IndexError 异常类list index out of range 异常信息&quot;&quot;&quot;# 异常处理除法val = input(&quot;请输入一个数字:&quot;)try: num = int(val) res = 10 / num print(res)except ValueError as e: print(&quot;not input number value&quot;)except ZeroDivisionError as e: print(&quot;can not input 0&quot;)# 异常处理文件try: with open(&#x27;./user.txt&#x27;, &#x27;r&#x27;) as file: res = file.read() print(res)except: print(&#x27;file not exist&#x27;)print(&#x27;other program&#x27;)# file not exist# other program try_except_else_finally try 执行可能会引发错误的代码块 except 捕获异常并输出 else 如果 try 代码块没有出错就会执行 finally 无论 try 有无错误都会执行 raise 可以抛出一个异常 assert 断言，后面的表达式如果正确 什么也不做，如果表达式错误，则抛出异常 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889# 1.处理指定的异常，引发了非指定的异常，无法处理try: varlist = [1, 2, 3] print(varlist[3])except IndexError as e: print(e) # list index out of range# 2.多分支处理异常try: s = &#x27;duanduan&#x27; res = int(s)except ValueError as e: print(&#x27;ValueError&#x27;, e)except KeyError as e: print(&#x27;KeyError&#x27;, e)except IndexError as e: print(&#x27;IndexError&#x27;, e)# ValueError invalid literal for int() with base 10: &#x27;duanduan&#x27;# 3.通用异常类 Exceptiontry: s = &#x27;duanduan&#x27; res = s[10]except Exception as e: print(&#x27;Exception&#x27;, e)# Exception string index out of range# 4.多分支异常类+通用异常类try: s = &#x27;duanduan&#x27; res = int(s)except KeyError as e: print(&#x27;KeyError&#x27;, e)except IndexError as e: print(&#x27;IndexError&#x27;, e)except Exception as e: print(&#x27;Exception&#x27;, e)# Exception invalid literal for int() with base 10: &#x27;duanduan&#x27;# 5.try except elsetry: s = &#x27;duandaun&#x27; res = str(s)except KeyError as e: print(&#x27;KeyError&#x27;, e)except IndexError as e: print(&#x27;IndexError&#x27;, e)except Exception as e: print(&#x27;Exception&#x27;, e)else: print(&#x27;try中没有错误&#x27;)# try中没有错误# 6.try except else finallytry: s = &#x27;duandaun&#x27; res = str(s)except KeyError as e: print(&#x27;KeyError&#x27;, e)except IndexError as e: print(&#x27;IndexError&#x27;, e)except Exception as e: print(&#x27;Exception&#x27;, e)else: print(&#x27;try中没有错误&#x27;)finally: print(&#x27;代码执行完毕，这句肯定输出&#x27;)# try中没有错误# 代码执行完毕，这句肯定输出# 7. 主动抛出异常 raisetry: raise Exception()except Exception as e: print(&#x27;Exception&#x27;, e)# Exception# 8. assert 断言 后面的表达式正确什么耶不做 错误的话 抛出异常try: assert 1 == 2except AssertionError as e: print(&#x27;AssertionError&#x27;, e)# AssertionError 自定义异常类123class InvalidInputArgument(Exception): def __init__(self,*args): super().__init__(args) 当异常出现时，对异常信息写入日志 123456789101112131415161718192021222324252627&quot;&quot;&quot;在出现异常后，对异常进行处理，并且把异常信息写入日志日志的基本格式： 日期时间 异常的级别 异常信息：引发的异常类，异常的信息，文件及行号&quot;&quot;&quot;import tracebackimport loggingclass Myexception(): def __init__(self): # logging 基本配置 logging.basicConfig( filename=&#x27;./error.log&#x27;, # 日志存储的文件目录 format=&#x27;%(asctime)s %(levelname)s \\n %(message)s&#x27;, datefmt=&#x27;%Y-%m-%d %H:%M:%S&#x27; ) # 写入日志 logging.error(traceback.format_exc())try: res = int(&#x27;duanduan&#x27;)except: Myexception() 模块与包定义的一个 python 文件，后缀名为.py 这个文件被称为模块 模块中通常会定义一些相似的类，函数等代码内容，提供给别的程序引入后使用 系统模块 系统模块就是一个 python 的程序脚本，专门提供给我们自己的程序使用。 它们是安装好 python 环境的时候，就已经存在的，需要的时候可以使用 import 导入到程序中使用 import logging, json, math, time 自定义模块 就是自己创建的一个 python 脚本，定义一些类或方法，供别的脚本导入后使用 自定义模块的使用12345678910111213141516171819# 使用方式之一import Exceptiontry: res = int(&#x27;duanduan&#x27;)except: Exception.MyException() Exception.output() print(Exception.var)# 使用方式之二from Exception import *try: res = int(&#x27;duanduan&#x27;)except: MyException() output() print(var) 自定义包和使用包可以理解为是一个文件夹，里面包含了多个 python 文件 包的结构 12345678└── package_fa ├── __init__.py # 包的标志性文件（可以有内容，也可以没有） ├── a.py # a模块（文件） ├── b.py # b模块（文件） └── package_son ├── __init__.py ├── c.py └── d.py 实际上，**init.py 可以实现一个功能在导入包的时候，想要使用from package_fa import *的时候需要在 package_fa下的**init.py下写入：**all &#x3D; [‘module1’,’module2’,…]这里的module1，2 指的就是在 package_fa下的模块名称** 来做一个测试叭，首先在当前项目文件夹下创建一个类似上述的目录结构 之后编写代码进行测试 12345678910111213141516171819202122232425# 使用1：导入指定的包中的模块from package_fa import aa.funca() # funca# 使用2：从指定包的指定模块导入指定的内容from package_fa.b import funcbfuncb() # funcb# 使用3：从指定包的子包中导入模块from package_fa.package_son import cc.funcc() # funcc# 使用4：从指定包的子包的指定模块导入指定内容from package_fa.package_son.d import funcdfuncd() # funcd# 使用5: 需要在package_fa 中的__init__.py写入模块列表# 格式为: __init__.py ===&gt; __all__ = [&#x27;a&#x27;,&#x27;b&#x27;]from package_fa import *a.funca() 可以讲一下：name &#x3D; main, 导入方式的分类绝对导入 会使用[搜索路径]去查找和导入指定的包或模块 import module import package import package.module from module import content from package import module from package.module import content 相对导入from .package&#x2F;module import module&#x2F;content from ..package&#x2F;module import module&#x2F;content . 表示当前目录 .. 表示上一级目录 123456789101112def funcc(): print(&#x27;funcc&#x27;)# 假设在c.py中需要d.py 可以使用相对导入，但是不要直接运行c.pyfrom .d import funcdfuncd()# 假设想要在c中使用上一级的afrom .. import aa.funca() 123from package_fa.package_son import c# funcd# funca 单入口程序单入口程序指的是整个程序都是经过一个主程序文件在运行，其他程序都封装成了包或模块 1234567891011ATM└── main.py # 当前程序的主入口文件，单入口文件，唯一直接运行的文件├── package/ # 主要程序模块包 ├── __init__.py # 包的初始化文件 ├── View.py # 视图函数模块 ├── Controller.py # 控制器模块 ├── Card.py # 银行卡模块 └── User.py # 用户模块└── databases/ # 数据存储文件夹 ├── user.txt └── user_id_card.txt Python 中的第三方库的管理 pip第三方库的管理网站https://pypi.org/ pip 的使用 查看 pip 版本 pip -V 安装 pip install -i &lt;仓库镜像的地址&gt; 包名(库名) pip3 install -i [http://mirrors.aliyun.com/pypi/simple/](http://mirrors.aliyun.com/pypi/simple/) --trusted-host mirrors.aliyun.com mysqlclient==2.1.1 常用镜像地址 阿里云 http://mirrors.aliyun.com/pypi/simple/ 豆瓣 http://pypi.douban.com/simple/ 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/ 华中科技大学 http://pypi.hustunique.com/ 安装指定版本的包 pip install &lt;package&gt;==&lt;版本&gt; 查看已经安装的 package pip list 检查 package 是否已经过期 pip list outdated 卸载 package pip uninstall &lt;包名&gt; 查看 package 的依赖 pip show &lt;包名&gt; Python 中的虚拟环境 venv虚拟环境就是在当前的系统环境中，去配置另外一个 python 的运行环境，是可以创建多个不同的虚拟环境 python 的虚拟环境相互独立，互不影响 虚拟环境中可以在没有权限的情况下安装库（Linux 系统中可能会出现的问题） 不同的应用可以使用不同的库或者不同的版本 虚拟环境中的库升级也不影响其他环境 虚拟环境可以作为一个项目的专有环境，在需要部署的时候，可以一键导出项目所需要的包 如何创建一个虚拟环境 使用 pycharm 创建 自己安装独立的虚拟环境 安装虚拟环境工具 pip install virtualenv 创建虚拟环境 python3 -m venv &lt;虚拟环境名称&gt; 激活虚拟环境 source &lt;虚拟环境名称&gt;/bin/activate 退出虚拟环境 deactivate 导出当前环境项目包 pip freeze &gt; ./requirements.txt 通过 requirement 安装依赖包 pip install -r requirement.txt 更新: 2024-01-27 22:21:03原文: https://www.yuque.com/zacharyblock/cx2om6/ql4zdyscp3ffck91","categories":[{"name":"Python面向对象","slug":"Python面向对象","permalink":"http://example.com/categories/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python面向对象-面向对象高阶","slug":"Python面向对象/面向对象高阶","date":"2022-12-31T17:31:00.000Z","updated":"2024-12-07T14:42:41.089Z","comments":true,"path":"2022/12/31/Python面向对象/面向对象高阶/","permalink":"http://example.com/2022/12/31/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E9%98%B6/","excerpt":"","text":"面向对象高阶内置成员 获取当前类\\对象的所属成员，返回一个字典包含类或对象的成员 类名.dict 对象名.dict 获取类的文档信息，就是定义类后对类的一个说明 类名.doc 对象名.doc 获取类名称，结果返回字符串 类名.name 获取类所在的文件名称，如果是当前文件就会返回main 类名.module 获取当前类的父类或者父类列表列表 类名.base 类名.bases 获取类的继承关系 类名.mro 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class A(): passclass B(): passclass Demo(A, B): &quot;&quot;&quot; 这是类的说明文档 &quot;&quot;&quot; name = None age = None def func(self): print(&#x27;这是一个方法&#x27;)res = Demo.__dict__print( res) # &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: &#x27;\\n 这是类的说明文档\\n &#x27;, &#x27;name&#x27;: None, &#x27;age&#x27;: None, &#x27;func&#x27;: &lt;function Demo.func at 0x10076b560&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Demo&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Demo&#x27; objects&gt;&#125;d = Demo()res = d.__dict__print(res) # &#123;&#125;res = Demo.__doc__print(res)## 这是类的说明文档#res = d.__doc__print(res)## 这是类的说明文档#res = Demo.__name__print(res) # Demores = Demo.__module__print(res) # __main__res = Demo.__base__print(res) # &lt;class &#x27;__main__.A&#x27;&gt;res = Demo.__bases__print(res) # (&lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;)print(Demo.mro()) # [&lt;class &#x27;__main__.Demo&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]print(Demo.__mro__) # (&lt;class &#x27;__main__.Demo&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;) 方法的分类对象方法在类中定义的方法，含有 self 参数 含有 self 的方法，只能使用对象进行调用 该方法会把调用的对象传递进来 12345678910# 对象方法class Demo(): def fun(self): print(self) print(&#x27;this is func&#x27;)d = Demo()d.fun()# &lt;__main__.Demo object at 0x10cc92150&gt;# this is object method 类方法在类中定义的方法，使用了装饰器@classmethod 进行装饰的类 方法中有 cls 这个形参，不需要实例化对象就可以直接用类调用的方法 会把调用这个方法的类传递进来 1234567891011# 类方法class Cdemo(): @classmethod def fun(cls): print(cls) print(&#x27;this is class method&#x27;)Cdemo.fun()# &lt;class &#x27;__main__.Cdemo&#x27;&gt;# this is class method 绑定类方法绑定类方法就是在类中，不带有形参 self 的一个方法 调用的时候直接使用类调用，无法使用对象调用 不会传递任何参数进来 12345678# 绑定类方法class Bdemo(): def func(): print(&#x27;this is bind class func&#x27;)Bdemo.func()# this is bind class func 静态方法在类中定义的方法，使用了装饰器@staticmethod 进行装饰的类 类中，不带有形参 self 的一个方法,也没有其他参数 可以使用类或者对象直接调用 不会传递任何参数 静态方法只是定义在类范围内的一个函数而已 12345678910# 静态方法class Sdemo(): @staticmethod def func(): print(&#x27;this is a static method&#x27;)s = Sdemo()s.func() # this is a static methodSdemo.func() # this is a static method 常用函数 检测一个类是否为另一个类的子类 issubclass(son,fa) 检测一个对象是否是一个类的实例化 isinstance(obj,cls) 检测一个类&#x2F;对象是否具有一个成员属性 hasattr(obj&#x2F;cls,attr) 获取类&#x2F;对象成员的值 getattr(obj&#x2F;cls,attr) 设置类&#x2F;对象成员的值 setattr(obj&#x2F;cls,attr,value) 删除类&#x2F;对象的成员属性 delattr(obj&#x2F;cls,attr) dir() 获取当前对象所可以访问的成员列表 123456789101112131415161718192021222324252627282930313233343536373839404142class A(): def hello(self): print(&#x27;hello&#x27;)class B(A): passclass C(A): passclass D(B, C): name = None def get_hello(self): print(&#x27;hello&#x27;)print(issubclass(D, B)) # Trued = D()print(isinstance(d, D)) # Trueprint(isinstance(d, B)) # Trueprint(hasattr(d, &#x27;hello&#x27;)) # Trueprint(hasattr(d, &#x27;get_hello&#x27;)) # Trueprint(hasattr(d, &#x27;name&#x27;)) # Trueres = getattr(d, &#x27;name&#x27;)print(res) # Nonesetattr(d, &#x27;name&#x27;, &#x27;zachary&#x27;)print(d.name) # zacharydelattr(d,&#x27;name&#x27;)print(d.name) # Noneres = dir(d)print(res) 魔术方法魔术方法就是不需要手动调用就可以自动执行的方法 init 初始化方法 触发机制：当实例化对象之后就会立即触发的方法 作用：为当前创建的对象完成一些初始化的操作，比如：成员属性的赋值，方法的调用，打开或创建一些资源 参数：一个 self，接受当前对象，其他参数根据需求进行定义即可 返回值：无 注意事项：无 new 构造方法构造一个对象的过程是： 1234person = Person(&quot;Jack&quot;)实际上做了两件事情1. person = object.__new__(Person, &quot;Jack&quot;)2. person.__init__(&quot;Jack&quot;) 触发机制：实例化对象时自动触发（在init之前触发） 作用：管理控制对象创建的过程 参数：一个 cls 接受当前类，其他参数根据初始化方法的参数进行决定 返回值：必须返回 object.new(cls)进行对象的创建，如果没有返回值，则实例化的对象的结果为 None 注意事项： new方法的参数和init方法的参数要保持一致，除了第一个参数 必须返回 object.new(cls)进行对象的创建，如果没有返回值，则实例化对象的结果为 None 通常情况下，定义了new，就不用再定义init方法了 应用场景：设计模式中的单例设计模式 1234567891011121314151617181920class Square(int): def __new__(cls,value:int): return super().__new__(cls,value**2)num = Square(2)print(num)print(type(num))print(isinstance(num, int))class Student: def __new__(cls,name,gender): obj = super().__new__(cls) obj.name = name obj.gender = gender return objstudent = Student(&quot;zachary&quot;,&quot;male&quot;)print(student.name)print(student.gender) del 析构方法 触发机制：当该类对象被销毁时，自动触发 作用：关闭或释放对象创建时打开或创建的一些资源 参数：一个 self，接受当前对象 返回值：无 注意事项：无 call 触发机制：把对象当做函数直接调用时自动触发 作用：一般用于归纳类或对象的操作步骤，方便调用 参数：一个 self 接收当前对象，其他参数根据调用需求确定 返回值：可有可无 1234567891011121314151617181920212223242526272829303132class Person(): # 构造方法 def __new__(cls, *args, **kwargs): print(&#x27;触发了构造方法&#x27;) print(args) return object.__new__(cls) # 必须要有这一句才能返回object对象,才能触发init # 初始化方法 def __init__(self, name, age, gender): print(&#x27;触发了初始化方法&#x27;) self.name = name self.age = age self.gender = gender def __call__(self, *args, **kwargs): print(&#x27;你把对象当成了函数进行调用&#x27;) # 析构方法 def __del__(self): print(&#x27;触发了析构方法&#x27;)# 实例化对象duanduan = Person(&#x27;duandaun&#x27;, 23, &#x27;female&#x27;)duanduan()# 触发了构造方法# (&#x27;duandaun&#x27;, 23, &#x27;female&#x27;)# 触发了初始化方法# 你把对象当成了函数进行调用# 触发了析构方法 len可以代替对象使用 len 函数，并返回一个指定的整型 触发机制：当使用 len 函数去检测当前对象的时候自动触发 作用：可以使用 len 函数检测当前对象中某个数据的信息 参数：一个 self 接收当前对象 返回值：必须有，并且必须是一个整数 注意事项：len 要获取什么属性的值，就在返回值中返回那个属性的长度即可 str可以代替对象进行 str 或者 print 的字符串信息返回 触发机制：当使用 str 或者 print 函数对对象进行操作时自动触发 作用：代码对象进行字符串的返回，可以自定义打印的信息；该描述面向用户 参数：一个 self，接受当前对象 返回值：必须有，而且必须是字符串类型的值 repr 触发机制：在使用 repr 方法对当前对象进行转换时自动触发，某种情况 print 也可以触发 作用：可以设置 repr 函数操作对象的结果；该描述的主要目标是机器或者开发者 参数：一个 self 接受当前对象 返回值：必须有，而且必须是字符串类型的值 注意：正常情况下，如果没有str这个魔术方法，repr方法就会代替str魔术方法，可以使用 print 进行触发 bool 触发机制：当使用 bool 函数转换当前对象时，自动触发 作用：可以代替对象进行布尔类型的转换，可以转换任何数据 参数：一个 self 接收对象 返回值：必须是一个布尔类型的返回值，如果没有实现bool方法，会去掉用len的结果求解 bool 值 eq 触发机制：当使用==比较两个对象的内容是否相同的时候 作用：对比两个对象是否相等的逻辑 参数：一个 self 接收对象，other 接收另一个对象 返回值：必须有 Bool 类型 hash 触发机制：使用hash()方法 或者 将该对象加入到 set、dict 等需要调用 hash()方法的时候会调用 作用：根据对象生成 hash 值的逻辑 参数：一个 self 接收对象 返回值：hash 值 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class Demo(): listurl = [] def __len__(self): return len(self.listurl) def __str__(self): return &#x27;这是当前脚本中的一个对象&#x27; def __repr__(self): return &#x27;这是一个对象&#x27;obj = Demo()res = len(obj)print(res) # 0# 使用__str__print(obj) # 这是当前脚本中的一个对象res = str(obj)print(res) # 这是当前脚本中的一个对象# 注释掉__str__, 只使用__repr__print(obj) # 这是一个对象# 不用注释掉__str__, 使用__repr__res = repr(obj)print(res) # 这是一个对象# 使用bool without __bool__res = bool(obj)print(res) # False 因为listurl是空的，若listurl有值，则为Trueclass MyDate(): def __init__(self,year,month,day): self.year = year self.month = month self.day = day def __eq__(self,other): if not isinstance(other,MyDate): return False return self.year == other.year and self.month == other.month and self.day == other.day def __hash__(self): print(&quot;__hash__被调用了&quot;) return hash(self.year + self.month * 41 + self.day * 41)# eqmydate1 = MyDate(2023,1,4)mydate2 = MyDate(2023,1,4)mydate3 = mydate1print(mydate1 is mydate2)print(mydate1 is mydate3)print(mydate1 == mydate2)print(mydate1 == mydate3)# hashtest_set = set()test_set.add(mydate1)print(hash(mydate2)) str 与 reprstr 和 repr 函数都能够把其他类型的数据转化为字符串类型 str 函数会把对象 转为 更适合人类阅读的形式 repr 函数会把对象 转为 更适合解释器读取的形式 如果数据对象并没有明显的区别的话，str 和 repr 结果是一样的 成员相关魔术方法 getattribute(self, item) 触发机制：当访问对象成员时，自动触发，无论当前成员是否存在，也无论当前成员是否有值 作用：可以在获取对象成员时，对数据进行一些处理 返回值：可有可无，返回的值就是访问的结果 注意事项： 在当前的魔术方法中，禁止使用 对象.成员 的方式进行成员访问，会触发递归 如果想要在当前魔术方法中访问对象的成员必须使用 object 来进行访问 格式： object.getattribute(self, item) getattr 触发机制：当访问对象中不存在的成员时，自动触发 作用：防止访问不存在的成员时报错，也可以为不存在的成员进行赋值操作 参数：一个 self 接收当前对象，一个 item 接收当前访问的成员名称 返回值：可有可无 注意事项： 如果有getattribute存在，就会无法使用getattr，会直接调用到getattribute 也要注意，不要在当前的方法中再次去访问这个不存在的成员，会触发递归操作 setattr 触发机制：当给对象的成员进行赋值操作时会自动触发（包括添加、修改） 作用：可以限制或管理对象成员的添加和修改操作 参数：1.self 接收当前对象 2.设置的成员名 3.设置的成员值 返回值：无 注意事项： 在当前的魔术方法中禁止给当前对象的成员直接进行赋值操作，会触发递归操作， 如果想要给当前对象的成员进行赋值，需要借助 object 格式：object.setattr(self,key,value) 该方法中如果没有给对象成员进行赋值，那么对象成员赋值失败 delattr 触发机制：当删除对象成员时自动触发 作用：可以去限制对象成员的删除，还可以删除不存在成员时的报错 参数：1.self 接收当前对象 2.item 删除的成员名称 返回值：无 注意事项： 在当前魔术方法中禁止直接删除对象的成员，会触发递归操作 如果想要删除当前对象的成员，那么需要借助 object 格式：object.delattr(self,item) 访问一个成员的顺序 调用 getattribute魔术方法 调用数据描述符 调用当前对象的成员属性 调用当前类的成员 调用非数据描述符 调用父类的成员 调用getattr魔术方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class Person(): name = &#x27;名字&#x27; age = &#x27;年龄&#x27; gender = &#x27;性别&#x27; def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def say(self): print(&#x27;聊一聊，倾诉一下&#x27;) def sing(self): print(&#x27;庄先生，高歌一曲&#x27;) # 获取成员对象时候 自动触发 def __getattribute__(self, item): try: # 在方法中只能使用object获取属性值 res = object.__getattribute__(self, item) return res[0] + &#x27;*&#x27; + res[-1] except: return False def __getattr__(self, item): print(item) return False def __setattr__(self, key, value): object.__setattr__(self, key, value) def __delattr__(self, item): object.__delattr__(self, item)duan = Person(&#x27;duanduan&#x27;, 23, &#x27;female&#x27;)print(duan.name) # d*nprint(duan.salary) # False# 把 __getattribute__ 注释掉print(duan.name) # duanduanprint(duan.salary)# salary# False# 把 __getattribute__ 注释掉duan.salary = 10000print(duan.salary) # 10000# 把 __getattribute__ 注释掉del duan.salaryprint(duan.salary) # salarydel duan.nameprint(duan.name)# False# 名字 描述符与 property当一个类中，包含了三个魔术方法（get,set,delete）之一，或者全部，那么这个类就被称为描述符类 基本语法描述符的作用： 描述符的作用就是对一个类中的某个成员进行一个详细的管理操作（获取、赋值、删除） 描述符就是代理了一个类中的成员的操作，描述符属于类，只能定义为类的属性 一个类中的成员的值是另一个描述符类的对象() 那么当对这个类中的成员进行操作时，可以理解为就是对另一个对象的操作 使用格式：把当前的描述符类赋值给一个需要代理的类中的成员属性 1234567891011121314151617181920212223242526class PersonName(): __name = &#x27;duanduan&#x27; def __get__(self, instance, owner): # print(self,instance,owner) return self.__name def __set__(self, instance, value): # print(self,instance,value) self.__name = value def __delete__(self, instance): del self.__nameclass Person(): # 把类中的成员属性交给描述符来实现 name = PersonName()duan = Person()print(duan.name) # duanduanduan.name = &#x27;duanxiaozhu&#x27;print(duan.name) # duanxiaozhudel duan.nameprint(duan.name) # duanduan 实际上真正的用法应该是下面这个例子，还需要额外使用一个 __set_name__(self, owner, name)方法 给属性赋值 1234567891011121314151617class PersonName: def __set_name__(self, owner, name): self.__property_name = name def __set__(self, instance, value): # 做一些校验 if not isinstance(value, str): raise Exception(f&quot;&#123;self.__property_name&#125; is not a str type&quot;) if len(value) == 0: raise Exception(f&quot;&#123;self.__property_name&#125; is empty&quot;) instance.__dict__[self.__property_name] = value def __get__(self, instance, owner): if self.__property_name in instance.__dict__: return instance.__dict__[self.__property_name] return None 应用案例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&#x27;&#x27;&#x27;定义一个学生类，需要记录，学员的id、名字、分数解决方法： 1. 在__init__方法中检测当前分数范围的合法性 但是这个方法只能在初始化的时候有效，之后修改的话就无效了 2. 定义一个__setattr__的魔术方法进行检测 检测给分数进行赋值的时候的一个合法性假如 学员的分数不止一个时怎么办，比如 语文分数、数学分数、英语分数 甚至类中的代码比较多的情况解决方法： 3. 可以使用描述符来代理我们分数这个属性&#x27;&#x27;&#x27;# 定义一个学生类，需要记录，学员的id、名字、分数# 解决方法：1. 2.class Student(): def __init__(self,id,name,score): self.id = id self.name = name if score &gt;= 0 and score &lt;=100: self.score = score else: print(&#x27;当前分数出错啦&#x27;) def returnShe(self): info = f&#x27;&#x27;&#x27; 学号：&#123;self.id&#125; 姓名：&#123;self.name&#125; 分数：&#123;self.score&#125; &#x27;&#x27;&#x27; print(info) def __setattr__(self, key, value): # 检测是否是给score进行赋值操作 if key == &#x27;score&#x27;: if value &gt;= 0 and value &lt;= 100: object.__setattr__(self,key,value) else: print(&#x27;当前分数出错啦&#x27;) else: object.__setattr__(self,key,value)duan = Student(2022,&#x27;duanduan&#x27;,100)duan.returnShe()duan.score = 1000duan.returnShe()#解决方法： 3. 使用描述符来代理我们分数这个属性# 定义描述符类class Score(): def __set__(self, instance, value): if value &gt;= 0 and value &lt;= 100: self.__score = value else: print(&#x27;当前分数出错啦&#x27;) def __get__(self, instance, owner): return self.__score def __delete__(self, instance): passclass Student(): score = Score() def __init__(self,id,name,score): self.id = id self.name = name self.score = score def returnShe(self): info = f&#x27;&#x27;&#x27; 学号：&#123;self.id&#125; 姓名：&#123;self.name&#125; 分数：&#123;self.score&#125; &#x27;&#x27;&#x27; print(info)duan = Student(2022,&#x27;duanduan&#x27;,100)duan.returnShe()duan.score = 1000duan.returnShe() 三种定义方式 数据描述符(完整) 同时具备三个魔术方法的类就是 数据描述符 非数据描述符 （不完整） 没有同时具备三个魔术方法的类就是 非数据描述符类 第一种123456789101112# 格式一 通过定义描述符类来实现class ScoreManage(): def __get__(self, instance, owner): pass def __set__(self, instance, value): pass def __delete__(self, instance): passclass Student(): score = ScoreManage() 第二种1234567891011121314151617181920212223242526# 格式二 使用property函数来实现class Studebnt(): def getscore(self): print(&#x27;getscore&#x27;) def setscore(self, value): print(&#x27;setscore&#x27;, value) def deletescore(self): print(&#x27;deletescore&#x27;) # 在property函数中指代对应的三个方法,并且参数要按顺序对应上 # 1.__get__ 2.__set__ 3.__delete__ score = property(getscore, setscore, deletescore)xs = Studebnt()print(xs.score)# getscore# None 因为上面的getscore没有返回值xs.score = 100 # setscore 100print(xs.score)# getscore# None 因为上面的getscore没有返回值del xs.score # deletescore 第三种1234567891011121314151617181920212223242526272829# 格式三 使用装饰器 @property 语法来实现class Student(): __score = None @property def score(self): print(&#x27;get&#x27;) return self.__score @score.setter def score(self, value): print(&#x27;set&#x27;) self.__score = value @score.deleter def score(self): print(&#x27;delete&#x27;) del self.__scorexs = Student()print(xs.score)# get# Nonexs.score = 100 # setprint(xs.score)# get# 100del xs.score # delete 设计模式设计模式是前人为了完成某个功能或需求，根据经验和总结，对实现的代码步骤和代码设计进行了总结和归纳。成为了实现某种需求的经典模式 设计模式并不是固定的，而是一种面向对象编程的设计 单例(单态)设计模式在当前脚本中，同一个类只能创建出一个对象去使用，这种情况就称为单例(单态) 数据库连接对象 共享对象 Python 中的单例模式设计思路， 1、需要有一个方法，可以去控制当前对象的创建 构造方法 new 2、需要有一个标识来存储和表示是否有对象 创建一个属性，进行存储，默认值为 None 3、在创建对象的方法中去检测和判断是否有对象？ 如果没有对象，则创建对象，并且把对象存储起来 如果存储的是对象，则直接返回对象，就不需要创建新的对象了 这个代码很重要1234567891011121314151617class Demo(): # 2.定义私有属性存储对象，默认值为None __obj = None # 1.定义构造方法 def __new__(cls, *args, **kwargs): # 3.在创建对象的过程中,判断是否有对象 if not cls.__obj: cls.__obj = object.__new__(cls) return cls.__obja = Demo()b = Demo()print(a) # &lt;__main__.Demo object at 0x10344e1d0&gt;print(b) # &lt;__main__.Demo object at 0x10344e1d0&gt; 使用装饰器来实现的话 1234567891011121314151617181920def singleton(cls): _obj = &#123;&#125; def inner(*args, **kwargs): if cls in _obj: return _obj[cls] obj = cls(*args, **kwargs) _obj[cls] = obj return obj return inner@singletonclass Demo: passa = Demo()b = Demo()print(a is b) 装饰器模式-2 1234567891011121314151617def singleton(cls): def inner(): if hasattr(cls,&quot;__obj&quot;): return getattr(cls,&quot;__obj&quot;) obj = cls() setattr(cls,&quot;__obj&quot;,obj) return obj return inner@singletonclass Demo: passa = Demo()b = Demo()print(a is b) 装饰器模式-3，使用元类来设计 12345678910111213141516class SingletonMeta(type): def __call__(cls, *args, **kwargs): if hasattr(cls,&quot;__obj&quot;): return getattr(cls,&quot;__obj&quot;) obj = super().__call__(*args, **kwargs) setattr(cls,&quot;__obj&quot;,obj) return objclass Demo(metaclasss=SingletonMeta): passa = Demo()b = Demo()print(a is b) mixin 混合设计模式继承需要一个必要的前提，继承应该是一个‘is-a’的关系 例如：苹果可以去继承水果，因为苹果是一个水果 Minin 表示混合 Minin 必须是表示一种功能，而不是一个对象 Minin 的功能必须单一，如果有多个功能，那就多定义 Minin 类 Python 中的 Minin 是通过多继承实现的 Minin 这个类通常不单独使用,而是混合到其他类中,去增加功能 Minin 类不依赖子类的实现,即便子类没有继承这个 Minin,子类也能正常运行,就是可能会缺少了一些功能 使用 Minin 混合类的好处 在不对类的内容修改的前提下，扩展了类的功能 Minin 混合类为了提高代码的重用性，使得代码结构更加简单清晰 可以根据开发需求任意调整功能（创建新的 Minin 类） 避免设计多层次的复杂继承关系 解决方案使用的还是多继承，但是给飞行器这个类的名称定义成为一个 Minin 混合类 这样的一个 Minin 混合类，功能单一、并且不会单独使用：只有一个飞行器的功能，在继承的时候不会单一继承这一个，作为一个扩展的功能 123456789101112131415161718192021222324252627282930# 解决方案使用的还是多继承，但是给飞行器这个类的名称定义成为一个 Minin 混合类# 这样的一个Minin混合类，功能单一、并且不会单独使用：只有一个飞行器的功能，在继承的时候不会单一继承这一个，作为一个扩展的功能# 交通工具类class vehicle(): def huo(self): print(&#x27;运输货物&#x27;) def ren(self): print(&#x27;搭载乘客&#x27;)# 飞行器类class flyingMixin(): def fly(self): print(&#x27;可以起飞啦&#x27;)# 定义汽车类class cart(vehicle): pass# 定义飞机类class airplane(vehicle,flyingMixin): pass# 定义直升机class helicopter(airplane,flyingMixin): pass 实现一个具体的列子 1234567891011121314class ItemMixin: def __getitem__(self, key): return self.__dict__[key] def __setitem__(self, key, value): self.__dict__[key] = valueclass Car(ItemMixin): def __init__(self, origin, auto): self.origin = origin self.auto = autocar = Car(&quot;Germany&quot;, True)print(car[&quot;origin&quot;]) 练习：把一个对象转换成 dict 和 json 格式，使用 mixin 设计模式 12345678910111213141516171819202122232425262728293031323334353637class DictMixin: def to_dict(self): return self.__dictConvert(self.__dict__) def __dictConvert(self, dicAttrs: dict): resDict = &#123;&#125; for key, value in dicAttrs.items(): resDict[key] = self.__valueConvert(value) return resDict def __valueConvert(self, value): if isinstance(value, DictMixin): return value.to_dict() elif isinstance(value, dict): return self.__dictConvert(value) elif isinstance(value, list): return [self.__valueConvert(i) fot i in list] elif hasattr(value,&#x27;__dict__): return self.__dictConvert(value) else: return valueclass JSONMixin: def to_json(self): return json.dumps(self.to_dict())class Car(DictMixin, JSONMixin): def __init__(self, origin, auto): self.origin = origin self.auto = autocar = Car(&quot;Germany&quot;,True)print(car.to_dict())print(car.to_json()) 抽象类 抽象类是一个特殊的类 抽象类不能用，不能直接实例化成为一个对象 抽象类中包含了抽象方法，抽象方法就是没有实现的代码的方法 抽象类需要子类继承，并重写父类的抽象方法，才可以使用 如果要定义一个抽象类，需要继承metaclass=abc.ABCMeta类 或者 ABC 如果要定义一个抽象方法，需要使用装饰器进行装饰@abc.abstractmethod 抽象类不能直接实例化 想要实现一个抽象类，需要定义一个子类去继承抽象类，然后实现抽象类中的抽象方法 1234567891011121314151617181920212223242526272829303132333435363738import abcclass AbsCls(metaclass=abc.ABCMeta): @abc.abstractmethod def absmethod(self): pass def othermethod(self): print(&#x27;这是一个实现了的方法&#x27;)class sonclass(AbsCls): def absmethod(self): print(&#x27;son实现了抽象类的抽象方法&#x27;)class daughterclass(AbsCls): def absmethod(self): print(&#x27;daughter实现了抽象类的抽象方法&#x27;)def method_call(abscls: AbsCls): abscls.absmethod()obj = sonclass()obj.absmethod()obj.othermethod()# 实现了抽象类的抽象方法# 这是一个实现了的方法son = sonclass()daughter = daughterclass()method_call(son)method_call(daughter) 枚举基本用法作用：代码中的数值，不便于阅读和查错 123class Student: def __init__(self): self.gender = 1 # male 1 female 0 定义枚举类：通过继承 enum.Enum实现一个枚举类 可以通过字符串 用[]获取到对应的枚举类型 可通过整数类型转换 用()获取到对应的枚举类型 枚举类本身是可以迭代的（比如 下拉列表，需要获取全部选项） 123456789101112131415161718192021222324252627282930from enum import Enumclass Gender(Enum): MALE = 1 FEMALE = 2class Student: def __init__(self): self.gender = Gender.MALEprint(Gender.MALE.name)print(Gender.MALE.value)# 可以通过字符串 用[]获取到对应的枚举类型gender_str = &quot;MALE&quot;student = Student()student.gender = Gender[gender_str]print(student.gender)# 也可通过整数类型转换 用()获取到对应的枚举类型gender_int = 2student.gender = Gender(gender_int)print(student.gender)# 遍历枚举成员for gender in Gender: print(gender) 枚举成员的别名 枚举类中的多个成员具有同一个 value 时，只有一个能成为主要成员，其余是别名 可以通过__members__获取枚举类的所有成员 唯一枚举装饰器 @enum.unique（为了避免 不允许重复 value 的情况下出错，比如有时候复制粘贴会写出两个相同 value 的枚举 然后忘记修改的情况，可以使用唯一枚举装饰器进行处理） 12345678910111213141516171819202122class ResStatus(Enum): SUCCESS = 1 OK = 1 FAIL = 2 NO = 2for rs in ResStatus: print(rs.name)#获取枚举类所有成员print(ResStatus.__members__)print(ResStatus.SUCCESS == ResStatus.OK)print(ResStatus.SUCCESS is ResStatus.OK)@num.uniqueclass Status(Enum): SUCCESS = 1 OK = 1 FAIL = 2 NO = 2 枚举的扩展 __str__ 12345678910class ResStatus(Enum): SUCCESS = 1 OK = 1 FAIL = 2 NO = 2 def __str__(self): print(f&quot;&#123;self.name&#125;(&#123;self.value&#125;)&quot;)print(ResStatus.OK) __eq__ 12345678910111213141516171819class ResStatus(Enum): SUCCESS = 1 OK = 1 FAIL = 2 NO = 2 def __eq__(self,other): if isinstance(other,int): return self.value == other if isinstance(other,str): return self.name == other.upper() if isinstance(other,ResStatus): return self is other return Falseprint(ResStatus.OK == 1) __lt__ 需要使用@total_ordering 123456789101112131415161718@total_orderingclass OrderOfProcess(Enum): START = 1 PROCESSING = 2 TEST = 3 END = 4 def __lt__(self): if isinstance(other,int): return self.value &lt; other if isinstance(other,OrderOfProcess): return self.value &lt; other.value return Falseprint(OrderOfProcess.PROCESSING &lt; 2)print(OrderOfProcess.END &lt; OrderOfProcess.TEST) auto() 按顺序给枚举成员赋值 123class ResStatus(Enum): SUCCESS = auto() FAIL = auto() 更新: 2024-01-11 22:37:47原文: https://www.yuque.com/zacharyblock/cx2om6/yke47fm8vxrh2w6g","categories":[{"name":"Python面向对象","slug":"Python面向对象","permalink":"http://example.com/categories/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python面向对象-面向对象基础","slug":"Python面向对象/面向对象基础","date":"2022-12-31T17:29:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2022/12/31/Python面向对象/面向对象基础/","permalink":"http://example.com/2022/12/31/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/","excerpt":"","text":"面向对象基础课程介绍 面向对象基础 面向对象高阶 异常 模块与包 项目（ATM&#x2F;Library） 面向对象是什么面向对象编程 ——（Object Oriented Programming，简称 OOP），是一种以对象为中心的程序设计思想 面向过程编程 ——（Procedure Oriented Programming，简称 POP），是一种以过程为中心的程序设计思想 面向对象的总结和类与对象面向过程面向过程的核心是过程，过程就是只解决问题的步骤 优缺点 优点：将负责的问题流程化，进而实现简单化 缺点：扩展性差（更新、维护、迭代） 总结：再去完成一些简单的程序时，可以使用面向过程去解决，但是如果有复杂的程序或任务，而且需要不断的进行迭代和维护，那么肯定是优先选择面向对象的编程思想 面向对象面向对象的核心是对象，是一个特征和功能的综合体 优缺点 优点：可扩展性高 缺点：变成复杂度相对面向过程高一些，指的是在计算机在执行面向对象的程序时的性能表现 面向对象中的一些名称(术语) 类：类是对象的一个抽象的概念 对象：对象是类创建的一个实例 类和对象的关系就是：模具和铸件 类是由对象总结而来的，总结的这个过程叫做抽象 对象是由类具体实施出来的，这个过程叫做实例化 面向对象-基本实现如果需要实例一个对象，那么需要先抽象一个类 类名的书写规范：使用驼峰命名法 大驼峰：MyCar、XiaoMi 小驼峰：myCar、xiaoMi 例如需要创建一个汽车对象，先要创建一个汽车类 使用 class 定义一个类 一个类中有属性和方法 属性：就是特征，即变量，类中称为属性；分为类属性和实例属性 方法：就是功能，即函数，在类中称为方法；分为类方法和实例方法 类中的属性一般定义在方法前面 12345678910111213141516171819class Cart(): # 属性 color = &#x27;白色&#x27; brand = &#x27;Audi&#x27; pailiang = 2.4 # 方法 def lahuo(self): print(f&#x27;&#123;self.color&#125;的&#123;self.brand&#125;能拉货&#x27;) def doufeng(self): print(f&#x27;排量&#123;self.pailiang&#125;能兜风&#x27;)mycar = Cart()print(mycar, type(mycar)) # &lt;__main__.Cart object at 0x100b338d0&gt; &lt;class &#x27;__main__.Cart&#x27;&gt;print(mycar.brand) # Audimycar.lahuo() # 白色的Audi能拉货mycar.doufeng() # 排量2.4能兜风 对象成员的操作什么是对象的成员？ 一个对象通过实例化之后，在类中定义的属性和方法，可以使用实例化的对象进行操作 类中定义的属性就是成员属性，类中定义的方法就是成员方法 对象的成员操作： 在类的外部，使用对象操作成员 通过对象访问类中的属性 先访问对象自己的属性 若对象自己没有这个属性，就去访问对象的类的属性 修改对象访问的类的属性 实际上修改的并不是对象的类的属性 而是创建了一个对象自己的属性并赋值 给对象添加属性 这是给对象创建了自己的属性 不是对象的类的属性 删除属性 只能删除对象属性，不能删除对象访问的类属性 在类的外部 通过对象，访问类中的方法 访问对象的方法 先访问对象自己的方法 若对象自己没有这个方法，则访问对象的类的方法 修改对象的方法 实际上修改的并不是对象的类方法 而是创建了一个对象的方法并调用 给对象添加方法 这创建的是对象的新方法，并没有给对象的类创建方法 删除对象的方法 同样只能删除对象的方法，对象的类的方法无法删除 总结：一个类定义类成员属性和成员方法，那么通过这个类实例化的对象，也具备这些方法和属性嘛？ 实际上，在创建对象的时候，并不会把类中的属性和方法也复制一份给对象，实际上是在对象中引用类的方法，所以不同对象调用同一个属性或方法，是相通的。 因此在访问对象的属性时，会先去寻找对象自己的属性，如果没有去找类的属性和方法 而如果给对象的属性或方法进行修改或者添加的时候，等于给对象创建了一个自己的属性和方法，并不调用类的，而且删除的时候也只能删除对象本身的添加或修改的那个属性和方法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778class Cart(): # 属性 color = &#x27;白色&#x27; brand = &#x27;Audi&#x27; pailiang = 2.4 # 方法 def lahuo(self): print(f&#x27;&#123;self.color&#125;的&#123;self.brand&#125;能拉货&#x27;) def doufeng(self): print(f&#x27;排量&#123;self.pailiang&#125;能兜风&#x27;)a = Cart()b = Cart()print(a) # &lt;__main__.Cart object at 0x104e27250&gt;print(b) # &lt;__main__.Cart object at 0x104e31450&gt;# 通过对象访问类中的属性res = a.colorprint(res) # 白色res = b.colorprint(res) # 白色# 修改对象的属性a.color = &#x27;黑色&#x27;print(a.color) # 黑色print(b.color) # 白色# 给对象添加属性a.name = &#x27;A6L&#x27;print(a.name) # A6Ltry: print(b.name) # b不存在except: print(&#x27;b不存在&#x27;)# 删除属性，只能删除对象属性，不能删除对象访问的类属性try: del a.name print(&#x27;成功&#x27;) # 成功except: print(&#x27;不成功&#x27;)try: del a.brand # 不能删除对象的类属性except: print(&#x27;不能删除对象的类属性&#x27;)# 访问对象的方法a.doufeng() # 排量2.4能兜风# 修改对象的方法def newfunc(): print(&#x27;这是一个新的方法&#x27;)a.doufeng = newfunca.doufeng() # 这是一个新的方法# 给对象添加方法a.xiuche = newfunca.xiuche() # 这是一个新的方法# 删除对象的方法try: del a.brand # 不能删除类方法 print(&#x27;可以删除类方法&#x27;)except: print(&#x27;不能删除类方法&#x27;)try: del a.xiuche # 可以删除对象的方法 print(&#x27;可以删除对象的方法&#x27;)except: print(&#x27;不能删除对象的方法&#x27;) 类成员的操作 访问类成员属性、方法 使用类名.类属性进行访问 使用 getattr()方法 使用类名.类方法(类名)进行访问 修改类成员属性、方法 使用类名.类属性&#x3D;新值进行修改 使用 setattr()方法 使用类名.类方法&#x3D;新方法()进行修改 修改后的类成员属性、方法就会彻底更新，创建一个新的对象调用类属性、方法，属性、方法会更新 添加类成员属性、方法 使用类名.新类属性&#x3D;新值进行新增 使用 setattr()方法 使用类名.新类方法&#x3D;新方法()进行新增 新增的类属性、类方法，可以被创建的对象访问到 删除类成员属性、方法 使用 del 类名.类属性删除类成员属性 使用 delattr()方法 使用 del 类名.类方法删除类成员方法 删除之后再使用对象访问类属性、方法会访问不到 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071class Cart(): # 属性 color = &#x27;白色&#x27; brand = &#x27;Audi&#x27; pailiang = 2.4 # 方法 def lahuo(self): print(f&#x27;&#123;self.color&#125;的&#123;self.brand&#125;能拉货&#x27;) def doufeng(self): print(f&#x27;排量&#123;self.pailiang&#125;能兜风&#x27;)# 访问类成员属性print(Cart.brand) # Audi# 修改类成员属性Cart.brand = &#x27;宝马&#x27;print(Cart.brand) # 宝马opp = Cart()print(opp.brand) # 宝马# 添加类成员属性Cart.name = &#x27;A7&#x27;print(Cart.name) # A7opp = Cart()print(opp.name) # A7# 删除类成员属性del Cart.brandtry: opp = Cart() print(opp.brand) # opp没有brandexcept: print(&#x27;opp没有brand&#x27;)# 访问类成员方法Cart.doufeng(Cart) # 排量2.4能兜风# 修改类成员方法def newm(self): print(&#x27;这是一个新的方法&#x27;)Cart.doufeng = newmCart.doufeng(Cart) # 这是一个新的方法opp = Cart()opp.doufeng() # 这是一个新的方法# 添加类成员方法Cart.xinfangfa = newmCart.xinfangfa(Cart) # 这是一个新的方法opp = Cart()opp.xinfangfa() # 这是一个新的方法# 删除类成员方法del Cart.doufengtry: Cart.doufeng() # 类的成员对象已删除 print(&#x27;类的成员对象&#x27;)except: print(&#x27;类的成员对象已删除&#x27;)opp = Cart()try: opp.doufeng() # 对象没有doufeng print(&#x27;对象还有doufeng&#x27;)except: print(&#x27;对象没有doufeng&#x27;) 类与对象的总结 一个类可以实例化出多个对象，每个对象在内存中都独立存在 当通过类实例化对象时，并不会把类中的成员复制一份给对象，而去给对象了一个引用 访问对象成员的时候，如果对象自己没有这个成员，对象会向实例化它的类去查找 对象成员的添加和修改，都只会影响当前对象自己，不会影响类和其他对象 删除对象的成员时，必须是该对象自己具备的成员才可以 对类的成员操作，会影响通过这个类创建的对象，包括之前创建的 self 详解 self 在方法中只是一个形参，并不是关键字 self 在方法中代表的是当前这个对象自身 self 在方法中代表对象可以去操作成员，可以使用 self 在类的内部访问成员 只要是对象能完成的事情，self 都可以 在类中定义的方法，都需要有一个形参 self， 这样的方法称为非绑定类方法 可以使用对象和类去访问 否则，类中的方法没有形参 self，对象将无法调用这个方法，但是可以使用类去调用 这样的方法称为绑定类方法 只能使用类去访问 12345678910111213141516class Person(): name = &#x27;xiaoduan&#x27; age = 23 # 非绑定类方法 def introduce(self): print(f&#x27;i am &#123;self.name&#125; &#123;self.age&#125; years old&#x27;) # 绑定类方法 def func(): print(&#x27;这是一个绑定类方法&#x27;)duan = Person()duan.introduce() # i am xiaoduan 23 years oldPerson.func() # 这是一个绑定类方法 初始化方法_魔术方法魔术方法： 魔术方法也和普通方法一样都是类中定义的成员方法 就是不需要去手动调用的，会在某种情况下自动触发（自动执行） 特殊点：多数的魔术方法 前后都有两个连续的下划线 魔术方法不是我们自己定义的，是系统定义好的，我们使用 init 初始化方法 通过类实例化对象之后，自动触发的一个方法 作用：可以在对象实例化之后完成对象的初始化（属性的赋值，方法的调用） 应用场景：文件的打开，数据的获取 12345678910111213141516171819202122232425class Person(): name = &#x27;xiaoduan&#x27; age = 23 def __init__(self): print(&#x27;这是一个初始化方法&#x27;) self.introduce() def introduce(self): print(f&#x27;i am &#123;self.name&#125; &#123;self.age&#125; years old&#x27;)class Person2(): name = None age = None def __init__(self, name, age): self.name = name self.age = age print(f&#x27;i am &#123;self.name&#125; &#123;self.age&#125; years old&#x27;)duan = Person() # 这是一个初始化方法# i am xiaoduan 23 years oldhuang = Person2(&#x27;huang&#x27;, 24) # i am huang 24 years old 析构方法 del 析构方法 当前类实例化的对象被销毁时，自动触发 作用：可以在析构方法中完成一些特殊任务，关闭一些打开的资源，比如在初始化方法中打开的文件，可以在析构方法中关闭 注意：对象被销毁时，触发了这个方法，而不是这个方法销毁了对象 对象在哪些情况会被销毁： 当程序执行完毕，内存中所有的资源都会被销毁 使用 del 删除对象 对象不再被引用时，会自动销毁 123456789101112131415161718192021class writeLog(): # 成员属性 # 文件的路径 fileurl = &#x27;./&#x27; # 文件的名称 filename = &#x27;2022-3-9&#x27; def __init__(self): print(&#x27;写入日志初始化方法&#x27;) self.fileobj = open(self.fileurl+self.filename,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) def log(self,s): print(f&#x27;日志内容为：&#123;s&#125;&#x27;) self.fileobj.write(s) def __del__(self): print(&#x27;析构方法触发&#x27;) self.fileobj.close()obj = writeLog()obj.log(&#x27;今天温度适宜出行&#x27;) 日志类的封装 日志类 class Mylog 功能：能够随时写入一个日志信息 分析 日志文件在什么地方？ 默认在当前目录 日志文件名是什么？ 当前日期 2022-03-11.log 日志的格式是什么样的？ 2022-03-11 12:12:12 错误信息 属性：成员属性的作用就是存储信息，供成员方法来使用 fileurl 日志文件的地址 filename 日志文件的名称 fileobj 打开的文件对象 方法：具体完成的一个功能的过程 init() &#x3D;&#x3D;&gt; 初始化方法，完成对象的初始化，并打开文件 wlog() &#x3D;&#x3D;&gt; 负责接受用户给的日志信息，并写入到日志文件中 del() &#x3D;&#x3D;&gt; 析构方法，在对象被销毁时，关闭打开的文件 12345678910111213141516171819202122import timeclass Mylog(): fileurl = &#x27;./&#x27; filename = str(time.strftime(&#x27;%Y-%m-%d&#x27;)) + &#x27;.log&#x27; fileobj = None def __init__(self): # 打开文件 self.fileobj = open(self.fileurl+self.filename,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) def wlog(self,s): date = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;) msg = date+&#x27; &#x27;+s+&#x27;\\n&#x27; self.fileobj.write(msg) def __del__(self): # 关闭打开的文件 self.fileobj.close()log = Mylog()log.wlog(&#x27;变量赋值错误&#x27;) 面向对象的三大特性：封装、继承、多态封装封装就是使用特殊的语法,对成员属性和成员方法进行包装，达到保护和隐藏的目的 但是封装是为了限制一些访问和操作，但是不能全部都限制（不能不让使用） 被封装的成员只是限制了访问权限，并不是不让访问 通常情况下，被封装的成员主要是供内部使用 封装的级别 公有的 public 就是类中普通的成员属性 受保护的 protected 在类中的成员属性前 加一个 _ 受保护的成员 私有的 private 在类中的成员属性前 加两个 __ 私有的成员 封装的级别 公有的 public 受保护的 protected 私有的 private 在类的内部 OK OK OK 在类的外部 OK NO(Python 可以) NO 实际上私有是这么实现的 对于成员属性 &#x3D;&#x3D;&#x3D;&gt; _类名成员属性 进行了改写 12345678910111213141516171819202122232425262728293031323334353637383940class Resume(): # 成员属性 name = None _age = None __gender = None def __init__(self, name, age, gender): self.name = name self._age = age self.__gender = gender # 成员方法 def introduce(self): print(f&#x27;This is &#123;self.name&#125;&#x27;) print(self.__gender) def _experience(self): print(f&#x27;I am &#123;self._age&#125; years old&#x27;) def __superior(self): print(f&#x27;I am a &#123;self.__gender&#125;&#x27;)# 实例化对象duanduan = Resume(&#x27;duanduan&#x27;, 23, &#x27;female&#x27;)# 查看对象的所有属性print(duanduan.__dict__)try: print(duanduan.name) print(duanduan._age) # print(duanduan.__gender) # 在类的外部不能操作私有成员except: print(&#x27;NO&#x27;)duanduan._experience() # I am 23 years old# duanduan.__superior() # 在类的外部不能操作私有成员duanduan.introduce()# This is duanduan# female 继承单继承什么是继承？ 在面向对象中，一个类去继承父类，这个类就拥有了父类的所有成员(除了私有成员) 概念 被其他类继承的类，这个类称为父类 也叫做基类 或者 超类 继承其他类的类，这个类称为子类 也叫做派生类 子类可以有自己独立的成员，也可以没有 在不指定继承的父类时，所有类都继承自 object 类（系统提供） 子类继承了父类之后，就拥有了父类中所有的成员包括魔术方法（除了私有成员） 子类继承父类后，重新定义了父类中的方法，这种情况称为对父类方法的重写 在子类中可以直接调用父类中定义的方法super().父类方法名() 子类继承父类后，定义了父类中没有的方法，这种情况称为对父类的扩展 一个父类可以被多个子类继承 子类调用父类方法时，如果该方法有参数要求，也需要传递参数 继承的意义 提高代码的重用性，建立新的类与类的关系，方便其他逻辑的操作 继承语法格式 12345class 父类(): passclass 子类(父类): pass 1234567891011121314151617181920212223242526272829303132333435363738class maoke(): # 属性 maose = &#x27;猫纹&#x27; sex = &#x27;m&#x27; # 方法 def pao(self): print(&#x27;走猫步&#x27;) def pa(self): print(&#x27;能上树&#x27;)# 定义猫类 继承 猫科class mao(maoke): def zhua(self): print(&#x27;喜欢抓老鼠&#x27;) def pa(self): super().pa() print(&#x27;可以上树很快&#x27;)class bao(maoke): passh = mao()print(h.__dict__) # &#123;&#125;print(h.maose) # 猫纹h.zhua() # 喜欢抓老鼠h.pa()# 能上树# 可以上树很快b = bao()b.pa() # 能上树 多继承 单继承 一个类只能继承一个父类 多继承 一个类可以去继承多个父类 多继承语法格式 12345678class 父亲(): passclass 母亲(): passclass 子类(父亲,母亲): pass 如果在多继承的时候使用了super()，这个时候继承的方法优先是是第一个父类的，若第一个父类没有，寻找下一个父类 同时，在多继承时，若想指定某个父类的方法，使用父类.方法名(self) 123456789101112131415161718192021222324252627282930313233# 父亲类class F(): def eat(self): print(&#x27;魁梧、强壮&#x27;) def hello(self): print(&quot;F hello&quot;)# 母亲类class M(): def eat(self): print(&#x27;温文、尔雅&#x27;) def hello(self): print(&quot;M hello&quot;)# 子类class C(F, M): def eat(self): super().eat() # 魁梧、强壮 print(&#x27;挑食、闹腾&#x27;) def hello(self): # 指定使用父类的hello方法 F.hello(self) print(&quot;C hello&quot;)c = C()c.eat() # 挑食、闹腾c.hello() 菱形继承（钻石继承）123AB C D 可以使用 mro 方法获取 MRO 列表，就是类的继承关系 使用 super 去调用父级的方法时，实际上是在用 super 调用 MRO 列表中的上一级中的方法 使用 super 去访问父级的属性时，实际上是在用 super 访问 MRO 列表中的上一级中的属性 super()本身调用父级方法时，传递的 self 对象，就是这个方法中的那个 self 对象自己 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 人类class Human(): num = 1 def eat(self): print(self.num) print(&#x27;最最年长&#x27;)# 父亲类class F(Human): num = 2 def eat(self): super().eat() print(super().num) print(&#x27;魁梧、强壮&#x27;)# 母亲类class M(Human): num = 3 def eat(self): super().eat() # print(super().num) print(&#x27;温文、尔雅&#x27;)# 子类class C(F,M): num = 4 def eat(self): super().eat() # 魁梧、强壮 print(super().num) # 2 print(&#x27;挑食、闹腾&#x27;)c = C()c.eat()# 4# 最最年长# 温文、尔雅# 3# 魁梧、强壮# 2# 挑食、闹腾print(C.mro()) #[&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.F&#x27;&gt;, &lt;class &#x27;__main__.M&#x27;&gt;, &lt;class &#x27;__main__.Human&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;] 继承关系检测在实现继承的语法之后，程序会自动生成一个继承的列表(MRO（Method Realtion Order) 方法关系列表 MRO 列表生成原则： 子类永远在父类前 同一等级的类，按照子类中的继承顺序摆放 先子类，后父类的顺序原则，最终的类是系统提供的 object 类 [&lt;class ‘**main**.C’&gt;, &lt;class ‘**main**.F’&gt;, &lt;class ‘**main**.M’&gt;, &lt;class ‘**main**.Human’&gt;, &lt;class ‘object’&gt;] super()在调用的时候，并不是查找父类，而是去 MRO 列表上找上一个类 super()方法在调用时，会自动把当前 self 传入到上一级的类的方法中 类关系检测 issubclass() issubclass() 是一个类是否是另一个类的子类 1234567# 沿用之前的类print( C.mro()) # [&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.F&#x27;&gt;, &lt;class &#x27;__main__.M&#x27;&gt;, &lt;class &#x27;__main__.Human&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]print(issubclass(C, (F, M))) # Trueprint(issubclass(F, M)) # Falseprint(issubclass(C, Human)) # True 多态对于同一个方法，由于调用的对象不同，产生了不同形态的结果 1234567891011121314151617181920212223242526272829class Computer(): def usb(self, obj): obj.start()class Mouse(): def start(self): print(&#x27;鼠标启动成功&#x27;)class KeyBoard(): def start(self): print(&#x27;键盘启动成功&#x27;)class Udisk(): def start(self): print(&#x27;U盘启动了&#x27;)c = Computer()m = Mouse()k = KeyBoard()u = Udisk()c.usb(m) # 鼠标启动成功c.usb(k) # 键盘启动成功c.usb(u) # U盘启动了 多态——继承版12345678910111213141516171819202122232425262728class USB(): # 在USB类中定义一个规范的接口方法，但是不实现任何功能 def start(self): passclass Mouse(USB): def start(self): print(&#x27;鼠标启动成功&#x27;)class KeyBoard(USB): def start(self): print(&#x27;键盘启动成功&#x27;)class Udisk(USB): def start(self): print(&#x27;U盘启动了&#x27;)m = Mouse()k = KeyBoard()u = Udisk()m.start() # 鼠标启动成功k.start() # 键盘启动成功u.start() # U盘启动了 更新: 2024-01-23 06:42:42原文: https://www.yuque.com/zacharyblock/cx2om6/vak1xgsu38h6xhbv","categories":[{"name":"Python面向对象","slug":"Python面向对象","permalink":"http://example.com/categories/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python基础-内置模块","slug":"Python基础/内置模块","date":"2022-12-31T17:28:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2022/12/31/Python基础/内置模块/","permalink":"http://example.com/2022/12/31/Python%E5%9F%BA%E7%A1%80/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/","excerpt":"","text":"内置模块系统内置模块就是安装 Python 解释器之后，系统给提供的模块，在需要的时候可以导入使用 序列化模块序列化模块指的是可以把 Python 中的数据，以文本或二进制的方式进行转换，并且还能反序列化为原来的数据 为什么需要序列化：一般来说数据在程序与网络中进行传输和存储时，需要以更加方便的形式进行存储和传输，因此需要对数据进行序列化 文本序列化模块 json 二进制序列化模块 pickle pickle 序列化 pickle 模块提供的函数 dumps() 序列化，返回一个序列化后的结果，可以把一个 Python 的任意对象序列化成为一个二进制 loads() 反序列化，返回一个反序列化后的 Python 对象，可以把一个序列化后的二进制数据反序列化为 Python 对象 dump(var,fp) 序列化，把一个数据对象进行序列化并写入到文件中 参数 1 var 需要序列化的数据对象 参数 2 fp 写入的文件对象 load(fp) 反序列化，在一个文件中读取序列化的数据，并且完成一个反序列化 fp 带读取的文件对象 1234567891011121314151617181920212223242526272829303132333435363738import picklevar = &#x27;I miss you&#x27;res1 = pickle.dumps(var)print(res1, type(res1)) # b&#x27;\\x80\\x03X\\n\\x00\\x00\\x00I miss youq\\x00.&#x27; &lt;class &#x27;bytes&#x27;&gt;var = [1, 2, 3, 4]res2 = pickle.dumps(var)print(res2) # b&#x27;\\x80\\x03]q\\x00(K\\x01K\\x02K\\x03K\\x04e.&#x27;res1 = pickle.loads(res1)res2 = pickle.loads(res2)print(res1) # I miss youprint(res2) # [1, 2, 3, 4]# 把一个Python数据进行序列化后写入文件# 使用普通的dumps方法完成var = &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;res = pickle.dumps(var)with open(&#x27;./data.txt&#x27;, &#x27;wb&#x27;) as fp: fp.write(res)# 读取一个反序列化的二进制文件读取处理，并完成反序列化# 使用普通的loads方法完成with open(&#x27;./data.txt&#x27;, &#x27;rb&#x27;) as fp: res = fp.read() res = pickle.loads(res) print(res) # &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;# 把一个Python数据进行序列化后写入文件# 使用dump方法完成var = &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;with open(&#x27;./data2.txt&#x27;, &#x27;wb&#x27;) as fp: pickle.dump(var, fp)# 使用load方法读取with open(&#x27;./data2.txt&#x27;, &#x27;rb&#x27;) as fp: newdict = pickle.load(fp)print(newdict) # &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125; json 序列化JSON(JavaScript Object Notation) 是一个轻量级数据交换格式 JSON 在 JavaScript 中是一个对象的表示方法，和 Python 中的字典的定义规则和语法都很像 在互联网中是一种通用的数据交换、数据传输、数据定义的一种数据格式 Python 中提供 json 模块，可以把一些符合转换的 python 数据对象，转换为 json 格式的数据 json.dumps() 将一个 Python 数据序列化为 json 格式 json.loads() 将一个序列化后的 json 对象反序列化为 Python 格式 json.dump() 将一个 Python 数据序列化为 json 格式并写入文件 json.load() 将一个 json 序列化后的文件反序列化回 Python 的格式 123456789101112131415161718192021222324import jsonvardict = &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;print(vardict, type(vardict)) # &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125; &lt;class &#x27;dict&#x27;&gt;# json序列化res = json.dumps(vardict)print(res, type(res)) # &#123;&quot;name&quot;: &quot;duanduan&quot;, &quot;age&quot;: 24, &quot;boyfriend&quot;: &quot;huanghuang&quot;&#125; &lt;class &#x27;str&#x27;&gt;# json反序列化res = json.loads(res)print(res, type(res)) # &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;# 使用json写文件vardict = [&#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;]with open(&#x27;./data3.json&#x27;, &#x27;w&#x27;) as fp: json.dump(vardict, fp)with open(&#x27;./data3.json&#x27;, &#x27;r&#x27;) as fp: newdict = json.load(fp)print( newdict) # [&#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;] 数学模块-math math 模块下的一些函数 math.ceil() 向上取整 内置函数中的 round() 是四舍五入 math.floor() 向下取整 math.pow() 计算数值的 n 次方，结果是浮点 math.sqrt() 开平方运算，结果是浮点 math.fabs() 计算绝对值，结果是浮点 math.modf() 把一个数值拆分成小数和整数组成的元组 math.copysign() 将第二个参数的正负号，赋值给第一个参数 math.fsum() 对一个容器类型数据进行求和，结果是浮点数 1234567891011121314151617181920212223242526import mathr1 = math.ceil(2.25)r2 = round(2.25)print(r1, r2) # 3 2r1 = math.floor(2.25)print(r1, r2) # 2 2res = math.pow(2, 3)print(res) # 8.0res = math.sqrt(16)print(res) # 4.0res = math.fabs(-3.14)print(res) # 3.14res = math.modf(3.14)print(res) # (0.14000000000000012, 3.0)res = math.copysign(3.14, -9.9)print(res) # -3.14res = math.fsum([1.14, 2.35, 3.46, 4, 5])print(res) # 15.95 随机模块-random导入 random 模块之后 random.random() 返回 0-1（左闭右开） 之间的随机小数 random.randrange(开始值,结束值[,步进值]) 随机获取指定范围内的整数 random.randint() 随机产生指定范围内的随机整数 random.uniform() 随机产生指定范围内的随机小数 random.choice() 随机获取容器类型中的值 random.shuffle() 随机打乱一个容器的值，无返回值 123456789101112131415161718192021222324import randomres = random.random()print(res)res = random.randrange(5)print(res)res = random.randrange(5,10)print(res)res = random.randrange(5,10,2)print(res)res = random.randint(2,8)print(res)res = random.uniform(3,9)print(res)varlist = [1,2,3,4,5,6,7]res = random.choice(varlist)print(res)random.shuffle(varlist)print(varlist) 系统接口模块-os os.getcwd() 返回当前文件工作目录&#x2F;路径 os.chdir() 修改当前工作目录，类似于 linux 的 cd 命令 os.listdir() 查看指定目录下所有文件 类似于 ls 命令，不指定目录时候，即当前目录下的 os.mkdir(path,mode&#x3D;0o777,dir_fd&#x3D;None) 在指定位置创建一个文件夹，只能一个，若不指定位置，则在当前目录下创建一个文件夹 path:为所要创建的文件夹名称，默认在当前工作目录下，但也可以先使用 os.chdir()，修改工作目录，可以是直接在 name 处写入要新建文件夹的位置路径带上新建文件夹名称 mode&#x3D;0o777:这个是一个系统权限，分别代表着文件所有人（user）、文件所属组（group）、其他人（other），所有数字加起来就是 777，参数必须带上 0o 但是这里有问题，无法真的给到权限 777，因为 python 无法传讲一个比自己这个进程权限还要高的文件 可以使用 linux 命令 sudo chmod -R 777 文件名 os.makedirs(name,mode) name：所要创建的文件路径 这次可以递归创建啦，就算存在没有的文件夹，也可以迭代创建好 mode：同样是权限 os.rmdir() 删除空文件夹，不能递归调用，否则报错 os.removedirs() 递归删除空文件夹，若叶子目录被删除掉，会尝试删除父目录，若父目录也是空的目录，则会删除，直到该目录不是空的 但是！！ 因为 mac 系统下创建一个文件夹后会在该目录下创建一个.DS_Store 隐藏文件，因此这个文件夹不再是空文件夹了 os.remove() 删除文件 os.rename() 修改文件或文件夹的名字 os.rename(‘.&#x2F;a’,’.&#x2F;AAA’) os.system() 可以执行系统命令比如 linux 下的 ls cd 命令等等 12345678910111213141516171819import osres = os.getcwd()print(res) # /Users/zachary/PycharmProjects/Python教程阶段1/codeos.chdir(&#x27;/Users/zachary&#x27;)res = os.getcwd()print(res) # /Users/zacharyres = os.listdir()print(res)res = os.listdir(path=&#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code&#x27;)print(res)os.mkdir(path=&#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code/newdir&#x27;,mode=0o777)os.makedirs(&#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code/newdir/a/b/c&#x27;)os.system(&#x27;ls&#x27;) 关于系统中的权限 -rw-r–r– 1 zachary staff 120 2 28 21:24 data3.txt drwxr-xr-x 5 zachary staff 160 2 28 15:22 file 第一位 d 代表这个是一个文件夹&#x2F;目录，如果是-代表是一个文件 前三位代表文件所有人（user） 中间三位代表文件所属组（group） 最后三位代表其他人（other） 其中 r w x 代表不同的操作权限 r 表示可读 &#x3D;&#x3D;&#x3D;&#x3D; 4 w 表示可写 &#x3D;&#x3D;&#x3D;&#x3D; 2 x 表示可执行 &#x3D;&#x3D;&#x3D; 1 系统接口模块-os.path os.path 是系统模块中的路径 os.path.abspath() 该方法可以把一个相对路径转换成一个绝对路径 os.path.basename() 返回路径中的最后一个部分 os.path.dirname() 获取路径中的路径部分 返回路径中最后一个部分之前的部分 os.path.join() 链接多个路径、组成一个新的路径 os.path.split() 将一个路径拆分成主体和最后两个部分，以元组返回 os.path.splitext() 将一个路径拆分成主体和后缀两部分，后缀为文件后缀 os.path.getsize() 将返回路径所在文件的文件大小，返回值为字节 os.path.isdir() 检测文件夹是否存在 os.path.isfile() 检测文件是否存在 os.path.exists() 检测文件或者路径是否存在 os.path.samefile() 检测两个文件路径是否指向同一个目标位置(两个路径必须真实) 123456789101112131415161718192021222324252627282930313233343536import osres = os.path.abspath(&#x27;./&#x27;)print(res) # /Users/zachary/PycharmProjects/Python教程阶段1/coderes = os.path.basename(&#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code&#x27;)print(res) # coderes = os.path.dirname(&#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code&#x27;)print(res) # /Users/zachary/PycharmProjects/Python教程阶段1res = os.path.join(&#x27;./newdir/a/&#x27;, &#x27;2.jpg&#x27;)print(res) # ./newdir/a/2.jpgres = os.path.split(&#x27;./newdir/a/b/c&#x27;)print(res) # (&#x27;./newdir/a/b&#x27;, &#x27;c&#x27;)res = os.path.splitext(&#x27;./newdir/a/2.jpg&#x27;)print(res) # (&#x27;./newdir/a/2&#x27;, &#x27;.jpg&#x27;)res = os.path.getsize(&#x27;./83系统接口模块-os.py&#x27;)print(res) # 534res = os.path.isdir(&#x27;./newdir/a/b/c&#x27;)print(res) # Trueres = os.path.isfile(&#x27;./83系统接口模块-os.py&#x27;)print(res) # Trueres = os.path.exists(&#x27;./newdir/a/b/c&#x27;)print(res) # Truea = &#x27;./newdir/a/b/c&#x27;b = &#x27;./newdir/a/../a/b/c&#x27;res = os.path.samefile(a, b)print(res) # True 高级文件操作模块-shutil shutil.copy(A,B) 将路径 A 下的文件 copy 到路径 B 下的文件，在 B 下可以重命名 shutil.copy2(A,B) 与 copy 方法相似，但是会将原文件的信息(操作时间和权限等)一并复制 shutil.copyfile(A,B) 功能类似上述方法，但是 过程是打开文件 A，读取 A 中内容，并且写入到新的文件 B 中 shutil.copytree(A,B) 将整个 A 的目录结构和文件，拷贝到 B 去，B 必须不存在 shutil.rmtree() 删除整个文件夹 shutil.move(A,B) 将整个 A 移动到 B 去 shutil.make_archive(A,B,C) A: 创建的压缩文件名称 B: 指定压缩格式（zip、tar） C: 要压缩的文件或者文件夹路径 例子: shutil.make_archive(‘a’,’zip’,’.&#x2F;‘) 123456shutil.copy(&#x27;./data3.json&#x27;,&#x27;./newdir/a/data3_copy.json&#x27;)shutil.copy2(&#x27;./data3.json&#x27;,&#x27;./newdir/a/b/data3_same.json&#x27;)res = shutil.copyfile(&#x27;./data3.json&#x27;,&#x27;./newdir/a/b/data3_same.json&#x27;)print(res) 压缩模块-zipfile zipfile.ZipFile(路径包名，模式，压缩或打包) 压缩的使用格式 zipfile.ZipFile(‘data.zip’,’w’,zipfile.ZIP_DEFLATED) 解压缩的使用格式 zipfile.ZipFile(‘data.zip’,’r’) 123456789101112131415161718import osimport zipfile# 压缩文件with zipfile.ZipFile(&#x27;data.zip&#x27;,&#x27;w&#x27;,zipfile.ZIP_DEFLATED) as myzip: myzip.write(&#x27;data.txt&#x27;) myzip.write(&#x27;data2.txt&#x27;) myzip.write(&#x27;data3.json&#x27;)# 解压缩文件with zipfile.ZipFile(&#x27;data.zip&#x27;,&#x27;r&#x27;) as myzip: myzip.extractall(&#x27;./&#x27;)# 压缩文件夹下全部文件with zipfile.ZipFile(&#x27;data.zip&#x27;,&#x27;w&#x27;,zipfile.ZIP_DEFLATED) as myzip: arr = os.listdir(&#x27;./&#x27;) for i in arr: myzip.write(i) 时间模块-time time.time() 时间戳，返回从 1970 年 1 月 1 日至此时此刻的秒数,可以加参数给定时间戳，返回对应时间 time.ctime() 返回系统时间，字符串,可以加参数给定时间戳，返回对应时间 time.localtime() 返回系统时间，元组,可以加参数给定时间戳，返回对应时间 time.strftime() 格式化输出时间 time.sleep(s) 可以暂停当前线程的执行 time.perf_counter() 计算一个程序的执行时间 1234567891011121314151617181920212223242526272829303132import timeres = time.time()print(res) # 1646289842.415093res = time.ctime()print(res) # Thu Mar 3 14:46:59 2022res = time.localtime()print( res) # time.struct_time(tm_year=2022, tm_mon=3, tm_mday=3, tm_hour=14, tm_min=49, tm_sec=29, tm_wday=3, tm_yday=62, tm_isdst=0)t = 1640000009.7300968res = time.ctime(t)print(res) # Mon Dec 20 19:33:29 2021res = time.localtime(t)print( res) # time.struct_time(tm_year=2021, tm_mon=12, tm_mday=20, tm_hour=19, tm_min=33, tm_sec=29, tm_wday=0, tm_yday=354, tm_isdst=0)res = time.strftime(&#x27;%Y-%m-%d %H:%M:%S %w&#x27;)print(res) # 2022-03-03 15:02:04 4print(&#x27;start&#x27;)time.sleep(5)print(&#x27;over&#x27;)count = 0start = time.perf_counter()for i in range(10000000): count += 1end = time.perf_counter()print(end - start) # 0.9241935030000006 日历模块-calendar123456789101112131415161718192021222324252627282930import calendar# 返回指定年月的数据 月份的第一天是周几，和月份的总天数def calendar_my(year,month): res = calendar.monthrange(year, month) print(res) # (1,31) week = res[0] + 1 days = res[1] print(&#x27;一\\t二\\t三\\t四\\t五\\t六\\t日&#x27;) d = 1 count = 0 while count &lt; week - 1: print(&#x27;\\t&#x27;, end=&#x27;&#x27;) count += 1 while d &lt;= days: for i in range(1, 8): if d &gt; days: print(&#x27;\\t&#x27;, end=&#x27;&#x27;) else: print(d, end=&#x27;\\t&#x27;) count += 1 d += 1 if count % 7 == 0: print(&#x27;&#x27;)calendar_my(2022,3) 更新: 2023-12-31 17:28:38原文: https://www.yuque.com/zacharyblock/cx2om6/zo1eq941xoagbnig","categories":[{"name":"Python基础","slug":"Python基础","permalink":"http://example.com/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python基础-文件","slug":"Python基础/文件","date":"2022-12-31T17:27:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2022/12/31/Python基础/文件/","permalink":"http://example.com/2022/12/31/Python%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6/","excerpt":"","text":"文件基础操作-文件写入、文件打开的模式详解针对磁盘中的文件的读写。文件 I&#x2F;O I-input O-output 文件操作步骤 1.打开文件 2.读写文件 3.关闭文件 写入文件的操作 1.打开文件 open() 2.写入内容 write() 3.关闭文件 close() 读取文件的操作 1.打开文件 open() 2.读取内容 read() 3.关闭文件 close() open()打开文件格式：open(文件的路径，打开的方式，[字符集]) 参数 文件路径： 路径 url 统一资源定位符 相对路径：相当于给别人指路的时候，在那条街对面 针对文件的相对路径表示，从当前目录开始计算 1.txt &#x3D;&#x3D;&#x3D;&gt; 没有具体指明的话与.&#x2F;1.txt 是一个位置 .&#x2F;1.txt &#x3D;&#x3D;&#x3D;&gt; .&#x2F;代表当前目录中的 1.txt ..&#x2F;1.txt &#x3D;&#x3D;&#x3D;&gt; ..&#x2F;代表当前目录中的上一级目录下的 1.txt 绝对路径：类似于地址，具体到某个省市区街道小区门牌号 windows: c:&#x2F;users&#x2F;appdata&#x2F;1.txt linux: &#x2F;user&#x2F;home&#x2F;1.txt 打开方式： 基础模式： w r x a w w 模式 write 写入 文件如果不存在，则创建这个文件 文件如果存在，则打开这个文件，并清空里面的东西 文件打开后，文件的指针在文件的最前面 r r 模式 read 读取 文件如果不存在，则报错 文件如果存在，则打开文件 文件指针在文件的最前面 x x 模式 xor 异或模式 文件如果不存在，则创建这个文件 文件如果存在，则报错（防止覆盖） 文件指针在文件的最前面 a a 模式 append 追加模式 文件如果不存在，则创建文件 文件如果存在，则打开文件 文件指针在文件的最后 扩展模式： b b b 模式 bytes 二进制 + +模式 plus 增强模式（可读可写） 文件操作模式的组合 w,r,a,x wb,rb,ab,xb w+,r+,a+,x+ wb+,rb+,ab+,xb+ 可选参数：字符集 encoding 设置文件的字符集 如果是一个二进制的文件，不需要设置字符集 encoding&#x3D;’utf-8’ 12345fp = open(&#x27;./1.txt&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;)print(fp,type(fp)) # &lt;_io.TextIOWrapper name=&#x27;./1.txt&#x27; mode=&#x27;w&#x27; encoding=&#x27;utf-8&#x27;&gt; &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;fp.write(&quot;Hello Python file&quot;)fp.close() 结果会在当前目录下出现一个 1.txt 的文件，内容就是有一行 Hello Python file 打开模式的演示操作1234# 写入文件操作fp = open(&#x27;./1.txt&#x27;,&#x27;a&#x27;,encoding=&#x27;utf-8&#x27;)fp.write(&#x27;\\n你好&#x27;)fp.close() 文件操作的高级写法 12with open(文件路径，打开方式) as 变量: 变量.操作 1234with open(&#x27;./1.txt&#x27;,&#x27;r+&#x27;) as fp: res = fp.read() print(res) fp.write(res) 设置指针的位置 seek(0) 设置在最开始的位置 文件操作的相关函数write() 写入文件格式：文件对象.write(内容) write() 写入文件 内容必须是字符串类型 writeline() 写入文件 内容是一个容器,容器中的数据类型也必须是字符串 1234varlist = [&#x27;hello&#x27;,&#x27;this&#x27;,&#x27;is&#x27;,&#x27;content&#x27;]with open(&#x27;./file/1.txt&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.writelines(varlist) read() 读取文件 read() 格式：文件对象.read() 从当前指针位置读取到最后 格式：文件对象.read(读取的字节数) 可以读取指定长度的字符 readline() 读取一行 格式：文件对象.readline() 一次读取一行 格式：文件对象.readline(读取的字节数) 可以读取一行指定的字符个数 readlines() 读取多行后，保存成一个列表返回 1234567891011121314151617with open(&#x27;./file/2.txt&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as fp: res1 = fp.read() fp.seek(3) res2 = fp.read()print(res1) # newmessageprint(res2) # messagewith open(&#x27;./file/3.txt&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as fp: res = fp.readline() print(res) # Pycharm是一款开发Python常用 res = fp.readline(3) print(res) # 并且十with open(&#x27;./file/3.txt&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as fp: res = fp.readlines() print(res) # [&#x27;Pycharm是一款开发Python常用\\n&#x27;, &#x27;并且十分便捷的集成开发环境\\n&#x27;] seek() 文件指针 可以使用文件指针 seek 设置指针位置 seek(0)：在开头位置 seek(0,2)：在末尾位置 seek(num)：在 num 位置 truncate() 截断文件内容 按照所需要的数据，截断文件的内容 close() 关闭文件格式：文件对象.close() 关闭打开的文件 访问文件夹 获取当前路径 os.getcwd() 改变当前路径 os.chdir() 创建新文件夹 os.mkdir() 修改文件夹名称 os.rename() 删除文件夹 os.rmdir() 遍历文件夹 os.walk() 练习题-注册和登录功能 注册功能 需要用户名和密码以及确认密码 注册时如果用户名已经存在，则不能再次注册 登录功能 需要使用已经注册的用户信息登录 密码输入错误 3 次后，锁定账户信息（不能再使用该账户进行操作） 注册功能123456789101112131415161718192021222324252627282930313233343536373839userlist = []pwdlist = []with open(&#x27;./user.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.seek(0) res = fp.readlines() for i in res: r = i.strip() # 去掉了左右两侧的多余空格和换行 arr = r.split(&#x27;:&#x27;) userlist.append(arr[0]) pwdlist.append(arr[1])def register(): # 输入用户名 flag = True while flag: username = input(&#x27;欢迎注册，请输入要注册的用户名：&#x27;) if username in userlist: print(&#x27;用户已存在，请登录或重新输入用户名&#x27;) else: # 输入密码 while True: pwd = input(&#x27;请设置用户名密码：&#x27;) if len(pwd) &gt;= 3: repwd = input(&#x27;请确认密码：&#x27;) if pwd == repwd: print(&#x27;注册成功&#x27;) flag = False print(username, pwd, repwd) # 打开文件写入数据 with open(&#x27;./user.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(f&#x27;&#123;username&#125;:&#123;pwd&#125;\\n&#x27;) break else: print(&#x27;两次密码不一致，请重新输入&#x27;) else: print(&#x27;密码长度过短，请重新输入&#x27;)register() 登录功能1234567891011121314151617181920212223242526272829303132333435363738394041blacklist = []with open(&#x27;./black.txt&#x27;, &#x27;a+&#x27;, encoding=&#x27;utf-8&#x27;) as fp: fp.seek(0) result = fp.readlines() for i in result: r = i.strip() # 去掉了左右两侧的多余空格和换行 blacklist.append(r)def login(): flag = True while flag: username = input(&#x27;欢迎登录，请输入要登录的用户名：&#x27;) if username in blacklist: print(&#x27;您的账号已被锁定请联系管理员&#x27;) flag = False elif username in userlist: i = userlist.index(username) count = 3 while count: pwd = input(&#x27;请输入密码：&#x27;) if pwd == pwdlist[i]: print(&#x27;登录成功！&#x27;) flag = False break else: count -= 1 if count == 2: print(&#x27;密码输入错误，还有2次重新输入机会&#x27;) elif count == 1: print(&#x27;粗心大意咯，只剩1次输入密码的机会啦&#x27;) else: print(&#x27;登录失败啦，账号被你锁定啦&#x27;) with open(&#x27;./black.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(f&#x27;&#123;username&#125;\\n&#x27;) flag = False break else: print(&#x27;用户名输入错误，请重新输入&#x27;)login() 登录与注册功能的合并1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889def register(): # 输入用户名 flag = True while flag: username = input(&#x27;欢迎注册，请输入要注册的用户名：&#x27;) if username in userlist: print(&#x27;用户已存在，请登录或重新输入用户名&#x27;) else: # 输入密码 while True: pwd = input(&#x27;请设置用户名密码：&#x27;) if len(pwd) &gt;= 3: repwd = input(&#x27;请确认密码：&#x27;) if pwd == repwd: print(&#x27;注册成功&#x27;) flag = False print(username, pwd, repwd) # 打开文件写入数据 with open(&#x27;./user.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(f&#x27;&#123;username&#125;:&#123;pwd&#125;\\n&#x27;) break else: print(&#x27;两次密码不一致，请重新输入&#x27;) else: print(&#x27;密码长度过短，请重新输入&#x27;)def login(): flag = True while flag: username = input(&#x27;欢迎登录，请输入要登录的用户名：&#x27;) if username in blacklist: print(&#x27;您的账号已被锁定请联系管理员&#x27;) flag = False elif username in userlist: i = userlist.index(username) count = 3 while count: pwd = input(&#x27;请输入密码：&#x27;) if pwd == pwdlist[i]: print(&#x27;登录成功！&#x27;) flag = False break else: count -= 1 if count == 2: print(&#x27;密码输入错误，还有2次重新输入机会&#x27;) elif count == 1: print(&#x27;粗心大意咯，只剩1次输入密码的机会啦&#x27;) else: print(&#x27;登录失败啦，账号被你锁定啦&#x27;) with open(&#x27;./black.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(f&#x27;&#123;username&#125;\\n&#x27;) flag = False break else: print(&#x27;用户名输入错误，请重新输入&#x27;)if __name__ == &#x27;__main__&#x27;: while True: userlist = [] pwdlist = [] blacklist = [] with open(&#x27;./user.txt&#x27;, &#x27;a+&#x27;, encoding=&#x27;utf-8&#x27;) as fp: fp.seek(0) res = fp.readlines() for i in res: r = i.strip() # 去掉了左右两侧的多余空格和换行 arr = r.split(&#x27;:&#x27;) userlist.append(arr[0]) pwdlist.append(arr[1]) with open(&#x27;./black.txt&#x27;, &#x27;a+&#x27;, encoding=&#x27;utf-8&#x27;) as fp: fp.seek(0) result = fp.readlines() for i in result: r = i.strip() # 去掉了左右两侧的多余空格和换行 blacklist.append(r) choice = input(&#x27;欢迎来到我的网站，请输入你的要进行的功能\\n1.注册\\n2.登录\\n3.退出\\n&#x27;) if choice == &#x27;1&#x27;: register() elif choice == &#x27;2&#x27;: login() else: break 更新: 2024-01-03 23:56:04原文: https://www.yuque.com/zacharyblock/cx2om6/gbqyc0puv2x9dims","categories":[{"name":"Python基础","slug":"Python基础","permalink":"http://example.com/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python基础-函数","slug":"Python基础/函数","date":"2022-12-31T17:25:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2022/12/31/Python基础/函数/","permalink":"http://example.com/2022/12/31/Python%E5%9F%BA%E7%A1%80/%E5%87%BD%E6%95%B0/","excerpt":"","text":"函数认识函数模块化编程指的是把程序进行封装（函数封装、面向对象、文件） 函数 函数是具有特定功能的代码块 function 函数就是把代码进行封装、以提高代码的重用性、提高开发效率、降低了后期的维护成本 函数的定义和使用 123456# 定义函数def 函数名(参数列表): 具体功能代码# 函数的调用函数名() 函数封装并不会执行，只是把函数定义了而已 如果想使用定义的函数，就用语法来进行函数调用 函数定义后，不调用不执行 不能在函数定义前调用函数 函数的调用不受次数影响 函数的命名要遵守命名规范 函数的参数 函数在定义时，可以在参数列表的位置定义 形式参数（形参） 如果函数有形参，那么在调用的时候必须传递参数 实际参数（实参） 实参将数值传递给形参的过程，就是变量的赋值操作 函数定义了几个参数，调用的时候就要按指定顺序进行参数的传递 普通参数、默认参数 即位置参数，也叫顺序参数，也是必须传递的参数 12345def cook(food:str): print(f&quot;今晚吃&#123;food&#125;&quot;)cook(&quot;noodle&quot;) # 今晚吃noodle 在有多个参数的时候，靠后的称为默认参数，默认参数可以指定默认值，在调用的时候可以不传实参 默认参数只能靠后 12345def cook(food, dirnk=&quot;wine&quot;, snack=&quot;chips&quot;): print(f&quot;今晚吃&#123;food&#125;，今晚喝&#123;dirnk&#125;，饭后甜点是&#123;snack&#125;&quot;)cook(&quot;rice&quot; ) # 今晚吃rice，今晚喝wine，饭后甜点是chips 收集参数定义一个形参，专门收集多余的实参，或者说是不确定需要接受多少个实参的情况下，使用一个实参来接收,这个形参用*args args 接收的参数以元组的形式存储 这个变量不一定非得是 args，可以是 num 等等，但是记得是一个星号 123456789101112131415161718def calc(x=&#x27;+&#x27;, *args): print(type(args)) # &lt;class &#x27;tuple&#x27;&gt; res = 0 if x == &#x27;+&#x27;: for i in args: res += i print(f&quot;&#123;args&#125;求和得&#123;res&#125;&quot;) elif x == &#x27;-&#x27;: res = 2 * args[0] for i in args: res -= i print(f&quot;&#123;args&#125;求差得&#123;res&#125;&quot;) else: print(&quot;符号错误&quot;)calc(&quot;+&quot;, 200, 100, 300) # (200, 100, 300)求和得600calc(&quot;-&quot;, 200, 100, 300) # (200, 100, 300)求差得-200 命名关键字参数 命名关键字参数，定义在收集参数后面 关键字参数必须通过形参的名字来传递 123456def cook(food, *other, time): print(f&quot;we are going to eat &#123;food&#125; and &#123;other&#125; at &#123;time&#125;&quot;)cook(&quot;rice&quot;, &quot;wine&quot;, &quot;snack&quot;, time=&quot;dinner&quot;) # we are going to eat rice and (&#x27;wine&#x27;, &#x27;snack&#x27;) at dinnercook(&quot;rice&quot;, &quot;wine&quot;, &quot;snack&quot;, &quot;dinner&quot;) # TypeError: cook() missing 1 required keyword-only argument: &#x27;time&#x27; 关键词收集参数 普通收集参数*args 会把接收到的参数收集成为 元组 关键词收集参数**kwargs 会将接收到的关键字参数收集成为 字典 123456def cook(food, *other, time, **kwargs): print(f&quot;we are going to eat &#123;food&#125; and &#123;other&#125; at &#123;time&#125; with &#123;kwargs&#125;&quot;)cook(&quot;rice&quot;, &quot;wine&quot;, &quot;snack&quot;, time=&quot;dinner&quot;, data=&#x27;2.2&#x27;, year=&#x27;2022&#x27;)# we are going to eat rice and (&#x27;wine&#x27;, &#x27;snack&#x27;) at dinner with &#123;&#x27;data&#x27;: &#x27;2.2&#x27;, &#x27;year&#x27;: &#x27;2022&#x27;&#125; 形参声明的位置 普通参数、默认参数、收集参数、关键字参数、关键字收集参数 函数的返回值一个函数除了可以完成一定功能外，还可以按需要返回一定内容 函数中使用 return 关键字来指定返回数据，可以返回任何类型的数据 函数的返回值，会把数据返回到调用的位置 123456789def calc_plus(*args): res = 0 for i in args: res += i return resresult = calc_plus(123, 234, 345, 456)print(f&quot;所有数值计算结果是：&#123;result&#125;&quot;) 函数中可以使用 return 返回数据或任意内容 return 意味着函数的结束，return 之后的代码不再执行 函数的返回值可以有，可以没有，当没有返回值的时候，返回的是 None 变量的作用域作用域就是当前起作用、可用的范围区域 变量的有效范围 全局变量：在函数内外都可以使用的变量 局部变量：在函数内部可以使用的变量 在函数内部可以获取函数外部的变量(即全局变量)中的不可变数据类型，仅能访问，不能修改 123456789101112num = 10def func(): print(num)func() # 10num = 10def func(): num += 20 print(num)func() # UnboundLocalError: local variable &#x27;num&#x27; referenced before assignment 在函数内部可以对全局变量的可变数据类型(列表、字典)，进行修改和访问 1234567891011varl = [1, 2, 3]def func(): print(varl) # [1, 2, 3] varl.append(4) print(varl) # [1, 2, 3, 4] varl[2] = &#x27;a&#x27; print(varl) # [1, 2, &#x27;a&#x27;, 4]func() # 30print(varl) # [1, 2, &#x27;a&#x27;, 4] 在函数内部定义的变量，只能在函数内部使用，可获取，可修改，函数外部无法访问 123456def func(): res = 20 res += 10 print(res)func() # 30print(res) # NameError: name &#x27;res&#x27; is not defined 在函数内部使用global声明的变量，可将其改为全局变量 1234567def func(): global res res = 20 res += 10 print(res)func() # 30print(res) # 30 在函数外部定义的变量，想要在函数内部修改，可以在函数内部将其声明为全局变量 123456num = 10def func(): global num num += 20 print(num)func() # 30 两个函数 globals()：获取全局数据 123456789def outer(): print(&quot;This is a outer function...&quot;) def inner(): print(&quot;This is a inner function...&quot;) inner()outer()print(globals())# &#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x108786550&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code/30变量的作用域.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;outer&#x27;: &lt;function outer at 0x1087f9710&gt;&#125; - `locals()`：获取局部数据 局部函数：在函数内部定义的函数，称为局部函数 全局函数：相对于局部函数的外部函数 123456789def outer(): print(&quot;This is a outer function...&quot;) def inner(): print(&quot;This is a inner function...&quot;) inner()outer()# This is a outer function...# This is a inner function... 关于函数的文档 以上述的 globals()为例 12345678910&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;,&#x27;__doc__&#x27;: None,&#x27;__package__&#x27;: None,&#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x108786550&gt;,&#x27;__spec__&#x27;: None,&#x27;__annotations__&#x27;: &#123;&#125;,&#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;,&#x27;__file__&#x27;: &#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code/30变量的作用域.py&#x27;,&#x27;__cached__&#x27;: None, &#x27;outer&#x27;: &lt;function outer at 0x1087f9710&gt;&#125; main：当前脚本如果作为主程序，那么值是main，如果是当做一个模块，在另外一个脚本中引用去使用模块的名字。 doc：当前脚本的文档说明 在当前脚本当中的第一个三引号’’’’’’注释的就是当前脚本的说明文档 nonlocal 关键字 在内函数中，使用上一层函数中的局部变量，可以在内函数中，使用 nonlocal 声明一下变量，即可以在内函数中使用外函数的局部变量 123456789101112131415def outer(): num = 10 print(&quot;This is a outer function...&quot;) def inner(): nonlocal num num += 10 print(&quot;This is a inner function...&quot;) print(num) inner()outer()# This is a outer function...# This is a inner function...# 20 函数封装的练习题12345678910111213141516171819# 封装九九乘法表def jiujiu(n=0): &#x27;&#x27;&#x27; 打印九九乘法表 :param n: 控制打印输出顺序，n默认为0时，正向输出；否则，逆向输出 :return: 无返回值 &#x27;&#x27;&#x27; if n == 0: r = range(1,10) else: r = range(9,0,-1) for i in r: for j in range(1,i+1): print(f&quot;&#123;j&#125;×&#123;i&#125;=&#123;i*j&#125;\\t&quot;,end=&quot;&quot;) print() print()jiujiu()jiujiu(-1) 练习二 123456789101112131415161718192021# 封装打印矩形def juxing(n=0, x=10, y=10): &#x27;&#x27;&#x27; :param n: 当n为默认值0时候。打印实心矩形，否则打印空心的矩形 :param x: 控制矩形行数 :param y: 控制矩形列数 :return: 无返回值 &#x27;&#x27;&#x27; for i in range(x): if i == 0 or i == x - 1: print(&quot;# &quot; * y) else: if n == 0: print(&quot;# &quot; * y) else: print(&quot;# &quot; + &quot; &quot; * (y - 2) + &quot;#&quot;) print()juxing(x=9, y=16)juxing(n=-1,x=10,y=10) 递归函数递归函数就是定义了一个函数，这个函数内部自己调用函数本身 递归函数内必须要有结束条件，否则会一直调用直至栈溢出 递归函数会一层一层进入，再一层一层返回 123456789def jiecheng(n): print(n) if n == 0: return jiecheng(n-1) print(n)jiecheng(5) 实现阶乘123456789# 实现阶乘def jiecheng(n): if n == 1: return 1 return int(n) * jiecheng(n-1)res = jiecheng(10)print(res)** 实现斐波那契数列12345678910111213141516def fibo(n): if n == 1: return 0 elif n == 2: return 1 else: return fibo(n - 1) + fibo(n - 2)print(fibo(5)) # 3res = 0for i in range(5): res += fibo(i + 1)print(res) # 7 回调函数如果一个函数中要求传递的参数是一个函数，并且在函数中使用了传递进来的函数，那么这个被调用的函数就是回调函数 123456789101112# 带有回调函数的函数def func(f): print(&quot;func这是调用了回调函数的函数&quot;) f()# 回调函数def cal(): print(&quot;cal这是一个回调函数&quot;)func(cal)# func这是调用了回调函数的函数# cal这是一个回调函数 再来一个例子 1234def fun(x,y,f): print(f(x,y))fun(2,3,pow) # 8 闭包函数如果在一个函数中，返回了一个函数。并且这个函数是内函数，该内函数使用了外函数中的局部变量（这意味着需要使用 nonlocal），这就是闭包函数 保护了外函数中的局部变量，既可以使用，也不会被破坏 可以使用closure魔术方法查看是否闭包函数 1234567891011121314151617181920def person(): money = 0 # 函数中定义了一个局部变量 # 工作 在外函数中定义内函数 def work(): nonlocal money money += 100 print(money) # 在外函数中返回了内函数，这个内函数就是闭包函数 return workres = person() # 这里的res 就等同于workres() # 100res() # 200res() # 300print(res.__closure__) # (&lt;cell at 0x1058d0250: int object at 0x1058afdd0&gt;,)print(person.__closure__) # None 匿名函数——lambda 表达式匿名函数即，可以不使用 def 定义，并且这个函数也没有名字 在 Python 中使用 lambda 表达式来定义匿名函数 lambda 仅仅是一个表达式，不是一个代码块 lambda 表达式也有形参，并且不能访问除了自己的形参以外的任何变量（包括全局变量） 功能相对单一，不能写太复杂的形式 lambda [参数列表]:返回值 12res = lambda x, y: x + yprint(res(4, 4)) # 8 同样的，lambda 表达式也可以用于封装带有分支结构的函数，很便捷 123456789101112def func(gender): if gender == &#x27;male&#x27;: return &#x27;男性&#x27; else: return &#x27;女性&#x27;res = func(&quot;female&quot;)print(res)# 以下代码等同于上述代码res = lambda gender:&#x27;男性&#x27; if gender==&#x27;male&#x27; else &#x27;女性&#x27;print(res(&quot;female&quot;)) 迭代器迭代器是 Python 中的特色功能，用于访问元素的一种方式 迭代器是一个可以记住访问遍历的位置的对象 从集合的第一个元素开始访问，直到集合中的所有元素被访问完毕 迭代器只能从前往后一个一个遍历的，不能后退 迭代器是一个能被next()函数调用，并不断返回下一个值的对象称为迭代器(Iterator)对象 Iter()函数 功能：把可迭代对象，转为一个迭代器对象 参数：可迭代的对象(str、list、tuple、dict、set、range…) 返回值：迭代器对象 注意：迭代器对象一定是可迭代对象，但是可迭代对象不一定是迭代器对象 通过使用next()方法获取迭代器内部数据 1234567891011121314player = [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;]res = iter(player)# 使用next()函数获取数据p = next(res)print(p) # Curryp = next(res)print(p) # Kobep = next(res)print(p) # Jamesp = next(res)print(p) # Irvingp = next(res)print(p) # StopIteration 超出了可迭代范围 通过使用 list()方法直接取出迭代器中的所有数据 123456player = [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;]res = iter(player)# 使用list()取值li = list(res)print(li) # [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;] 通过 for 循环进行数据的遍历 123456player = [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;]res = iter(player)# 使用for循环进行遍历for i in res: print(i) 迭代器有一个特点，无论是使用上述三种方法哪一种取，取过一次数据后，数据就丢失去了,想要再次使用就不行了 1234567891011121314player = [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;]res = iter(player)# 使用for循环进行遍历for i in res: print(i)#第二次打印就失效了for i in res: print(i)# Curry# Kobe# James# Irving 判断一个对象是否是可迭代的或者是否迭代器对象，需要使用 from collections.abc import Iterable，Iterator 当需要判断一个对象类型的时候,可以使用 type() 当需要判断一个对象是否某一类型的时候可以使用 isinstance() 1234567891011121314from collections.abc import Iterable, Iterators = &quot;abdef&quot;r1 = isinstance(s, int)r2 = isinstance(s, str)print(r1, r2) # False Trueplayer = [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;]i = iter(player)r1 = isinstance(s, Iterator) # 字符串不是迭代器r2 = isinstance(s, Iterable) # 字符串是可迭代对象r3 = isinstance(i, Iterator) # 迭代器对象是迭代器r4 = isinstance(i, Iterable) # 迭代器对象是可迭代对象print(r1, r2, r3, r4) # False True True True 生成器yield 关键字使用了yield关键字的函数——生成器函数 1234567891011121314151617181920def output(): print(&quot;res 1&quot;) yield 1 print(&quot;res 2&quot;) yield 2 print(&quot;res 3&quot;) yield 3#生成器对象o = output()res = next(o)print(res)res = next(o)print(res)res = next(o)print(res)#可以使用for遍历for res in o: print(res) 可以将该函数理解为一个 可迭代对象 yield关键字使用在 生成器函数中 yield 和函数中的 return 相似 共同点：都会返回结果 不同点： return 会返回结果，并结束当前函数的调用，后面的代码不再执行 yield 会返回结果，并记住当前代码的执行位置，下一次调用的时候会从上一次离开的位置继续向下执行 调用函数后结果是一个生成器，需要使用收集迭代器的方法进行数据收集 12345678910111213141516171819202122232425262728293031323334353637# return在函数中def hello(): print(&#x27;Hello sen1&#x27;) return 1 print(&#x27;Hello sen2&#x27;) return 2res = hello() # Hello sen1print(res) # 1res = hello() # Hello sen1print(res) # 1# yield在函数中def hello_y(): print(&#x27;Hello sen1&#x27;) yield 1 print(&#x27;Hello sen2&#x27;) yield 2res = hello_y()print(res)temp = next(res) # Hello sen1print(temp) # 1temp = next(res) # Hello sen2print(temp) # 2# 也可以使用list类似函数收集起来 或者用 forres = hello_y()print(list(res)) # [1, 2]res = hello_y()for i in res: print(i)# Hello sen1# 1# Hello sen2# 2 yield from 在生成器中 yield 另一个生成器的内容 123456789101112def yield_func(num: int): for i in range(num): yield square(i+1)def call_yield_func(): yield from yield_func(3) yield from yield_func(5)for item in call_yield_func(): print(item) 生成器 send 相当于使用 next，并将数据送回给生成器(有种协程的感觉) 1234567891011121314151617def yield_send_func(): number = yield &quot;welcome a square function&quot; while True: number = yield square(number) if number is None: breakgenerator = yield_send_func()print(next(generator))for i in range(1,11): if i == 10: try: generator.send(None) except StopIteration: break print(generator.send(i)) yield from 结合 send 1234567891011121314151617181920212223242526272829303132333435363738def yield_square_func(): number = yield &quot;welcome a square function&quot; while True: number = yield square(number) if number is None: breakdef yield_cube_func(): number = yield &quot;welcome a cube function&quot; while True: number = yield number ** 3 if number is None: breakdef choose_func(): item = yield &quot;please choose 1 for square or 2 for cube&quot; while True: if item == 1: yield from yield_square_func() elif item == 2: yield from yield_cube_func() else: breakgenerator = choose_func()print(next(generator))print(generator.send(int(input())))for i in range(1, 11): if i == 10: try: generator.send(None) except StopIteration: break else: print(generator.send(i)) 练习题使用生成器改写斐波那契数列 1234567891011121314def fibo(x): a, b = 0, 1 yield a for i in range(x - 1): yield b a, b = b, a + bi = int(input(&quot;请输入一个整数：&quot;))res = fibo(i)for i in res: print(i,end=&#x27;,&#x27;)# 请输入一个整数：8# 0,1,1,2,3,5,8,13, 内置函数内置函数就是在系统安装完 Python 解释器时，由解释器提供好的函数 range 函数range 函数功能：能够生成一个指定的数字序列 参数：[start,stop,(step)] start：开始的值，默认为 0 stop：结束的值，对于[start,stop)是一个左闭右开区间，stop 选不到的 step：默认为 1，负数为倒着步进 返回值：可迭代对象，数字序列 123456789101112131415161718192021from collections.abc import Iterablefrom collections.abc import Iteratorres = range(10)print(res) # range(0, 10)print(isinstance(res, Iterable)) # True 可迭代对象print(isinstance(res,Iterator)) # False 不是迭代器，故不能使用next直接访问# 输出# 转化为listprint(list(res))# 使用forfor i in res: print(i)it = iter(res)print(next(it)) # 0for i in it: print(i) # 1 2 3 4 5 6 7 8 9 zip()函数zip()函数功能：可以接收多个可迭代对象，然后把每个可迭代对象中第 i 个元素组合在一起，形成一个新的迭代器（元组），当输入的可迭代对象中，最短的一个被耗尽时，迭代器将停止迭代。 参数：*iterables，任意个的可迭代对象 返回值：返回一个元组的迭代器 既然使用 zip 生成的结果是一个迭代器，那么获取数据的时候就可以使用 next、for、list 等方法获取，依旧是使用一次 少一次 12345678910111213141516171819202122232425var1 = &quot;1234&quot;var2 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]var3 = (&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;)res = zip(var1, var2, var3)print(res, type(res))# 获取数据的方法1print(next(res)) # (&#x27;1&#x27;, &#x27;a&#x27;, &#x27;A&#x27;)print(next(res)) # (&#x27;2&#x27;, &#x27;b&#x27;, &#x27;B&#x27;)# 获取数据的方法2res = zip(var1, var2, var3)for i in res: print(i)&quot;&quot;&quot;(&#x27;1&#x27;, &#x27;a&#x27;, &#x27;A&#x27;)(&#x27;2&#x27;, &#x27;b&#x27;, &#x27;B&#x27;)(&#x27;3&#x27;, &#x27;c&#x27;, &#x27;C&#x27;)(&#x27;4&#x27;, &#x27;d&#x27;, &#x27;D&#x27;)&quot;&quot;&quot;# 获取数据的方法3res = zip(var1, var2, var3)print(list(res)) # [(&#x27;1&#x27;, &#x27;a&#x27;, &#x27;A&#x27;), (&#x27;2&#x27;, &#x27;b&#x27;, &#x27;B&#x27;), (&#x27;3&#x27;, &#x27;c&#x27;, &#x27;C&#x27;), (&#x27;4&#x27;, &#x27;d&#x27;, &#x27;D&#x27;)] 可以使用 zip(*zip)执行一个反向操作 1234567# zip与*zipx = [1, 2, 3]y = [4, 5, 6]zipped = zip(x, y)print(list(zipped)) # [(1, 4), (2, 5), (3, 6)]x2, y2 = zip(*zip(x, y))print(x2, y2) # (1, 2, 3) (4, 5, 6) 其他内置函数数据类型转换相关内置函数 int() 将其他数据类型转为整型 float() 转为浮点类型 bool() 转为布尔类型 complex() 转为复数 str() 转为字符串类型 list() 转为列表类型 tuple() 转为元组类型 dict() 转为字典类型 set() 转为集合类型 变量相关函数 id() 获取当前数据的 ID 标识 type() 获取当前数据的类型字符串 print() 数据的打印 input() 获取输入的数据 isinstance() 检测是否为指定的数据类型 数学相关函数 abs() 返回一个数的绝对值，如果是复数，返回模 sum() 从左向右对一个 iterable 对象中的项求和并返回，开始值不允许为字符串 max() 获取最大值 min() 获取最小值 pow() 次幂运算 round() 四舍五入 12345678910111213print(abs(-99.99)) # 99.99print(sum([1, 2, 3])) # 6print(max(9, 90, 999)) # 999print(min(9, 90, -99)) # -99print(pow(2, 3)) # 8r = 3.1415926print(round(r)) # 3print(round(r, 4)) # 3.1416 进制相关函数及字符集进制转换 bin() 将数值类型转换为二进制 int() 将二进制转换为整型 oct() 将数值类型转换为八进制 hex() 将数值类型转为十六进制 1234567891011print(bin(123)) # 0b1111011print(int(0b1111011)) # 123print(oct(123)) # 0o173print(int(0o173)) # 123print(hex(123)) # 0x7bprint(int(0x7b)) # 123 Ascii 码是 基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，共计 128 个字符 常用的包括：GB2312-80、GBK、GBK18030、Unicode（UTF-8） ascii 字符转换 A-Z：65-90 a-z：97-122 0-9：48-57 将字符转为 ASCII：ord() 将 ASCII 转为字符：chr() 12345a = ord(&#x27;a&#x27;)print(a) # 97c = chr(97)print(c) # a 高阶函数——sorted() sorted(iterable,[reverse,key]) 运行原理：把可迭代数据里面的元素，一个一个取出来，放到 key 这个函数中进行处理，并按照函数中 return 的结果进行排序，返回一个新的列表 功能：排序 参数： iterable 可迭代的数据（容器类型数据，range 数据序列，迭代器） reverse 可选，是否反转，默认为 False，不反转，True 反转 key 可选，函数，可以是自定义函数，也可以是内置函数 1234567891011121314151617181920arr = [3, 7, 1, -9, 20, 10]print(sorted(arr)) # [-9, 1, 3, 7, 10, 20]print(sorted(arr, reverse=True)) # [20, 10, 7, 3, 1, -9]print(sorted(arr, key=abs)) # [1, 3, 7, -9, 10, 20]# 自定义函数def func(num): return num % 2arr = [3, 2, 4, 6, 5, 7, 9]res = sorted(arr, key=func)print(res) # [2, 4, 6, 3, 5, 7, 9]# 优化版res = sorted(arr, key=lambda x: x % 2)print(res) 高阶函数——map() *map(func, __iterables) 功能：对传入的可迭代数据中的每个元素进行处理，返回一个新的迭代器 参数： func 函数：自定义函数|内置函数 iterables：可迭代的数据 返回值：迭代器 1234567891011121314151617181920212223242526272829303132333435363738394041# 实现一个将 [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;] 转换为===&gt; [1,2,3,4] 的功能# 方法一arrlist = [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]newlist = []for i in arrlist: newlist.append(int(i))print(newlist) # [1, 2, 3, 4]# 方法二res = map(int, arrlist) # 这里的res是一个可迭代对象print(list(res)) # [1, 2, 3, 4]# 实现一个将 [1,2,3,4] 转换为===&gt; [1,4,9,16] 的功能# 方法一arrlist = [1, 2, 3, 4]newlist = []for i in arrlist: newlist.append(i ** 2)print(newlist) # [1, 4, 9, 16]# 方法二def power(num): return num ** 2arrlist = [1, 2, 3, 4]res = map(power, arrlist)print(list(res)) # [1, 4, 9, 16]# 方法三 优化版arrlist = [1, 2, 3, 4]res = map(lambda x: x ** 2, arrlist)print(list(res)) # [1, 4, 9, 16]# 实现 [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;] ===&gt; [65,66,67,68]arrlist = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]res = map(lambda x: ord(x.upper()), arrlist)print(list(res)) # [65, 66, 67, 68] 高阶函数——reduce() reduce(function, sequence[, initial]) 使用需要导入 from functools import reduce 功能：每一次从 sequence 即一个 iterable 拿出两个元素，放入到 func 函数中进行处理，得出一个计算结果，然后把这个计算结果和 iterable 中的第三个元素，继续放到 func 函数中国进行运算，以此类推，直到所有元素都参与了运算 参数 function 函数：内置函数|自定义函数 sequence：是一个 iterable，可迭代数据 返回值：最终的运算处理结果 1234567891011121314151617181920212223242526272829303132333435363738394041from functools import reduce# 实现一个对数组内的数字进行求和的功能numlist = [1, 2, 3, 4, 5]res = reduce(lambda x, y: x + y, numlist)print(res) # 15# 实现这样一个功能，给了数组[5,2,1,1] ===&gt; 5211# 方法一numlist = [5, 2, 1, 1]num = &#x27;&#x27;for i in numlist: num += str(i)res = int(num)print(res, type(res)) # 5211 &lt;class &#x27;int&#x27;&gt;# 方法二def func(x, y): return x * 10 + yres = reduce(func, numlist)print(res, type(res)) # 5211 &lt;class &#x27;int&#x27;&gt;# 方法三res = reduce(lambda x, y: x * 10 + y, numlist)print(res, type(res)) # 5211 &lt;class &#x27;int&#x27;&gt;# 把字符串&#x27;456&#x27; ===&gt; 456, 不能使用intnum = &#x27;456&#x27;strdict = &#123;&#x27;0&#x27;: 0, &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 4, &#x27;5&#x27;: 5, &#x27;6&#x27;: 6, &#x27;7&#x27;: 7, &#x27;8&#x27;: 8, &#x27;9&#x27;: 9&#125;res1 = map(lambda x: strdict[x], num)res2 = reduce(lambda x, y: x * 10 + y, res1)print(res2) # 456# 简化版本num = &#x27;456&#x27;strdict = &#123;&#x27;0&#x27;: 0, &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 4, &#x27;5&#x27;: 5, &#x27;6&#x27;: 6, &#x27;7&#x27;: 7, &#x27;8&#x27;: 8, &#x27;9&#x27;: 9&#125;print(reduce(lambda x, y: x * 10 + y, map(lambda x: strdict[x], num))) # 456 高阶函数——filter() filter(func,iterable) 功能：过滤数据，将 iterable 中的每个元素拿到 fun 函数中进行处理，如果函数返回 True 则保留这个数据，返回 False 则，丢弃这个数据 参数 func 函数：自定义函数|内置函数 iterable：可迭代的数据 返回值：保留下来的迭代器数据 1234# 实现 保留所有偶数，丢弃所有奇数的功能numlist = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]res = filter(lambda x: True if x % 2 == 0 else False, numlist)print(list(res)) 更新: 2024-01-16 03:26:11原文: https://www.yuque.com/zacharyblock/cx2om6/iygqmxqyo52f37yc","categories":[{"name":"Python基础","slug":"Python基础","permalink":"http://example.com/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python基础-容器","slug":"Python基础/容器","date":"2022-12-31T17:24:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2022/12/31/Python基础/容器/","permalink":"http://example.com/2022/12/31/Python%E5%9F%BA%E7%A1%80/%E5%AE%B9%E5%99%A8/","excerpt":"","text":"容器字符串 回顾字符串的定义方式 了解转义字符 字符串相关的运算 字符串相关函数 字符串格式化的方法 详解字符串-转义字符字符串的定义方式 单引号’’ 双引号定义字符串”” 三引号定义字符串’’’’’’或者”””””” 字符串定义时，引号可以互相嵌套 转义字符一个普通的字符出现在转义符\\后面时候，实现了另一种意义 \\ 转义符，续行符。 作为转义符时，在\\后面出现的字符可能会实现另外一种意义 作为续行符时，在行尾使用了\\后，可以继续换行书写内容 \\n 代表换行 \\r \\r 代表光标的位置，从\\r 出现的位置作为光标的起点 \\t 水平制表符 \\b 退格符 \\ 就是打出一个单独的\\ r 在字符串前＋ r 可以取消转义符的效果，原文字输出 123456789101112131415161718192021222324252627282930# \\ 作为续行符var = &quot;123&quot; \\ &quot;456&quot; \\ &quot;789&quot;print(var) # 123456789 打印结果仍旧是一行# \\ 作为转义符var = &quot;你要多耐心一点，美好的事物通常来的都慢一些&quot;print(var) # 你要多耐心一点，美好的事物通常来的都慢一些var = &quot;你要多耐心一点，\\n美好的事物通常来的都慢一些&quot;print(var)# 你要多耐心一点，# 美好的事物通常来的都慢一些var = &quot;你要多耐心一点，\\r美好的事物通常来的都慢一些&quot;print(var) # 美好的事物通常来的都慢一些var = &quot;你要多耐心一点，\\t美好的事物通常来的都慢一些&quot;print(var) # 你要多耐心一点， 美好的事物通常来的都慢一些var = &quot;你要多耐心一点，\\b美好的事物通常来的都慢一些&quot;print(var) # 你要多耐心一点美好的事物通常来的都慢一些var = &quot;abcde\\\\nabcde&quot;print(var) # abcde\\nabcdevar = r&quot;abcde\\nabcde&quot;print(var) # abcde\\nabcde 字符串相关操作 字符串 +操作： 加法在字符串之间起到拼接作用 字符串 *操作：乘法与字符串使用，会重复指定倍数的字符串 字符串 []切片操作：只能使用[]下标的方式访问，但是不能修改 123456789101112131415# 加法在字符串之间起到拼接作用vara = &quot;你要稍微等一等,&quot;varb = &quot;美好的事物都来得慢一些&quot;res = vara + varbprint(res) # 你要稍微等一等,美好的事物都来得慢一些# 乘法操作var = &quot;虎年大吉，&quot; * 3print(var) # 虎年大吉，虎年大吉，虎年大吉，# 切片操作print(res[4:7]) # 等一等print(res[8:10]) # 美好print(res[::2]) # 你稍等等美的物来慢些print(res[::-1]) # 些一慢得来都物事的好美,等一等微稍要你 字符串格式化format() 格式化字符串 f 方法 123456789101112131415161718192021222324252627282930313233343536373839# 普通方式name = &quot;duanduan&quot;money = 10sen = &quot;今天&#123;&#125;花了&#123;&#125;块钱💰&quot;.format(name, money)print(sen) # 今天duanduan花了10块钱💰# 通过索引的方法sen = &quot;今天&#123;1&#125;花了&#123;2&#125;块钱💰&quot;.format(None, name, money)print(sen)# 关键字传参sen = &quot;今天&#123;who&#125;花了&#123;how&#125;块钱💰&quot;.format(who=name, how=money)print(sen)# 容器类型数据传参d = &quot;duanduan:&#123;&#125;,huanghuang:&#123;&#125;,tutu:&#123;&#125;&quot;.format(&quot;小猪&quot;, &quot;大猪&quot;, &quot;小懒猪&quot;)print(d) # duanduan:小猪,huanghuang:大猪,tutu:小懒猪d = &quot;duanduan:&#123;&#125;,huanghuang:&#123;&#125;,tutu:&#123;&#125;&quot;.format([&quot;小猪&quot;], [&quot;大猪&quot;], [&quot;小懒猪&quot;])print(d) # duanduan:[&#x27;小猪&#x27;],huanghuang:[&#x27;大猪&#x27;],tutu:[&#x27;小懒猪&#x27;]d = &quot;duanduan:&#123;0[0]&#125;,huanghuang:&#123;0[1]&#125;,tutu:&#123;0[2]&#125;&quot;.format([&quot;小猪&quot;, &quot;大猪&quot;, &quot;小懒猪&quot;])print(d) # duanduan:小猪,huanghuang:大猪,tutu:小懒猪data = &#123;&quot;who&quot;: &quot;duanduan&quot;, &quot;how&quot;: &quot;10&quot;&#125;sen = &quot;今天&#123;who&#125;花了&#123;how&#125;块钱💰&quot;.format(**data)print(sen) # 今天duanduan花了10块钱💰# 新增的格式化方法 f 方法sen = f&quot;今天&#123;name&#125;花了&#123;money&#125;块钱💰&quot;print(sen) # 今天duanduan花了10块钱💰sen = f&#x27;今天&#123;data[&quot;who&quot;]&#125;花了&#123;data[&quot;how&quot;]&#125;块钱💰&#x27;print(sen) # 今天duanduan花了10块钱💰# 限定小数位数pi = 3.1415926var = f&quot;圆周率是多少：&#123;pi:.5f&#125;&quot;print(var) # 圆周率是多少：3.14159 英文字符与字符检测相关函数 大小写转换 str.capitalize() 返回原字符串的副本，首个字符大写，其余为小写 str.title() 返回原字符串的副本，每一个英文单词的首个字符大写，其余为小写 str.upper() 将字符串中的英文全部转化为大写 str.lower() 将字符串中的英文全部转化为小写 str.swapcase() 将字符串中的英文大小写互换 字符检测 str.isupper() 检查字符串是否都是大写 str.islower() 检查字符串是否都是小写 str.istitle() 检查字符串是否符合 title str.isalnum() 检测当前字符串是否由字符(中文、英文、数字)组成。 str.isalpha() 检测当前字符串是否由字符(中文、英文)组成，不包含数字。 str.isdigit() 检测当前字符串是否纯数字 str.isspace() 检测当前字符串是否纯空格 str.startswith() 检测当前字符串是否由指定字符开头，可以指定开始和结束的位置 str.endswith() 检测当前字符串是否由指定字符结尾，可以指定开始和结束的位置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 大小写转换sen = &quot;duanDuan is a liTTle pig&quot;print(sen.capitalize()) # Duanduan is a little pigprint(sen.title()) # Duanduan Is A Little Pigprint(sen.upper()) # DUANDUAN IS A LITTLE PIGprint(sen.lower()) # duanduan is a little pigprint(sen.swapcase()) # DUANdUAN IS A LIttLE PIG# 字符检测up = &quot;DUANDUAN&quot;lo = &quot;duanduan&quot;nu = &quot;123&quot;mix = &quot;word123&quot;print(sen.isupper()) # Falseprint(up.isupper()) # Trueprint(sen.islower()) # Falseprint(lo.islower()) # Trueprint(sen.istitle()) # Falseprint(sen.isalnum()) # Falseprint(up.isalnum()) # Trueprint(lo.isalnum()) # Trueprint(nu.isalnum()) # Trueprint(mix.isalnum()) # Trueprint(sen.isalpha()) # Falseprint(up.isalpha()) # Trueprint(lo.isalpha()) # Trueprint(nu.isalpha()) # Falseprint(mix.isalpha()) # Falseprint(sen.isdigit()) # Falseprint(up.isdigit()) # Falseprint(lo.isdigit()) # Falseprint(nu.isdigit()) # Trueprint(mix.isdigit()) # Falseprint(sen.isspace()) # Falseprint(&quot; &quot;.isspace()) # Trueprint(sen.startswith(&quot;d&quot;)) # Trueprint(sen.startswith(&quot;D&quot;)) # Falseprint(sen.startswith(&quot;n&quot;, 3)) # Trueprint(sen.startswith(&quot;n&quot;, 3, 8)) # Trueprint(sen.endswith(&quot;u&quot;)) # Falseprint(sen.endswith(&quot;g&quot;)) # Trueprint(sen.endswith(&quot;pig&quot;)) # Trueprint(sen.endswith(&quot;pig&quot;, 3, 24)) # True 字符串查找相关函数 str.find(sub[,start[,end]]) 从左向右获取指定字符在字符串中的索引位置，未找到则返回-1 str.rfind(sub[,start[,end]]) 从右向左获取指定字符在字符串中的索引位置，未找到则返回-1 str.index() 和 find 方法一样，只不过如果没有找到则报错 str.rindex() 从右往左找，如果没有找到则报错 str.count() 计算一个字符串出现的次数 1234567891011121314151617181920212223sen = &quot;duanduanispig,littlepig&quot;print(sen.find(&quot;pig&quot;)) # 10print(sen.find(&quot;pig&quot;, 14, 23)) # 20print(sen.rfind(&quot;pig&quot;)) # 20print(sen.rfind(&quot;pig&quot;, 0, 14)) # 10print(sen.index(&quot;pig&quot;)) # 10try: print(sen.index(&quot;help&quot;)) # ValueError: substring not foundexcept: print(&quot;ValueError: substring not found&quot;)print(sen.rindex(&quot;pig&quot;)) # 20try: print(sen.rindex(&quot;help&quot;)) # ValueError: substring not foundexcept: print(&quot;ValueError: substring not found&quot;)print(sen.count(&quot;duan&quot;)) # 2print(sen.count(&quot;u&quot;)) # 2print(sen.count(&quot;i&quot;)) # 4 字符串操作相关函数 str.split() 按照指定的字符进行分隔，把一个字符串分隔成一个列表，可以指定分隔的次数 str.rsplit() 按照指定的字符进行分隔，把一个字符串分隔成一个列表，同样可以指定分割的次数 str.join() 按照指定的字符 str，把容器类型中的数据连接成一个字符串 str.strip() 去除字符串左右两侧的指定字符 str.lstrip() 去除字符串左侧的指定字符 str.rstrip() 去除字符串右侧的指定字符 str.replace(new,old) 用 new 替换掉 str 中的 old,可以指定替换的次数 str.center() 给 str 的左右增加指定字符 str.ljust() 字符串按照指定位数向左对齐，右侧不够的补充指定字符 str.rjust() 同上，向右对齐 12345678910111213141516171819202122232425sen = &quot;duanduanisalittlepig&quot;print(sen.split(&quot;i&quot;)) # [&#x27;duanduan&#x27;, &#x27;sal&#x27;, &#x27;ttlep&#x27;, &#x27;g&#x27;]word = &quot;duanduan_is_a_little_piggy&quot;print(word.split(&quot;_&quot;)) # [&#x27;duanduan&#x27;, &#x27;is&#x27;, &#x27;a&#x27;, &#x27;little&#x27;, &#x27;piggy&#x27;]print(word.split(&quot;_&quot;, 2)) # [&#x27;duanduan&#x27;, &#x27;is&#x27;, &#x27;a_little_piggy&#x27;]print(word.rsplit(&quot;_&quot;)) # [&#x27;duanduan&#x27;, &#x27;is&#x27;, &#x27;a&#x27;, &#x27;little&#x27;, &#x27;piggy&#x27;]print(word.rsplit(&quot;_&quot;, 2)) # [&#x27;duanduan_is_a&#x27;, &#x27;little&#x27;, &#x27;piggy&#x27;]li = [&#x27;user&#x27;, &#x27;duan&#x27;, &#x27;pet&#x27;, &#x27;tu&#x27;]print(&quot;_&quot;.join(li)) # user_duan_pet_tuword = &quot; Hello piggy this is tutu &quot;print(word.strip()) # Hello piggy this is tutuold = &quot;新年快乐&quot;new = old.replace(&quot;快乐&quot;, &quot;大吉&quot;)print(new) # 新年大吉word = &quot;piggy&quot;print(word.center(10)) # piggyprint(word.center(10, &quot;*&quot;)) # **piggy***print(word.ljust(10, &#x27;*&#x27;)) # piggy*****print(word.rjust(10, &#x27;*&#x27;)) # *****piggy 列表详解列表就是一组有序的数据组合，列表中的数据可以被修改 列表定义与基本操作列表的定义 可以使用中括号定义 [] 可以使用 list 函数定义 在定义列表中的元素时，需要在每个元素之间使用逗号，进行分割。 列表中的元素可以是任意类型，通常存放同类型的 列表的基本操作 使用+可以对两个列表进行拼接 使用*实现列表元素的重复 使用 in 判断列表中是否存在某元素 列表的索引操作 通过下标获取指定的元素 通过下标修改元素 不能通过下标添加元素 append()：可以用于向列表中追加元素 len()：获取列表的长度 列表元素的删除 del 可以用于通过指定下标删除元素 pop()：可以使用 pop 方法出栈来删除最后一个元素 123456789101112131415161718192021varlist1 = [1, 2, 3, 4]varlist2 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]res = varlist1 + varlist2print(res) # [1, 2, 3, 4, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]res = varlist1 * 3print(res) # [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]res = 1 in varlist1print(res) # Truevarlist1.append(5)print(varlist1) # [1, 2, 3, 4, 5]print(varlist1) # [1, 2, 3, 4, 5]del varlist1[3]print(varlist1) # [1, 2, 3, 5]res = varlist1.pop()print(res) # 5print(varlist1) # [1, 2, 3] 列表切片操作列表[开始索引:结束索引:步进值] 列表[开始索引:] 从开始索引到列表的最后 列表[:结束索引] 从开始到结束索引的前一个 列表[开始索引:结束索引] 从开始索引到结束索引的前一个 列表[开始索引:结束索引:步进值] 带有步进值的从开始到结束前一个 列表[:] 列表全部数据 列表[::] 列表全部数据 列表[::-1] 列表逆序输出 使用切片的方法进行列表的数据更新和删除 从指定下标开始到指定下标结束前，替换为想要的对应的容器类型 使用 del 进行切片删除 12345678910111213141516varlist = [&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]res = varlist[2:]print(res) # [&#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]res = varlist[:2]print(res) # [&#x27;Kobe&#x27;, &#x27;James&#x27;]res = varlist[2:6]print(res) # [&#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;]res = varlist[2:6:2]print(res) # [&#x27;Curry&#x27;, &#x27;Irving&#x27;]varlist[3:6] = [&#x27;All star&#x27;]print(varlist) # [&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;All star&#x27;, &#x27;Harden&#x27;] 列表的相关函数 len() ：使用 len 方法可以计算出列表的长度 count() ：count 方法可以检测具体某个元素出现了多少次 append() ：append 方法可以在列表尾部追加元素 insert(i,x) ：在 i 索引位置，插入 x pop() ：默认出栈一个最末尾的元素,也可以指定索引进行出栈 remove() ：可以指定列表中的元素进行删除，如果元素不存在会报错 index() ：可以查找列表中元素第一次出现的索引 extend() ：可以将另一个列表扩展到原来的列表上，类似于+ clear() ：清空列表中的元素 reverse() ：逆序列表 sort() ：对列表排序，默认由小到大排序 若 reverse&#x3D;True，则按照由大到小排序 若 key&#x3D;func，则按照函数处理结果进行排序 copy() ：可以拷贝一个列表,但是如果执行修改操作，del 会对多维列表同时修改 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051varlist = [&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]print(len(varlist)) # 7print(varlist.count(&#x27;Curry&#x27;)) # 1varlist.append(&#x27;new star&#x27;)print(varlist) # [&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;new star&#x27;]varlist.insert(1, &#x27;Pony&#x27;)print(varlist) # [&#x27;Kobe&#x27;, &#x27;Pony&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;new star&#x27;]res = varlist.pop()print(res) # new starprint(varlist) # [&#x27;Kobe&#x27;, &#x27;Pony&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]varlist.remove(&#x27;Tony&#x27;)print(varlist) # [&#x27;Kobe&#x27;, &#x27;Pony&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]print(varlist.index(&#x27;Curry&#x27;)) # 3temp = [&#x27;nobody&#x27;, &#x27;somebody&#x27;]varlist.extend(temp)print(varlist) # [&#x27;Kobe&#x27;, &#x27;Pony&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;nobody&#x27;, &#x27;somebody&#x27;]varlist.clear()print(varlist) # []varlist = [&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]varlist.reverse()print(varlist) # [&#x27;Harden&#x27;, &#x27;Thompson&#x27;, &#x27;Irving&#x27;, &#x27;Tony&#x27;, &#x27;Curry&#x27;, &#x27;James&#x27;, &#x27;Kobe&#x27;]varlist.sort()print(varlist) # [&#x27;Curry&#x27;, &#x27;Harden&#x27;, &#x27;Irving&#x27;, &#x27;James&#x27;, &#x27;Kobe&#x27;, &#x27;Thompson&#x27;, &#x27;Tony&#x27;]\\var = [6, 8, 3, 5, 9, 0, 2, 1, 4, 7]var.sort()print(var) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]var = [1, 2, 3, 4, 5]var_val = var.copy()print(id(var), id(var_val)) # 4494320416 4493079008del var[4]print(var) # [1, 2, 3, 4]print(var_val) # [1, 2, 3, 4, 5]var = [1, 2, 3, [4, 5]]var_val = var.copy()print(id(var), id(var_val)) # 4559934480 4558631712del var[3][1]print(var) # [1, 2, 3, [4]]print(var_val) # [1, 2, 3, [4]] 深拷贝与浅拷贝 浅拷贝 使用的是 copy()方法 对一维列表拷贝后，与原来的列表是不同的，单独做出修改不会影响另一列表 但是如果是多维列表，使用浅拷贝之后，对多维部分进行修改，所有的都会改变 深拷贝 使用的是 copy 模块下的 deepcopy() 深拷贝下的拷贝列表，是完全独立的 12345678910111213141516171819202122import copyvarlist = [1, 2, [3, 4, 5]]newlist = varlist.copy()print(varlist) # [1, 2, [3, 4, 5]]print(newlist) # [1, 2, [3, 4, 5]]print(id(varlist) == id(newlist)) # Falseprint(id(varlist[2]) == id(newlist[2])) # Truedel varlist[2][0]print(varlist) # [1, 2, [4, 5]]print(newlist) # [1, 2, [4, 5]]varlist = [1, 2, [3, 4, 5]]newlist = copy.deepcopy(varlist)print(varlist) # [1, 2, [3, 4, 5]]print(newlist) # [1, 2, [3, 4, 5]]print(id(varlist) == id(newlist)) # Falseprint(id(varlist[2]) == id(newlist[2])) # Falsedel varlist[2][0]print(varlist) # [1, 2, [4, 5]]print(newlist) # [1, 2, [3, 4, 5]] 列表推导式列表推导式提供了一个更简单的创建列表的方法。常见的用法是把某种操作应用于序列或者可迭代对象的每个元素上，然后使用其结果来创建列表，或者通过满足某些特定条件元素来创造子序列 常用方法 list &#x3D; [想要的处理方式 for i in 容器类型数据 条件表达式] 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# 创建0-9的平方列表# 普通方法varlist = []for i in range(10): varlist.append(i ** 2)print(varlist) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]# lambda表达式+mapvarlist = list(map(lambda x: x ** 2, range(10)))print(varlist) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]# 列表推导式varlist = [i ** 2 for i in range(10)]print(varlist) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]# 2 实现一个字符串&#x27;1234&#x27; ===&gt; [2，4，6，8]# 普通方法varstr = &#x27;1234&#x27;varlist = []for i in varstr: varlist.append(int(i) * 2)print(varlist) # [2, 4, 6, 8]# lambda+mapvarlist = list(map(lambda x: int(x) * 2, varstr))print(varlist) # [2, 4, 6, 8]# 列表推导式varlist = [int(i) * 2 for i in varstr]print(varlist) # [2, 4, 6, 8]# 3 实现0-9的偶数列表 ===&gt; [0,2,4,6,8]# 普通方法varlist = []for i in range(10): if i % 2 == 0: varlist.append(i)print(varlist) # [0, 2, 4, 6, 8]# lambda+flitervarlist = list(filter(lambda x: True if x % 2 == 0 else False, range(10)))print(varlist) # [0, 2, 4, 6, 8]# 列表推导式varlist = [i for i in range(10) if i % 2 == 0]print(varlist) # [0, 2, 4, 6, 8]# 4 实现多循环的列表推导式# 实现 [1,2,3],[3,1,4] ===&gt; 列表中的元素两两组合，要求组合元素不能重复# 普通方法varlist = []for x in [1, 2, 3]: for y in [3, 1, 4]: if x != y: varlist.append((x, y))print(varlist) # [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]# 列表推导式varlist = [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]print(varlist) # [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]# 5 实现矩阵的转换# 普通方法matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12],]newlist = []for i in range(len(matrix[0])): newlist.append([res[i] for res in matrix])print(newlist)# 列表推导式newlist = [[res[i] for res in matrix] for i in range(4)]print(newlist) 练习题使用列表推导式实现乘法表 123456789101112131415161718192021222324252627282930313233343536373839404142# 把字典中的键值对转换成 a=b的列表形式# &#123;&#x27;user&#x27;:&#x27;admin&#x27;,&#x27;age&#x27;:&#x27;20&#x27;,&#x27;phone&#x27;:&#x27;130&#x27;&#125; ===&gt; [&#x27;user=admin&#x27;,&#x27;age=20&#x27;,&#x27;phone=133&#x27;]vardict = &#123;&#x27;user&#x27;: &#x27;admin&#x27;, &#x27;age&#x27;: &#x27;20&#x27;, &#x27;phone&#x27;: &#x27;130&#x27;&#125;varlist = [i + &#x27;=&#x27; + vardict[i] for i in vardict]print(varlist) # [&#x27;user=admin&#x27;, &#x27;age=20&#x27;, &#x27;phone=130&#x27;]res = &#x27;&amp;&#x27;.join(varlist)print(res) # user=admin&amp;age=20&amp;phone=130# 把列表中的所有字符全部转为小写# [&#x27;AAAAA&#x27;,&#x27;BbbBB&#x27;,&#x27;CCCcc&#x27;] ===&gt; [&#x27;aaaaa&#x27;,&#x27;bbbbb&#x27;,&#x27;ccccc&#x27;]varlist = [&#x27;AAAAA&#x27;, &#x27;BbbBB&#x27;, &#x27;CCCcc&#x27;]newlist = [i.lower() for i in varlist]print(newlist) # [&#x27;aaaaa&#x27;, &#x27;bbbbb&#x27;, &#x27;ccccc&#x27;]# x是0-5之间的偶数，y是0-5之间的奇数，把x，y组成一个元组放进一个列表中newlist = [(x, y) for x in range(6) for y in range(6) if x % 2 == 0 if y % 2 != 0]print(newlist)# 使用列表推导式完成乘法表newlist = [f&#x27;&#123;i&#125;×&#123;j&#125;=&#123;i * j&#125;&#x27; for i in range(1, 10) for j in range(1, i + 1)]print(newlist)# 使用列表推导式完成M与N的计算 ===&gt; [2,4,6,12,15,18,28,32,36]M = [ [1, 2, 3], [4, 5, 6], [7, 8, 9],]N = [ [2, 2, 2], [3, 3, 3], [4, 4, 4],]newlist = [M[p][q] * N[p][q] for p in range(3) for q in range(3)]print(newlist) # [2, 4, 6, 12, 15, 18, 28, 32, 36] 元组详解基本定义和切片操作元组和列表一样都是一组有序的数据组合 元组中的元素一旦定义了就不能修改，因此元组是不可变数据类型 元组定义 定义空元祖，变量名&#x3D;() 或者 变量名&#x3D;tuple() 还可以使用 变量名&#x3D;(1，2，3)的方式定义有数据的元组 如果只有一个数据，数据后需要加,，如 变量名&#x3D;(1,) 特例，使用 变量&#x3D;1,2,3 这样的方式也可以定义元组 元组的相关操作由于元组是不可变的数据类型，因此只能使用索引进行访问，不能进行其他操作 元组可以和列表一样使用切片操作 tuple.count() 统计一个元素出现的次数 tuple.index() 查找一个元素的索引值 tuple[] 与列表一样的方式进行切片 使用 +、* 运算，合并组成新的元组 in 方法检测一个元素是否在元组中 123456789101112131415161718192021222324252627vartuple = 1, 2, 3print(vartuple) # (1, 2, 3)vartuple = (1,)print(vartuple) # (1,)vartuple = (1, 2, 3, 4, 5)print(len(vartuple))print(vartuple[:]) # (1, 2, 3, 4, 5)print(vartuple[::]) # (1, 2, 3, 4, 5)print(vartuple[1:3]) # (2, 3)print(vartuple[::-1]) # (5, 4, 3, 2, 1)vartuple = (&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;Kobe&#x27;)print(vartuple.count(&#x27;James&#x27;)) # 1print(vartuple.index(&#x27;Curry&#x27;)) # 2print(vartuple.index(&#x27;Kobe&#x27;)) # 0print(vartuple.index(&#x27;Kobe&#x27;, 5, 8)) # 7print( vartuple + vartuple) # (&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;Kobe&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;Kobe&#x27;)print( vartuple * 2) # (&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;Kobe&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;Kobe&#x27;)res = &#x27;Irving&#x27; in vartupleprint(res) # True 元组推导式 generator元组推导式 generator 也称为生成器，返回的是一个生成器 生成器是一个特殊的迭代器，生成器可以自定义，也可以使用元组推导式定义 生成器是按照某种算法去推算下一个数据或结果，只需要往内存中存储一个生成器，节约内存消耗，提升性能 语法： (1) 里面是推导式，外面是一个() 的结果就是一个生成器 (2) 自定义生成器，含有 yidle 关键字的函数就是生成器 含有 yield 关键字的函数，返回的结果就是一个迭代器(生成器函数就是一个返回迭代器的函数) 如何使用生成器：生成器是迭代器的一种，所以可以使用操作迭代器的方法操作生成器 使用 next()函数调用 使用 list()函数或者 tuple()函数进行操作 使用 for 语句进行遍历 12345678910111213141516171819varlist = [1, 2, 3, 4, 5]newtuple = (i ** 2 for i in varlist)print(newtuple) # &lt;generator object &lt;genexpr&gt; at 0x101dd1f50&gt;# 1print(next(newtuple)) # 1print(next(newtuple)) # 4# 2newtuple = (i ** 2 for i in varlist)print(list(newtuple)) # [1, 4, 9, 16, 25]newtuple = (i ** 2 for i in varlist)print(tuple(newtuple)) # (1, 4, 9, 16, 25)# 3newtuple = (i ** 2 for i in varlist)for i in newtuple: print(i) # 1 4 9 16 25 字典详解定义和基本操作字典也是一种数据的集合，由键值对组成的数据集合，字典中的键不能重复 字典中的键必须是不可变的数据类型，常用的键主要是：字符串，整型 字典的定义 字典可以通过大括号括起来的 键:值对 进行创建 也可以使用 dict 构造器来创建 数据类型的转换：可以将其他的二级容器类型（列表、元组）转换为 dict 可以使用 zip()函数，将两个 list 组合成一个 dict 字典的操作 获取，通过索引键的方式可以获取到值 修改，索引到的话可以修改值 删除，使用 del 进行删除 添加，使用一个新的键，进行赋值，若键存在，则会覆盖 成员检测，可以使用 in 进行成员检测，但是只能检测键 长度，可以用 len()，来检测有多少个键值对 dict.keys()：可以查询所有键 dict.values()：可以查询所有值 dict.items()：获取当前字典中所有的键值对 字典的遍历：可以使用 for 字典合并：new_dict &#x3D; {**dict1, **dict2} 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152vardict = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;print(vardict, type(vardict)) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125; &lt;class &#x27;dict&#x27;&gt;vardict = dict(a=1, b=2, c=3)print(vardict) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;vardict = dict([[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2], [&#x27;c&#x27;, 3]])print(vardict) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;var1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]var2 = [1, 2, 3]print(dict(zip(var1, var2))) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;res = vardict[&#x27;a&#x27;]print(res) # 1vardict[&#x27;a&#x27;] = &#x27;A&#x27;print(vardict) # &#123;&#x27;a&#x27;: &#x27;A&#x27;, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;del vardict[&#x27;a&#x27;]print(vardict) # &#123;&#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;vardict[&#x27;d&#x27;] = 4print(vardict) # &#123;&#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;res = &#x27;d&#x27; in vardictprint(res) # Trueres = &#x27;a&#x27; in vardictprint(res) # Falseres = len(vardict)print(res) # 3res = vardict.keys()print(res) #dict_keys([&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])res = vardict.values()print(res) # dict_values([2, 3, 4])res = vardict.items()print(res) # dict_items([(&#x27;b&#x27;, 2), (&#x27;c&#x27;, 3), (&#x27;d&#x27;, 4)])# 字典的遍历for i in vardict: print(i,vardict[i]) # b 2 # c 3 # d 4for k,v in vardict.items(): print(k,v) # b 2 # c 3 # d 4 相关函数 len(dict)，来检测有多少个键值对 dict.keys()：可以查询所有键 dict.values()：可以查询所有值 dict.items()：获取当前字典中所有的键值对 iter(dict)：返回以字典的键为元素的迭代器 pop(key)：通过键的方式弹出键值对 popitem()：按照 LIFO 的方式删除键值对 get()：通过 get 函数获得对应键的值，若键不存在返回 None update()：更新字典，在原来的基础上更新 setdefault()：如果 字典的键存在 则返回对应值；如果键不存在，默认存入值为 None 的键值对，返回值为值，也可以指定传入的值 1234567891011121314151617181920212223242526272829vardict = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;res = iter(vardict)print(res) # &lt;dict_keyiterator object at 0x102977950&gt;for i in res: print(i) # a # b # cvardict.pop(&#x27;a&#x27;)print(vardict) # # &#123;&#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;vardict.popitem()print(vardict) # &#123;&#x27;b&#x27;: 2&#125;vardict = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;res = vardict.get(&#x27;a&#x27;)print(res) # 1res = vardict.get(&#x27;d&#x27;)print(res) # Nonevardict.update(a=11, b=22)print(vardict) # &#123;&#x27;a&#x27;: 11, &#x27;b&#x27;: 22, &#x27;c&#x27;: 3&#125;res = vardict.setdefault(&#x27;d&#x27;, 4)print(res) # 4print(vardict) # &#123;&#x27;a&#x27;: 11, &#x27;b&#x27;: 22, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125; 字典推导式123456789101112131415161718192021222324252627vardict = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;# 把字典中的键值对位置交换# 普通方法newdict = &#123;&#125;for k, v in vardict.items(): newdict[v] = kprint(newdict) # &#123;1: &#x27;a&#x27;, 2: &#x27;b&#x27;, 3: &#x27;c&#x27;&#125;# 使用字典推导式newdict = &#123;v: k for k, v in vardict.items()&#125;print(newdict) # &#123;1: &#x27;a&#x27;, 2: &#x27;b&#x27;, 3: &#x27;c&#x27;&#125;# 只保留值为偶数的键值对 并且键值互换# 普通方法vardict = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;newdict = &#123;&#125;for k,v in vardict.items(): if v % 2 ==0: newdict[v] = kprint(newdict) # &#123;2: &#x27;b&#x27;, 4: &#x27;d&#x27;&#125;# 列表推导式方法newdict = &#123;v:k for k,v in vardict.items() if v % 2 == 0&#125;print(newdict) # &#123;2: &#x27;b&#x27;, 4: &#x27;d&#x27;&#125; 集合详解集合的基本操作和常规确定的一组无序的数据的组合 确定的：当前集合中元素的值不能重复 由多个数据组合的复合型数据（容器类型数据） 集合中的数据没有顺序 功能：成员检测、从序列中去除重复项以及数学中的集合类计算，列如交集、并集、差集与对称差集等等 集合的定义 可以直接使用{}来定义集合，定义空集合必须用 set()方法 可以使用 set()进行集合的定义和转换 使用集合推导式完成集合的定义 注意：集合中的元素不能重复，集合中存放的数据：Number、Strings、Tuple、冰冻集合 集合的基本操作和常规函数 无序、False 和 0 只会出现一个、True 和 1 只会出现一个、元素值不会重复 成员检测：使用 in 检测是都存在某个元素 元素个数：len()检测集合元素个数 集合遍历：使用 for 方法进行遍历 追加元素：set.add()可以向集合中追加元素，（为什么不是 append，因为 append 有扩充的思想，从尾部插入，而 add 是没有顺序的） 删除元素： set.pop()可以删除集合中的元素，随机删除，并返回 set.remove()指定删除集合中的元素，无返回值,如果不存在则会报错 set.discard()指定删除集合中的元素，不存在也不会报错 清空集合：set.clear() 更新集合：set.update() 集合的拷贝：set.copy() 冰冻集合：frozenset() 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950varset = &#123;123, &#x27;abc&#x27;, True, (1, 2, 3), 0, False, 3.1415, 123&#125;print(varset) # &#123;0, True, 3.1415, &#x27;abc&#x27;, (1, 2, 3), 123&#125;res = &#x27;abc&#x27; in varsetprint(res) # Trueres = len(varset)print(res) # 6for i in varset: print(i) # 0 # True # 3.1415 # (1, 2, 3) # abc # 123varset.add(&#x27;new&#x27;)print(varset) # &#123;0, True, 3.1415, &#x27;new&#x27;, (1, 2, 3), &#x27;abc&#x27;, 123&#125;# pop是随机的删除r1 = varset.pop()r2 = varset.pop()r3 = varset.pop()r4 = varset.pop()print(r1, r2, r3, r4) # 0 True 3.1415 newprint(varset) # &#123;(1, 2, 3), &#x27;abc&#x27;, 123&#125;varset = &#123;123, &#x27;abc&#x27;, True, (1, 2, 3), 0, False, 3.1415, 123&#125;varset.remove(&#x27;abc&#x27;)print(varset) # &#123;0, True, 3.1415, (1, 2, 3), 123&#125;varset.discard(123)print(varset) # &#123;0, True, 3.1415, (1, 2, 3)&#125;varset.clear()print(varset) # set()varset = &#123;123, &#x27;abc&#x27;, True, (1, 2, 3), 0, False, 3.1415, 123&#125;varset.update(&#123;1, 2, 3, 4, 5&#125;)print(varset) # &#123;0, True, 2, 3.1415, 3, 4, 5, (1, 2, 3), 123, &#x27;abc&#x27;&#125;newset = varset.copy()print(newset) # &#123;0, True, 2, 3.1415, 3, 4, 5, (1, 2, 3), &#x27;abc&#x27;, 123&#125;# 冰冻集合v = frozenset(&#123;1, 2, 3&#125;)print(v) # frozenset(&#123;1, 2, 3&#125;) 冰冻集合 定义冰冻集合 只能使用 frozenset()函数进行冰冻集合的定义 冰冻集合一旦定义 就不能修改 冰冻集合只能做集合相关的运算：求并交补差集 本身就是一个强制类型转换的函数，可以把其他任何容器类型的数据转换为冰冻集合 冰冻集合可以遍历：使用 for 进行遍历 冰冻集合的推导式 12345678910111213vars = frozenset(&#123;1,2,3&#125;)print(vars) # frozenset(&#123;1, 2, 3&#125;)for i in vars: print(i) # 1 # 2 # 3# 冰冻集合推导式res = frozenset(&#123;i&lt;&lt;1 for i in range(6)&#125;)print(res) # frozenset(&#123;0, 2, 4, 6, 8, 10&#125;) 集合推导式12345678910111213141516171819202122232425262728# 普通推导式varset = &#123;1, 2, 3, 4&#125;newset = &#123;i &lt;&lt; 1 for i in varset&#125;print(newset) # &#123;8, 2, 4, 6&#125;# 带有条件表达式的推导式newset = &#123;i &lt;&lt; 1 for i in varset if i % 2 == 0&#125;print(newset) # &#123;8, 4&#125;# 多循环的集合推导式# 普通方法vars1 = &#123;1, 2, 3&#125;vars2 = &#123;4, 5, 6&#125;newset = set()for i in vars1: for j in vars2: print(i, j) newset.add(i + j)print(newset) # &#123;5, 6, 7, 8, 9&#125;# 列表推导式newset = &#123;i + j for i in vars1 for j in vars2&#125;print(newset) # &#123;5, 6, 7, 8, 9&#125;# 待条件表达式的多循环的集合推导式newset = &#123;i + j for i in vars1 for j in vars2 if (i + j) % 2 == 0&#125;print(newset) # &#123;8, 6&#125; 集合运算 集合的主要运算 交集 &amp; set.intersection() 有返回值，不对原集合更新；还可以对可迭代对象进行合并 set.intersection_update() 无返回值，对原集合会更新 并集 | 更推荐这种，对两种数据要求高 不能太灵活 set.union() 有返回值，不对原集合更新 ；还可以对可迭代对象进行合并 set.update() 无返回值，对调用的集合更新 差集 (去掉集合中 另一集合有的部分) set.difference() 有返回值，不对原集合更新 set.difference_update() 无返回值，对原集合更新 对称差集 (去掉各自集合中 相同的部分) ^ set.symmetric_difference() 有返回值，不对原集合更新 set.symmetric_difference_update() 无返回值，对原集合更新 检测超集和子集 set1.issuperset(set2) 返回值为 True、False，意义为 set1 是否为 set2 的超集，也可以用 &gt;= set1.issubset(set2) 检测 set1 是否为 set2 的子集，也可以使用 &lt;= 检测是否不相交 set1.isdisjoint(set2) 有返回值，不相交返回 True、相交返回 False 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051vars1 = &#123;1, 2, 3, 4, 5, 6, 7&#125;vars2 = &#123;4, 5, 6, 7, 8, 9, 10&#125;# 交集print(vars1 &amp; vars2) # &#123;4, 5, 6, 7&#125;res = vars1.intersection(vars2)print(res) # &#123;4, 5, 6, 7&#125;print(vars1) # &#123;1, 2, 3, 4, 5, 6, 7&#125;res = vars1.intersection_update(vars2)print(res) # Noneprint(vars1) # &#123;4, 5, 6, 7&#125;# 并集vars1 = &#123;1, 2, 3, 4, 5, 6, 7&#125;vars2 = &#123;4, 5, 6, 7, 8, 9, 10&#125;print(vars1 | vars2) # &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;res = vars1.union(vars2)print(res) # &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;vars1.update(vars2)print(vars1) # &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;# 差集vars1 = &#123;1, 2, 3, 4, 5, 6, 7&#125;vars2 = &#123;4, 5, 6, 7, 8, 9, 10&#125;print(vars1 - vars2) # &#123;1, 2, 3&#125;print(vars2 - vars1) # &#123;8, 9, 10&#125;res = vars1.difference(vars2)print(res) # &#123;1, 2, 3&#125;vars1.difference_update(vars2)print(vars1) # &#123;1, 2, 3&#125;# 对称差集vars1 = &#123;1, 2, 3, 4, 5, 6, 7&#125;vars2 = &#123;4, 5, 6, 7, 8, 9, 10&#125;print(vars1 ^ vars2) # &#123;1, 2, 3, 8, 9, 10&#125;res = vars1.symmetric_difference(vars2)print(res) # &#123;1, 2, 3, 8, 9, 10&#125;vars1.symmetric_difference_update(vars2)print(vars1) # &#123;1, 2, 3, 8, 9, 10&#125;vars1 = &#123;1,2,3&#125;vars2 = &#123;1,2,3,4,5,6,7&#125;res = vars2.issuperset(vars1)print(res) # Trueres = vars1.issubset(vars2)print(res) # Trueres = vars1.isdisjoint(vars2)print(res) # False 更新: 2024-01-10 22:17:18原文: https://www.yuque.com/zacharyblock/cx2om6/an7fvuvt1unusq1w","categories":[{"name":"Python基础","slug":"Python基础","permalink":"http://example.com/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"Python基础-语法","slug":"Python基础/语法","date":"2022-12-31T16:54:00.000Z","updated":"2024-12-07T14:42:41.085Z","comments":true,"path":"2022/12/31/Python基础/语法/","permalink":"http://example.com/2022/12/31/Python%E5%9F%BA%E7%A1%80/%E8%AF%AD%E6%B3%95/","excerpt":"","text":"语法课程介绍 语法 函数 容器 文件 内置模块 Python 环境安装包括了 Python、Pycharm、typora、语雀 https://www.python.org/ https://www.jetbrains.com/pycharm/ https://typoraio.cn/ https://www.yuque.com/ 初识 Python 脚本输出语句 print1print(&quot;Hellozachary&quot;) 空格与缩进123def main(): print(&quot;Hello zachary&quot;) print(&quot;Welcome to Python&quot;) 注释Python 的注释就是用一个 # 注释的一行话，除了# 还可以用’’’ ‘’’，和””” “”” 123456789# 这是一个单行注释&#x27;&#x27;&#x27;这是一个多行注释&#x27;&#x27;&#x27;&quot;&quot;&quot;这也是一个多行注释&quot;&quot;&quot; 语句跨行使用反斜杠是语句分行编写 123for i in \\range(9): print(i) 变量（标识符：变量名、函数名、类名、模块名）用于记录可变化的数据 12num=10print(num) 变量的命名规范 变量名可以使用字母、数字、下划线， 但是不能以数字开头 要严格区分大小写 不要使用中文 不要使用关键字 关键字包括不限于： 变量定义及数据交换变量的定义方式 12345678#第一种a=10b=20print(a,b)#第二种a,b=10,20print(a,b) 交换变量的数据 1234567891011121314#普通方式交换数据a=10b=20t=aa=bb=tprint(a,b)#python独有的方法进行数据交换a=10b=20a,b=b,aprint(a,b) Python 的数据类型什么是数据类型——数据的表现形式，常用的包括有数字、字符串，在程序中我们常使用的包括： 字符串类型12345love=&#x27;Iloveyou&#x27;name=&quot;Zachary&quot;print(love)print(name) 可以使用type()查看变量的数据类型 123456#大字符串s=&#x27;&#x27;&#x27;比如这是一个很长的字符串可以换行的&#x27;&#x27;&#x27;print(s) 字符串中使用引号可以嵌套使用，单双引号可以互相嵌套，但是不可以嵌套自己 12s=&quot;I&#x27;mZachary&quot;print(s) 关于转义字符 \\t 制表符\\r 换行符\\n 回车换行符在字符串前面加一个r可以取消转义字符的效果 1234567#使用了转义字符的s=&quot;这是一段话\\n分了两行&quot;print(s)#使用r使转义字符失效s=r&quot;这是一段话\\n没有分两行&quot;print(s) 数字类型 整型 int 1234var=520print(var,type(var))var=-100print(var,type(var)) 浮点类型 float 12var=3.14print(var,type(var)) 复数类型 complex 12var=5+6jprint(var,type(var)) 布尔类型 bool(True\\False) 1234var=Trueprint(var,type(var))var=Falseprint(var,type(var)) list 列表类型列表用来表示一系列数据，例如需要记录一组数字或者其他数据，用中括号括起来[],并且数据之间使用,分隔开 12varlist=[192,200,43]print(varlist,type(varlist)) 列表中存储的数据可以是任意类型 列表中存储的每一组数据，称为元素 列表中存储的数据可以通过下标获取，列表的下标从 0 开始，倒着来最后一个是-1 12varlist=[192,200,43]print(varlist[0]) 列表中元素的值，可以是一个 list，这种叫二维列表 123varlist=[192,[&#x27;a&#x27;,&#x27;b&#x27;],43]print(varlist,type(varlist))print(varlist[1][0])#&#x27;a&#x27; tuple 元组类型元组与列表数据类型相似，使用多个数据内容时候也可以使用元组，用括号()括起来，但是区别在于 tuple 的元素不可改变 12vart=(1,2,3,&#x27;a&#x27;,&#x27;b&#x27;)print(vart,type(vart)) 注意，在定义元组时候，如果只有一个元素，需要加一个逗号, 12vart=(&#x27;abc&#x27;,)print(vart) 列表使用中括号[]定义，元组使用括号()定义 列表中的值可以被改变，元组中的值不可以 dict 字典类型字典也是用于存储一组或多组数据，使用大括号&#123;&#125;括起来，使用的是键-值对的存储方式 使用键-值对的方式进行定义，{ key:value } 键和值之间使用冒号:进行分隔，多组键-值对之间用逗号,分隔 键-必须是字符串或者数字类型，值-可以是任意类型 键-不可以重复，值-可以重复 12345678vard=&#123;&#x27;title&#x27;:&#x27;&lt;&lt;无人生还&gt;&gt;&#x27;,&#x27;author&#x27;:&#x27;阿加莎·克里斯蒂&#x27;,&#x27;price&#x27;:&#x27;39.99&#x27;&#125;print(vard,type(vard))#通过索引键名来获得对应值，类似于list的方式print(vard[&#x27;title&#x27;]) set 集合类型集合是一种用于存储无重复的数据，使用大括号&#123;&#125;或者 set()方法来定义 集合是一种无序且无重复的数据类型 使用 set 方法定义的时候，里面是字符串 当需要定义一个空集合的时候，只能使用 set 方法，因为&#123;&#125;是一个空字典 123456789vars=&#123;1,2,3,4,&#x27;a&#x27;,&#x27;b&#x27;,1,2,3&#125;print(vars,type(vars))#&#123;1,2,3,4,&#x27;a&#x27;,&#x27;b&#x27;&#125;&lt;class&#x27;set&#x27;&gt;vars=set(&quot;123&quot;)print(vars)#&#123;&#x27;1&#x27;,&#x27;3&#x27;,&#x27;2&#x27;&#125;vars=set()print(vars,type(vars))#set()&lt;class&#x27;set&#x27;&gt;vard=&#123;&#125;print(vard,type(vard))#&#123;&#125;&lt;class&#x27;dict&#x27;&gt; 可以给集合添加元素，使用 add 方法 可以删除集合中的元素，使用 discard 方法 也可以用in检查元素是否在集合中 123456vars=&#123;1,2,3,4,&#x27;a&#x27;,&#x27;b&#x27;,1,2,3&#125;vars.add(&#x27;c&#x27;)print(vars)#&#123;1,2,3,4,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;&#125;vars.discard(4)print(vars)#&#123;1,2,3,&#x27;c&#x27;,&#x27;b&#x27;,&#x27;a&#x27;&#125;print(1invars)#True 集合主要用于运算，包括交集、并集、补集，对称集合 123456a=&#123;1,2,3,7,8,9&#125;b=&#123;1,2,&#x27;a&#x27;,&#x27;b&#x27;&#125;print(a&amp;b)#交集&#123;1,2&#125;print(a-b)#差集&#123;8,9,3,7&#125;print(a|b)#并集&#123;1,2,3,7,8,9,&#x27;a&#x27;,&#x27;b&#x27;&#125;print(a^b)#对称集合&#123;3,&#x27;a&#x27;,7,8,9,&#x27;b&#x27;&#125; 基础数据类型转换数据类型总结字符串 str数字类型 整型 int 浮点 float 复数 complex 布尔 bool 列表 list元组 tuple字典 dict集合 set 可变数据类型：列表(append)、字典([‘key’])、集合(add)不可变数据类型：字符串、数字、元组 容器类型数据：字符串、列表、元组、集合、字典非容器类型数据：数字、布尔类型 数据类型转换：把一个数据类型转化为另一个类型为什么要进行数据类型转换：因为不同数据类型之间不能进行运算数据转换的类型： 自动类型转换当两个不同类型的值进行运算时，结果会向更高的精度进行计算True &#x3D;&#x3D;&#x3D;&gt; 整型 &#x3D;&#x3D;&#x3D;&gt; 浮点 &#x3D;&#x3D;&#x3D;&gt; 复数 123456#自动类型转换a=123b=Trueprint(a+b)#124print(12.5+22)#34.5print(True+3.14)#4.140000000000001 强制类型转换分别有：str()、int()、float()、bool()、list()、tuple()、dict()、set() 可以将所有类型转换为 str 字符串如果是纯数字可以转化为 int，其他类型容器不行 float 与 int 类似 bool 的强制转化，只要有非 0 值、非空值的内容、容器，结果都是 True 容器类型数据转换容器类型转换为 list 列表 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型字符串可以转换，会把字符串中的每一个字符当做一个元素集合、元组、字典都可以转换，字典会只保留键 12345678#list列表n=&#x27;123&#x27;res=list(n)print(n,type(n))#123&lt;class&#x27;str&#x27;&gt;print(res,type(res))#[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]&lt;class&#x27;list&#x27;&gt;n=&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2&#125;res=list(n)print(res)#[&#x27;a&#x27;,&#x27;b&#x27;] tuple 元组 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型字符串可以转换，会把字符串中的每一个字符当做一个元素集合、列表、字典也都可以转换，同上只保留键 set 集合 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型字符串可以转换，会把字符串中的每一个字符当做一个元素，并且是无序的列表、元组、字典也都可以转换，字典只保留键 dict 字典 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型字符串不可以转换列表转化的时候必须是嵌套的形式才可以，二级列表,并且每个元素是一个二元素的列表元组转化的时候，同列表必须是二级元组，每一个元素是一个二元素的元组集合不可以转为字典 12345678# 列表转化为字典n = [[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]]res = dict(n)print(res) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;# 元组转化为字典n = ((&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2))res = dict(n)print(res) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125; 运算符算数运算符 加 减 乘 &#x2F; 除 % 取余（取模） &#x2F;&#x2F; 取整 ** 乘方 字符运算符 字符串与数字不能直接进行运算 字符串与字符串可以使用 + 进行拼接 字符串如果和数字使用 * 那就是重复数字次的字符串 在字符串中如果出现变量，可以使用&#123;&#125; 将变量括起来，然后再字符串前面加上f 12345l = &quot;love&quot;print(l * 3) # loveloveloves = f&quot;I &#123;l&#125; you&quot;print(s) # I love you 赋值运算符 &#x3D; 简单的赋值运算符 +&#x3D; 加法赋值运算符 -&#x3D; 减法赋值运算符 *&#x3D; 乘法赋值运算符 &#x2F;&#x3D; 除法赋值运算符 %&#x3D; 取余赋值运算符 **&#x3D; 乘方赋值运算符 &#x2F;&#x2F;&#x3D; 取整赋值运算符 123a = 12a += 12print(a) # 24 比较运算符 &#x3D;&#x3D; 比较两个值是否相等，返回 True、False !&#x3D; 比较两个值是否不相等 大于，返回 True，否则 False &lt; 小于，返回 True，否则 False &#x3D; 大于等于，返回 True，否则 False &lt;&#x3D; 小于等于，返回 True，否则 False 12b = 12print(a != b) # True 逻辑运算符 and 与 or 或 not 非 有一个贪心原则，当 and 的时候前一个是 False，后一个就不计算了，直接返回 False，当 or 的时候，如果前一个是 True 则返回 True，否则返回后一个的情况 位运算位运算是在二进制上使用的，可以使用 bin()方法将其他进制转换成二进制 &amp; 按位与运算 | 按位或运算 ^ 按位异或运算 ~ 按位取反运算 &lt;&lt; 左移运算 右移运算 其他运算符 成员运算符 in 该成员是否在该数据中not in 该成员是否不在该数据中 身份运算符 is 检测两个标识符是否引自同一个对象not is 两个标识符不是引自同一个对象 id()可以用于获取对象地址 流程控制流程控制有顺序、分支、循环等 分支结构 在分支中常使用的是 if-else 语句 1234if 条件1: code1else: code2 该分支可以嵌套，重复等等叠加使用 123456if 条件1: code1elif 条件2: code2else: code3 三元运算符 1code1 if 条件1 else code2 循环结构while 循环123456num = 1while num &lt; 10: print(num) num += 1else: print(&quot;循环结束啦&quot;) for 循环12for i in range(10): print(i) break 语句 跳出循环 continue 语句 跳出当前循环，执行下一次循环 pass 语句 什么也不做 exit()和 quit()用于结束程序的，结束的是解释器的程序 打印矩形打印出十行十列的符号 12for i in range(10): print(&quot;✨✨✨✨✨✨✨✨✨✨&quot;) 隔一行换一个颜色 12345for i in range(10): if i % 2 == 0: print(&quot;❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤&quot;) else: print(&quot;◇ ◇ ◇ ◇ ◇ ◇ ◇ ◇ ◇ ◇&quot;) 打印乘法表1234for i in range(1,10): for j in range(1,i+1): print(f&quot;&#123;j&#125;✖&#123;i&#125;=&#123;i*j&#125;&quot;,end=&quot;\\t&quot;) print() 打印斐波那契数列1234567num = 10res_list = [0, 1]for i in range(num-2): res_list.append(res_list[-1]+res_list[-2])print(res_list) 百元买百鸡一共有 100 元，买 100 只鸡公鸡&#x3D;3 元母鸡&#x3D;1 元小鸡&#x3D;&#x3D;&#x3D;0.5 元罗列出所有方案 12345678910111213141516171819202122232425# 公鸡 3# 母鸡 1# 小鸡 0.5money = 100cock_price = 3hen_price = 1chick_price = 0.5count = 0cock_max = money // cock_pricehen_max = money // hen_pricechick_max = int(money // chick_price)print(cock_max, hen_max, chick_max) # 33 100 200for cock_num in range(1, cock_max + 1): for hen_num in range(1, hen_max + 1): money_res = money - cock_num * cock_price - hen_num * hen_price if money_res &lt;=0: break else: chick_num = int(money_res // chick_price) if cock_num+hen_num+chick_num == 100: count += 1 print(f&quot;方案&#123;count&#125;————100元可以购买:&#123;cock_num&#125;只公鸡，&#123;hen_num&#125;只母鸡，&#123;chick_num&#125;只小鸡&quot;) 求 1000 以内的水仙花数打印 1000 以内所有满足水仙花的数，“水仙花数”是指一个三位数其各位数字的立方和等于该数本身，例如 153 是“水仙花数”，因为：153 &#x3D; 1^3 + 5^3 + 3^3 123456for num in range(100, 1000): a = num // 100 b = num % 100 // 10 c = num % 100 % 10 if a*a*a+b*b*b+c*c*c == num: print(num) 青蛙跳台阶问题困难：一共有 n 个台阶，一只青蛙每次只能跳一阶或是两阶，那么一共有多少种跳到顶端的方案？例如 n&#x3D;2，那么一共有两种方案，一次性跳两阶或是每次跳一阶。 动态规划：其实，就是利用，上次得到的结果，给下一次作参考，下一次就能利用上次的结果快速得到结果，依次类推 1234567891011121314151617181920# 方法一n = 10a = 1b = 2for i in range(n-2): t = a a = b b += tprint(b)# 方法二num = 10res_list = [1, 2]for i in range(num-2): res_list.append(res_list[-1]+res_list[-2])print(res_list[-1]) 更新: 2024-08-01 16:25:27原文: https://www.yuque.com/zacharyblock/cx2om6/slzd0tdgv6rm1nk1","categories":[{"name":"Python基础","slug":"Python基础","permalink":"http://example.com/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]}],"categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"http://example.com/categories/FastAPI%E5%85%A5%E9%97%A8/"},{"name":"Python进阶","slug":"Python进阶","permalink":"http://example.com/categories/Python%E8%BF%9B%E9%98%B6/"},{"name":"Python面向对象","slug":"Python面向对象","permalink":"http://example.com/categories/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"name":"Python基础","slug":"Python基础","permalink":"http://example.com/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://example.com/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"http://example.com/tags/%E5%AE%9E%E6%88%98/"}]}