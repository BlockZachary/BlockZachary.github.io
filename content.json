{"meta":{"title":"Zachary Blog","subtitle":"这里是副标题","description":"","author":"Zachary Block","url":"https://blockzachary.github.io","root":"/"},"pages":[{"title":"category","date":"2024-12-07T20:44:44.000Z","updated":"2024-12-07T20:44:44.000Z","comments":true,"path":"category/index.html","permalink":"https://blockzachary.github.io/category/index.html","excerpt":"","text":""},{"title":"gallery","date":"2024-12-07T20:44:44.000Z","updated":"2024-12-07T20:44:44.000Z","comments":true,"path":"gallery/index.html","permalink":"https://blockzachary.github.io/gallery/index.html","excerpt":"","text":"Here is a collection of beautiful images:"},{"title":"tag","date":"2024-12-07T20:44:51.000Z","updated":"2024-12-07T20:44:51.000Z","comments":true,"path":"tag/index.html","permalink":"https://blockzachary.github.io/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"Shell","slug":"Linux/Shell","date":"2024-08-08T20:46:00.000Z","updated":"2024-08-08T20:46:00.000Z","comments":true,"path":"blog/2220072441/","permalink":"https://blockzachary.github.io/blog/2220072441/","excerpt":"","text":"ShellShell 介绍什么是 Shell 一种脚本语言、命令行解释器：可以将一组命令行打包为一个文件，调用操作系统的内核去执行这些命令 shell 中也支持条件判断、分支、定义函数、变量等功能 shell 脚本的扩展名一般以.sh 结尾，但没有强制要求 Shell 的应用Shell 可以做什么呢？ 可以针对批量操作文件提取转换数据、生成报告 针对项目环境进行初始化 执行定时任务，巡检系统运行状态 Shell 解释器的分类通常包括 csh ksh bash zsh Shell 查看 通过cat /etc/shells可以查看系统有哪些 shell 可以用 通过echo $SHELL可以查看当前使用的 shell 通过 /bin/[SHELL名称] 可以切换 shell Shell 变量创建一个 test.sh，并使用 VSCode 打开这个文件 第一行需要声明一下这个文件 使用的是哪个解释器 #!/bin/bash 整数、字符串、数组变量变量的定义和输出 整数 字符串 数组 命令行结果转为变量打印 ls 命令返回的结果 1234#!/bin/bashfile=$(ls -l)echo $&#123;file[@]&#125; 环境变量获取外部定义的环境变量 变量的赋值 :- :&#x3D; 123456#!/bin/bashecho $&#123;VAR1:-&quot;hello VAR1&quot;&#125;echo $&#123;VAR2:=&quot;hello VAR2&quot;&#125;echo $VAR1echo $VAR2 内置特殊变量特殊的一些参数 $0 代表当前脚本名称 $1 $2 $3 代表脚本的参数 $# 代表脚本的参数个数 控制流if12345678910#!/bin/basha=10b=20if [ $a -gt $b ]; then echo &quot;$a is greater than $b&quot;else echo &quot;$b is greater than $a&quot;fi for123456#!/bin/bashfor num in 1 2 3 4 5; do echo &quot;this number is : $num&quot;done 循环遍历 ls 的结果 123456#!/bin/bashfor item in $(ls); do echo &quot;this file name is : $item&quot;done while每隔一秒打印一个 hello 123456#!/bin/bashwhile (true); do echo &quot;hello&quot; sleep 1done 输出 小于 10 的所有正整数 123456789#!/bin/bashnum=1while (($num&lt;10)); do echo $num let &quot;num++&quot;done switch case123456789101112131415#!/bin/bashecho &quot;输入1-4之间的数字：&quot;echo &quot;您输入的数字为：&quot;read aNumcase $aNum in 1) echo &quot;你选择了 1&quot;;; 2) echo &quot;你选择了 2&quot;;; 3) echo &quot;你选择了 3&quot;;; 4) echo &quot;你选择了 4&quot;;; *) echo &quot;你没有输入 1 到 4 之间的数字&quot;;;esac Shell 函数12345678910111213#!/bin/bashfunction test() &#123; if [ $1 -le $2 ]; then echo &quot;$1 is less than or equal to $2&quot; else echo &quot;$1 is greater than $2&quot; fi&#125;test 1 2test 3 1 重定向在 linux 中 每个进程都有三个打开的默认描述符 0 表示标准输入 1 表示标准输出 2 表示标准错误输出 将一个 sh 结果输出到文件中 以追加的方式输出到文件中 在 test.sh 中写入 12345#!/bin/bashecho &quot;is a shell&quot; 然后命令行执行 12345678910➜ Desktop bash test.sh &gt; file.txt➜ Desktop cat file.txtis a shell➜ Desktop bash test.sh &gt;&gt; file.txt➜ Desktop bash test.sh &gt;&gt; file.txt➜ Desktop cat file.txtis a shellis a shellis a shell➜ Desktop 写一个异常 123456#!/bin/bashecho &quot;is a shell&quot;a=1b=0((a/b)) 然后输出结果 123456789➜ Desktop bash test.shis a shelltest.sh: line 6: ((: a/b: division by 0 (error token is &quot;b&quot;)➜ Desktop bash test.sh 2&gt;&gt; error.logis a shell➜ Desktop cat error.logtest.sh: line 6: ((: a/b: division by 0 (error token is &quot;b&quot;)➜ Desktop 把错误的信息输出到标准输出里面 123456➜ Desktop bash test.sh &gt; file.txt 2&gt;&amp;1➜ Desktop cat file.txtis a shelltest.sh: line 6: ((: a/b: division by 0 (error token is &quot;b&quot;)➜ Desktop 更新: 2024-08-08 22:02:20原文: https://www.yuque.com/zacharyblock/cx2om6/kxmxwdhvlqkut570","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blockzachary.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blockzachary.github.io/tags/Linux/"},{"name":"Shell","slug":"Shell","permalink":"https://blockzachary.github.io/tags/Shell/"}]},{"title":"拉一个 docker 的 mysql","slug":"Docker/拉一个docker的mysql","date":"2024-08-04T21:36:00.000Z","updated":"2024-08-04T21:36:00.000Z","comments":true,"path":"blog/3658481920/","permalink":"https://blockzachary.github.io/blog/3658481920/","excerpt":"","text":"拉一个 docker 的 mysql先创建一个文件夹 如： mkdir docker_env 然后进入这个目录 cd docker_env 在这个目录下，创建一个文件 touch docker-compose.yml 然后在这个文件里面编辑 123456789101112131415161718version: &quot;3.9&quot;services: mysql: image: &quot;mysql:8.0.27&quot; restart: always environment: MYSQL_ROOT_PASSWORD: &quot;123456&quot; TZ: Asia/Shanghai # 指定时区 ports: - &quot;3306:3306&quot; volumes: - ./mysql8:/var/lib/mysql redis: image: &quot;redis:6.2.6-alpine3.15&quot; restart: always ports: - &quot;6379:6379&quot; 123456789101112131415161718version: &quot;3.9&quot;services: mysql-m1: image: &quot;mysql/mysql-server&quot; restart: always environment: MYSQL_ROOT_PASSWORD: &quot;123456&quot; TZ: Asia/Shanghai # 指定时区 ports: - &quot;3306:3306&quot; volumes: - ./m1-mysql8:/var/lib/mysql redis: image: &quot;redis:6.2.6-alpine3.15&quot; restart: always ports: - &quot;6379:6379&quot; 接着在这个目录下运行 docker-compose up -d docker 如果很慢的话 配置一下 docker 应用程序的源 12345678910111213&#123; &quot;builder&quot;: &#123; &quot;gc&quot;: &#123; &quot;defaultKeepStorage&quot;: &quot;20GB&quot;, &quot;enabled&quot;: true &#125; &#125;, &quot;experimental&quot;: false, &quot;features&quot;: &#123; &quot;buildkit&quot;: true &#125;, &quot;registry-mirrors&quot;: [&quot;https://reg-mirror.qiniu.com/&quot;]&#125; mysql 远程连接12345# https://www.cnblogs.com/niuben/p/11481239.htmlmysql -uroot -puse mysql;UPDATE user SET host = &#x27;%&#x27; WHERE user =&#x27;root&#x27;;flush privileges; # 更新: 2024-08-04 22:35:33原文: https://www.yuque.com/zacharyblock/cx2om6/lfugkndghckigub7","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/tags/Docker/"}]},{"title":"Django-Ninja Takeout","slug":"PythonWeb/Django-NinjaTakeout","date":"2024-07-15T19:23:00.000Z","updated":"2024-07-15T19:23:00.000Z","comments":true,"path":"blog/3297479333/","permalink":"https://blockzachary.github.io/blog/3297479333/","excerpt":"","text":"Django-Ninja Takeout基于 7y 大佬的项目：Django Ninja 实战外卖项目 项目初始化创建 Django 项目直接使用 PyCharm 创建一个 Django 项目 创建应用这一步创建三个应用user、product、order 普通创建通过脚本命令，执行python manage.py startapp [应用名称]来创建 123(venv) ➜ takeout python manage.py startapp user(venv) ➜ takeout python manage.py startapp product(venv) ➜ takeout python manage.py startapp order 专业版创建通过 Tools -&gt; Run manage.py Task…打开执行脚本命令行 可以通过带有提示的命令脚本执行 manage 下的脚本命令 创建好三个应用之后，通过在项目目录下创建一个apps的包，将这三个应用移动至 apps 下 注册应用在 Django 中需要把上面创建的 app 都注册进去 在&#x2F;takeout&#x2F;takeout&#x2F;settings.py 中修改以下内容 12345678910111213141516# 解决跨域ALLOWED_HOSTS = [&#x27;*&#x27;]# Application definitionINSTALLED_APPS = [ &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;, &#x27;apps.user&#x27;, &#x27;apps.product&#x27;, &#x27;apps.order&#x27;,] 配置 Django-Ninja 依赖 安装 Ninja&amp;pillow pip install django-ninja pillow 配置静态路由在&#x2F;apps 下新建一个 api.py 文件 12345678910111213# -*- coding:utf-8 -*-# Author: Zacharyfrom ninja import NinjaAPIapp = NinjaAPI(title=&quot;DjangoNinja-瑞吉外卖H5&quot;, description=&quot;使用DjangoNinja实现《瑞吉外卖》项目&quot;)@app.get(&quot;/index&quot;)def index(request): return &quot;Hello Django Ninja&quot; 在&#x2F;takeout&#x2F;urls.py 加入 app 的 url 123456789from django.contrib import adminfrom django.urls import pathfrom apps.api import appurlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls), path(&#x27;&#x27;, app.urls),] 先在manage.py同级目录下创建文件夹/static, /media，再去takeout/takeout/settings.py有的修改、没有的追加 12345678910111213141516171819202122DEBUG = True# 配置跨域ALLOWED_HOSTS = [&#x27;*&#x27;]# 设置语言 -adminLANGUAGE_CODE = &quot;zh-hans&quot;# 设置时区TIME_ZONE = &quot;Asia/Shanghai&quot;# 添加static目录将前端工程一到目录下，这一步各位直接github去找static/fonrt# https://github.com/zy7y/takeout # 追加内容STATIC_ROOT = BASE_DIR / &#x27;static&#x27;FRONT_URL = &#x27;front/&#x27;FRONT_ROOT = BASE_DIR / &#x27;static/front&#x27;BACKEND_URL = &#x27;backend/&#x27;BACKEND_ROOT = BASE_DIR / &#x27;static/backend&#x27;# 并在takeout 目录下新建media目录 追加内容# 图片资源访问路径， 注意新建media这个目录MEDIA_URL = &#x27;media/&#x27;# 图片资源存放路径MEDIA_ROOT =BASE_DIR / &#x27;media&#x27; 添加 static 静态资源路径 1234567891011121314151617181920212223242526272829303132333435363738394041424344&quot;&quot;&quot;URL configuration for takeout project.The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/5.0/topics/http/urls/Examples:Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: path(&#x27;&#x27;, views.home, name=&#x27;home&#x27;)Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: path(&#x27;&#x27;, Home.as_view(), name=&#x27;home&#x27;)Including another URLconf 1. Import the include() function: from django.urls import include, path 2. Add a URL to urlpatterns: path(&#x27;blog/&#x27;, include(&#x27;blog.urls&#x27;))&quot;&quot;&quot;from django.conf.urls.static import staticfrom django.contrib import adminfrom django.urls import path, re_pathfrom django.views.static import servefrom apps.api import appfrom takeout import settingsurlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls), path(&#x27;&#x27;, app.urls),]# 配置静态资源访问if settings.DEBUG: # H5 页面 urlpatterns += static(settings.FRONT_URL, document_root=settings.FRONT_ROOT) urlpatterns += static(settings.BACKEND_URL, document_root=settings.BACKEND_ROOT) urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)else: urlpatterns += [ re_path(r&#x27;^static/(?P&lt;path&gt;.*)$&#x27;, serve, &#123;&#x27;document_root&#x27;: settings.STATIC_ROOT&#125;, name=&#x27;static&#x27;), re_path(r&#x27;^front/(?P&lt;path&gt;.*)$&#x27;, serve, &#123;&#x27;document_root&#x27;: settings.FRONT_ROOT&#125;, name=&#x27;front&#x27;), re_path(r&#x27;^backend/(?P&lt;path&gt;.*)$&#x27;, serve, &#123;&#x27;document_root&#x27;: settings.BACKEND_ROOT&#125;, name=&#x27;backend&#x27;), # 上传图片资源 re_path(r&#x27;^media/(?P&lt;path&gt;.*)$&#x27;, serve, &#123;&#x27;document_root&#x27;: settings.MEDIA_ROOT&#125;, name=&#x27;media&#x27;), ] 运行项目12345678# 生成表python manage.py migrate# 创建超级用户 密码随便你们输入python manage.py createsuperuser --username admin# 收集Django Admin文件python manage.py collectstatic# 启动服务python manage.py runserver 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354(venv) ➜ takeout python manage.py migrateOperations to perform: Apply all migrations: admin, auth, contenttypes, sessionsRunning migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying auth.0012_alter_user_first_name_max_length... OK Applying sessions.0001_initial... OK(venv) ➜ takeout python manage.py createsuperuser --username admin电子邮件地址:Password: ruser -- create a superuserPassword (again):密码长度太短。密码必须包含至少 8 个字符。这个密码太常见了。密码只包含数字。Bypass password validation and create user anyway? [y/N]: ySuperuser created successfully.(venv) ➜ takeout python manage.py collectstaticYou have requested to collect static files at the destinationlocation as specified in your settings: /Users/zachary/Documents/PythonCode/takeout/staticThis will overwrite existing files!Are you sure you want to do this?Type &#x27;yes&#x27; to continue, or &#x27;no&#x27; to cancel: yes126 static files copied to &#x27;/Users/zachary/Documents/PythonCode/takeout/static&#x27;.(venv) ➜ takeout python manage.py runserverWatching for file changes with StatReloaderPerforming system checks...System check identified no issues (0 silenced).July 16, 2024 - 00:25:44Django version 5.0.7, using settings &#x27;takeout.settings&#x27;Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C. 模型类user编写用户信息表和地址的模型类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566from django.db import models# Create your models here.class User(models.Model): # 不定义主键默认会给一个自增长的 id name = models.CharField(max_length=50, blank=True, null=True, db_comment=&#x27;姓名&#x27;, verbose_name=&#x27;姓名&#x27;) phone = models.CharField(max_length=100, db_comment=&#x27;手机号&#x27;, verbose_name=&#x27;手机号&#x27;) status = models.IntegerField(blank=True, null=True, db_comment=&#x27;状态 0:禁用，1:正常&#x27;, verbose_name=&#x27;状态&#x27;) create_time = models.DateTimeField(db_comment=&#x27;创建时间&#x27;, auto_now_add=True) update_time = models.DateTimeField(db_comment=&#x27;更新时间&#x27;, auto_now=True, verbose_name=&#x27;更新时间&#x27;) def __str__(self): return self.phone class Meta: # managed = False # 数据库的表名 db_table = &#x27;user&#x27; # 数据库表备注 db_table_comment = &#x27;用户信息&#x27; # verbose_name django admin 显示的 verbose_name = &#x27;用户&#x27; verbose_name_plural = &#x27;用户管理&#x27;class AddressBook(models.Model): # 数据库层面没绑定物理关系，字段是可空的外键字段，它允许引用的 User 对象不存在，并且在关联的 User 对象被删除时，user_id 字段的值将被设置为 NULL。 # 数据库寸的字端其实就是user_id， user表的主键 user = models.ForeignKey(User, db_constraint=False, on_delete=models.SET_NULL, null=True, verbose_name=&quot;用户&quot;) # user_id = models.BigIntegerField(db_comment=&#x27;用户id&#x27;) consignee = models.CharField(max_length=50, db_comment=&#x27;收货人&#x27;, verbose_name=&#x27;收货人&#x27;) sex = models.IntegerField(db_comment=&#x27;性别 0 女 1 男&#x27;, verbose_name=&#x27;性别&#x27;) phone = models.CharField(max_length=11, db_comment=&#x27;手机号&#x27;, verbose_name=&#x27;手机号&#x27;) province_code = models.CharField(max_length=12, blank=True, null=True, db_comment=&#x27;省级区划编号&#x27;) province_name = models.CharField(max_length=32, blank=True, null=True, db_comment=&#x27;省级名称&#x27;) city_code = models.CharField(max_length=12, blank=True, null=True, db_comment=&#x27;市级区划编号&#x27;) city_name = models.CharField(max_length=32, blank=True, null=True, db_comment=&#x27;市级名称&#x27;) district_code = models.CharField(max_length=12, blank=True, null=True, db_comment=&#x27;区级区划编号&#x27;) district_name = models.CharField(max_length=32, blank=True, null=True, db_comment=&#x27;区级名称&#x27;) detail = models.CharField(max_length=200, blank=True, null=True, db_comment=&#x27;详细地址&#x27;, verbose_name=&#x27;详细地址&#x27;) label = models.CharField(max_length=100, blank=True, null=True, db_comment=&#x27;标签&#x27;, verbose_name=&#x27;标签&#x27;) is_default = models.IntegerField(db_comment=&#x27;默认 0 否 1是&#x27;, default=0, verbose_name=&#x27;是否默认&#x27;) create_time = models.DateTimeField(db_comment=&#x27;创建时间&#x27;, auto_now_add=True) update_time = models.DateTimeField(db_comment=&#x27;更新时间&#x27;, auto_now=True, verbose_name=&#x27;更新时间&#x27;) def __str__(self): return self.detail class Meta: # 为False Django 不管理表他的迁移、创建；实际工作中用到的多；我们需要创建表所以注释即可 # managed = False db_table = &#x27;address_book&#x27; db_table_comment = &#x27;地址管理&#x27; verbose_name = &#x27;地址&#x27; verbose_name_plural = &#x27;地址管理&#x27; product编写菜品类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172from django.db import models# Create your models here.class Category(models.Model): # 套餐相关我们不做所以默认1就行了 type = models.IntegerField(blank=True, null=True, db_comment=&#x27;类型 1 菜品分类 2 套餐分类&#x27;, default=1) name = models.CharField(unique=True, max_length=64, db_comment=&#x27;分类名称&#x27;, verbose_name=&#x27;分类名称&#x27;) sort = models.IntegerField(db_comment=&#x27;顺序&#x27;, verbose_name=&#x27;顺序&#x27;) create_time = models.DateTimeField(db_comment=&#x27;创建时间&#x27;, auto_now_add=True) update_time = models.DateTimeField(db_comment=&#x27;更新时间&#x27;, auto_now=True, verbose_name=&#x27;更新时间&#x27;) def __str__(self): return self.name class Meta: # managed = False db_table = &#x27;category&#x27; db_table_comment = &#x27;菜品及套餐分类&#x27; verbose_name = &#x27;菜品分类&#x27; verbose_name_plural = &#x27;菜品分类管理&#x27;class Dish(models.Model): name = models.CharField(unique=True, max_length=64, db_comment=&#x27;菜品名称&#x27;, verbose_name=&quot;菜品名称&quot;) # 1个分类有多个商品 category = models.ForeignKey(Category, db_constraint=False, on_delete=models.SET_NULL, null=True, verbose_name=&quot;菜品分类&quot;) # category_id = models.BigIntegerField(db_comment=&#x27;菜品分类id&#x27;) price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, db_comment=&#x27;菜品价格&#x27;, verbose_name=&#x27;菜品价格&#x27;) code = models.CharField(max_length=64, db_comment=&#x27;商品码&#x27;, verbose_name=&#x27;商品码&#x27;) image = models.ImageField(upload_to=&quot;product/&quot;, verbose_name=&#x27;图片&#x27;, db_comment=&#x27;图片&#x27;) # image = models.CharField(max_length=200, db_comment=&#x27;图片&#x27;,) description = models.CharField(max_length=400, blank=True, null=True, db_comment=&#x27;描述信息&#x27;) status = models.IntegerField(db_comment=&#x27;0 停售 1 起售&#x27;, verbose_name=&#x27;售卖状态&#x27;) sort = models.IntegerField(db_comment=&#x27;顺序&#x27;, verbose_name=&#x27;顺序&#x27;) create_time = models.DateTimeField(db_comment=&#x27;创建时间&#x27;, auto_now_add=True) update_time = models.DateTimeField(db_comment=&#x27;更新时间&#x27;, auto_now=True, verbose_name=&#x27;更新时间&#x27;) def __str__(self): return self.name class Meta: # managed = False db_table = &#x27;dish&#x27; db_table_comment = &#x27;菜品管理&#x27; verbose_name = &#x27;菜品&#x27; verbose_name_plural = &#x27;菜品管理&#x27;class DishFlavor(models.Model): dish = models.ForeignKey(Dish, db_constraint=False, on_delete=models.SET_NULL, null=True, db_comment=&#x27;菜品&#x27;, verbose_name=&quot;菜品&quot;) name = models.CharField(max_length=64, db_comment=&#x27;口味名称&#x27;, verbose_name=&quot;口味名称&quot;) value = models.JSONField(blank=True, null=True, db_comment=&#x27;口味数据list&#x27;, verbose_name=&quot;口味详情&quot;) create_time = models.DateTimeField(db_comment=&#x27;创建时间&#x27;, auto_now_add=True) update_time = models.DateTimeField(db_comment=&#x27;更新时间&#x27;, auto_now=True, verbose_name=&#x27;更新时间&#x27;) def __str__(self): return self.name class Meta: # managed = False db_table = &#x27;dish_flavor&#x27; db_table_comment = &#x27;菜品口味关系表&#x27; verbose_name = &#x27;口味&#x27; verbose_name_plural = &#x27;口味管理&#x27; order编写订单类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869from django.db import modelsfrom apps.product.models import Dishfrom apps.user.models import User, AddressBook# Create your models here.class Orders(models.Model): number = models.CharField(max_length=50, blank=True, null=True, db_comment=&#x27;订单号&#x27;) status = models.IntegerField(db_comment=&#x27;订单状态 1待付款，2待派送，3已派送，4已完成，5已取消&#x27;, verbose_name=&#x27;订单状态&#x27;) user = models.ForeignKey(User, db_constraint=False, null=True, on_delete=models.SET_NULL, db_comment=&#x27;下单用户&#x27;, verbose_name=&quot;用户&quot;) address_book = models.ForeignKey(AddressBook, null=True, db_constraint=False, on_delete=models.SET_NULL, db_comment=&#x27;地址id&#x27;, verbose_name=&quot;地址&quot;) order_time = models.DateTimeField(db_comment=&#x27;下单时间&#x27;, verbose_name=&quot;下单时间&quot;) checkout_time = models.DateTimeField(db_comment=&#x27;结账时间&#x27;, verbose_name=&quot;结账时间&quot;) pay_method = models.IntegerField(db_comment=&#x27;支付方式 1微信,2支付宝&#x27;, default=1, verbose_name=&quot;支付方式&quot;) amount = models.DecimalField(max_digits=10, decimal_places=2, db_comment=&#x27;实收金额&#x27;, verbose_name=&#x27;实收金额&#x27;) remark = models.CharField(max_length=100, blank=True, null=True, db_comment=&#x27;备注&#x27;, verbose_name=&#x27;备注&#x27;) def __str__(self): return self.number class Meta: db_table = &#x27;orders&#x27; db_table_comment = &#x27;订单表&#x27; verbose_name = &#x27;订单&#x27; verbose_name_plural = &#x27;订单管理&#x27;class OrderDetail(models.Model): order = models.ForeignKey(Orders, db_constraint=False, on_delete=models.SET_NULL, null=True, db_comment=&#x27;订单id&#x27;, verbose_name=&#x27;订单&#x27;) dish = models.ForeignKey(Dish, db_constraint=False, on_delete=models.SET_NULL, blank=True, null=True, db_comment=&#x27;菜品id&#x27; , verbose_name=&#x27;菜品&#x27;) dish_flavor = models.CharField(max_length=50, blank=True, null=True, db_comment=&#x27;口味&#x27;, verbose_name=&#x27;口味&#x27;) number = models.IntegerField(db_comment=&#x27;数量&#x27;, verbose_name=&#x27;数量&#x27;) amount = models.DecimalField(max_digits=10, decimal_places=2, db_comment=&#x27;金额&#x27;, verbose_name=&#x27;金额&#x27;) def __str__(self): if self.order: return self.order.number class Meta: # managed = False db_table = &#x27;order_detail&#x27; db_table_comment = &#x27;订单明细表&#x27; verbose_name = &#x27;订单明细&#x27;class ShoppingCart(models.Model): user = models.ForeignKey(User, db_constraint=False, null=True, on_delete=models.SET_NULL, db_comment=&#x27;用户&#x27;) dish = models.ForeignKey(Dish, db_constraint=False, on_delete=models.SET_NULL, blank=True, null=True, db_comment=&#x27;菜品&#x27;) dish_flavor = models.CharField(max_length=50, blank=True, null=True, db_comment=&#x27;口味&#x27;) number = models.IntegerField(db_comment=&#x27;数量&#x27;) amount = models.DecimalField(max_digits=10, decimal_places=2, db_comment=&#x27;金额&#x27;) create_time = models.DateTimeField(blank=True, null=True, db_comment=&#x27;创建时间&#x27;, auto_now_add=True) class Meta: # 购物车我们不需要后台管理 # managed = False db_table = &#x27;shopping_cart&#x27; db_table_comment = &#x27;购物车&#x27; 迁移并生成表到 SQLite执行以下迁移命令即可 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293(venv) ➜ takeout python manage.py makemigrationsMigrations for &#x27;product&#x27;: apps/product/migrations/0001_initial.py - Create model Category - Create model Dish - Create model DishFlavorMigrations for &#x27;user&#x27;: apps/user/migrations/0001_initial.py - Create model User - Create model AddressBookMigrations for &#x27;order&#x27;: apps/order/migrations/0001_initial.py - Create model Orders - Create model OrderDetail - Create model ShoppingCart(venv) ➜ takeout python manage.py migrateSystem check identified some issues:WARNINGS:order.OrderDetail.amount: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.dish: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.number: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.order: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail: (models.W046) SQLite does not support comments on tables (db_table_comment).order.Orders.address_book: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.amount: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.checkout_time: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.number: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.order_time: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.pay_method: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.remark: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.status: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.user: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders: (models.W046) SQLite does not support comments on tables (db_table_comment).order.ShoppingCart.amount: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.dish: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.number: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.user: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart: (models.W046) SQLite does not support comments on tables (db_table_comment).product.Category.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.name: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.sort: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.type: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category: (models.W046) SQLite does not support comments on tables (db_table_comment).product.Dish.code: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.description: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.image: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.name: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.price: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.sort: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.status: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish: (models.W046) SQLite does not support comments on tables (db_table_comment).product.DishFlavor.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.dish: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.name: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.value: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor: (models.W046) SQLite does not support comments on tables (db_table_comment).user.AddressBook.city_code: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.city_name: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.consignee: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.detail: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.district_code: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.district_name: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.is_default: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.label: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.phone: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.province_code: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.province_name: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.sex: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook: (models.W046) SQLite does not support comments on tables (db_table_comment).user.User.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.name: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.phone: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.status: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.User: (models.W046) SQLite does not support comments on tables (db_table_comment).Operations to perform: Apply all migrations: admin, auth, contenttypes, order, product, sessions, userRunning migrations: Applying user.0001_initial... OK Applying product.0001_initial... OK Applying order.0001_initial... OK(venv) ➜ takeout 管理后台User 管理调整 User给 status 添加一个选择列表，可以再 admin 管理后台看到 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596from django.db import models# Create your models here.class User(models.Model): # 不定义主键默认会给一个自增长的 id # choices 选择项字段只能在这里面选 前面数字入库，后面表示django admin展示文本 STATUS_CHOICES = ( (0, &#x27;禁用&#x27;), (1, &#x27;正常&#x27;) ) name = models.CharField( max_length=50, blank=True, null=True, db_comment=&quot;姓名&quot;, verbose_name=&quot;姓名&quot; ) phone = models.CharField(max_length=100, db_comment=&quot;手机号&quot;, verbose_name=&quot;手机号&quot;) status = models.IntegerField(choices=STATUS_CHOICES, blank=True, null=True, db_comment=&quot;状态 0:禁用，1:正常&quot;, verbose_name=&quot;状态&quot; ) create_time = models.DateTimeField(db_comment=&quot;创建时间&quot;, auto_now_add=True) update_time = models.DateTimeField( db_comment=&quot;更新时间&quot;, auto_now=True, verbose_name=&quot;更新时间&quot; ) def __str__(self): return self.phone class Meta: # managed = False # 数据库的表名 db_table = &quot;user&quot; # 数据库表备注 db_table_comment = &quot;用户信息&quot; # verbose_name django admin 显示的 verbose_name = &quot;用户&quot; verbose_name_plural = &quot;用户管理&quot;class AddressBook(models.Model): # 数据库层面没绑定物理关系，字段是可空的外键字段，它允许引用的 User 对象不存在，并且在关联的 User 对象被删除时，user_id 字段的值将被设置为 NULL。 # 数据库寸的字端其实就是user_id， user表的主键 user = models.ForeignKey( User, db_constraint=False, on_delete=models.SET_NULL, null=True, verbose_name=&quot;用户&quot;, ) # user_id = models.BigIntegerField(db_comment=&#x27;用户id&#x27;) consignee = models.CharField(max_length=50, db_comment=&quot;收货人&quot;, verbose_name=&quot;收货人&quot;) sex = models.IntegerField(db_comment=&quot;性别 0 女 1 男&quot;, verbose_name=&quot;性别&quot;) phone = models.CharField(max_length=11, db_comment=&quot;手机号&quot;, verbose_name=&quot;手机号&quot;) province_code = models.CharField( max_length=12, blank=True, null=True, db_comment=&quot;省级区划编号&quot; ) province_name = models.CharField( max_length=32, blank=True, null=True, db_comment=&quot;省级名称&quot; ) city_code = models.CharField( max_length=12, blank=True, null=True, db_comment=&quot;市级区划编号&quot; ) city_name = models.CharField( max_length=32, blank=True, null=True, db_comment=&quot;市级名称&quot; ) district_code = models.CharField( max_length=12, blank=True, null=True, db_comment=&quot;区级区划编号&quot; ) district_name = models.CharField( max_length=32, blank=True, null=True, db_comment=&quot;区级名称&quot; ) detail = models.CharField( max_length=200, blank=True, null=True, db_comment=&quot;详细地址&quot;, verbose_name=&quot;详细地址&quot; ) label = models.CharField( max_length=100, blank=True, null=True, db_comment=&quot;标签&quot;, verbose_name=&quot;标签&quot; ) is_default = models.IntegerField( db_comment=&quot;默认 0 否 1是&quot;, default=0, verbose_name=&quot;是否默认&quot; ) create_time = models.DateTimeField(db_comment=&quot;创建时间&quot;, auto_now_add=True) update_time = models.DateTimeField( db_comment=&quot;更新时间&quot;, auto_now=True, verbose_name=&quot;更新时间&quot; ) def __str__(self): return self.detail class Meta: # 为False Django 不管理表他的迁移、创建；实际工作中用到的多；我们需要创建表所以注释即可 # managed = False db_table = &quot;address_book&quot; db_table_comment = &quot;地址管理&quot; verbose_name = &quot;地址&quot; verbose_name_plural = &quot;地址管理&quot; 修改模型内容后迁移一下 123456789(venv) ➜ takeout python manage.py makemigrationsMigrations for &#x27;user&#x27;: apps/user/migrations/0002_alter_user_status.py - Alter field status on user(venv) ➜ takeout python manage.py migrateOperations to perform: Apply all migrations: admin, auth, contenttypes, order, product, sessions, userRunning migrations: Applying user.0002_alter_user_status... OK 实现用户管理修改 app&#x2F;user&#x2F;admin.py 的内容 1234567891011121314151617181920212223from django.contrib import adminfrom .models import User, AddressBook# Register your models here.@admin.register(User)class UserManagerAdmin(admin.ModelAdmin): # 列表显示的字段 list_display = (&#x27;name&#x27;, &#x27;phone&#x27;, &#x27;status&#x27;, &#x27;create_time&#x27;) # 列表筛选 list_filter = (&#x27;status&#x27;,) # 搜索框查询 search_fields = (&#x27;name&#x27;, &#x27;phone&#x27;) search_help_text = &#x27;可输入 name, phone查询（支持模糊查询）&#x27;@admin.register(AddressBook)class AddressManagerAdmin(admin.ModelAdmin): list_display = (&#x27;consignee&#x27;, &#x27;sex&#x27;, &#x27;phone&#x27;, &#x27;province_name&#x27;, &#x27;city_name&#x27;, &#x27;detail&#x27;, &#x27;create_time&#x27;) list_filter = (&#x27;sex&#x27;, &#x27;province_name&#x27;, &#x27;city_name&#x27;) search_fields = (&#x27;consignee&#x27;, &#x27;phone&#x27;) search_help_text = &#x27;可输入 consignee, phone查询（支持模糊查询）&#x27; Product 管理调整 Product123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112from django.db import models# Create your models here.class Category(models.Model): TYPE = ( (1, &#x27;菜品分类&#x27;), (2, &#x27;套餐分类&#x27;) ) # 套餐相关我们不做所以默认1就行了 type = models.IntegerField( choices=TYPE, blank=True, null=True, db_comment=&quot;类型 1 菜品分类 2 套餐分类&quot;, default=1 ) name = models.CharField( unique=True, max_length=64, db_comment=&quot;分类名称&quot;, verbose_name=&quot;分类名称&quot; ) sort = models.IntegerField(db_comment=&quot;顺序&quot;, verbose_name=&quot;顺序&quot;) create_time = models.DateTimeField(db_comment=&quot;创建时间&quot;, auto_now_add=True) update_time = models.DateTimeField( db_comment=&quot;更新时间&quot;, auto_now=True, verbose_name=&quot;更新时间&quot; ) def __str__(self): return self.name class Meta: # managed = False db_table = &quot;category&quot; db_table_comment = &quot;菜品及套餐分类&quot; verbose_name = &quot;菜品分类&quot; verbose_name_plural = &quot;菜品分类管理&quot;class Dish(models.Model): STATUS = ( (0, &#x27;停售&#x27;), (1, &#x27;启售&#x27;) ) name = models.CharField( unique=True, max_length=64, db_comment=&quot;菜品名称&quot;, verbose_name=&quot;菜品名称&quot; ) # 1个分类有多个商品 category = models.ForeignKey( Category, db_constraint=False, on_delete=models.SET_NULL, null=True, verbose_name=&quot;菜品分类&quot;, ) # category_id = models.BigIntegerField(db_comment=&#x27;菜品分类id&#x27;) price = models.DecimalField( max_digits=10, decimal_places=2, db_comment=&quot;菜品价格&quot;, verbose_name=&quot;菜品价格&quot;, ) code = models.CharField(max_length=64, db_comment=&quot;商品码&quot;, verbose_name=&quot;商品码&quot;) image = models.ImageField(upload_to=&quot;product/&quot;, verbose_name=&quot;图片&quot;, db_comment=&quot;图片&quot;) description = models.CharField( max_length=400, blank=True, null=True, db_comment=&quot;描述信息&quot; ) status = models.IntegerField(choices=STATUS, default=1, db_comment=&quot;0 停售 1 起售&quot;, verbose_name=&quot;售卖状态&quot;) sort = models.IntegerField(db_comment=&quot;顺序&quot;, verbose_name=&quot;顺序&quot;) create_time = models.DateTimeField(db_comment=&quot;创建时间&quot;, auto_now_add=True) update_time = models.DateTimeField( db_comment=&quot;更新时间&quot;, auto_now=True, verbose_name=&quot;更新时间&quot; ) def __str__(self): return self.name class Meta: # managed = False db_table = &quot;dish&quot; db_table_comment = &quot;菜品管理&quot; verbose_name = &quot;菜品&quot; verbose_name_plural = &quot;菜品管理&quot;class DishFlavor(models.Model): dish = models.ForeignKey( Dish, db_constraint=False, on_delete=models.SET_NULL, null=True, db_comment=&quot;菜品&quot;, verbose_name=&quot;菜品&quot;, ) name = models.CharField(max_length=64, db_comment=&quot;口味名称&quot;, verbose_name=&quot;口味名称&quot;) value = models.JSONField( blank=True, null=True, db_comment=&quot;口味数据list&quot;, verbose_name=&quot;口味详情&quot; ) create_time = models.DateTimeField(db_comment=&quot;创建时间&quot;, auto_now_add=True) update_time = models.DateTimeField( db_comment=&quot;更新时间&quot;, auto_now=True, verbose_name=&quot;更新时间&quot; ) def __str__(self): return self.name class Meta: # managed = False db_table = &quot;dish_flavor&quot; db_table_comment = &quot;菜品口味关系表&quot; verbose_name = &quot;口味&quot; verbose_name_plural = &quot;口味管理&quot; 修改模型内容后迁移一下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788(venv) ➜ takeout python manage.py makemigrationsIt is impossible to change a nullable field &#x27;price&#x27; on dish to non-nullable without providing a default. This is because the database needs something to populate existing rows.Please select a fix: 1) Provide a one-off default now (will be set on all existing rows with a null value for this column) 2) Ignore for now. Existing rows that contain NULL values will have to be handled manually, for example with a RunPython or RunSQL operation. 3) Quit and manually define a default value in models.py.Select an option: 2Migrations for &#x27;product&#x27;: apps/product/migrations/0002_alter_category_type_alter_dish_price_and_more.py - Alter field type on category - Alter field price on dish - Alter field status on dish(venv) ➜ takeout python manage.py migrateSystem check identified some issues:WARNINGS:order.OrderDetail.amount: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.dish: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.number: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.order: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail: (models.W046) SQLite does not support comments on tables (db_table_comment).order.Orders.address_book: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.amount: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.checkout_time: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.number: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.order_time: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.pay_method: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.remark: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.status: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.user: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders: (models.W046) SQLite does not support comments on tables (db_table_comment).order.ShoppingCart.amount: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.dish: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.number: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.user: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart: (models.W046) SQLite does not support comments on tables (db_table_comment).product.Category.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.name: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.sort: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.type: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category: (models.W046) SQLite does not support comments on tables (db_table_comment).product.Dish.code: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.description: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.image: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.name: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.price: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.sort: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.status: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish: (models.W046) SQLite does not support comments on tables (db_table_comment).product.DishFlavor.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.dish: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.name: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.value: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor: (models.W046) SQLite does not support comments on tables (db_table_comment).user.AddressBook.city_code: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.city_name: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.consignee: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.detail: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.district_code: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.district_name: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.is_default: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.label: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.phone: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.province_code: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.province_name: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.sex: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook: (models.W046) SQLite does not support comments on tables (db_table_comment).user.User.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.name: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.phone: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.status: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.User: (models.W046) SQLite does not support comments on tables (db_table_comment).Operations to perform: Apply all migrations: admin, auth, contenttypes, order, product, sessions, userRunning migrations: Applying product.0002_alter_category_type_alter_dish_price_and_more... OK(venv) ➜ takeout 安装 json 展示插件Django-admin 会默认直接展示 json 内容，不直观所以引入该插件 pip install django-jsoneditor 之后还需要在 settings.py 中注册一下 123456789101112INSTALLED_APPS = [ &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;, &#x27;apps.user&#x27;, &#x27;apps.product&#x27;, &#x27;apps.order&#x27;, &#x27;jsoneditor&#x27;,] 123456789101112131415(venv) ➜ takeout python manage.py collectstaticYou have requested to collect static files at the destinationlocation as specified in your settings: /Users/zachary/Documents/PythonCode/takeout/staticThis will overwrite existing files!Are you sure you want to do this?Type &#x27;yes&#x27; to continue, or &#x27;no&#x27; to cancel: yes8 static files copied to &#x27;/Users/zachary/Documents/PythonCode/takeout/static&#x27;, 126 unmodified.(venv) ➜ takeout 实现菜品管理12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from django.contrib import adminfrom django.utils.html import format_htmlfrom jsoneditor.forms import JSONEditor# Register your models here.from .models import *@admin.register(Category)class CategoryManagerAdmin(admin.ModelAdmin): list_display = (&#x27;name&#x27;, &#x27;sort&#x27;, &#x27;create_time&#x27;)# 内联模型 - 嵌套用class Flavor(admin.StackedInline): model = DishFlavor extra = 1 # json字段默认展示的是文本框，这里使用对应插件展示成json formfield_overrides = &#123; models.JSONField: &#123;&quot;widget&quot;: JSONEditor&#125;, &#125; verbose_name_plural = &quot;菜品口味&quot;@admin.register(Dish)class DishManagerAdmin(admin.ModelAdmin): list_display = (&#x27;name&#x27;, &#x27;category&#x27;, &#x27;show_img&#x27;, &#x27;price&#x27;, &#x27;status&#x27;, &#x27;create_time&#x27;) search_fields = (&#x27;name&#x27;,) search_help_text = &#x27;输入菜品名称进行搜索&#x27; list_filter = (&#x27;category&#x27;, &#x27;status&#x27;) # 嵌套子模型 口味， 在添加商品时直接就把口味一起加了 inlines = [Flavor] # 增加一个字段 def show_img(self, obj): &quot;&quot;&quot; :param obj: obj 为 一个Dish 的实例对象 :return: &quot;&quot;&quot; if obj.image: # obj.image.url 获取从midia的路径 /media/product/Snipaste_2023-07-12_20-31-22.png return format_html(&#x27;&lt;img src=&quot;&#123;&#125;&quot; height=&quot;50&quot;/&gt;&#x27;.format(obj.image.url)) else: return &#x27;&#x27; # 字段列表表头显示 show_img.short_description = &#x27;图片&#x27; Order 管理调整 Order123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130from django.db import modelsfrom apps.product.models import Dishfrom apps.user.models import AddressBook, User# Create your models here.class Orders(models.Model): PAY_METHOD_CHOICES = ( (1, &#x27;微信&#x27;), (2, &#x27;支付宝&#x27;) ) STATUS_CHOICES = ( (1, &#x27;待付款&#x27;), (2, &#x27;待派送&#x27;), (3, &#x27;已派送&#x27;), (4, &#x27;已完成&#x27;), (5, &#x27;已取消&#x27;), ) number = models.CharField(max_length=50, blank=True, null=True, verbose_name=&quot;订单号&quot;) status = models.IntegerField( choices=STATUS_CHOICES, db_comment=&quot;订单状态 1待付款，2待派送，3已派送，4已完成，5已取消&quot;, verbose_name=&quot;订单状态&quot; ) user = models.ForeignKey( User, db_constraint=False, null=True, on_delete=models.SET_NULL, db_comment=&quot;下单用户&quot;, verbose_name=&quot;用户&quot;, ) address_book = models.ForeignKey( AddressBook, null=True, db_constraint=False, on_delete=models.SET_NULL, db_comment=&quot;地址id&quot;, verbose_name=&quot;地址&quot;, ) order_time = models.DateTimeField(db_comment=&quot;下单时间&quot;, verbose_name=&quot;下单时间&quot;) checkout_time = models.DateTimeField(db_comment=&quot;结账时间&quot;, verbose_name=&quot;结账时间&quot;) pay_method = models.IntegerField(choices=PAY_METHOD_CHOICES, db_comment=&quot;支付方式 1微信,2支付宝&quot;, default=1, verbose_name=&quot;支付方式&quot; ) amount = models.DecimalField( max_digits=10, decimal_places=2, db_comment=&quot;实收金额&quot;, verbose_name=&quot;实收金额&quot; ) remark = models.CharField( max_length=100, blank=True, null=True, db_comment=&quot;备注&quot;, verbose_name=&quot;备注&quot; ) def __str__(self): return self.number class Meta: db_table = &quot;orders&quot; db_table_comment = &quot;订单表&quot; verbose_name = &quot;订单&quot; verbose_name_plural = &quot;订单管理&quot;class OrderDetail(models.Model): order = models.ForeignKey( Orders, db_constraint=False, on_delete=models.SET_NULL, null=True, db_comment=&quot;订单id&quot;, verbose_name=&quot;订单&quot;, ) dish = models.ForeignKey( Dish, db_constraint=False, on_delete=models.SET_NULL, blank=True, null=True, db_comment=&quot;菜品id&quot;, verbose_name=&quot;菜品&quot;, ) dish_flavor = models.CharField( max_length=50, blank=True, null=True, db_comment=&quot;口味&quot;, verbose_name=&quot;口味&quot; ) number = models.IntegerField(db_comment=&quot;数量&quot;, verbose_name=&quot;数量&quot;) amount = models.DecimalField( max_digits=10, decimal_places=2, db_comment=&quot;金额&quot;, verbose_name=&quot;金额&quot; ) def __str__(self): if self.order: return self.order.number class Meta: # managed = False db_table = &quot;order_detail&quot; db_table_comment = &quot;订单明细表&quot; verbose_name = &quot;明细&quot; verbose_name_plural = &quot;订单明细&quot;class ShoppingCart(models.Model): user = models.ForeignKey( User, db_constraint=False, null=True, on_delete=models.SET_NULL, db_comment=&quot;用户&quot; ) dish = models.ForeignKey( Dish, db_constraint=False, on_delete=models.SET_NULL, blank=True, null=True, db_comment=&quot;菜品&quot;, ) dish_flavor = models.CharField( max_length=50, blank=True, null=True, db_comment=&quot;口味&quot; ) number = models.IntegerField(db_comment=&quot;数量&quot;) amount = models.DecimalField(max_digits=10, decimal_places=2, db_comment=&quot;金额&quot;) create_time = models.DateTimeField( blank=True, null=True, db_comment=&quot;创建时间&quot;, auto_now_add=True ) class Meta: # 购物车我们不需要后台管理 # managed = False db_table = &quot;shopping_cart&quot; db_table_comment = &quot;购物车&quot; 修改完迁移下模型 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182(venv) ➜ takeout python manage.py makemigrationsMigrations for &#x27;order&#x27;: apps/order/migrations/0002_alter_orderdetail_options_alter_orders_number_and_more.py - Change Meta options on orderdetail - Alter field number on orders - Alter field pay_method on orders - Alter field status on orders(venv) ➜ takeout python manage.py migrateSystem check identified some issues:WARNINGS:order.OrderDetail.amount: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.dish: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.number: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail.order: (fields.W163) SQLite does not support comments on columns (db_comment).order.OrderDetail: (models.W046) SQLite does not support comments on tables (db_table_comment).order.Orders.address_book: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.amount: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.checkout_time: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.order_time: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.pay_method: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.remark: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.status: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders.user: (fields.W163) SQLite does not support comments on columns (db_comment).order.Orders: (models.W046) SQLite does not support comments on tables (db_table_comment).order.ShoppingCart.amount: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.dish: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.number: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart.user: (fields.W163) SQLite does not support comments on columns (db_comment).order.ShoppingCart: (models.W046) SQLite does not support comments on tables (db_table_comment).product.Category.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.name: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.sort: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.type: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Category: (models.W046) SQLite does not support comments on tables (db_table_comment).product.Dish.code: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.description: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.image: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.name: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.price: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.sort: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.status: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.Dish: (models.W046) SQLite does not support comments on tables (db_table_comment).product.DishFlavor.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.dish: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.name: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor.value: (fields.W163) SQLite does not support comments on columns (db_comment).product.DishFlavor: (models.W046) SQLite does not support comments on tables (db_table_comment).user.AddressBook.city_code: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.city_name: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.consignee: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.detail: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.district_code: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.district_name: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.is_default: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.label: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.phone: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.province_code: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.province_name: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.sex: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.AddressBook: (models.W046) SQLite does not support comments on tables (db_table_comment).user.User.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.name: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.phone: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.status: (fields.W163) SQLite does not support comments on columns (db_comment).user.User.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).user.User: (models.W046) SQLite does not support comments on tables (db_table_comment).Operations to perform: Apply all migrations: admin, auth, contenttypes, order, product, sessions, userRunning migrations: Applying order.0002_alter_orderdetail_options_alter_orders_number_and_more... OK(venv) ➜ takeout 实现订单管理123456789101112131415161718192021222324252627282930313233343536373839from django.contrib import admin# Register your models here.from .models import *@admin.register(Orders)class OrderManagerAdmin(admin.ModelAdmin): list_display = (&#x27;number&#x27;, &#x27;status&#x27;, &#x27;user&#x27;, &#x27;address_book&#x27;, &#x27;amount&#x27;) list_filter = (&quot;status&quot;, &quot;user&quot;) # 页面可编辑 list_editable = (&quot;status&quot;,)@admin.register(OrderDetail)class OrderManagerAdmin(admin.ModelAdmin): list_display = (&quot;order&quot;, &quot;dish&quot;, &quot;dish_flavor&quot;, &quot;number&quot;, &quot;amount&quot;, &quot;user&quot;, &quot;address&quot;, &quot;total&quot;) search_fields = (&quot;dish&quot;,) def user(self, obj): if obj.order and obj.order.user: return obj.order.user user.short_description = &quot;用户&quot; def address(self, obj): if obj.order and obj.order.address_book: return obj.order.address_book address.short_description = &quot;收货地址&quot; def total(self, obj): return obj.number * obj.amount total.short_description = &quot;总价&quot; list_filter = (&quot;order&quot;, &quot;order__user&quot;) 登录页面接口通用响应模型在&#x2F;takeout&#x2F;apps 下创建一个 schemas.py 文件 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zachary&quot;&quot;&quot;通用Schema&quot;&quot;&quot;from typing import Generic, TypeVar, Optionalfrom pydantic import genericsT = TypeVar(&#x27;T&#x27;)# 泛型模型：T可以动态变动，运行时加载类型-swagger文档可见class R(generics.GenericModel, Generic[T]): code: int = 1 data: Optional[T] msg: str = &quot;ok&quot; @classmethod def ok(cls, data: T = None) -&gt; &quot;R&quot;: return cls(code=1, data=data, msg=&quot;ok&quot;) @classmethod def fail(cls, msg: str = &quot;fail&quot;) -&gt; &quot;R&quot;: return cls(code=0, msg=msg) 获取验证码接口 sendMsg POST 接口实现 takeout/apps/user/schemas.py定义请求模型 123456789101112# -*- coding:utf-8 -*-# Author: Zacharyfrom ninja import Schema, Fieldclass SendMsgSchema(Schema): phone: str = Field(..., description=&quot;手机号&quot;, pattern=r&#x27;^1[3456789]\\d&#123;9&#125;$&#x27;)class SendMsgResultSchema(Schema): code: str = Field(..., description=&quot;验证码&quot;) takeout/apps/user/views.py 12345678910111213141516171819202122232425import randomfrom django.shortcuts import render# Create your views here.from ninja import Routerfrom .models import Userfrom .schemas import SendMsgSchema, SendMsgResultSchemafrom ..schemas import Rrouter = Router(tags=[&#x27;登录&#x27;])@router.post(&quot;/sendMsg&quot;, summary=&quot;验证码&quot;, response=R)def send_msg(request, data: SendMsgSchema): # 4位数，生成验证码 code = &#x27;&#x27;.join(random.choices(&#x27;0123456789&#x27;, k=4)) # 验证码存在session中 request.session[data.phone] = code request.session.set_expiry(5 * 60) # 缓存5分钟 # 使用了response R， 这里默认就是 R 中的 data属性 return R.ok(data=SendMsgResultSchema(code=code)) 注册 router takeout/apps/api.py 123456789101112from ninja import NinjaAPIfrom apps.user.views import router as user_routerapp = NinjaAPI(title=&quot;DjangoNinja-瑞吉外卖H5&quot;, description=&quot;使用DjangoNinja实现《瑞吉外卖》项目&quot;)app.add_router(&quot;/user&quot;, router=user_router)@app.get(&quot;/index&quot;)def index(request): return &quot;Hello Django Ninja&quot; 预览 登录接口如果登录的用户存在 user 表中，则直接登录，否则注册并登录 请求参数 schemas1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom ninja import Schema, Fieldclass SendMsgSchema(Schema): phone: str = Field(..., description=&quot;手机号&quot;, pattern=r&#x27;^1[3456789]\\d&#123;9&#125;$&#x27;)class SendMsgResultSchema(Schema): code: str = Field(..., description=&quot;验证码&quot;)class UserLoginSchema(SendMsgSchema, SendMsgResultSchema): pass 接口实现12345678910111213141516171819202122232425262728293031323334353637import randomfrom django.shortcuts import render# Create your views here.from ninja import Routerfrom .models import Userfrom .schemas import SendMsgSchema, SendMsgResultSchema, UserLoginSchemafrom ..schemas import Rrouter = Router(tags=[&#x27;登录&#x27;])@router.post(&quot;/sendMsg&quot;, summary=&quot;验证码&quot;, response=R)def send_msg(request, data: SendMsgSchema): # 4位数，生成验证码 code = &#x27;&#x27;.join(random.choices(&#x27;0123456789&#x27;, k=4)) # 验证码存在session中 request.session[data.phone] = code request.session.set_expiry(5 * 60) # 缓存5分钟 # 使用了response R， 这里默认就是 R 中的 data属性 return R.ok(data=SendMsgResultSchema(code=code))@router.post(&quot;/login&quot;, summary=&quot;登录&quot;, response=R)def user_login(request, data: UserLoginSchema): # 1. 验证码存在? if request.session.get(data.phone) == data.code: # 2. 查不到就创建 user, _ = User.objects.get_or_create(phone=data.phone, status=1) # 3. Java原版这里使用的是存session 为了偷懒-不改动h5 我们也不用JWT了 request.session[&#x27;user&#x27;] = user.id return R.ok(data=None) return R.fail(&quot;验证码错误&quot;) 退出登录1234567891011121314151617181920212223242526272829303132333435363738394041424344import randomfrom django.shortcuts import render# Create your views here.from ninja import Routerfrom .models import Userfrom .schemas import SendMsgSchema, SendMsgResultSchema, UserLoginSchemafrom ..schemas import Rrouter = Router(tags=[&#x27;登录&#x27;])@router.post(&quot;/sendMsg&quot;, summary=&quot;验证码&quot;, response=R)def send_msg(request, data: SendMsgSchema): # 4位数，生成验证码 code = &#x27;&#x27;.join(random.choices(&#x27;0123456789&#x27;, k=4)) # 验证码存在session中 request.session[data.phone] = code request.session.set_expiry(5 * 60) # 缓存5分钟 # 使用了response R， 这里默认就是 R 中的 data属性 return R.ok(data=SendMsgResultSchema(code=code))@router.post(&quot;/login&quot;, summary=&quot;登录&quot;, response=R)def user_login(request, data: UserLoginSchema): # 1. 验证码存在? if request.session.get(data.phone) == data.code: # 2. 查不到就创建 user, _ = User.objects.get_or_create(phone=data.phone, status=1) # 3. Java原版这里使用的是存session 为了偷懒-不改动h5 我们也不用JWT了 request.session[&#x27;user&#x27;] = user.id return R.ok(data=None) return R.fail(&quot;验证码错误&quot;)@router.post(&quot;/loginout&quot;, summary=&quot;退出&quot;, response=R)def user_logout(request): if request.session.get(&quot;user&quot;): request.session.delete(&quot;user&quot;) return R.ok(data=None) 首页显示接口 takeout/apps/product目录下 Schema takeout/apps/product/schemas.py 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import jsonfrom typing import Optional, Listfrom ninja import ModelSchema, Schema, Fieldfrom pydantic import validatorfrom .models import Category, Dish, DishFlavorfrom ..order.models import ShoppingCartclass CategorySchema(ModelSchema): class Config: model = Category model_fields = &quot;__all__&quot;class DishFilter(Schema): status: Optional[int] = Field(..., description=&quot;上架状态&quot;) category_id: Optional[int] = Field(..., description=&quot;分类ID&quot;, alias=&quot;categoryId&quot;)class DishFlavorSchema(ModelSchema): value: List[str] # 处理value 是json 数组的情况 最终返回的数据是这个方法处理之后的字符串 @validator(&quot;value&quot;) def dumps_value(cls, value): if value: # 源版中 value 返回的是dumps之后的数组数据 return json.dumps(value) class Config: model = DishFlavor # model_exclude = [&quot;dish&quot;] model_fields = &quot;__all__&quot;class DishSchema(ModelSchema): flavors: List[DishFlavorSchema] = [] class Config: model = Dish model_fields = &quot;__all__&quot;class ShoppingCartSchema(ModelSchema): class Config: model = ShoppingCart model_fields = &quot;__all__&quot; 分类列表 takeout/apps/product/views.py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import os.pathfrom typing import Listfrom django.http import FileResponsefrom django.shortcuts import render# Create your views here.from ninja import Router, Queryfrom apps.order.models import ShoppingCartfrom apps.product.models import Category, Dishfrom apps.product.schemas import CategorySchema, DishSchema, DishFilter, ShoppingCartSchemafrom apps.schemas import Rfrom takeout.settings import BASE_DIRrouter = Router(tags=[&quot;商品&quot;])@router.get(&quot;/category/list&quot;, summary=&quot;分类&quot;, response=R)def category_list(request): result = Category.objects.all().order_by(&#x27;-sort&#x27;) return R.ok(data=list(result.values()))@router.get(&quot;/dish/list&quot;, summary=&quot;食品列表&quot;, response=R)def dish_list(request, data: DishFilter = Query(...)): result = Dish.objects.filter(**data.dict()) # 将口味属性加到对象中 for obj in result: setattr(obj, &quot;flavors&quot;, obj.dishflavor_set.all()) return R.ok(list(result.values()))@router.get(&quot;/common/download&quot;, summary=&quot;图片流&quot;)def download_img(request, name: str): media_path = f&quot;&#123;BASE_DIR&#125;&#123;name&#125;&quot; if os.path.exists(media_path): return FileResponse(open(media_path, &quot;rb&quot;), content_type=&quot;image/png&quot;)@router.get(&quot;/shoppingCart/list&quot;, tags=[&quot;购物车&quot;], summary=&quot;购物车列表&quot;, response=R)def cart(request): if request.session.get(&#x27;user&#x27;): result = ShoppingCart.objects.filter(user=request.session.get(&quot;user&quot;)) return R.ok(data=list(result)) return R.ok(data=[]) 认证 某些接口需要用户登录之后才能操作，takeout/apps/auth.py 1234567891011121314from ninja.errors import AuthenticationErrorfrom apps.user.models import Userdef session_auth(request): try: user_id = request.session[&#x27;user&#x27;] user = User.objects.get(id=user_id) return user except Exception as e: print(e) raise AuthenticationError 预览 H5 商品价格显示问题，修改takeout/static/front/index.html 12&lt;!-- &lt;div class=&quot;divBottom&quot;&gt;&lt;span&gt;￥&lt;/span&gt;&lt;span&gt;&#123;&#123;item.price / 100&#125;&#125;&lt;/span&gt;&lt;/div&gt; --&gt;&lt;div class=&quot;divBottom&quot;&gt;&lt;span&gt;￥&lt;/span&gt;&lt;span&gt;&#123;&#123;item.price&#125;&#125;&lt;/span&gt;&lt;/div&gt; 暂时到这里 更新: 2024-07-17 22:54:08原文: https://www.yuque.com/zacharyblock/cx2om6/awbybg98ch6hs25g","categories":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/categories/Python-Web/"}],"tags":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/tags/Python-Web/"},{"name":"Django-Ninja","slug":"Django-Ninja","permalink":"https://blockzachary.github.io/tags/Django-Ninja/"}]},{"title":"Django-Ninja","slug":"PythonWeb/DjangoNinja入门","date":"2024-07-12T23:22:00.000Z","updated":"2024-07-12T23:22:00.000Z","comments":true,"path":"blog/179197962/","permalink":"https://blockzachary.github.io/blog/179197962/","excerpt":"","text":"Django-Ninja官方文档Django-Ninja：https://django-ninja.dev/ 项目初始化创建虚拟环境python3 -m venv venv 激活虚拟环境Windows：venv/Script/activate Mac&#x2F;Linux：source venv/bin/activate 安装 Django-ninja 在安装 Django-ninja 的时候，其实还会安装 Django pip3 install django-ninja 创建 ninja 应用使用&lt;font style=&quot;color:rgb(54, 70, 78);background-color:rgb(245, 245, 245);&quot;&gt;django-admin startproject [应用名]&lt;/font&gt;创建应用 这里创建了一个名为&lt;font style=&quot;color:rgb(54, 70, 78);background-color:rgb(245, 245, 245);&quot;&gt;ninja_server&lt;/font&gt;的应用 打开项目使用 PyCharm 打开创建的项目，即直接打开ninja_server即可，然后解释器记得选择创建的虚拟环境下的解释器 Hello World在&#x2F;ninja_server 下的 urls.py 后面添加 12345678910111213141516171819202122232425262728293031323334&quot;&quot;&quot;URL configuration for ninja_server project.The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/5.0/topics/http/urls/Examples:Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: path(&#x27;&#x27;, views.home, name=&#x27;home&#x27;)Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: path(&#x27;&#x27;, Home.as_view(), name=&#x27;home&#x27;)Including another URLconf 1. Import the include() function: from django.urls import include, path 2. Add a URL to urlpatterns: path(&#x27;blog/&#x27;, include(&#x27;blog.urls&#x27;))&quot;&quot;&quot;from django.contrib import adminfrom django.urls import pathfrom ninja import NinjaAPIurlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls),]api = NinjaAPI()@api.get(&quot;/hello&quot;)def hello_world(request): return &#123;&#x27;hello&#x27;: &#x27;world&#x27;&#125;urlpatterns += [path(&#x27;api/&#x27;, api.urls)] 然后启动项目 命令行启动 python3 manage.py runserver 1234567891011121314(venv) ➜ ninja_server(venv) ➜ ninja_server python3 manage.py runserverWatching for file changes with StatReloaderPerforming system checks...System check identified no issues (0 silenced).You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.Run &#x27;python manage.py migrate&#x27; to apply them.July 13, 2024 - 10:26:13Django version 5.0.7, using settings &#x27;ninja_server.settings&#x27;Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C. 之后在浏览器输入http://127.0.0.1:8000/api/hello 直接启动 查看文档直接通过http://127.0.0.1:8000/api/docs可以查看官方文档 路由、视图、常用请求在 Django-ninja 中的路由配置，与 fastapi 类似 在项目目录下面创建一个 router.py 1234567891011121314151617181920212223242526272829303132333435363738394041# -*- coding:utf-8 -*-# Author: Zacharyfrom django.http import HttpRequestfrom ninja import RouterREST = Router(tags=[&quot;REST API&quot;])@REST.get(&quot;/get&quot;)def http_get(request: HttpRequest): return &#123;&quot;get&quot;: &quot;OK&quot;&#125;@REST.post(&quot;/post&quot;)def http_post(request: HttpRequest): return &#123;&quot;post&quot;: &quot;OK&quot;&#125;@REST.put(&quot;/put&quot;)def http_put(request: HttpRequest): return &#123;&quot;put&quot;: &quot;OK&quot;&#125;@REST.delete(&quot;/delete&quot;)def http_delete(request: HttpRequest): return &#123;&quot;delete&quot;: &quot;OK&quot;&#125;@REST.patch(&quot;/patch&quot;)def http_patch(request: HttpRequest): return &#123;&quot;patch&quot;: &quot;OK&quot;&#125;@REST.api_operation(methods=[&quot;GET&quot;, &quot;POST&quot;], path=&quot;/multi&quot;)def http_multi(request: HttpRequest): if request.method == &quot;GET&quot;: pass elif request.method == &quot;POST&quot;: pass else: raise Exception 视图的第一个参数，必须是request: HttpRequest 然后修改 urls.py 1234567891011121314151617181920212223242526272829303132333435363738&quot;&quot;&quot;URL configuration for ninja_server project.The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/5.0/topics/http/urls/Examples:Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: path(&#x27;&#x27;, views.home, name=&#x27;home&#x27;)Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: path(&#x27;&#x27;, Home.as_view(), name=&#x27;home&#x27;)Including another URLconf 1. Import the include() function: from django.urls import include, path 2. Add a URL to urlpatterns: path(&#x27;blog/&#x27;, include(&#x27;blog.urls&#x27;))&quot;&quot;&quot;from django.contrib import adminfrom django.urls import pathfrom ninja import NinjaAPIfrom router import RESTurlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls),]api = NinjaAPI()@api.get(&quot;/hello&quot;)def hello_world(request): return &#123;&#x27;hello&#x27;: &#x27;world&#x27;&#125;api.add_router(prefix=&quot;v1/&quot;, router=REST)urlpatterns += [path(&#x27;api/&#x27;, api.urls)] 常见请求参数包括路径参数、查询参数、请求体 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Listfrom django.http import HttpRequestfrom ninja import Router, Path, Query, Schema, Field, Form, UploadedFile, FileREQ_PARA = Router(tags=[&quot;Request parameter&quot;])# 路径参数@REQ_PARA.get(&quot;/path/&#123;id&#125;&quot;, summary=&quot;路径参数&quot;)def get_path(request, id: int): pass@REQ_PARA.get(&quot;/pathV2/&#123;pk&#125;&quot;, summary=&quot;路径参数PATH&quot;)def get_path_v2(request, pk: int = Path(10, title=&quot;主键&quot;, alias=&quot;primary_key&quot;)): return f&quot;&#123;pk&#125;&quot;# 查询参数@REQ_PARA.get(&quot;/query&quot;, summary=&quot;查询参数&quot;)def get_query(request, id: int, age: int = 10): return f&quot;&#123;id&#125; &#123;age&#125;&quot;# ... 占位符，表示必填字段@REQ_PARA.get(&quot;/queryV2&quot;, summary=&quot;查询参数Query&quot;)def get_query_v2(request, name: str = Query(..., title=&quot;姓名&quot;, description=&quot;姓名,...为必填项&quot;)): return f&quot;&#123;name&#125;&quot;# 查询参数，使用schema定义模型class QueryFilter(Schema): age: int = None # 可选项 name: str = Field(..., description=&quot;必填项&quot;)# 必填项@REQ_PARA.get(&quot;/queryV3&quot;, summary=&quot;查询参数Query-Schema&quot;)def get_query_v3(request, data: QueryFilter = Query(...)): return f&quot;&#123;data&#125;&quot;# 表单 - 用得少@REQ_PARA.post(&quot;/form&quot;, summary=&quot;表单&quot;)def post_form(request, username: str = Form(...), password: str = Form(...)): return f&quot;&#123;username&#125; &#123;password&#125;&quot;# Schema标注Formclass User(Schema): username: str password: str@REQ_PARA.post(&quot;/formV2&quot;, summary=&quot;表单-Schema&quot;)def post_form2(request, data: User = Form(...)): return data# 上传文件@REQ_PARA.post(&quot;/upload&quot;, summary=&quot;上传文件&quot;)def upload(request, file: UploadedFile = File(...)): data = file.read() return &#123; &quot;name&quot;: file.name, &quot;len&quot;: len(data) &#125;# 上传多个文件@REQ_PARA.post(&quot;/upload-multi&quot;, summary=&quot;上传多个文件&quot;)def upload_multi(request, files: List[UploadedFile] = File(...)): return [file.name for file in files]class UserDetails(Schema): name: str age: int@REQ_PARA.post(&quot;/upload-user&quot;, summary=&quot;表单+上传文件&quot;)def upload_user(request, details: UserDetails = Form(...), file: UploadedFile = File(...)): return [details.dict(), file.name]@REQ_PARA.post(&quot;/upload-userV2&quot;, summary=&quot;表单+上传文件&quot;)def upload_user2(request, details: UserDetails, file: UploadedFile = File(...)): pass# 请求体@REQ_PARA.post(&quot;/body&quot;, summary=&quot;请求体&quot;)def user_body(request, user: UserDetails): pass 模型序列化1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Listfrom django.contrib.auth.models import Group, Userfrom django.http import HttpRequestfrom ninja import Router, Path, Query, Schema, Field, Form, UploadedFile, File, ModelSchemafrom ninja.pagination import paginateclass GroupSchema(ModelSchema): user: &quot;UserSchema&quot; = None class Config: model = Group # 指定模型 model_fields = [&#x27;id&#x27;, &#x27;name&#x27;]class UserSchema(ModelSchema): groups:List[GroupSchema] = [] class Config: model = User model_fields = [&#x27;id&#x27;, &#x27;username&#x27;, &#x27;first_name&#x27;, &#x27;last_name&#x27;] # model_fields = &quot;__all__&quot; # 所有字段 model_fields_optional = [&#x27;username&#x27;] # 设置字段可不传送# UserSchema在GroupSchema后面定义的，所以需要加这个才能正常序列化GroupSchema.update_forward_refs()SchemaModel = Router(tags=[&quot;Schema Model&quot;])# List[UserSchema] 等价 后面那个接口的生成器@SchemaModel.get(&quot;/schema&quot;, response=List[UserSchema], summary=&quot;Schema model序列化&quot;)@paginatedef list_users(request): return User.objects.all()@SchemaModel.get(&quot;/groups&quot;)def list_groups(request): return [GroupSchema.from_orm(obj) for obj in Group.objects.all()]@SchemaModel.post(&quot;/group&quot;, response=GroupSchema, summary=&quot;add&quot;, tags=[&quot;group&quot;])def add(request, group: GroupSchema): obj = Group.objects.create(**group.dict()) return obj 写好代码之后 执行一下 python manage.py makemigrations 和 python manage.py migrate 12345678910111213141516171819202122232425(venv) ➜ ninja_server python manage.py makemigrationsNo changes detected(venv) ➜ ninja_server python manage.py migrateOperations to perform: Apply all migrations: admin, auth, contenttypes, sessionsRunning migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying auth.0012_alter_user_first_name_max_length... OK Applying sessions.0001_initial... OK(venv) ➜ ninja_server JWT 认证先安装一下 jwt 依赖 pip3 install python-jose 123456789101112131415161718192021222324252627282930313233343536373839404142def generate_token(username: str, expires_delta=None): &quot;&quot;&quot; 生成token :param username:用户名 :param expires_delta:有效时长 :return: &quot;&quot;&quot; to_encode = &#123;&quot;sub&quot;: username&#125;.copy() if expires_delta: expire = datetime.utcnow() + expires_delta else: expire = datetime.utcnow() + timedelta(minutes=1) to_encode.update(dict(exp=expire)) encoded_jwt = jwt.encode(to_encode, &quot;SECRET_KEY&quot;, algorithm=&quot;HS256&quot;) return encoded_jwtclass TokenAuth(HttpBearer): def authenticate(self, request, token): # 解密token payload = jwt.decode(token, &quot;SECRET_KEY&quot;, algorithms=[&quot;HS256&quot;]) username: str = payload.get(&quot;sub&quot;) # 校验用户是否存在 if username == &quot;zachary&quot;: request.session[&quot;user&quot;] = username return username else: return HttpError(404, &quot;user not found&quot;)TokenRouter = Router(tags=[&quot;Token&quot;], auth=TokenAuth())@TokenRouter.get(&quot;/token&quot;, summary=&quot;token&quot;, auth=None)def token(request, user): token = generate_token(user) return token@TokenRouter.get(&quot;/check&quot;, summary=&quot;user&quot;)def check(request): return request.session.get(&quot;user&quot;) 异常处理写到 urls.py 12345678910111213141516171819202122232425262728293031323334@api.exception_handler(Exception)def global_exception_handler(request: HttpRequest, exc): print(exec) print(request.build_absolute_uri()) print(traceback.format_exc()) return JsonResponse(&#123; &quot;data&quot;: None, &quot;msg&quot;: str(exc), &quot;code&quot;: 500 &#125;)@api.exception_handler(HttpError)def http_error(request: HttpRequest, exc): return JsonResponse(&#123; &quot;data&quot;: None, &quot;msg&quot;: str(exc), &quot;code&quot;: exc.status_code &#125;)@api.get(&quot;/hello1&quot;)def hello(request): 1 / 0@api.get(&quot;/hello2&quot;)def hello2(request): raise HttpError(404, &quot;user not found&quot;)@api.get(&quot;/hello3&quot;)def hello3(request): raise ValueError(&quot;user not found&quot;) 更新: 2024-07-14 20:47:56原文: https://www.yuque.com/zacharyblock/cx2om6/oukufzfyh2p6vb38","categories":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/categories/Python-Web/"}],"tags":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/tags/Python-Web/"},{"name":"Django-Ninja","slug":"Django-Ninja","permalink":"https://blockzachary.github.io/tags/Django-Ninja/"}]},{"title":"Django 实现 RESTful API","slug":"PythonWeb/Django写RESTfulAPI","date":"2024-07-10T20:02:00.000Z","updated":"2024-07-10T20:02:00.000Z","comments":true,"path":"blog/3684614663/","permalink":"https://blockzachary.github.io/blog/3684614663/","excerpt":"","text":"Django 实现 RESTful API一个超快、超极速的 Django 入门教程 直接从 PyCharm 开始就可以 创建项目 目录介绍在完成项目依赖的安装和初始化之后，就可以看到以下目录 manage.py 是 Django 提供的命令行操作脚本 storeProject init.py 声明了 storeProject 为一个模块 urls.py 用于配置 url 映射的文件 settings.py 项目相关应用配置 asgi.py 与 wsgi.py 是项目部署相关文件 DRF 安装pip3 install djangorestframework 使用该命令安装 drf 的依赖\\库\\包 修改 settings.py将 drf 注册到应用里面 在 settings.py 中找到INSTALLED_APPS\u0000 然后添加rest_framework如下即可 123456789INSTALLED_APPS = [ &#x27;rest_framework&#x27;, &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;,] DRF 启动启动项目，仅需点击 PyCharm 右上角的运行按钮 创建 api创建视图 views在项目目录下，创建一个名为 api 的包，并且再创建一个 views.py 文件 1234567891011121314# -*- coding:utf-8 -*-# Author: Zacharyfrom rest_framework.decorators import api_viewfrom rest_framework.response import Response@api_view([&#x27;GET&#x27;])def get_data(request): goods = &#123; &quot;name&quot;: &quot;苹果&quot;, &quot;price&quot;: 12.0 &#125; return Response(goods) 创建 urls在 api 包下创建一个 urls.py 文件 编写上面创建的视图的 url 映射 12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom django.urls import pathfrom . import viewsurlpatterns = [ path(&#x27;&#x27;, views.get_data),] 导入映射在项目目录的 storeProject 下找到 urls.py 1234567from django.contrib import adminfrom django.urls import path, includeurlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls), path(&#x27;&#x27;, include(&#x27;api.urls&#x27;)),] 重启项目后可以看到以下内容 创建应用可以在命令行中通过python manage.py startapp [应用名称]来创建一个新的应用 创建 goodspython manage.py startapp goods 执行命令之后会发现，目录结构多了一个 goods 包 注册 goods在 storeProject 下的 settings.py 下注册下刚才创建的 goods 12345678910INSTALLED_APPS = [ &#x27;goods&#x27;, &#x27;rest_framework&#x27;, &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;,] goods 模型在新创建的 goods 包下找到 models.py 文件 1234567891011121314from django.db import models# Create your models here.class Goods(models.Model): name = models.CharField(max_length=100) price = models.FloatField() description = models.TextField() created_at = models.DateTimeField(auto_now_add=True) def __str__(self): return self.name 创建好之后别忘记执行python manage.py makemigrations迁移命令，更新数据库变化，包括增删表，修改字段等操作，还可以保持数据库字段与类模型的同步； 之后还需要再次执行一下 migrate 命令，python manage.py migrate 12345678910111213141516171819202122232425262728(venv) ➜ storeProject python manage.py makemigrationsMigrations for &#x27;goods&#x27;: goods/migrations/0001_initial.py - Create model Goods(venv) ➜ storeProject python manage.py migrateOperations to perform: Apply all migrations: admin, auth, contenttypes, goods, sessionsRunning migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying auth.0012_alter_user_first_name_max_length... OK Applying goods.0001_initial... OK Applying sessions.0001_initial... OK(venv) ➜ 至此完成了模型的创建和数据的迁移操作 添加数据接下来使用 admin 控制台来添加数据 创建超级管理员使用命令创建一个超级管理员用户 python manage.py createsuperuser 创建一个名称为：admin，密码为：admin 的超级用户 12345678910(venv) ➜ storeProject python manage.py createsuperuserUsername (leave blank to use &#x27;zachary&#x27;): adminEmail address:Password:Password (again):The password is too similar to the username.This password is too short. It must contain at least 8 characters.This password is too common.Bypass password validation and create user anyway? [y/N]: ySuperuser created successfully. 注册数据模型在 goods 应用下的 admin.py 中注册 goods 数据模型 1234567from django.contrib import adminfrom . import models# Register your models here.admin.site.register(models.Goods) 之后重新启动一下服务 admin 管理后台在浏览器中输入localhost:8000/admin进入 admin 管理后台 使用上面创建的超级管理员账号密码进行登录 Add goods点击 GOODS 下的 Goodss 右侧的+Add 按钮 然后现在就有两个商品了 CRUD序列化先把数据序列化功能实现了，序列化实现了 Python 类与 json 数据的转化 在项目目录&#x2F;api 下新建一个 serializers.py 1234567891011# -*- coding:utf-8 -*-# Author: Zacharyfrom rest_framework import serializersfrom goods.models import Goodsclass GoodsSerializer(serializers.ModelSerializer): class Meta: model = Goods fields = &#x27;__all__&#x27; 查询商品列表在项目目录&#x2F;api 的 views.py 下修改 123456789101112131415# -*- coding:utf-8 -*-# Author: Zacharyfrom rest_framework.decorators import api_viewfrom rest_framework.response import Responsefrom api.serializers import GoodsSerializerfrom goods.models import Goods@api_view([&#x27;GET&#x27;])def goods_list(request): goods = Goods.objects.all() serializer = GoodsSerializer(goods, many=True) return Response(serializer.data) 下一步需要修改&#x2F;api 下的 urls.py 12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom django.urls import pathfrom . import viewsurlpatterns = [ path(&#x27;goods/&#x27;, views.goods_list),] 重启项目后localhost:8000/goods/查看查询结果 添加商品直接在之前的视图上面修改一下 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyfrom rest_framework import statusfrom rest_framework.decorators import api_viewfrom rest_framework.response import Responsefrom api.serializers import GoodsSerializerfrom goods.models import Goods@api_view([&#x27;GET&#x27;, &#x27;POST&#x27;])def goods_list(request): if request.method == &#x27;GET&#x27;: goods = Goods.objects.all() serializer = GoodsSerializer(goods, many=True) return Response(serializer.data) elif request.method == &#x27;POST&#x27;: serializer = GoodsSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) 然后这个新增商品的功能用 postman 测一下 查询、修改、删除具体商品仍旧是在&#x2F;api 下的 views.py 中添加一个 view 视图 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyfrom rest_framework import statusfrom rest_framework.decorators import api_viewfrom rest_framework.response import Responsefrom api.serializers import GoodsSerializerfrom goods.models import Goods@api_view([&#x27;GET&#x27;, &#x27;POST&#x27;])def goods_list(request): if request.method == &#x27;GET&#x27;: goods = Goods.objects.all() serializer = GoodsSerializer(goods, many=True) return Response(serializer.data) elif request.method == &#x27;POST&#x27;: serializer = GoodsSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED)@api_view([&#x27;GET&#x27;, &#x27;PUT&#x27;, &#x27;DELETE&#x27;])def goods_detail(request, id): try: goods = Goods.objects.get(id=id) except Goods.DoesNotExist: return Response(status=status.HTTP_404_NOT_FOUND) if request.method == &#x27;GET&#x27;: serializer = GoodsSerializer(goods) return Response(serializer.data) elif request.method == &#x27;PUT&#x27;: serializer = GoodsSerializer(goods, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) elif request.method == &#x27;DELETE&#x27;: goods.delete() return Response(status=status.HTTP_204_NO_CONTENT) 同样在&#x2F;api 的 urls.py 得添加上新的 url 123456789# -*- coding:utf-8 -*-# Author: Zacharyfrom django.urls import pathfrom . import viewsurlpatterns = [ path(&#x27;goods/&#x27;, views.goods_list), path(&#x27;goods/&lt;int:id&gt;&#x27;, views.goods_detail),] 测试查询具体商品 修改具体商品 删除具体商品 更新: 2024-07-10 22:34:56原文: https://www.yuque.com/zacharyblock/cx2om6/dmf3g69cggt8iatm","categories":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/categories/Python-Web/"}],"tags":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/tags/Python-Web/"},{"name":"RESTful API","slug":"RESTful-API","permalink":"https://blockzachary.github.io/tags/RESTful-API/"},{"name":"Django","slug":"Django","permalink":"https://blockzachary.github.io/tags/Django/"}]},{"title":"学生成绩管理","slug":"FastAPI入门/学生成绩管理","date":"2024-05-26T21:20:00.000Z","updated":"2024-05-26T21:20:00.000Z","comments":true,"path":"blog/1210368491/","permalink":"https://blockzachary.github.io/blog/1210368491/","excerpt":"","text":"学生成绩管理成绩表设计 管理员课程打分前端添加课程打分弹窗 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;addGrade(scope.row)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;评分 &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;成绩信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.gradeForm&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.gradeForm.name&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;分数&quot;&gt; &lt;el-input v-model=&quot;data.gradeForm.score&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;评语&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.gradeForm.comment&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), gradeForm: &#123;&#125;, formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分函数，弹窗const addGrade = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.gradeForm.name = row.name; data.gradeForm.studentId = row.studentId; data.gradeForm.courseId = row.courseId; data.gradeForm.score = &quot;&quot;; data.gradeForm.comment = &quot;&quot;;&#125;;const save = () =&gt; &#123; request .post(&quot;/grade/add&quot;, data.gradeForm) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端依次创建上：gradeApi.py、gradeService.py、grade.py 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import APIRouter, Dependsfrom api import appfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.grade import GradeCreatefrom service.gradeService import GradeServicegrade_router = APIRouter(prefix=&quot;/grade&quot;)@grade_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)): GradeService.add_grade(grade, db_session) return Result.success()app.include_router(grade_router) 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi, fileApi, studentCourseApi, gradeApi 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_from common.utils import set_attrsfrom exception.customException import GradeExistExceptionfrom model import Sessionfrom model.grade import GradeCreate, Gradeclass GradeService: @staticmethod def add_grade(grade: GradeCreate, db_session: Session): query = select(Grade).where( and_(Grade.studentId == grade.studentId, Grade.courseId == grade.courseId)) exist_grade: Grade = db_session.execute(query).scalar() if exist_grade: raise GradeExistException(&quot;课程已打分&quot;) new_grade = Grade() set_attrs(new_grade, jsonable_encoder(grade)) db_session.add(new_grade) db_session.commit() return new_grade 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom pydantic import BaseModelfrom sqlalchemy import Integer, Double, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Basefrom model.course import Coursefrom model.student import Studentclass Grade(Base): __tablename__ = &quot;grade&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) score: Mapped[str] = mapped_column(Double, nullable=False) comment: Mapped[str] = mapped_column(String(255), nullable=False) feedback: Mapped[str] = mapped_column(String(255), nullable=False)class GradeBase(BaseModel): courseId: int studentId: int score: Optional[float] = None comment: Optional[str] = None feedback: Optional[str] = Noneclass GradeCreate(GradeBase): pass 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseExistException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass GradeExistException(Exception): def __init__(self, message: str): self.message = message 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\ StudentCourseExistException, StudentCourseNotExistException, GradeExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(StudentCourseExistException)async def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(StudentCourseNotExistException)async def student_course_not_exist_exception_handler(request: Request, exc: StudentCourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(GradeExistException)async def grade_exist_exception_handler(request: Request, exc: GradeExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 测试管理员评分 显示课程分数前端复制StudentCourse.vue重命名为Grade.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.courseName&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.studentName&quot; placeholder=&quot;请输入要查询的学生名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;course.name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column prop=&quot;score&quot; label=&quot;成绩&quot; /&gt; &lt;el-table-column prop=&quot;comment&quot; label=&quot;教师评语&quot; /&gt; &lt;el-table-column prop=&quot;feedback&quot; label=&quot;学生评价&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;删除 &lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;setFeedback(scope.row)&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot; &gt;评价 &lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;反馈信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;反馈&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.feedback&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; form: &#123;&#125;, courseName: &quot;&quot;, studentName: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, courseName: data.courseName, studentName: data.studentName, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/grade/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.courseName = &quot;&quot;; data.studentName = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分const setFeedback = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.form = JSON.parse(JSON.stringify(row));&#125;;const save = () =&gt; &#123; request .post(&quot;/grade/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;courseList&quot;, name: &quot;CourseList&quot;, component: () =&gt; import(&quot;@/views/manager/CourseList.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;studentCourse&quot;, name: &quot;StudentCourse&quot;, component: () =&gt; import(&quot;@/views/manager/StudentCourse.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;grade&quot;, name: &quot;Grade&quot;, component: () =&gt; import(&quot;@/views/manager/Grade.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/courseList&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;学生选课&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/studentCourse&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;选课记录&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;4&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;成绩信息&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/grade&quot;&gt; &lt;el-icon&gt; &lt;List /&gt; &lt;/el-icon&gt; &lt;span&gt;学生成绩&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.grade import GradeCreate, GradeSearch, GradeUpdatefrom service.gradeService import GradeServicegrade_router = APIRouter(prefix=&quot;/grade&quot;)@grade_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)): GradeService.add_grade(grade, db_session) return Result.success()@grade_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), studentName: Optional[str] = Query(None, description=&quot;Student name&quot;), courseName: Optional[str] = Query(None, description=&quot;Course name&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) grade_search: GradeSearch = GradeSearch(studentName=studentName, courseName=courseName, studentId=studentId) grade_list = GradeService.select_page(grade_search, db_session) return Result.success(pageInfo.of(grade_list))@grade_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(grade: GradeUpdate, db_session: Session = Depends(get_db_session)): GradeService.update_by_id(grade, db_session) return Result.success()app.include_router(grade_router) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import GradeExistExceptionfrom model import Sessionfrom model.course import Coursefrom model.grade import GradeCreate, Grade, GradeSearch, GradeUpdatefrom model.student import Studentclass GradeService: @staticmethod def add_grade(grade: GradeCreate, db_session: Session): query = select(Grade).where( and_(Grade.studentId == grade.studentId, Grade.courseId == grade.courseId)) exist_grade: Grade = db_session.execute(query).scalar() if exist_grade: raise GradeExistException(&quot;课程已打分&quot;) new_grade = Grade() set_attrs(new_grade, jsonable_encoder(grade)) db_session.add(new_grade) db_session.commit() return new_grade @staticmethod def select_page(grade_search: GradeSearch, db_session: Session): query = select(Grade, Student, Course).outerjoin(Grade.student).outerjoin(Grade.course).order_by(asc(Grade.id)) if grade_search.courseName: query = query.where(Course.name.like(f&quot;%&#123;grade_search.courseName&#125;%&quot;)) if grade_search.studentName: query = query.where(Student.name.like(f&quot;%&#123;grade_search.studentName&#125;%&quot;)) if grade_search.studentId: query = query.where(Grade.studentId == grade_search.studentId) result = db_session.execute(query).scalars().all() return result @staticmethod def update_by_id(grade: GradeUpdate, db_session: Session): exist_grade: Grade = check_grade_exist(grade.id, db_session) set_attrs(exist_grade, jsonable_encoder(grade)) db_session.commit() return exist_gradedef check_grade_exist(grade_id: int, db_session: Session): query = select(Grade).where(Grade.id == grade_id) exist_grade: Grade = db_session.execute(query).scalar() if not exist_grade: raise GradeExistException(&quot;成绩记录不存在&quot;) return exist_grade 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom pydantic import BaseModelfrom sqlalchemy import Integer, Double, ForeignKey, Stringfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.course import Coursefrom model.student import Studentclass Grade(Base): __tablename__ = &quot;grade&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, ForeignKey(&#x27;course.id&#x27;), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, ForeignKey(&#x27;student.id&#x27;), nullable=False) score: Mapped[str] = mapped_column(Double, nullable=False) comment: Mapped[str] = mapped_column(String(255), nullable=False) feedback: Mapped[str] = mapped_column(String(255), nullable=False) student: Mapped[Student] = relationship(lazy=False, backref=&quot;grade&quot;) course: Mapped[Course] = relationship(lazy=False, backref=&quot;grade&quot;)class GradeBase(BaseModel): courseId: int studentId: int score: Optional[float] = None comment: Optional[str] = None feedback: Optional[str] = Noneclass GradeCreate(GradeBase): passclass GradeSearch(BaseModel): courseName: str | None studentName: str | None studentId: str | Noneclass GradeUpdate(GradeBase): id: int 测试管理员 课程分数编辑123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.courseName&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.studentName&quot; placeholder=&quot;请输入要查询的学生名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;course.name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column prop=&quot;score&quot; label=&quot;成绩&quot; /&gt; &lt;el-table-column prop=&quot;comment&quot; label=&quot;教师评语&quot; /&gt; &lt;el-table-column prop=&quot;feedback&quot; label=&quot;学生评价&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;编辑 &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;删除 &lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot; &gt;评价 &lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;反馈信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;分数&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input v-model=&quot;data.form.score&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;教师评语&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.comment&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生评价&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.feedback&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; form: &#123;&#125;, courseName: &quot;&quot;, studentName: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, courseName: data.courseName, studentName: data.studentName, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/grade/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.courseName = &quot;&quot;; data.studentName = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分const handleEdit = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.form = JSON.parse(JSON.stringify(row));&#125;;const save = () =&gt; &#123; request .put(&quot;/grade/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 学生： 管理员： 课程分数删除前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.courseName&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.studentName&quot; placeholder=&quot;请输入要查询的学生名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;course.name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column prop=&quot;score&quot; label=&quot;成绩&quot; /&gt; &lt;el-table-column prop=&quot;comment&quot; label=&quot;教师评语&quot; /&gt; &lt;el-table-column prop=&quot;feedback&quot; label=&quot;学生评价&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;编辑 &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;删除 &lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot; &gt;评价 &lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;反馈信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;分数&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input v-model=&quot;data.form.score&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;教师评语&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.comment&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生评价&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.feedback&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; form: &#123;&#125;, courseName: &quot;&quot;, studentName: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, courseName: data.courseName, studentName: data.studentName, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/grade/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.courseName = &quot;&quot;; data.studentName = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/grade/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分const handleEdit = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.form = JSON.parse(JSON.stringify(row));&#125;;const save = () =&gt; &#123; request .put(&quot;/grade/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.grade import GradeCreate, GradeSearch, GradeUpdatefrom service.gradeService import GradeServicegrade_router = APIRouter(prefix=&quot;/grade&quot;)@grade_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)): GradeService.add_grade(grade, db_session) return Result.success()@grade_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), studentName: Optional[str] = Query(None, description=&quot;Student name&quot;), courseName: Optional[str] = Query(None, description=&quot;Course name&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) grade_search: GradeSearch = GradeSearch(studentName=studentName, courseName=courseName, studentId=studentId) grade_list = GradeService.select_page(grade_search, db_session) return Result.success(pageInfo.of(grade_list))@grade_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(grade: GradeUpdate, db_session: Session = Depends(get_db_session)): GradeService.update_by_id(grade, db_session) return Result.success()@grade_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): GradeService.delete_by_id(id, db_session) return Result.success()app.include_router(grade_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import GradeExistExceptionfrom model import Sessionfrom model.course import Coursefrom model.grade import GradeCreate, Grade, GradeSearch, GradeUpdatefrom model.student import Studentclass GradeService: @staticmethod def add_grade(grade: GradeCreate, db_session: Session): query = select(Grade).where( and_(Grade.studentId == grade.studentId, Grade.courseId == grade.courseId)) exist_grade: Grade = db_session.execute(query).scalar() if exist_grade: raise GradeExistException(&quot;课程已打分&quot;) new_grade = Grade() set_attrs(new_grade, jsonable_encoder(grade)) db_session.add(new_grade) db_session.commit() return new_grade @staticmethod def select_page(grade_search: GradeSearch, db_session: Session): query = select(Grade, Student, Course).outerjoin(Grade.student).outerjoin(Grade.course).order_by(asc(Grade.id)) if grade_search.courseName: query = query.where(Course.name.like(f&quot;%&#123;grade_search.courseName&#125;%&quot;)) if grade_search.studentName: query = query.where(Student.name.like(f&quot;%&#123;grade_search.studentName&#125;%&quot;)) if grade_search.studentId: query = query.where(Grade.studentId == grade_search.studentId) result = db_session.execute(query).scalars().all() return result @staticmethod def update_by_id(grade: GradeUpdate, db_session: Session): exist_grade: Grade = check_grade_exist(grade.id, db_session) set_attrs(exist_grade, jsonable_encoder(grade)) db_session.commit() return exist_grade @staticmethod def delete_by_id(id: int, db_session: Session): exist_grade: Grade = check_grade_exist(id, db_session) db_session.delete(exist_grade) db_session.commit() return exist_gradedef check_grade_exist(grade_id: int, db_session: Session): query = select(Grade).where(Grade.id == grade_id) exist_grade: Grade = db_session.execute(query).scalar() if not exist_grade: raise GradeExistException(&quot;成绩记录不存在&quot;) return exist_grade 测试 更新: 2024-05-26 21:20:47原文: https://www.yuque.com/zacharyblock/iacda/izxixxgu5aq8g2nw","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"学生选课功能","slug":"FastAPI入门/学生选课功能","date":"2024-05-26T18:51:00.000Z","updated":"2024-05-26T18:51:00.000Z","comments":true,"path":"blog/1815875435/","permalink":"https://blockzachary.github.io/blog/1815875435/","excerpt":"","text":"学生选课功能学生选课功能数据库新增一张学生选课表 前端学生选课页面，把 Course 页面复制粘贴一份，命名为CourseList.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;selectCourse(scope.row)&quot; &gt;选课&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const selectCourse = (row) =&gt; &#123; request .post(&quot;/studentCourse/add&quot;, &#123; studentId: data.user.id, name: row.name, number: row.number, courseId: row.id, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;选课成功&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;courseList&quot;, name: &quot;CourseList&quot;, component: () =&gt; import(&quot;@/views/manager/CourseList.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/courseList&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;学生选课&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端选课实体类定义在项目目录/model下创建一个studentCourse.py 12345678910111213141516# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, String, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False) 学生选课接着实现学生选课的 api 部分，在/api下创建一个studentCourseApi.py 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import APIRouter, Dependsfrom api import appfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.studentCourse import StudentCourseCreatefrom service.studentCourseService import StudentCourseServicestudent_course_router = APIRouter(prefix=&quot;/studentCourse&quot;)@student_course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)): StudentCourseService.add_student_course(student_course, db_session) return Result.success()app.include_router(student_course_router) 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi, fileApi, studentCourseApi 在/servie下创建一个studentCourseService.py 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_from common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.studentCourse import StudentCourseCreate, StudentCourseclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course 123456789101112131415161718192021222324252627282930# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, String, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False)class StudentCourseBase(BaseModel): name: str number: str studentId: int courseId: intclass StudentCourseCreate(StudentCourseBase): pass 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseExistException(Exception): def __init__(self, message: str): self.message = message 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\ StudentCourseExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(StudentCourseExistException)async def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 查看数据库有无数据插入 管理员&#x2F;学生查看已选课程这个需要做到： 学生只看自己的 管理员看全部的 前端学生选课页面，将CourseList.vue复制粘贴一下作为StudentCourse.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123;&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;courseList&quot;, name: &quot;CourseList&quot;, component: () =&gt; import(&quot;@/views/manager/CourseList.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;studentCourse&quot;, name: &quot;StudentCourse&quot;, component: () =&gt; import(&quot;@/views/manager/StudentCourse.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/courseList&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;学生选课&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/studentCourse&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;选课记录&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端123456789101112131415161718192021222324252627282930313233343536# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.studentCourse import StudentCourseCreate, StudentCourseSearchfrom service.studentCourseService import StudentCourseServicestudent_course_router = APIRouter(prefix=&quot;/studentCourse&quot;)@student_course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)): StudentCourseService.add_student_course(student_course, db_session) return Result.success()@student_course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Student name&quot;), number: Optional[str] = Query(None, description=&quot;Student number&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) student_course_search = StudentCourseSearch(name=name, number=number, studentId=studentId) student_list = StudentCourseService.select_page(student_course_search, db_session) return Result.success(pageInfo.of(student_list))app.include_router(student_course_router) 123456789101112131415161718192021222324252627282930313233343536373839# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearchclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course @staticmethod def select_page(student_course_search: StudentCourseSearch, db_session: Session): query = select(StudentCourse).order_by(asc(StudentCourse.id)) if student_course_search.name: query = query.where(StudentCourse.name.like(f&quot;%&#123;student_course_search.name&#125;%&quot;)) if student_course_search.number: query = query.where(StudentCourse.number.like(f&quot;%&#123;student_course_search.number&#125;%&quot;)) if student_course_search.studentId: query = query.where(StudentCourse.studentId == student_course_search.studentId) result = db_session.execute(query).scalars().all() return result 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False)class StudentCourseBase(BaseModel): name: str number: str studentId: int courseId: intclass StudentCourseCreate(StudentCourseBase): passclass StudentCourseSearch(BaseModel): name: str | None number: str | None studentId: int | None 从学生用户这里来看是挺好的，但是如果，多插入几个学生选课 从管理员的角度来看是这样的，并不能直接看出是哪位学生选了这门课 修改我们给显示选课记录的这个表格，加一列学生姓名 学生选课表就需要追加一个表的关联，去关联一下学生表获取学生姓名 123456789101112131415161718192021222324252627282930313233343536# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, String, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, ForeignKey(&#x27;student.id&#x27;), nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False) student: Mapped[Student] = relationship(lazy=False, backref=&quot;student_course&quot;)class StudentCourseBase(BaseModel): name: str number: str studentId: int courseId: intclass StudentCourseCreate(StudentCourseBase): passclass StudentCourseSearch(BaseModel): name: str | None number: str | None studentId: int | None 123456789101112131415161718192021222324252627282930313233343536373839# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.student import Studentfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearchclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course @staticmethod def select_page(student_course_search: StudentCourseSearch, db_session: Session): query = select(StudentCourse, Student).join(StudentCourse.student).order_by(asc(StudentCourse.id)) if student_course_search.name: query = query.where(StudentCourse.name.like(f&quot;%&#123;student_course_search.name&#125;%&quot;)) if student_course_search.number: query = query.where(StudentCourse.number.like(f&quot;%&#123;student_course_search.number&#125;%&quot;)) if student_course_search.studentId: query = query.where(StudentCourse.studentId == student_course_search.studentId) result = db_session.execute(query).scalars().all() return result 然后给前端这块 数据显示加一列，同时得是管理员的时候才显示这么一列 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123;&#125;;&lt;/script&gt; 学生选课删除现在实现删除学生所选课程 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.studentCourse import StudentCourseCreate, StudentCourseSearchfrom service.studentCourseService import StudentCourseServicestudent_course_router = APIRouter(prefix=&quot;/studentCourse&quot;)@student_course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)): StudentCourseService.add_student_course(student_course, db_session) return Result.success()@student_course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Student name&quot;), number: Optional[str] = Query(None, description=&quot;Student number&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) student_course_search = StudentCourseSearch(name=name, number=number, studentId=studentId) student_list = StudentCourseService.select_page(student_course_search, db_session) return Result.success(pageInfo.of(student_list))@student_course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): StudentCourseService.delete_by_id(id, db_session) return Result.success()app.include_router(student_course_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.student import Studentfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearchclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course @staticmethod def select_page(student_course_search: StudentCourseSearch, db_session: Session): query = select(StudentCourse, Student).join(StudentCourse.student).order_by(asc(StudentCourse.id)) if student_course_search.name: query = query.where(StudentCourse.name.like(f&quot;%&#123;student_course_search.name&#125;%&quot;)) if student_course_search.number: query = query.where(StudentCourse.number.like(f&quot;%&#123;student_course_search.number&#125;%&quot;)) if student_course_search.studentId: query = query.where(StudentCourse.studentId == student_course_search.studentId) result = db_session.execute(query).scalars().all() return result @staticmethod def delete_by_id(id, db_session): exist_student_course: StudentCourse = check_student_course_exist(id, db_session) db_session.delete(exist_student_course) db_session.commit() return exist_student_coursedef check_student_course_exist(student_course_id: int, db_session: Session): query = select(StudentCourse).where(StudentCourse.id == student_course_id) exist_student_course: StudentCourse = db_session.execute(query).scalar() if not exist_student_course: raise StudentCourseNotExistException(&quot;选课记录不存在&quot;) return exist_student_course 这种写法很冗余，大家自己想想可以怎么优化，我就不改了，或者后面有空改 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseExistException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseNotExistException(Exception): def __init__(self, message: str): self.message = message 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\ StudentCourseExistException, StudentCourseNotExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(StudentCourseExistException)async def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(StudentCourseNotExistException)async def student_course_not_exist_exception_handler(request: Request, exc: StudentCourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result)) 测试管理员删除 学生自己删除 更新: 2024-05-26 18:51:54原文: https://www.yuque.com/zacharyblock/iacda/hyi625azhg5dant9","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"个人页面","slug":"FastAPI入门/个人页面","date":"2024-05-23T04:41:00.000Z","updated":"2024-05-23T04:41:00.000Z","comments":true,"path":"blog/3275320888/","permalink":"https://blockzachary.github.io/blog/3275320888/","excerpt":"","text":"个人页面文件上传与下载依赖包需要安装一下werkzeug这个包 123456fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23pyjwtpasslib[bcrypt]werkzeug fileApi为了实现头像上传的功能创建一个新的fileApi.py 注意： StreamingResponse 引得是from fastapi.responses import StreamingResponse secure_filename 引得是from werkzeug.utils import secure_filename 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# -*- coding:utf-8 -*-# Author: Zacharyimport mimetypesimport osfrom datetime import datetimefrom fastapi.encoders import jsonable_encoderfrom werkzeug.utils import secure_filenamefrom fastapi.responses import StreamingResponsefrom fastapi import APIRouter, UploadFilefrom api import appfrom common.constant import HOST, PORTfrom common.profile import Profilefrom common.result import ResultModel, Resultfrom exception.customException import FileNotFoundExceptionfile_router = APIRouter(prefix=&quot;/files&quot;)@file_router.post(&quot;/upload&quot;, response_model=ResultModel)async def upload(file: UploadFile): original_filename = secure_filename(file.filename) timestamp = int(datetime.now().timestamp()) unique_filename = f&quot;&#123;timestamp&#125;_&#123;original_filename&#125;&quot; file_save_path = Profile.get_files_path() # 创建保存文件的完整路径 file_final_path = file_save_path.joinpath(unique_filename) # 将文件保存到指定位置 with open(file_final_path, &#x27;wb&#x27;) as buffer_file: content = await file.read() buffer_file.write(content) # 构建文件访问URL url = f&quot;http://&#123;HOST&#125;:&#123;PORT&#125;/files/download?filename=&#123;unique_filename&#125;&quot; return Result.success(jsonable_encoder(&#123;&quot;url&quot;: url&#125;))@file_router.get(&quot;/download&quot;)async def download(filename: str): file_save_path = Profile.get_files_path() file_path = file_save_path.joinpath(filename) if not file_path.exists(): raise FileNotFoundException(&quot;文件不存在&quot;) # 用于触发下载文件的 # return FileResponse(file_path, media_type=&#x27;image/png&#x27;, filename=filename) mime_type, _ = mimetypes.guess_type(file_path) # 创建一个StreamingResponse，以便流式传输大文件，同时设置正确的MIME类型 response = StreamingResponse( open(file_path, &#x27;rb&#x27;), media_type=mime_type, ) # 不设置Content-Disposition，避免浏览器触发下载 return responseapp.include_router(file_router) 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi, fileApi Profile在项目目录/common下创建一个profile.py，用于获取项目目录路径 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom pathlib import Pathclass Profile: __file_path = None @staticmethod def get_files_path(): project_path = Path(__file__).parent.parent # 获取项目根目录 file_path = project_path.joinpath(&quot;files&quot;) if not file_path.exists(): file_path.mkdir(parents=True) Profile.__file_path = file_path return file_path 自定义异常123456789101112131415161718192021222324252627282930313233343536# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = message 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result)) 测试使用 postman 测试一下 上传 下载 完善图片上传修改一下Student.vue头像上传的功能lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.username&quot; placeholder=&quot;请输入要查询的学生学号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的学生姓名&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;username&quot; label=&quot;学生学号&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;学生姓名&quot; /&gt; &lt;el-table-column prop=&quot;gender&quot; label=&quot;性别&quot; /&gt; &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机号&quot; /&gt; &lt;el-table-column prop=&quot;birthday&quot; label=&quot;出生日期&quot; /&gt; &lt;el-table-column prop=&quot;avatar&quot; label=&quot;头像&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-image v-if=&quot;scope.row.avatar&quot; :src=&quot;scope.row.avatar&quot; :preview-src-list=&quot;[scope.row.avatar]&quot; style=&quot;width: 40px; height: 40px&quot; &gt;&lt;/el-image&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;学生信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; :rules=&quot;rules&quot; ref=&quot;formRef&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;学生学号&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;data.form.username&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input v-model=&quot;data.form.password&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生姓名&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;性别&quot;&gt; &lt;el-radio-group v-model=&quot;data.form.gender&quot;&gt; &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt; &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机号&quot;&gt; &lt;el-input v-model=&quot;data.form.phone&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;出生日期&quot;&gt; &lt;el-date-picker format=&quot;YYYY-MM-DD&quot; value-format=&quot;YYYY-MM-DD&quot; v-model=&quot;data.form.birthday&quot; &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;头像&quot;&gt; &lt;el-upload action=&quot;http://localhost:9090/files/upload&quot; list-type=&quot;picture&quot; :on-success=&quot;handleImgUploadSuccess&quot; &gt; &lt;el-button type=&quot;primary&quot;&gt;上传头像 &lt;/el-button&gt; &lt;/el-upload&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; username: &quot;&quot;, name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123; password: &quot;123456&quot; &#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/student/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, username: data.username, name: data.name, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.username = &quot;&quot;; data.name = &quot;&quot;; load();&#125;;const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入学生学号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123; password: &quot;123456&quot; &#125;;&#125;;const save = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .request(&#123; url: data.form.id ? &quot;/student/update&quot; : &quot;/student/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true; data.form.password = &quot;123456&quot;;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/student/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;const handleImgUploadSuccess = (res) =&gt; &#123; data.form.avatar = res.data.url;&#125;;&lt;/script&gt; 个人资料在项目目录/manager文件夹下面创建一个Person.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;width: 50%; padding: 40px&quot;&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;头像&quot;&gt; &lt;el-upload class=&quot;avatar-uploader&quot; action=&quot;http://localhost:9090/files/upload&quot; :show-file-list=&quot;false&quot; :on-success=&quot;handleImgUploadSuccess&quot; &gt; &lt;img v-if=&quot;data.form.avatar&quot; :src=&quot;data.form.avatar&quot; class=&quot;avatar&quot; /&gt; &lt;el-icon v-else class=&quot;avatar-uploader-icon&quot;&gt; &lt;Plus /&gt; &lt;/el-icon&gt; &lt;/el-upload&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生学号&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;data.form.username&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input show-password v-model=&quot;data.form.password&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生姓名&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;性别&quot;&gt; &lt;el-radio-group v-model=&quot;data.form.gender&quot;&gt; &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt; &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机号&quot;&gt; &lt;el-input v-model=&quot;data.form.phone&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;出生日期&quot;&gt; &lt;el-date-picker format=&quot;YYYY-MM-DD&quot; value-format=&quot;YYYY-MM-DD&quot; v-model=&quot;data.form.birthday&quot; &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item style=&quot;padding-left: 60%&quot;&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;update&quot;&gt;保存&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref, reactive &#125; from &quot;vue&quot;;import &#123; Plus &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);if (data.form) &#123; data.form.password = &quot;&quot;;&#125;const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [ &#123; required: true, message: &quot;修改个人资料必须重新输入密码&quot;, trigger: &quot;blur&quot;, &#125;, ],&#125;);const update = () =&gt; &#123; request .put(&quot;/student/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); router.push(&quot;/login&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;const handleImgUploadSuccess = (res) =&gt; &#123; data.form.avatar = res.data;&#125;;&lt;/script&gt;&lt;style&gt;.avatar-uploader .el-upload &#123; border: 1px dashed #d9d9d9; border-radius: 6px; cursor: pointer; position: relative; overflow: hidden;&#125;.avatar-uploader .el-upload:hover &#123; border-color: #409eff;&#125;.el-icon.avatar-uploader-icon &#123; font-size: 28px; color: #8c939d; width: 100px; height: 100px; line-height: 100px; text-align: center;&#125;.avatar &#123; width: 100px; height: 100px; display: block;&#125;&lt;/style&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt;","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"学生管理","slug":"FastAPI入门/学生管理","date":"2024-05-20T00:10:00.000Z","updated":"2024-05-20T00:10:00.000Z","comments":true,"path":"blog/837251381/","permalink":"https://blockzachary.github.io/blog/837251381/","excerpt":"","text":"学生管理数据库先在数据库中创建一张学生信息表 Student 实体类定义在/model的包下创建一个student.py 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Student(Base): __tablename__ = &quot;student&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) phone: Mapped[str] = mapped_column(String(255), nullable=False) gender: Mapped[str] = mapped_column(String(255), nullable=False) birthday: Mapped[str] = mapped_column(String(255), nullable=False) avatar: Mapped[str] = mapped_column(String(255), nullable=False 学生登录前端-登录页面学生登录和 admin 的登录，我们复用同一个前端页面和后端接口，所以需要加一个role用以区分是 admin 登录了还是普通的 student 登录了；同时，不同用户进入页面之后。看到的内容应该是不同的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118&lt;template&gt; &lt;div&gt; &lt;div class=&quot;login-container&quot;&gt; &lt;div style=&quot;width: 420px&quot; class=&quot;login-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 登录&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot;&gt; &lt;el-form-item prop=&quot;username&quot;&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Avatar&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot;&gt; &lt;el-input show-password style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;role&quot;&gt; &lt;el-radio-group size=&quot;large&quot; v-model=&quot;data.form.role&quot;&gt; &lt;el-radio-button style=&quot;margin-left: 70px&quot; label=&quot;管理员&quot; value=&quot;ADMIN&quot; /&gt; &lt;el-radio-button style=&quot;margin-left: 50px&quot; label=&quot;学生&quot; value=&quot;STUDENT&quot; /&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%;font-size: 18px&quot; plain @click=&quot;login&quot; &gt;登 录&lt;/el-button &gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:35px;text-align: right;font-size: 15px&quot;&gt; 还没有账号？请&lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: &#123; role: &quot;ADMIN&quot; &#125;,&#125;);const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const login = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .post(&quot;/login&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; localStorage.setItem(&quot;student-user&quot;, JSON.stringify(res.data)); ElMessage.success(&quot;登录成功&quot;); router.push(&quot;/home&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.login-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.login-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 后端-管理员&#x2F;学生登录的 api 接口管理员和学生的登录复用同一个 api 接口 所以需要修改一下之前的登录逻辑 Account在/model下创建一个account.py，接收前端传递来的账号、密码、角色 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelclass AccountLogin(BaseModel): username: str password: str role: strclass AccountLoginResponse: id: int username: str name: str role: str token: str Student给 student 表追加role字段 给/model/student.py更新一下 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Student(Base): __tablename__ = &quot;student&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) phone: Mapped[str] = mapped_column(String(255), nullable=False) gender: Mapped[str] = mapped_column(String(255), nullable=False) birthday: Mapped[str] = mapped_column(String(255), nullable=False) avatar: Mapped[str] = mapped_column(String(255), nullable=False) role: Mapped[str] = mapped_column(String(255), nullable=False) Admin给 admin 表追加name字段和role字段 给/model/admin.py更新一下 12345678910111213141516171819202122232425262728# -*- coding:utf-8 -*-# Author: Zacharyimport bcryptfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) role: Mapped[str] = mapped_column(String(255), nullable=False)class AdminModel(BaseModel): username: str password: strclass AdminLoginResponse(BaseModel): id: int username: str token: str Service在项目目录/service下创建一个studentService.py 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.account import AccountLogin, AccountLoginResponsefrom model.student import Studentclass StudentService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Student).where(Student.username == account.username) exist_student: Student = db_session.execute(query).scalars().first() if not exist_student: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_student.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_student)) account_login_response.token = auth_handler.encode_token(exist_student.id) return account_login_response 然后修改adminService.py 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.account import AccountLoginResponse, AccountLoginfrom model.admin import Adminclass AdminService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Admin).where(Admin.username == account.username) exist_admin: Admin = db_session.execute(query).scalars().first() if not exist_admin: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_admin.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_admin)) account_login_response.token = auth_handler.encode_token(exist_admin.id) return account_login_response Role创建一个枚举类 Role，用以区分学生和管理员 在/common下创建一个Enum.py 12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumclass Role(str, Enum): ADMIN = &quot;管理员&quot; STUDENT = &quot;学生&quot; API然后修改一下登录的 api 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import Dependsfrom fastapi.encoders import jsonable_encoderfrom api import appfrom common.Enum import Rolefrom common.result import Result, ResultModelfrom model import Session, get_db_sessionfrom model.account import AccountLoginfrom service.adminService import AdminServicefrom service.studentService import StudentService@app.post(&quot;/login&quot;, response_model=ResultModel)async def login(account: AccountLogin, db_session: Session = Depends(get_db_session)): if Role.ADMIN.name.__eq__(account.role): db_account = AdminService.login(account, db_session) elif Role.STUDENT.name.__eq__(account.role): db_account = StudentService.login(account, db_session) else: return Result.error(&quot;角色错误&quot;) return Result.success(jsonable_encoder(db_account)) 学生注册前端-注册页面写一下学生的注册页面，这里管理员就不参与注册了 在前端项目目录/views下创建一个Register.vue（这里我偷懒了，没有替换注册页的背景图，大家可以自行替换） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;template&gt; &lt;div&gt; &lt;div class=&quot;register-container&quot;&gt; &lt;div style=&quot;width: 400px&quot; class=&quot;register-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 注册&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot;&gt; &lt;el-form-item prop=&quot;username&quot;&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;User&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot;&gt; &lt;el-input show-password style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%&quot; plain @click=&quot;register&quot; &gt;注 册&lt;/el-button &gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:30px;text-align: right&quot;&gt; 已有账号？请直接&lt;a href=&quot;/login&quot;&gt;登录&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: &#123;&#125;,&#125;);const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const register = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .post(&quot;/register&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;注册成功&quot;); router.push(&quot;/login&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.register-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.register-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 添加一下注册页面的路由 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 后端-注册的 api 接口接下来实现一下，后端注册的逻辑 API因为这个注册只是给学生使用的，在项目目录/api下新建一个studentApi.py 123456789101112131415# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import Dependsfrom api import appfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.account import AccountRegisterfrom service.studentService import StudentService@app.post(&quot;/register&quot;, response_model=ResultModel)async def register(account: AccountRegister, db_session: Session = Depends(get_db_session)): StudentService.register(account, db_session) return Result.success() 添加一下 studentApi 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi 给account.py添加注册的请求体 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelclass AccountLogin(BaseModel): username: str password: str role: strclass AccountLoginResponse: id: int username: str name: str role: str token: strclass AccountRegister(BaseModel): username: str password: str Service实现一下注册的 service 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import selectfrom common.Enum import Rolefrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchException, UserExistExceptionfrom model import Sessionfrom model.account import AccountLogin, AccountLoginResponse, AccountRegisterfrom model.student import Studentclass StudentService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Student).where(Student.username == account.username) exist_student: Student = db_session.execute(query).scalars().first() if not exist_student: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_student.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_student)) account_login_response.token = auth_handler.encode_token(exist_student.id) return account_login_response @staticmethod def register(account: AccountRegister, db_session: Session): query = select(Student).where(Student.username == account.username) exist_student = db_session.execute(query).scalars().first() if exist_student: raise UserExistException(&quot;账号已存在&quot;) new_student = Student() account.password = auth_handler.get_password_hash(account.password) set_attrs(new_student, jsonable_encoder(account)) if new_student.name is None: new_student.name = account.username new_student.role = Role.STUDENT.name db_session.add(new_student) db_session.commit() return new_student 添加自定义异常 12345678910111213141516171819202122232425262728293031# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = message 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 登录&#x2F;注册测试现在测试一下学生登录和注册的逻辑 学生注册 学生登录 现在登录进来了，但是右上角的显示不太对，等下改改 管理员登录 学生管理这块咱们做个设定，当管理员新增用户、替用户修改用户数据，密码必须重新设置为初始密码-123456 前端复制粘贴一下之前的Course.vue，命名为Student.vuelt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.username&quot; placeholder=&quot;请输入要查询的学生学号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的学生姓名&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;username&quot; label=&quot;学生学号&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;学生姓名&quot; /&gt; &lt;el-table-column prop=&quot;gender&quot; label=&quot;性别&quot; /&gt; &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机号&quot; /&gt; &lt;el-table-column prop=&quot;birthday&quot; label=&quot;出生日期&quot; /&gt; &lt;el-table-column prop=&quot;avatar&quot; label=&quot;头像&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;学生信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; :rules=&quot;rules&quot; ref=&quot;formRef&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;学生学号&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;data.form.username&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input v-model=&quot;data.form.password&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生姓名&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;性别&quot;&gt; &lt;el-radio-group v-model=&quot;data.form.gender&quot;&gt; &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt; &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机号&quot;&gt; &lt;el-input v-model=&quot;data.form.phone&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;出生日期&quot;&gt; &lt;el-date-picker format=&quot;YYYY-MM-DD&quot; value-format=&quot;YYYY-MM-DD&quot; v-model=&quot;data.form.birthday&quot; &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;头像&quot;&gt; &lt;el-input v-model=&quot;data.form.avatar&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; username: &quot;&quot;, name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123; password: &quot;123456&quot; &#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/student/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, username: data.username, name: data.name, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.username = &quot;&quot;; data.name = &quot;&quot;; load();&#125;;const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入学生学号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123; password: &quot;123456&quot; &#125;;&#125;;const save = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .request(&#123; url: data.form.id ? &quot;/student/update&quot; : &quot;/student/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true; data.form.password = &quot;123456&quot;;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/student/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;管理员&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端直接一次性实现学生管理的增删查改 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import Depends, APIRouter, Queryfrom api import appfrom common.auth import auth_handlerfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.account import AccountRegisterfrom model.student import StudentSearch, StudentCreate, StudentUpdatefrom service.studentService import StudentService@app.post(&quot;/register&quot;, response_model=ResultModel)async def register(account: AccountRegister, db_session: Session = Depends(get_db_session)): StudentService.register(account, db_session) return Result.success()student_router = APIRouter(prefix=&quot;/student&quot;)@student_router.get(&quot;/selectPage&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), username: Optional[str] = Query(None, description=&quot;Student username&quot;), name: Optional[str] = Query(None, description=&quot;Student name&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) student_search = StudentSearch(username=username, name=name) student_list = StudentService.select_page(student_search, db_session) return Result.success(pageInfo.of(student_list))@student_router.post(&quot;/add&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def add(student: StudentCreate, db_session: Session = Depends(get_db_session)): StudentService.add_student(student, db_session) return Result.success()@student_router.put(&quot;/update&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def update(student: StudentUpdate, db_session: Session = Depends(get_db_session)): StudentService.update_by_id(student, db_session) return Result.success()@student_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def delete(id: int, db_session: Session = Depends(get_db_session)): StudentService.delete_by_id(id, db_session) return Result.success()app.include_router(student_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, ascfrom common.Enum import Rolefrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchException, UserExistExceptionfrom model import Sessionfrom model.account import AccountLogin, AccountLoginResponse, AccountRegisterfrom model.student import Student, StudentCreate, StudentUpdateclass StudentService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Student).where(Student.username == account.username) exist_student: Student = db_session.execute(query).scalars().first() if not exist_student: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_student.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_student)) account_login_response.token = auth_handler.encode_token(exist_student.id) return account_login_response @staticmethod def register(account: AccountRegister, db_session: Session): query = select(Student).where(Student.username == account.username) exist_student = db_session.execute(query).scalars().first() if exist_student: raise UserExistException(&quot;账号已存在&quot;) new_student = Student() account.password = auth_handler.get_password_hash(account.password) set_attrs(new_student, jsonable_encoder(account)) if new_student.name is None: new_student.name = account.username new_student.role = Role.STUDENT.name db_session.add(new_student) db_session.commit() return new_student @staticmethod def select_page(student_search: Student, db_session: Session): query = select(Student).order_by(asc(Student.id)) if student_search.username: query = query.where(Student.username.like(f&quot;%&#123;student_search.username&#125;%&quot;)) if student_search.name: query = query.where(Student.name.like(f&quot;%&#123;student_search.name&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_student(student: StudentCreate, db_session: Session): query = select(Student).where(Student.username == student.username) exist_student = db_session.execute(query).scalars().all() if exist_student: raise UserExistException(&quot;账号已存在&quot;) student.password = auth_handler.get_password_hash(student.password) student = Student(**student.dict()) if student.name is None: student.name = student.username student.role = Role.STUDENT.name db_session.add(student) db_session.commit() return student @staticmethod def update_by_id(student: StudentUpdate, db_session: Session): exist_student: Student = check_student_exist(student.id, db_session) student.password = auth_handler.get_password_hash(student.password) set_attrs(exist_student, jsonable_encoder(student)) db_session.commit() return exist_student @staticmethod def delete_by_id(id: int, db_session: Session): exist_student: Student = check_student_exist(id, db_session) db_session.delete(exist_student) db_session.commit() return exist_studentdef check_student_exist(student_id: int, db_session: Session): query = select(Student).where(Student.id == student_id) exist_student: Student = db_session.execute(query).scalar() if not exist_student: raise UserNotFoundException(&quot;账号不存在&quot;) return exist_student 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom pydantic import BaseModel, Fieldfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Student(Base): __tablename__ = &quot;student&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) phone: Mapped[str] = mapped_column(String(255), nullable=False) gender: Mapped[str] = mapped_column(String(255), nullable=False) birthday: Mapped[str] = mapped_column(String(255), nullable=False) avatar: Mapped[str] = mapped_column(String(255), nullable=False) role: Mapped[str] = mapped_column(String(255), nullable=False)class StudentBase(BaseModel): username: str password: str = Field(..., min_length=1) name: Optional[str] = None role: Optional[str] = Noneclass StudentSearch(BaseModel): username: str | None name: str | Noneclass StudentCreate(StudentBase): phone: Optional[str] = None gender: Optional[str] = None birthday: Optional[str] = Field(None) avatar: Optional[str] = Field(None)class StudentUpdate(StudentCreate): id: int 测试增 删 查 改 但是修改过后，密码会被强制重置为 123456 限制权限现在不管普通的学生还是管理员都能看到管理页面 这不符合 需要加入一个权限v-if=&quot;user.role === &#39;ADMIN&#39;&quot; 顺便修改一下右上角和主页显示的用户名称 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div class=&quot;welcome-container&quot;&gt; &lt;div class=&quot;custom-card bg-white shadow rounded p-4 mb-5&quot;&gt; &lt;h2 class=&quot;text-center text-primary&quot;&gt;欢迎来到本系统&lt;/h2&gt; &lt;p class=&quot;text-center mt-3&quot;&gt; 您好 &lt;span :style=&quot;&#123; color: &#x27;#116ca9&#x27; &#125;&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span &gt;，祝您使用愉快！ &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import request from &quot;@/utils/request&quot;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.welcome-container &#123; display: flex; justify-content: center; align-items: center; min-height: calc(100vh - 100px); /* 根据实际项目需要调整高度 */&#125;.custom-card &#123; max-width: 400px; border: none;&#125;&lt;/style&gt; 普通学生登录 管理员登录 更新: 2024-05-20 00:11:43原文: https://www.yuque.com/zacharyblock/iacda/uuigf300461wndud","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"Linux手册","slug":"Linux/手册","date":"2024-05-16T00:12:00.000Z","updated":"2024-05-16T00:12:00.000Z","comments":true,"path":"blog/1442625339/","permalink":"https://blockzachary.github.io/blog/1442625339/","excerpt":"","text":"手册基本操作Linux 关机,重启12345#关机shutdown -h now#重启shutdown -r now 查看系统,CPU 信息12345678910111213141516171819202122#查看系统内核信息uname -a#查看系统内核版本cat /proc/version#查看当前用户环境变量envcat /proc/cpuinfo#查看有几个逻辑cpu, 包括cpu型号cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c#查看有几颗cpu,每颗分别是几核cat /proc/cpuinfo | grep physical | uniq -c#查看当前CPU运行在32bit还是64bit模式下, 如果是运行在32bit下也不代表CPU不支持64bitgetconf LONG_BIT#结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bitcat /proc/cpuinfo | grep flags | grep &#x27; lm &#x27; | wc -l 建立软连接1ln -s /usr/local/jdk1.8/ jdk rpm 相关12#查看是否通过rpm安装了该软件rpm -qa | grep 软件名 sshkey1234#创建sshkeyssh-keygen -t rsa -C your_email@example.com#id_rsa.pub 的内容拷贝到要控制的服务器的 home/username/.ssh/authorized_keys 中,如果没有则新建(.ssh权限为700, authorized_keys权限为600) 命令重命名12#在各个用户的.bash_profile中添加重命名配置alias ll=&#x27;ls -alF&#x27; 同步服务器时间1sudo ntpdate -u ntp.api.bz 后台运行命令12345678#后台运行,并且有nohup.out输出nohup xxx &amp;#后台运行, 不输出任何日志nohup xxx &gt; /dev/null &amp;#后台运行, 并将错误信息做标准输出到日志中nohup xxx &gt;out.log 2&gt;&amp;1 &amp; 强制活动用户退出12#命令来完成强制活动用户退出.其中TTY表示终端名称pkill -kill -t [TTY] 查看命令路径1which &lt;命令&gt; 查看进程所有打开最大 fd 数1ulimit -n 配置 dns1vim /etc/resolv.conf nslookup,查看域名路由表1nslookup google.com last, 最近登录信息列表12#最近登录的5个账号last -n 5 设置固定 ip1ifconfig em1 192.168.5.177 netmask 255.255.255.0 查看进程内加载的环境变量12#也可以去 cd /proc 目录下, 查看进程内存中加载的东西ps eww -p XXXXX(进程号) 查看进程树找到服务器进程1ps auwxf 查看进程启动路径123cd /proc/xxx(进程号)ls -all#cwd对应的是启动路径 添加用户, 配置 sudo 权限123456789#新增用户useradd 用户名passwd 用户名#增加sudo权限vim /etc/sudoers#修改文件里面的#root ALL=(ALL) ALL#用户名 ALL=(ALL) ALL 强制关闭进程名包含 xxx 的所有进程1ps aux|grep xxx | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9 磁盘,文件,目录相关操作vim 操作123456789101112131415161718#normal模式下 g表示全局, x表示查找的内容, y表示替换后的内容:%s/x/y/g#normal模式下0 #光标移到行首(数字0)$ #光标移至行尾shift + g #跳到文件最后gg #跳到文件头#显示行号:set nu#去除行号:set nonu#检索/xxx(检索内容) #从头检索, 按n查找下一个?xxx(检索内容) #从尾部检索 打开只读文件,修改后需要保存时(不用切换用户即可保存的方式)12#在normal模式下:w !sudo tee % 查看磁盘, 文件目录基本信息1234567891011#查看磁盘挂载情况mount#查看磁盘分区信息df#查看目录及子目录大小du -H -h#查看当前目录下各个文件, 文件夹占了多少空间, 不会递归du -sh * wc 命令1234567891011#查看文件里有多少行wc -l filename#看文件里有多少个wordwc -w filename#文件里最长的那一行是多少个字wc -L filename#统计字节数wc -c 常用压缩, 解压缩命令压缩命令123tar czvf xxx.tar 压缩目录zip -r xxx.zip 压缩目录 解压缩命令123456tar zxvf xxx.tar#解压到指定文件夹tar zxvf xxx.tar -C /xxx/yyy/unzip xxx.zip 变更文件所属用户, 用户组1chown eagleye.eagleye xxx.log cp, scp, mkdir1234567891011121314151617#复制cp xxx.log#复制并强制覆盖同名文件cp -f xxx.log#复制文件夹cp -r xxx(源文件夹) yyy(目标文件夹)#远程复制scp -P ssh端口 username@10.10.10.101:/home/username/xxx /home/xxx#级联创建目录mkdir -p /xxx/yyy/zzz#批量创建文件夹, 会在test,main下都创建java, resources文件夹mkdir -p src/&#123;test,main&#125;/&#123;java,resources&#125; 比较两个文件1diff -u 1.txt 2.txt 日志输出的字节数,可以用作性能测试12#如果做性能测试, 可以每执行一次, 往日志里面输出 “.” , 这样日志中的字节数就是实际的性能测试运行的次数, 还可以看见实时速率.tail -f xxx.log | pv -bt 查看, 去除特殊字符12345#查看特殊字符cat -v xxx.sh#去除特殊字符sed -i &#x27;s/^M//g’ env.sh 去除文件的特殊字符, 比如^M: 需要这样输入: ctrl+v+enter 处理因系统原因引起的文件中特殊字符的问题123456789101112#可以转换为该系统下的文件格式cat file.sh &gt; file.sh_bak#先将file.sh中文件内容复制下来然后运行, 然后粘贴内容, 最后ctrl + d 保存退出cat &gt; file1.sh#在vim中通过如下设置文件编码和文件格式:set fileencodings=utf-8 ，然后 w （存盘）一下即可转化为 utf8 格式，:set fileformat=unix#在mac下使用dos2unix进行文件格式化find . -name &quot;*.sh&quot; | xargs dos2unix tee, 重定向的同时输出到屏幕1awk ‘&#123;print $0&#125;’ xxx.log | tee test.log 检索相关grep1234567891011121314151617181920#反向匹配, 查找不包含xxx的内容grep -v xxx#排除所有空行grep -v &#x27;^/pre&gt;#返回结果 2,则说明第二行是空行grep -n “^$” 111.txt#查询以abc开头的行grep -n “^abc” 111.txt#同时列出该词语出现在文章的第几行grep &#x27;xxx&#x27; -n xxx.log#计算一下该字串出现的次数grep &#x27;xxx&#x27; -c xxx.log#比对的时候，不计较大小写的不同grep &#x27;xxx&#x27; -i xxx.log awk12345#以&#x27;:&#x27; 为分隔符,如果第五域有user则输出该行awk -F &#x27;:&#x27; &#x27;&#123;if ($5 ~ /user/) print $0&#125;&#x27; /etc/passwd#统计单个文件中某个字符（串）(中文无效)出现的次数awk -v RS=&#x27;character&#x27; &#x27;END &#123;print --NR&#125;&#x27; xxx.txt find 检索命令1234567891011121314151617#在目录下找后缀是.mysql的文件find /home/eagleye -name &#x27;*.mysql&#x27; -print#会从 /usr 目录开始往下找，找最近3天之内存取过的文件。find /usr -atime 3 –print#会从 /usr 目录开始往下找，找最近5天之内修改过的文件。find /usr -ctime 5 –print#会从 /doc 目录开始往下找，找jacky 的、文件名开头是 j的文件。find /doc -user jacky -name &#x27;j*&#x27; –print#会从 /doc 目录开始往下找，找寻文件名是 ja 开头或者 ma开头的文件。find /doc \\( -name &#x27;ja*&#x27; -o- -name &#x27;ma*&#x27; \\) –print#会从 /doc 目录开始往下找，找到凡是文件名结尾为 bak的文件，把它删除掉。-exec 选项是执行的意思，rm 是删除命令，&#123; &#125; 表示文件名，“\\;”是规定的命令结尾。find /doc -name &#x27;*bak&#x27; -exec rm &#123;&#125; \\; 网络相关查看什么进程使用了该端口1lsof -i:port 获取本机 ip 地址1/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk &#x27;&#123;print $2&#125;&#x27;|tr -d &quot;addr:&quot; iptables12345678910111213141516171819#查看iptables状态service iptables status#要封停一个ipiptables -I INPUT -s ***.***.***.*** -j DROP#要解封一个IP，使用下面这条命令：iptables -D INPUT -s ***.***.***.*** -j DROP备注: 参数-I是表示Insert（添加），-D表示Delete（删除）。后面跟的是规则，INPUT表示入站，***.***.***.***表示要封停的IP，DROP表示放弃连接。#开启9090端口的访问/sbin/iptables -I INPUT -p tcp --dport 9090 -j ACCEPT#防火墙开启、关闭、重启/etc/init.d/iptables status/etc/init.d/iptables start/etc/init.d/iptables stop/etc/init.d/iptables restart nc 命令, tcp 调试利器12345678#给某一个endpoint发送TCP请求,就将data的内容发送到对端nc 192.168.0.11 8000 &lt; data.txt#nc可以当做服务器，监听某个端口号,把某一次请求的内容存储到received_data里nc -l 8000 &gt; received_data#上边只监听一次，如果多次可以加上-k参数nc -lk 8000 tcpdump12#dump出本机12301端口的tcp包tcpdump -i em1 tcp port 12301 -s 1500 -w abc.pcap 跟踪网络路由路径12345678#traceroute默认使用udp方式, 如果是-I则改成icmp方式traceroute -I www.163.com#从ttl第3跳跟踪traceroute -M 3 www.163.com#加上端口跟踪traceroute -p 8080 192.168.10.11 ss12345678910111213141516171819202122232425#显示本地打开的所有端口ss -l#显示每个进程具体打开的socketss -pl#显示所有tcp socketss -t -a#显示所有的UDP Socektss -u -a#显示所有已建立的SMTP连接ss -o state established &#x27;( dport = :smtp or sport = :smtp )&#x27;#显示所有已建立的HTTP连接ss -o state established &#x27;( dport = :http or sport = :http )&#x27;找出所有连接X服务器的进程ss -x src /tmp/.X11-unix/*列出当前socket统计信息ss -s解释：netstat是遍历/proc下面每个PID目录，ss直接读/proc/net下面的统计信息。所以ss执行的时候消耗资源以及消耗的时间都比netstat少很多 netstat12345678910111213141516171819#输出每个ip的连接数，以及总的各个状态的连接数netstat -n | awk &#x27;/^tcp/ &#123;n=split($(NF-1),array,&quot;:&quot;);if(n&lt;=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N&#125; END &#123;for(a in S)&#123;printf(&quot;%-20s %s\\n&quot;, a, S[a]);++I&#125;printf(&quot;%-20s %s\\n&quot;,&quot;TOTAL_IP&quot;,I);for(a in s) printf(&quot;%-20s %s\\n&quot;,a, s[a]);printf(&quot;%-20s %s\\n&quot;,&quot;TOTAL_LINK&quot;,N);&#125;&#x27;#统计所有连接状态,#CLOSED：无连接是活动的或正在进行#LISTEN：服务器在等待进入呼叫#SYN_RECV：一个连接请求已经到达，等待确认#SYN_SENT：应用已经开始，打开一个连接#ESTABLISHED：正常数据传输状态#FIN_WAIT1：应用说它已经完成#FIN_WAIT2：另一边已同意释放#ITMED_WAIT：等待所有分组死掉#CLOSING：两边同时尝试关闭#TIME_WAIT：主动关闭连接一端还没有等到另一端反馈期间的状态#LAST_ACK：等待所有分组死掉netstat -n | awk &#x27;/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,&quot;\\t&quot;,state[key]&#125;&#x27;#查找较多time_wait连接netstat -n|grep TIME_WAIT|awk &#x27;&#123;print $5&#125;&#x27;|sort|uniq -c|sort -rn|head -n20 监控 linux 性能命令top1按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序, 然后回车。而大写的 R 键可以将当前的排序倒转 列名 含义 PID 进程 id PPID 父进程 id RUSER Real user name UID 进程所有者的用户 id USER 进程所有者的用户名 GROUP 进程所有者的组名 TTY 启动进程的终端名。不是从终端启动的进程则显示为 ? PR 优先级 NI nice 值。负值表示高优先级，正值表示低优先级 P 最后使用的 CPU，仅在多 CPU 环境下有意义 %CPU 上次更新到现在的 CPU 时间占用百分比 TIME 进程使用的 CPU 时间总计，单位秒 TIME+ 进程使用的 CPU 时间总计，单位 1&#x2F;100 秒 %MEM 进程使用的物理内存百分比 VIRT 进程使用的虚拟内存总量，单位 kb。VIRT&#x3D;SWAP+RES SWAP 进程使用的虚拟内存中，被换出的大小，单位 kb。 RES 进程使用的、未被换出的物理内存大小，单位 kb。RES&#x3D;CODE+DATA CODE 可执行代码占用的物理内存大小，单位 kb DATA 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位 kb SHR 共享内存大小，单位 kb nFLT 页面错误次数 nDRT 最后一次写入到现在，被修改过的页面数。 S 进程状态。D&#x3D;不可中断的睡眠状态,R&#x3D;运行,S&#x3D;睡眠,T&#x3D;跟踪&#x2F;停止,Z&#x3D;僵尸进程 COMMAND 命令名&#x2F;命令行 WCHAN 若该进程在睡眠，则显示睡眠中的系统函数名 Flags 任务标志，参考 sched.h dmesg,查看系统日志1dmesg iostat,磁盘 IO 情况监控1234567iostat -xz 1#r/s, w/s, rkB/s, wkB/s：分别表示每秒读写次数和每秒读写数据量（千字节）。读写量过大，可能会引起性能问题。#await：IO操作的平均等待时间，单位是毫秒。这是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时。如果这个数值过大，可能是硬件设备遇到了瓶颈或者出现故障。#avgqu-sz：向设备发出的请求平均数量。如果这个数值大于1，可能是硬件设备已经饱和（部分前端硬件设备支持并行写入）。#%util：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过60，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达100%，说明硬件设备已经饱和。#如果显示的是逻辑设备的数据，那么设备利用率不代表后端实际的硬件设备已经饱和。值得注意的是，即使IO性能不理想，也不一定意味这应用程序性能会不好，可以利用诸如预读取、写缓存等策略提升应用性能。 free,内存使用情况1234567891011121314151617181920212223242526free -meg: total used free shared buffers cachedMem: 1002 769 232 0 62 421-/+ buffers/cache: 286 715Swap: 1153 0 1153第一部分Mem行:total 内存总数: 1002Mused 已经使用的内存数: 769Mfree 空闲的内存数: 232Mshared 当前已经废弃不用,总是0buffers Buffer 缓存内存数: 62Mcached Page 缓存内存数:421M关系：total(1002M) = used(769M) + free(232M)第二部分(-/+ buffers/cache):(-buffers/cache) used内存数：286M (指的第一部分Mem行中的used – buffers – cached)(+buffers/cache) free内存数: 715M (指的第一部分Mem行中的free + buffers + cached)可见-buffers/cache反映的是被程序实实在在吃掉的内存,而+buffers/cache反映的是可以挪用的内存总数.第三部分是指交换分区 sar,查看网络吞吐状态12345678910#sar命令在这里可以查看网络设备的吞吐率。在排查性能问题时，可以通过网络设备的吞吐量，判断网络设备是否已经饱和sar -n DEV 1##sar命令在这里用于查看TCP连接状态，其中包括：#active/s：每秒本地发起的TCP连接数，既通过connect调用创建的TCP连接；#passive/s：每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接；#retrans/s：每秒TCP重传数量；#TCP连接数可以用来判断性能问题是否由于建立了过多的连接，进一步可以判断是主动发起的连接，还是被动接受的连接。TCP重传可能是因为网络环境恶劣，或者服务器压力过大导致丢包sar -n TCP,ETCP 1 vmstat, 给定时间监控 CPU 使用率, 内存使用, 虚拟内存交互, IO 读写12345678910#2表示每2秒采集一次状态信息, 1表示只采集一次(忽略既是一直采集)vmstat 2 1eg:r b swpd free buff cache si so bi bo in cs us sy id wa1 0 0 3499840 315836 3819660 0 0 0 1 2 0 0 0 100 00 0 0 3499584 315836 3819660 0 0 0 0 88 158 0 0 100 00 0 0 3499708 315836 3819660 0 0 0 2 86 162 0 0 100 00 0 0 3499708 315836 3819660 0 0 0 10 81 151 0 0 100 01 0 0 3499732 315836 3819660 0 0 0 2 83 154 0 0 100 0 r 表示运行队列(就是说多少个进程真的分配到 CPU)，我测试的服务器目前 CPU 比较空闲，没什么程序在跑，当这个值超过了 CPU 数目，就会出现 CPU 瓶颈了。这个也和 top 的负载有关系，一般负载超过了 3 就比较高，超过了 5 就高，超过了 10 就不正常了，服务器的状态很危险。top 的负载类似每秒的运行队列。如果运行队列过大，表示你的 CPU 很繁忙，一般会造成 CPU 使用率很高。 b 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。 swpd 虚拟内存已使用的大小，如果大于 0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。 free 空闲的物理内存的大小，我的机器内存总共 8G，剩余 3415M。 buff Linux&#x2F;Unix 系统是用来存储，目录里面有什么内容，权限等的缓存，我本机大概占用 300 多 M cache cache 直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用 300 多 M(这里是 Linux&#x2F;Unix 的聪明之处，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer&#x2F;cached 会很快地被使用。) si 每秒从磁盘读入虚拟内存的大小，如果这个值大于 0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。我的机器内存充裕，一切正常。 so 每秒虚拟内存写入磁盘的大小，如果这个值大于 0，同上。 bi 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是 1024byte，我本机上没什么 IO 操作，所以一直是 0，但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到 140000&#x2F;s，磁盘写入速度差不多 140M 每秒 bo 块设备每秒发送的块数量，例如我们读取文件，bo 就要大于 0。bi 和 bo 一般都要接近 0，不然就是 IO 过于频繁，需要调整。 in 每秒 CPU 的中断次数，包括时间中断 cs 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在 apache 和 nginx 这种 web 服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择 web 服务器的进程可以由进程或者线程的峰值一直下调，压测，直到 cs 到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的 CPU 大部分浪费在上下文切换，导致 CPU 干正经事的时间少了，CPU 没有充分利用，是不可取的。 us 用户 CPU 时间，我曾经在一个做加密解密很频繁的服务器上，可以看到 us 接近 100,r 运行队列达到 80(机器在做压力测试，性能表现不佳)。 sy 系统 CPU 时间，如果太高，表示系统调用时间长，例如是 IO 操作频繁。 id 空闲 CPU 时间，一般来说，id + us + sy &#x3D; 100,一般我认为 id 是空闲 CPU 使用率，us 是用户 CPU 使用率，sy 是系统 CPU 使用率。 wt 等待 IO CPU 时间。 更新: 2024-05-16 00:14:36原文: https://www.yuque.com/zacharyblock/cx2om6/ik6dzvhn4ahxsfba","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blockzachary.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blockzachary.github.io/tags/Linux/"}]},{"title":"Linux基础","slug":"Linux/Linux基础","date":"2024-05-16T00:00:00.000Z","updated":"2024-05-16T00:00:00.000Z","comments":true,"path":"blog/2762478163/","permalink":"https://blockzachary.github.io/blog/2762478163/","excerpt":"","text":"Linux 基础安装 Ubuntu 系统这里我们就以安装虚拟机的方式在我们的电脑上安装 Linux 操作系统，我们选用 Ubuntu 作为教程，如果有经济实力，可以在腾讯云、阿里云之类的服务商购买一台云服务器，并选择预装 Ubuntu 系统；如果你还想搞嵌入式开发之类的工作，可以购买一台树莓派服务器，也可以在上面安装 Ubuntu 系统，相当于一台迷你主机。在你已经有云服务器的情况下，可以直接跳过虚拟机安装教学。 官网下载：https://cn.ubuntu.com/download/server/step1 注意是下载服务器版本，不是桌面版本。 在虚拟机中安装这里我们使用 VMware 进行安装，VMware 是一个虚拟化应用程序，它可以在我们当前运行的操作系统之上，创建一个虚线的主机，相当于创建了一台电脑，而我们就可以在这台电脑上安装各种各样的操作系统，并且我们可以自由为其分配 CPU 核心和内存以及硬盘容量（如果你接触过云计算相关内容，应该会对虚拟化技术有所了解） 官网下载：https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html 安装完成后，会出现一个类似于 CMD 的命令窗口，而我们就是通过输入命令来操作我们的操作系统。 使用 SSH 远程连接如果你使用的是树莓派或是云服务器，那么你会得到一个公网的 IP 地址，以及默认的用户名和密码，由于服务器安装的 Ubuntu 并不是在我们的电脑上运行的，那么我们怎么去远程操作呢？ 比如我们要远程操作一台 Windows 电脑，直接使用远程桌面连接即可，但是 Ubuntu 上来就是命令行，这种情况下要实现远程连接就只能使用 SSH 终端。 SSH 是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用 SSH 协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995 年，芬兰学者 Tatu Ylonen 设计了 SSH 协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为 Linux 系统的标准配置。 云服务器上安装的 Ubuntu 默认都是自带了 OpenSSH 服务端的，我们可以直接连接，如果你的 Ubuntu 服务器上没有安装 OpenSSH 服务器端，那么可以输入命令进行安装： 12sudo apt install openssh-server#输入后还需要你输入当前用户的密码才可以执行，至于为什么我们后面会说 ssh 的开启命令 1service ssh start 查看 ssh 进程 1ps -e|grep ssh 非 root 用户如果登录不上 ssh 1chown zachary:zachary -R /home/zachary 这里我们使用 XShell 来进行 SSH 登陆，官网：https://www.netsarang.com/zh/free-for-home-school/ 直接使用 mac 下的终端进行登录 1ssh zachary@172.16.59.130 文件系统介绍在 Windows 下，我们的整个硬盘实际上可以被分为多个磁盘驱动器： 我们一般习惯将软件装到 D 盘，文件数据存在 E 盘，系统和一些环境安装在 C 盘，根据不同的盘符进行划分，并且每个盘都有各自的存储容量大小。而在 Linux 中，没有这个概念，所有的文件都是位于根目录下的： 我们可以看到根目录下有很多个文件夹，它们都有着各自的划分： &#x2F;bin 可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等实际上都是一些小的应用程序 &#x2F;home 普通用户的主目录，对应 Windows 下的 C:&#x2F;Users&#x2F;用户名&#x2F; &#x2F;root root 用户的主目录（root 用户是具有最高权限的用户，之后会讲） &#x2F;boot 内核文件的引导目录, 放置 linux 系统启动时用到的一些文件 &#x2F;sbing 超级用户使用的指令文件 &#x2F;tmp 临时文件目录，一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下。 &#x2F;dev 设备文件目录，在 Linux 中万物皆文件，实际上你插入的 U 盘等设备都会在 dev 目录下生成一个文件，我们可以很方便地通过文件 IO 方式去操作外设，对嵌入式开发极为友好。 &#x2F;lib 共享库，系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助。 &#x2F;usr 第三方 程序目录 &#x2F;etc 配置程序目录，系统配置文件存放的目录 &#x2F;var 可变文件，放置系统执行过程中经常变化的文件 &#x2F;opt 用户使用目录，给主机额外安装软件所摆放的目录。 我们可以直接输入命令来查看目录下的所有文件： 1234#只显示文件名称，且不显示隐藏文件ls#显示隐藏文件以及文件详细信息ll 那么我们如何才能像 Windows 那样方便的管理 Linux 中的文件呢？我们可以使用 FTP 管理工具，默认情况下 Ubuntu 是安装了 SFTP 服务器的。 这里我们使用 Xftp 来进行管理，官网：https://www.netsarang.com/zh/free-for-home-school/ 用户和用户组我们整个 Linux 阶段的学习主要是以实操为主，大量的命令需要大量的使用才能记得更牢固。 Linux 系统是一个多用户多任务的分时操作系统，任何一个要使用系统的用户，都必须申请一个账号，然后以这个账号的身份进入系统。比如我们之前就是使用我们在创建服务器时申请的初始用户 test，通过输入用户名和密码登录到系统中，之后才能使用各种命令进行操作。其实用户机制和我们的 Windows 比较类似。一般的普通用户只能做一些比较基本的操作，并且只能在自己的目录（如&#x2F;home&#x2F;test）中进行文件的创建和删除操作。 我们可以看到，当前状态信息分为三段： 1test@ubuntu-server:~$ 格式为：用户名@服务器名称:当前所处的目录$，其中~代表用户目录，如果不是用户目录，会显示当前的绝对路径地址。我们也可以使用 pwd 命令来直接查看当前所处的目录。 在 Linux 中默认存在一个超级用户 root，而此用户拥有最高执行权限，它能够修改任何的内容，甚至可以删除整个 Linux 内核，正常情况下不会使用 root 用户进行登陆，只有在特殊情况下才会使用 root 用户来进行一些操作，root 用户非常危险，哪怕一个小小的命令都能够毁掉整个 Linux 系统，比如 rm -rf &#x2F;*，感兴趣的话我们可以放在最后来演示（在以前老是听说安卓手机 root，实际上就是获取安卓系统底层 Linux 系统的 root 权限，以实现修改系统文件的目的） 我们可以使用 sudo -s 并输入当前用户的密码切换到 root 用户，可以看到出现了一些变化： 123test@ubuntu-server:~$root@ubuntu-server:/home/test# 我们发现$符号变成了#符号，注意此符号表示当前的用户权限等级，并且 test 也变为了 root，在此用户下，我们可以随意修改 test 用户文件夹以外的内容，而 test 用户下则无法修改。如果需要退出 root 用户，直接输入 exit 即可。 接着我们来看一下，如何进行用户的管理操作，进行用户管理，包括添加用户和删除用户都需要 root 权限才可以执行，但是现在我们是 test 用户，我们可以在命令前面添加 sudo 来暂时以管理员身份执行此命令，比如说我们现在想要添加一个新的用户： 1sudo useradd study 其中 study 就是我们想要创建的新用户，useradd 命令就是创建新用户的命令，同样的，删除用户： 1sudo userdel study Linux 中的命令一般都可以携带一些参数来以更多特地的方式执行，我们可以在创建用户时，添加一些额外的参数来进行更多高级操作： -d&lt;登录目录&gt; 指定用户登录时的起始目录。 -g&lt;群组&gt; 指定用户所属的群组。 -G&lt;群组&gt; 指定用户所属的附加群组。 -m 自动建立用户的登入目录。 -M 不要自动建立用户的登入目录。 -s 指定 Shell，一般指定为&#x2F;bin&#x2F;bash 如果还想查看更多命令，可以直接使用 man 来查看命令的详细参数列表，比如： 1man useradd 比如我们现在需要在用户创建时顺便创建用户的文件夹，并指定 shell（任意一种命令解释程序，用于处理我们输入的命令）为 bash： 1sudo useradd study -m -s /bin/bash 可以看到已经自动在 home 目录下创建了 study 文件夹（这里..表示上一级目录，.表示当前目录）： 12test@ubuntu-server:~$ ls ..study test 用户创建完成之后，我们可以为此用户设定密码（如果不指定用户，那么会设置当前用户的密码）： 1sudo passwd study 输入密码之后，我们可以使用命令来切换用户： 123test@ubuntu-server:~$ su - studyPassword:study@ubuntu-server:~$ 可以看到，切换用户后名称已经修改为 study 了，我们使用 exit 即可退出当前用户回到 test。 输入 who 可以查看当前登录账号（注意是登录的账号）输入 whoami 可以查看当前的操作账号： 12345678test@ubuntu-server:~$ su studyPassword:study@ubuntu-server:/home/test$ cd ~study@ubuntu-server:~$ whotest pts/0 2022-01-24 03:57 (192.168.10.3)study@ubuntu-server:~$ whoamistudystudy@ubuntu-server:~$ 接着我们来看用户组，每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。我们可以输入 groups 来查看当前用户所有的用户组： 12test@ubuntu-server:~$ groupstest adm cdrom sudo dip plugdev lxd 我们可以输入 id 来查看用户所属的用户相关信息： 12test@ubuntu-server:~$ iduid=1000(test) gid=1000(test) groups=1000(test),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lxd) 我们可以看到 test 用户默认情况下主要用户组为同名的 test 用户组，并且还属于一些其他的用户组，其中 sudo 用户组就表示可以执行 sudo 命令，我们发现我们创建的 study 用户没有 sudo 的执行权限： 123study@ubuntu-server:~$ sudo -s[sudo] password for study:study is not in the sudoers file. This incident will be reported. 正是因为没有加入到 sudo 用户组，这里我们来尝试将其添加到 sudo 用户组： 12test@ubuntu-server:~$ id studyuid=1001(study) gid=1001(study) groups=1001(study) 使用 usermod 命令来对用户的相关设置进行修改，参数与 useradd 大致相同： 123test@ubuntu-server:~$ sudo usermod study -G sudotest@ubuntu-server:~$ id studyuid=1001(study) gid=1001(study) groups=1001(study),27(sudo) 接着切换到 study 用户就可以使用 sudo 命令了： 123456To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;.See &quot;man sudo_root&quot; for details.study@ubuntu-server:/home/test$ sudo -s[sudo] password for study:root@ubuntu-server:/home/test# 实际上，我们的用户信息是存储在配置文件中的，我们之前说了，配置文件一般都放在 etc 目录下，而用户和用户组相关的配置文件，存放在&#x2F;etc&#x2F;passwd 和&#x2F;etc&#x2F;group 中，我们可以使用 cat 命令将文件内容打印到控制台： 123456test@ubuntu-server:~$ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/sync 格式为：注册名:口令:用户标识号:组标识号:用户名:用户主目录:命令解释程序 ，而我们的密码则存放在&#x2F;etc&#x2F;shadow 中，是以加密形式存储的，并且需要 root 权限才能查看。 常用命令接着我们来看一下 Linux 系统中一些比较常用的命令。 文件操作文件是最基本的内容，我们可以使用 ls 命令列出当前目录中所有的文件，参数-a 表示包含所有的隐藏文件，-l 表示列出详细信息： 12345678910111213test@ubuntu-server:~$ ls -altotal 44drwxr-xr-x 4 test test 4096 Jan 24 08:55 .drwxr-xr-x 4 root root 4096 Jan 24 04:24 ..-rw------- 1 test test 2124 Jan 24 04:29 .bash_history-rw-r--r-- 1 test test 220 Feb 25 2020 .bash_logout-rw-r--r-- 1 test test 3771 Feb 25 2020 .bashrcdrwx------ 2 test test 4096 Jan 21 15:48 .cachedrwx------ 3 test test 4096 Jan 23 14:49 .config-rw-r--r-- 1 test test 807 Feb 25 2020 .profile-rw------- 1 test test 34 Jan 24 04:17 .python_history-rw-r--r-- 1 test test 0 Jan 21 15:52 .sudo_as_admin_successful-rw------- 1 test test 7201 Jan 24 08:55 .viminfo 可以看到当前目录下的整个文件列表，那么这些信息各种代表什么意思呢，尤其是最前面那一栏类似于 drwxr-xr-x 的字符串。 它表示文件的属性，其中第 1 个字符表示此文件的类型：-表示普通文件，l 为链接文件，d 表示目录（文件夹），c 表示字符设备、b 表示块设备，还有 p 有名管道、f 堆栈文件、s 套接字等，这些一般都是用于进程之间通信使用的。 第 2-4 个字符表示文件的拥有者（User）对该文件的权限，第 5-7 个字符表示文件所属用户组（Group）内用户对该文件的权限，最后 8-10 个字符表示其他用户（Other）对该文件的权限。其中 r 为读权限、w 为写权限、x 为执行权限，为了方便记忆，直接记 UGO 就行了。 比如 drwxr-xr-x 就表示这是一个目录，文件的拥有者可以在目录中读、写和执行，而同一用户组的其他用户只能读和执行，其他用户也是一样。 第二栏数据可以看到是一列数字，它表示文件创建的链接文件（快捷方式）数量，一般只有 1 表示只有当前文件，我们也可以尝试创建一个链接文件： 1test@ubuntu-server:~$ ln .bash_logout kk 创建后，会生成一个名为 kk 的文件，我们对此文件的操作相当于直接操作.bash_logout，跟 Windows 中的快捷方式比较类似，了解一下即可。再次执行 ll 命令，可以看到.bash_logout 的链接数变成了 2。 第三栏数据为该文件或是目录的拥有者。 第四栏数据表示所属的组。 第五栏数据表示文件大小，以字节为单位。 第六栏数据为文件的最后一次修改时间 最后一栏就是文件名称了，就不多说了，再次提及..表示上级目录，.表示当前目录，最前面有一个.开头的文件为隐藏文件。可以看到上级目录（也就是&#x2F;home 目录）所有者为 root，并且非 root 用户无法进行写操作，只能执行读操作，而当前目录以及目录下所有文件则属于 test 用户，test 用户可以随意进行修改。 在了解了 Linux 的文件查看之后再去看 Windows 的文件管理，会觉得 Windows 的太拉了： 那么，如果我们希望对文件的属性进行修改，比如我们现在希望将某个文件的写权限给关闭，可以使用 chmod 命令来进行文件属性修改，我们先创建一个 test 文件，使用 touch 命令来创建文件，使用 mkdir 命令来创建目录： 123test@ubuntu-server:~$ touch testtest@ubuntu-server:~$ ll test-rw-rw-r-- 1 test test 0 Jan 24 09:32 test 可以看到文件创建之后的默认权限为可读可写，接着我们来将其修改为只读，chmod 的使用方法如下： chmod (u&#x2F;g&#x2F;o&#x2F;a)(+&#x2F;-)(r&#x2F;w&#x2F;x) 文件名称 我们可以从 ugo 中选择或是直接 a 表示所有，+和-表示添加和删除权限，最后 rwx 不用我说了吧 123test@ubuntu-server:~$ chmod a-w testtest@ubuntu-server:~$ ll test-r--r--r-- 1 test test 0 Jan 24 09:32 test 除了这种方式之外，我们也可以使用数字来代替，比如现在我要给前两个添加读权限，那么： 约定：r&#x3D;4，w&#x3D;2，x&#x3D;1，需要什么权限就让对应权限的数字相加，一个数字表示一个 rwx 的权限状态，比如我们想修改为-rw-rw-r–，那么对应的数字就是 664，对应的命令为： 123test@ubuntu-server:~$ chmod 664 testtest@ubuntu-server:~$ ll test-rw-rw-r-- 1 test test 0 Jan 24 09:32 test 如果我们想修改文件的拥有者或是所属组，可以使用 chown 和 chgrp 命令： 12345678test@ubuntu-server:~$ sudo chown root testtest@ubuntu-server:~$ ls -ltotal 0-rw-rw-r-- 1 root test 0 Jan 24 10:43 testtest@ubuntu-server:~$ sudo chgrp root testtest@ubuntu-server:~$ ls -ltotal 0-rw-rw-r-- 1 root root 0 Jan 24 10:43 test 再次操作该文件，会发现没权限： 12test@ubuntu-server:~$ chmod 777 testchmod: changing permissions of &#x27;test&#x27;: Operation not permitted 接着我们来看文件的复制、移动和删除，这里我们先创建一个新的目录并进入到此目录用于操作： 123test@ubuntu-server:~$ mkdir studytest@ubuntu-server:~$ cd studytest@ubuntu-server:~/study$ 首先我们演示文件的复制操作，文件的复制使用 cp 命令，比如现在我们想把上一级目录中的 test 文件复制到当前目录中： 123test@ubuntu-server:~/study$ cp ../test testtest@ubuntu-server:~/study$ lstest 那么如果我们想要将一整个目录进行复制呢？我们需要添加一个-r 参数表示将目录中的文件递归复制： 1234567test@ubuntu-server:~/study$ cd ~test@ubuntu-server:~$ cp -r study study_copiedtest@ubuntu-server:~$ ls -ltotal 8drwxrwxr-x 2 test test 4096 Jan 24 10:16 studydrwxrwxr-x 2 test test 4096 Jan 24 10:20 study_copied-rw-rw-r-- 1 test test 0 Jan 24 09:32 test 可以看到我们的整个目录中所有的文件也一起被复制了。 接着我们来看看移动操作，相当于是直接将一个文件转移到另一个目录中了，我们再创建一个目录用于文件的移动，并将 test 文件移动到此目录中，我们使用 mv 命令进行文件的移动： 1234567test@ubuntu-server:~$ mkdir study2test@ubuntu-server:~$ mv test study2test@ubuntu-server:~$ lsstudy study2 study_copiedtest@ubuntu-server:~$ cd study2test@ubuntu-server:~/study2$ lstest 现在我们想要移动个目录到另一个目录中，比如我们想将 study 目录移动到 study2 目录中： 123456test@ubuntu-server:~$ mv study study2test@ubuntu-server:~$ lsstudy2 study_copiedtest@ubuntu-server:~$ cd study2test@ubuntu-server:~/study2$ lsstudy test mv 命令不仅能实现文件的移动，还可以实现对文件重命名操作，比如我们想将文件 test 重命名为 yyds，那么直接将其进行移动操作即可： 12345test@ubuntu-server:~/study2$ lsstudy testtest@ubuntu-server:~/study2$ mv test yydstest@ubuntu-server:~/study2$ lsstudy yyds 最后就是删除命令了，使用 rm 进行删除操作，比如现在我们想删除 study2 目录（注意需要添加-r 参数表示递归删除文件夹中的内容）： 123test@ubuntu-server:~$ rm -r study2test@ubuntu-server:~$ lsstudy_copied 而最常提到的 rm -rf &#x2F;正是删除根目录下所有的文件（非常危险的操作），-f 表示忽略不存在的文件，不进行任何提示，是一个通配符，表示任意文件。这里我们演示一下删除所有.txt 结尾的文件： 123456test@ubuntu-server:~$ touch 1.txt 2.txt 3.txttest@ubuntu-server:~$ ls1.txt 2.txt 3.txttest@ubuntu-server:~$ rm *.txttest@ubuntu-server:~$ lstest@ubuntu-server:~$ 最后我们再来看文件的搜索，我们使用 find 命令来进行搜索，比如我想搜索&#x2F;etc 目录下名为 passwd 的文件： 1234test@ubuntu-server:~$ sudo find /etc -name passwd[sudo] password for test:/etc/pam.d/passwd/etc/passwd 它还支持通配符，比如搜索以 s 开头的文件： 123456789101112test@ubuntu-server:~$ sudo find /etc -name s*/etc/subuid/etc/screenrc/etc/sensors3.conf/etc/sysctl.conf/etc/sudoers/etc/shadow/etc/skel/etc/pam.d/su/etc/pam.d/sshd/etc/pam.d/sudo... 系统管理接着我们来查看一些系统管理相关的命令，比如我们 Windows 中的任务管理器，我们可以使用 top 命令来打开： 12345678910111213141516171819202122232425top - 10:48:46 up 5:52, 1 user, load average: 0.00, 0.00, 0.00Tasks: 191 total, 2 running, 189 sleeping, 0 stopped, 0 zombie%Cpu(s): 0.0 us, 0.2 sy, 0.0 ni, 99.8 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 stMiB Mem : 3919.1 total, 2704.2 free, 215.0 used, 999.9 buff/cacheMiB Swap: 3923.0 total, 3923.0 free, 0.0 used. 3521.4 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 10528 test 20 0 8944 3072 2652 R 0.7 0.1 0:00.07 top 9847 root 20 0 0 0 0 I 0.3 0.0 0:00.87 kworker/0:0-events 1 root 20 0 102760 10456 7120 S 0.0 0.3 0:02.02 systemd 2 root 20 0 0 0 0 S 0.0 0.0 0:00.01 kthreadd 3 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 rcu_gp 4 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 rcu_par_gp 6 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 kworker/0:0H-kblockd 8 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 mm_percpu_wq 9 root 20 0 0 0 0 S 0.0 0.0 0:00.15 ksoftirqd/0 10 root 20 0 0 0 0 R 0.0 0.0 0:01.49 rcu_sched 11 root rt 0 0 0 0 S 0.0 0.0 0:00.24 migration/0 12 root -51 0 0 0 0 S 0.0 0.0 0:00.00 idle_inject/0 14 root 20 0 0 0 0 S 0.0 0.0 0:00.00 cpuhp/0 15 root 20 0 0 0 0 S 0.0 0.0 0:00.00 cpuhp/1 16 root -51 0 0 0 0 S 0.0 0.0 0:00.00 idle_inject/1 17 root rt 0 0 0 0 S 0.0 0.0 0:00.30 migration/1 18 root 20 0 0 0 0 S 0.0 0.0 0:00.07 ksoftirqd/1 20 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 kworker/1:0H-kblockd 可以很清楚地看到当前 CPU 的使用情况以及内存的占用情况。 按下数字键 1，可以展示所有 CPU 核心的使用情况： 12%Cpu0 : 0.0 us, 0.0 sy, 0.0 ni,100.0 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st%Cpu1 : 0.0 us, 0.0 sy, 0.0 ni,100.0 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st 按下 f 键可以设置以哪一列进行排序或是显示那些参数： 123Fields Management for window 1:Def, whose current sort field is %MEM Navigate with Up/Dn, Right selects for move then &lt;Enter&gt; or Left commits, &#x27;d&#x27; or &lt;Space&gt; toggles display, &#x27;s&#x27; sets sort. Use &#x27;q&#x27; or &lt;Esc&gt; to end! 按下 q 键即可退出监控界面。 我们可以直接输入 free 命令来查看当前系统的内存使用情况： 1234test@ubuntu-server:~$ free -m total used free shared buff/cache availableMem: 3919 212 2706 1 999 3523Swap: 3922 0 3922 其中-m 表示以 M 为单位，也可以-g 表示以 G 为单位，默认是 kb 为单位。 最后就是磁盘容量，我们可以使用 lsblk 来查看所有块设备的信息，其中就包括我们的硬盘、光驱等： 1234567891011test@ubuntu-server:~$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTloop0 7:0 0 48.9M 1 loop /snap/core18/2127loop1 7:1 0 28.1M 1 loop /snap/snapd/12707loop2 7:2 0 62M 1 loop /snap/lxd/21032sr0 11:0 1 1024M 0 romnvme0n1 259:0 0 20G 0 disk├─nvme0n1p1 259:1 0 512M 0 part /boot/efi├─nvme0n1p2 259:2 0 1G 0 part /boot└─nvme0n1p3 259:3 0 18.5G 0 part └─ubuntu--vg-ubuntu--lv 253:0 0 18.5G 0 lvm / 可以看到 nvme 开头的就是我们的硬盘（这个因人而异，可能你们的是 sda，磁盘类型不同名称就不同）可以看到 nvme0n1 容量为 20G，并且 512M 用作存放 EFI 文件，1G 存放启动文件，剩余容量就是存放系统文件和我们的用户目录。 这里要提到一个挂载的概念： 挂载，指的就是将设备文件中的顶级目录连接到 Linux 根目录下的某一目录（最好是空目录），访问此目录就等同于访问设备文件。 比如我们的主硬盘，挂载点就被设定为&#x2F;根目录，而我们所有保存的文件都会存储在硬盘中，如果你有 U 盘（最好将 U 盘的文件格式改为 ExFat，可以直接在 Windows 中进行格式化，然后随便放入一些文件即可）之类的东西，我们可以演示一下对 U 盘进行挂载： 12345678910111213test@ubuntu-server:~$ sudo fdisk -l...Disk /dev/sda: 60 GiB, 64424509440 bytes, 125829120 sectorsDisk model: USB DISKUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x4a416279Device Boot Start End Sectors Size Id Type/dev/sda1 * 614400 125214719 124600320 59.4G 7 HPFS/NTFS/exFAT/dev/sda2 125214720 125825022 610303 298M 6 FAT16 将 U 盘插入电脑，选择连接到 Linux，输入 sudo fdisk -l 命令来查看硬盘实体情况，可以看到有一个 USB DISK 设备，注意观察一下是不是和自己的 U 盘容量一致，可以看到设备名称为&#x2F;dev&#x2F;sda1。 接着我们设备挂载到一个目录下： 12345678910111213test@ubuntu-server:~$ mkdir u-testtest@ubuntu-server:~$ sudo mount /dev/sda1 u-test/test@ubuntu-server:~$ cd u-test/test@ubuntu-server:~/u-test$ ls CGI cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso cn_windows_7_professional_x64_dvd_x15-65791.iso cn_windows_8.1_enterprise_with_update_x64_dvd_6050374.iso cn_windows_8.1_professional_vl_with_update_x64_dvd_4050293.iso cn_windows_server_2019_updated_july_2020_x64_dvd_2c9b67da.iso&#x27;System Volume Information&#x27; zh-cn_windows_10_consumer_editions_version_21h1_updated_sep_2021_x64_dvd_991b822f.iso zh-cn_windows_11_consumer_editions_x64_dvd_904f13e4.iso 最后进入到此目录中，就能看到你 U 盘中的文件了，如果你不想使用 U 盘了，可以直接取消挂载： 12test@ubuntu-server:~/u-test$ cd ..test@ubuntu-server:~$ sudo umount /dev/sda1 最后我们可以通过 df 命令查看当前磁盘使用情况： 1234567891011121314test@ubuntu-server:~$ df -mFilesystem 1M-blocks Used Available Use% Mounted onudev 1900 0 1900 0% /devtmpfs 392 2 391 1% /run/dev/mapper/ubuntu--vg-ubuntu--lv 18515 6544 11009 38% /tmpfs 1960 0 1960 0% /dev/shmtmpfs 5 0 5 0% /run/locktmpfs 1960 0 1960 0% /sys/fs/cgroup/dev/nvme0n1p2 976 109 800 12% /boot/dev/nvme0n1p1 511 4 508 1% /boot/efi/dev/loop0 49 49 0 100% /snap/core18/2127/dev/loop1 29 29 0 100% /snap/snapd/12707/dev/loop2 62 62 0 100% /snap/lxd/21032tmpfs 392 0 392 0% /run/user/1000 输入 ps 可以查看当前运行的一些进程，其实和 top 有点类似，但是没有监控功能，只能显示当前的。 1234test@ubuntu-server:~$ ps PID TTY TIME CMD 11438 pts/0 00:00:00 bash 11453 pts/0 00:00:00 ps 添加-ef 查看所有的进程： 12345678test@ubuntu-server:~$ ps -efUID PID PPID C STIME TTY TIME CMDroot 1 0 0 04:55 ? 00:00:02 /sbin/initroot 2 0 0 04:55 ? 00:00:00 [kthreadd]root 3 2 0 04:55 ? 00:00:00 [rcu_gp]root 4 2 0 04:55 ? 00:00:00 [rcu_par_gp]root 6 2 0 04:55 ? 00:00:00 [kworker/0:0H-kblockd]... 我们可以找到对应的进程 ID（PID），使用 kill 命令将其强制终止： 123456test@ubuntu-server:~$ ps PID TTY TIME CMD 11438 pts/0 00:00:00 bash 11455 pts/0 00:00:00 pstest@ubuntu-server:~$ kill -9 11438Connection to 192.168.10.6 closed. 比如我们可以将当前会话的 bash 给杀死，那么会导致我们的连接直接断开，其中-9 是一个信号，表示杀死进程： 1 (HUP)：重新加载进程。 9 (KILL)：杀死一个进程。 15 (TERM)：正常停止一个进程。 最后如果我们想要正常关机，只需要输入 shutdown 即可，系统会创建一个关机计划，并在指定时间关机，或是添加 now 表示立即关机： 123456test@ubuntu-server:~$ sudo shutdown[sudo] password for test:Shutdown scheduled for Mon 2022-01-24 11:46:18 UTC, use &#x27;shutdown -c&#x27; to cancel.test@ubuntu-server:~$ sudo shutdown nowConnection to 192.168.10.6 closed by remote host.Connection to 192.168.10.6 closed. 压缩解压比较常用的压缩和解压也是重点，我们在 Windows 中经常需要下载一些压缩包，并且将压缩包解压才能获得里面的文件，而 Linux 中也支持文件的压缩和解压。 这里我们使用 tar 命令来完成文件压缩和解压操作，在 Linux 中比较常用的是 gzip 格式，后缀名一般为.gz，tar 命令的参数-c 表示对文件进行压缩，创建新的压缩文件，-x 表示进行解压操作，-z 表示以 gzip 格式进行操作，-v 可以在处理过程中输出一些日志信息，-f 表示对普通文件进行操作，这里我们创建三个文件并对这三个文件进行打包： 1234567test@ubuntu-server:~$ tar -zcvf test.tar.gz *.txt1.txt2.txt3.txttest@ubuntu-server:~$ ls1.txt 2.txt 3.txt test.tar.gztest@ubuntu-server:~$ 接着我们删除刚刚三个文件，再执行解压操作，得到压缩包中文件： 123456789test@ubuntu-server:~$ rm *.txttest@ubuntu-server:~$ lstest.tar.gztest@ubuntu-server:~$ tar -zxvf test.tar.gz1.txt2.txt3.txttest@ubuntu-server:~$ ls1.txt 2.txt 3.txt test.tar.gz 同样的，我们也可以对一个文件夹进行打包： 123456789101112131415161718test@ubuntu-server:~$ mv *.txt testtest@ubuntu-server:~$ tar -zcvf test.tar.gz test/test/test/1.txttest/2.txttest/3.txttest@ubuntu-server:~$ rm -r testtest@ubuntu-server:~$ lstest.tar.gztest@ubuntu-server:~$ tar -zxvf test.tar.gztest/test/1.txttest/2.txttest/3.txttest@ubuntu-server:~$ lstest test.tar.gztest@ubuntu-server:~$ ls test1.txt 2.txt 3.txt 到此，Linux 的一些基本命令就讲解为止。 vim 文本编辑器和 Windows 中的记事本一样，Linux 中也有文本编辑器，叫做 Vi 编辑器，Ubuntu 中内置了 Vi 编辑器的升级版 Vim，我们这里就讲解 Vim 编辑器的使用。 我们可以直接输入 vim 文件名称来使用 Vim 编辑器对文本文件进行编辑： 1test@ubuntu-server:~$ vim hello.txt 进入编辑器之后，我们发现界面变成了： 12345678910111213~~~~~~~~~~~~&quot;hello.txt&quot; [New File] 0,0-1 All 这时我们直接输入内容是无法完成的，因为默认进入之后为命令模式，Vim 编辑器默认有三种模式： 命令模式：此模式下可以输入任意的命令进行操作，所有的输入都被看做是命令输入，而不是文本编辑输入。 编辑模式：此模式下输入的任何内容都会以文本编辑方式写入到文件中，就像我们直接在 Windows 的记事本中写内容一样。 末行模式：此模式下用于输入一些复杂命令，会在最后一行进行复杂命令的输入。 在命令模式下，我们可以直接按下键盘上的 i，此命令表示进行插入操作，会自动切换到编辑模式，这时可以看到最下方变为： 12345678~~~~~~~-- INSERT -- 1,1 All 而这时我们所有的输入内容都可以直接写到文件中了，如果我们想回到命令模式，按下 Esc 键即可。 除了 i 以外，我们也可以按下 a 表示从当前光标所在位置之后继续写，与 i 不同的是，i 会在光标之前继续写，o 会直接跳到下一行，而 A 表示在当前行的最后继续写入，I 表示在当前行的最前面继续写入。 这里我们随便粘贴一段文本信息进去（不要用 Ctrl+V，Linux 中没这操作，XShell 右键点粘贴）： 123456789I was hard on people sometimes, probably harder than I needed to be.I remember the time when Reed was six years old, coming home, and I had just fired somebody that day.And I imagined what it was like for that person to tell his family and his young son that he had lost his job.It was hard.But somebody’s got to do it.I figured that it was always my job to make sure that the team was excellent, and if I didn’t do it, nobody was going to do it.You always have to keep pushing to innovate.Dylan could have sung protest songs forever and probably made a lot of money, but he didn’t.He had to move on, and when he did, by going electric in 1965, he alienated a lot of people. 在我们编辑完成之后，需要进入到末行模式进行文件的保存并退出，按下:进入末行模式，再输入 wq 即可保存退出。 接着我们来看一些比较常用的命令，首先是命令模式下的光标移动命令： ^ 直接调到本行最前面 $ 直接跳到本行最后面 gg 直接跳到第一行 [N]G 跳转到第 N 行 [N]方向键 向一个方向跳转 N 个字符 在末行模式下，常用的复杂命令有： :set number 开启行号 :w 保存 :wq 或:x 保存并关闭 :q 关闭 :q! 强制关闭 我们可以输入&#x2F;或是?在末行模式中使用搜索功能，比如我们要搜索单词 it： 1/it 接着会在文本中出现高亮，按 n 跳转到下一个搜索结果，?是从后向前搜索，&#x2F;是从前向后搜索。 它还支持替换功能，但是使用起来稍微比较复杂，语法如下： 1:[addr]s/源字符串/目的字符串/[option] addr 表示第几行或是一个范围，option 表示操作类型： g: globe,表示全局替换 c: confirm,表示进行确认 p: 表示替代结果逐行显示(Ctrl + L 恢复屏幕) i: ignore,不区分大小写 比如我们要将当前行中的 it 全部替换为 he，那么可以这样写： 1:s/it/he/g 实际上除了以上三种模式外，还有一种模式叫做可视化模式，按下键盘上的 v 即可进入，它能够支持选取一段文本，选取后，我们可以对指定段落的文本内容快速进行复制、剪切、删除、插入等操作，非常方便。在此模式下，我们可以通过上下左右键进行选取，以进入可视化模式时的位置作为基本位置，通过移动另一端来进行选取。 我们可以使用以下命令来对选中区域进行各种操作： y 复制选中区域 d&#x2F;x 剪切（删除）选中区域 p 粘贴 u 撤销上一步 当然，这些命令在命令模式下也可以使用，但是可视化模式下使用更适合一些。 环境安装和项目部署在学习完了 Linux 操作系统的一些基本操作之后，我们接着来看如何进行项目的环境安装和部署，包括安装 JDK、Nginx 服务器，以及上传我们的 SpringBoot 项目并运行。 我们可以直接使用 apt 进行软件的安装，它是一个高级的安装包管理工具，我们可以直接寻找对应的软件进行安装，无需再去官网进行下载，非常方便，软件仓库中默认已经帮助我们存放了大量实用软件的安装包，只需要一个安装命令就可以进行安装了。 实际上 Ubuntu 系统已经为我们自带了一些环境了，比如 Python3： 1234567test@ubuntu-server:~$ python3Python 3.8.10 (default, Nov 26 2021, 20:14:08)[GCC 9.3.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; print(&quot;HelloWorld！&quot;)HelloWorld！&gt;&gt;&gt; exit() C 语言的编译工具 GCC 可以通过 APT 进行安装： 1sudo apt install gcc 安装后，可以编写一个简单的 C 语言程序并且编译为可执行文件： 12345#include&lt;stdio.h&gt;int main()&#123; printf(&quot;Hello World!\\n&quot;);&#125; 1234test@ubuntu-server:~$ vim hello.ctest@ubuntu-server:~$ gcc hello.c -o hellotest@ubuntu-server:~$ ./helloHello World! 而 JDK 实际上安装也非常简单，通过 APT 即可： 1234test@ubuntu-server:~$ sudo apt install openjdk-8-jopenjdk-8-jdk openjdk-8-jre openjdk-8-jre-zeroopenjdk-8-jdk-headless openjdk-8-jre-headlesstest@ubuntu-server:~$ sudo apt install openjdk-8-jdk 接着我们来测试一下编译和运行，首先编写一个 Java 程序： 1test@ubuntu-server:~$ vim Main.java 12345public class Main&#123; public static void main(String[] args)&#123; System.out.println(&quot;Hello World！&quot;); &#125;&#125; 12345test@ubuntu-server:~$ javac Main.javatest@ubuntu-server:~$ lsMain.class Main.javatest@ubuntu-server:~$ java MainHello World！ 接着我们来部署一下 Redis 服务器： 1test@ubuntu-server:~$ sudo apt install redis 安装完成后，可以直接使用 redis-cli 命令打开 Redis 客户端连接本地的服务器： 123test@ubuntu-server:~$ redis-cli127.0.0.1:6379&gt; keys *(empty list or set) 使用和之前 Windows 下没有区别。 接着我们安装一下 MySQL 服务器，同样的，直接使用 apt 即可： 1sudo apt install mysql-server-8.0 我们直接直接登录 MySQL 服务器，注意要在 root 权限下使用，这样就不用输入密码了： 123456789101112131415sudo mysql -u root -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 11Server version: 8.0.27-0ubuntu0.20.04.1 (Ubuntu)Copyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; exit 可以发现实际上就是我们之前在 Windows 的 CMD 中使用的样子，接着我们就创建一个生产环境下使用的数据库： 123456789101112mysql&gt; create database book_manage;mysql&gt; show databases;+--------------------+| Database |+--------------------+| book_manage || information_schema || mysql || performance_schema || sys |+--------------------+5 rows in set (0.01 sec) 接着我们创建一个用户来使用这个数据，一会我们就可以将 SpringBoot 配置文件进行修改并直接放到此服务器上进行部署。 12345mysql&gt; create user test identified by &#x27;123456&#x27;;Query OK, 0 rows affected (0.01 sec)mysql&gt; grant all on book_manage.* to test;Query OK, 0 rows affected (0.00 sec) 如果觉得这样很麻烦不是可视化的，可以使用 Navicat 连接进行操作，注意开启一下 MySQL 的外网访问。 12345678910111213141516171819202122test@ubuntu-server:~$ mysql -u test -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 13Server version: 8.0.27-0ubuntu0.20.04.1 (Ubuntu)Copyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| book_manage || information_schema |+--------------------+2 rows in set (0.01 sec) 使用 test 用户登录之后，查看数据库列表，有 book_manage 就 OK 了。 最后我们修改一下 SpringBoot 项目的生产环境配置即可： 12345678910111213141516171819spring: datasource: url: jdbc:mysql://localhost:3306/bookmanage driver-class-name: com.mysql.cj.jdbc.Driver username: zachary password: 980226 mail: host: smtp.163.com username: zachary26626@163.com password: YALHSGARSOCGDNJH redis: host: localhost jpa: show-sql: false hibernate: ddl-auto: updatespringfox: documentation: enabled: false 然后将之前的 springboot 项目中的 static 文件拿走，之后打包，最后启动我们的项目： 1test@ubuntu-server:~$ java -jar springboot-project-0.0.1-SNAPSHOT.jar 现在我们将前端页面的 API 访问地址修改为我们的 SpringBoot 服务器地址，即可正常使用了。 我们也可以将我们的静态资源使用 Nginx 服务器进行代理： Nginx(“engine x”)是一款是由俄罗斯的程序设计师 Igor Sysoev 所开发高性能的 Web 和 反向代理 服务器，也是一个 IMAP&#x2F;POP3&#x2F;SMTP 代理服务器。 在高连接并发的情况下，Nginx 是 Apache 服务器不错的替代品。 Nginx 非常强大，它能够通提供非常方便的反向代理服务，并且支持负载均衡，不过我们这里用一下反向代理就可以了，实际上就是代理我们的前端页面，然后我们访问 Nginx 服务器即可访问到静态资源，这样我们前后端都放在了服务器上（你也可以搞两台服务器，一台挂静态资源一台挂 SpringBoot 服务器，实现真正意义上的分离，有条件的还能上个域名和证书啥的）。 安装如下： 1test@ubuntu-server:~$ sudo apt install nginx 安装完成后，我们可以直接访问：http://192.168.10.4/，能够出现 Nginx 页面表示安装成功！ 接着我们将静态资源上传到 Linux 服务器中， 然后对 Nginx 进行反向代理配置，写到 http 大括号里面去： 123456test@ubuntu-server:~$ cd /etc/nginx/test@ubuntu-server:/etc/nginx$ lsconf.d koi-utf modules-available proxy_params sites-enabled win-utffastcgi.conf koi-win modules-enabled scgi_params snippetsfastcgi_params mime.types nginx.conf sites-available uwsgi_paramstest@ubuntu-server:/etc/nginx$ sudo vim nginx.conf 12345678910111213server &#123; listen 80; server_name 172.16.59.130; add_header Access-Control-Allow-Origin *; location / &#123; root /home/zachary/static; charset utf-8; add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;; add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;; add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;*&#x27;; add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Content-Type,*&#x27;; &#125; &#125; 重启一下 nginx 服务器 1sudo systemctl restart nginx.service 1java -jar springboot-project-0.0.1-SNAPSHOT.jar 然后就可以直接访问到我们的前端页面了，这时再开启 SpringBoot 服务器即可，可以在最后添加&amp;符号表示后台启动。 输入：http://172.16.59.130/ 更新: 2024-05-16 00:11:56原文: https://www.yuque.com/zacharyblock/cx2om6/qhyvxbr4m26peqma","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blockzachary.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blockzachary.github.io/tags/Linux/"}]},{"title":"API鉴权","slug":"FastAPI入门/API鉴权","date":"2024-05-03T22:10:00.000Z","updated":"2024-05-03T22:10:00.000Z","comments":true,"path":"blog/2848525117/","permalink":"https://blockzachary.github.io/blog/2848525117/","excerpt":"","text":"API 鉴权为了不允许，任何人都可以调用后端的 api 接口，现在给 api 接口加上权限校验，只有登录过的才能调用后端的 api 接口，之前在auth.py中实现了一个校验，通过依赖注入给 api 直接加上即可 依赖注入比如给courseApi.py的所有接口加上 token 校验的依赖 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.auth import auth_handlerfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return result@course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def delete(id: int, db_session: Session = Depends(get_db_session)): CourseService.delete_by_id(id, db_session) result = Result.success() return resultapp.include_router(course_router) 或者给整个&#x2F;course 下的 api 都注入依赖， 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.auth import auth_handlerfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&#x27;/course&#x27;, dependencies=[Depends(auth_handler.auth_required)])@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return result@course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): CourseService.delete_by_id(id, db_session) result = Result.success() return resultapp.include_router(course_router) 这样如果没有登录的情况下，直接用 postman 是无法调用接口的 登录 token虽然现在前端页面上已经登录了，但由于请求头没有带上 token，所以无法获取数据 为了让浏览器拿到后端生成的这个 token，需要改变一下登录后的返回结果 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModel, AdminLoginResponseclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) exist_admin: Admin = db_session.execute(query).scalars().first() if not exist_admin: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(admin.password, exist_admin.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) admin_login_response = AdminLoginResponse(id=exist_admin.id, username=exist_admin.username, token=auth_handler.encode_token(exist_admin.id)) return admin_login_response 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyimport bcryptfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False)class AdminModel(BaseModel): username: str password: strclass AdminLoginResponse(BaseModel): id: int username: str token: str 这样子在重新登录之后就可以获得后端返回的 token，前端 axios 会在发起请求之前，将 token 放到请求头中，再向后端请求 api 接口 登录后会返回 token： 能正确获取数据： token 超时失效为了让前端的 token 失效之后，自动回到 Login 页面，需要做些调整 当请求 api 接口的时候返回的状态值为 401 的时候，移除存储的 student-user，这样就会自动跳转回 login 页面重新进行登录lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .request(&#123; url: data.form.id ? &quot;/course/update&quot; : &quot;/course/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/course/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; \u0000 token 超时配置为了更便捷地配置 token 的超时时间，设置一下超时时间常量 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom common.config import configHOST = config.env.get(&quot;HOST&quot;)PORT = config.env.get(&quot;PORT&quot;)MYSQL_DIALECT = config.env.get(&quot;MYSQL_DIALECT&quot;)MYSQL_HOST = config.env.get(&quot;MYSQL_HOST&quot;)MYSQL_PORT = config.env.get(&quot;MYSQL_PORT&quot;)MYSQL_USER = config.env.get(&quot;MYSQL_USER&quot;)MYSQL_PASSWORD = config.env.get(&quot;MYSQL_PASSWORD&quot;)MYSQL_DATABASE = config.env.get(&quot;MYSQL_DATABASE&quot;)TOKEN_EXPIRE_DAYS = 7TOKEN_EXPIRE_MINUTES = 0TOKEN_EXPIRE_SECONDS = 0 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetime, timedeltaimport jwtfrom fastapi import Securityfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentialsfrom passlib.context import CryptContextfrom common.constant import TOKEN_EXPIRE_DAYS, TOKEN_EXPIRE_MINUTES, TOKEN_EXPIRE_SECONDSfrom exception.customException import TokenExceptionclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password) def encode_token(self, user_id): payload = &#123; &#x27;exp&#x27;: datetime.utcnow() + timedelta(days=TOKEN_EXPIRE_DAYS, minutes=TOKEN_EXPIRE_MINUTES, seconds=TOKEN_EXPIRE_SECONDS), &#x27;iat&#x27;: datetime.utcnow(), &#x27;sub&#x27;: user_id &#125; return jwt.encode( payload, self.secret, algorithm=&#x27;HS256&#x27; ) def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=[&#x27;HS256&#x27;]) return payload[&#x27;sub&#x27;] except jwt.ExpiredSignatureError: raise TokenException(&quot;token过期&quot;) except jwt.InvalidTokenError: raise TokenException(&quot;无效token&quot;) def auth_required(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials)auth_handler = AuthHandler() 更新: 2024-05-03 21:07:51原文: https://www.yuque.com/zacharyblock/iacda/po1gqzqal77c94sl","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"课程管理","slug":"FastAPI入门/课程管理","date":"2024-05-03T22:00:00.000Z","updated":"2024-05-03T22:00:00.000Z","comments":true,"path":"blog/2192504553/","permalink":"https://blockzachary.github.io/blog/2192504553/","excerpt":"","text":"课程管理接下来开发一个课程管理功能，用于管理和显示学生课程的 数据库先设计一下课程数据表，命名为 course，字段（课程名称、课程编号、课程描述、课时、任课老师） 课程页面在前端的项目目录下的/manage下创建一个Course.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin: 0 0 0 10px&quot; plain &gt;查询&lt;/el-button &gt; &lt;el-button type=&quot;info&quot; plain&gt;重置&lt;/el-button&gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination background layout=&quot;prev, pager, next&quot; :total=&quot;1000&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [ &#123; id: 1, name: &quot;大学英语&quot;, number: &quot;001&quot;, description: &quot;大学英语不想学-6学分&quot;, periods: &quot;36课时&quot;, teacher: &quot;张三&quot;, &#125;, &#123; id: 2, name: &quot;高等数学&quot;, number: &quot;002&quot;, description: &quot;高等数学好难学-4学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;李四&quot;, &#125;, &#123; id: 3, name: &quot;必修物理&quot;, number: &quot;003&quot;, description: &quot;必修物理有难度-2学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;王五&quot;, &#125;, &#123; id: 4, name: &quot;思想政治&quot;, number: &quot;004&quot;, description: &quot;思想政治必修课-4学分&quot;, periods: &quot;18课时&quot;, teacher: &quot;赵六&quot;, &#125;, &#123; id: 5, name: &quot;微机原理&quot;, number: &quot;005&quot;, description: &quot;微机原理很基础-3学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;钱七&quot;, &#125;, &#123; id: 6, name: &quot;通信原理&quot;, number: &quot;006&quot;, description: &quot;通信原理很难懂-4学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;孙八&quot;, &#125;, &#123; id: 7, name: &quot;离散数学&quot;, number: &quot;007&quot;, description: &quot;离散数学很离散-2学分&quot;, periods: &quot;18课时&quot;, teacher: &quot;周九&quot;, &#125;, &#123; id: 8, name: &quot;工程制图&quot;, number: &quot;008&quot;, description: &quot;工程制图好有趣-3学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;吴十&quot;, &#125;, ],&#125;);&lt;/script&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;管理员&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 课程查询 apiCourse 实体类定义在项目目录/model下创建一个course.py 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False) 课程管理 Api 接口courseApi在项目目录/api下创建一个courseApi.py 123456789101112131415161718192021222324# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_list = CourseService.select_page(db_session) result = Result.success(pageInfo.of(course_list)) return resultapp.include_router(course_router) 需要在/api/__init__.py下增加 courseApi 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi courseService在项目目录/service下创建一个courseService.py 123456789101112131415# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom model import Sessionfrom model.course import Courseclass CourseService: @staticmethod def select_page(db_session: Session): query = select(Course).order_by(desc(Course.id)) result = db_session.execute(query).scalars().all() return result 分页插件在项目路径的/common下创建一个pageHelper.py 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderclass Page: list: list total: int pageNum: int pageSize: int def __init__(self, list: list, total: int, pageNum: int, pageSize: int): self.list = list self.total = total self.pageNum = pageNum self.pageSize = pageSizeclass PageHelper: page: int size: int limit: int offset: int def __init__(self, page: int, size: int, limit: int, offset: int): self.page = page self.size = size self.limit = limit self.offset = offset @classmethod def startPage(cls, page: int, size: int): limit = size offset = size * (page - 1) return cls(page, size, limit, offset) def of(self, data): data_list = [jsonable_encoder(dataitem) for dataitem in data[self.offset:self.offset + self.limit]] data_total = len(data) page = Page(data_list, data_total, self.page, self.size) return jsonable_encoder(page) 测试 可以发现，请求是成功的，但就是没数据，因为数据库里面是空的，给数据库中插入数据 再次使用 postman 测试一下 增删查改实现数据分页前端这块需要调用分页查询的请求接口，并将结果显示出来 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin: 0 0 0 10px&quot; plain &gt;查询&lt;/el-button &gt; &lt;el-button type=&quot;info&quot; plain&gt;重置&lt;/el-button&gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [], total: 0,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: 1, pageSize: 5, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();&lt;/script&gt; 虽然可以显示一部分数据，但是这个换页有问题，不显示后续跳转的页面按钮 需要绑定一下这两个值 同时还需要，在换了页面之后也重新刷新一下数据，触发 current-change 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin: 0 0 0 10px&quot; plain &gt;查询&lt;/el-button &gt; &lt;el-button type=&quot;info&quot; plain&gt;重置&lt;/el-button&gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;&lt;/script&gt; 分页成功实现了 查询和重置为了依据课程名称实现筛查的功能，需要传递一个name字段传给后端进行数据库层面的模糊查询 重置按钮要将查询的内容清空，同时显示回完整的数据 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; load();&#125;;&lt;/script&gt; 后端123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_list = CourseService.select_page(name, db_session) result = Result.success(pageInfo.of(course_list)) return resultapp.include_router(course_router) 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom model import Sessionfrom model.course import Courseclass CourseService: @staticmethod def select_page(name, db_session: Session): query = select(Course).order_by(desc(Course.id)) if name: query = query.where(Course.name.like(f&quot;%&#123;name&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result 测试 查询扩展当需要筛选的字段不只是课程名称时，需要怎么处理；比如加上课程编号、任课教师进行多条件模糊查询 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;&lt;/script&gt; 后端12345678910111213141516171819202122232425262728293031# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearchfrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return resultapp.include_router(course_router) 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom model import Sessionfrom model.course import Course, CourseSearchclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False)class CourseSearch(BaseModel): name: str | None number: str | None teacher: str | None 测试 新增下面实现给课程表新增数据的功能，需要点击新增按钮后，出现弹窗 在官网找一个Dialog组件 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .post(&quot;/course/add&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;新增成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端1234567891011121314151617181920212223242526272829303132333435363738# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearch, CourseCreatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return resultapp.include_router(course_router) 123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom exception.customException import CourseExistExceptionfrom model import Sessionfrom model.course import Course, CourseSearch, CourseCreateclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_course(course: CourseCreate, db_session: Session): query = select(Course).where(Course.name == course.name) exist_course: Course = db_session.execute(query).scalars().all() if exist_course: raise CourseExistException(&quot;课程名已存在&quot;) course = Course(**course.dict()) db_session.add(course) db_session.commit() return course 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False)class CourseSearch(BaseModel): name: str | None number: str | None teacher: str | Noneclass CourseBase(BaseModel): name: str number: str description: str periods: str teacher: strclass CourseCreate(CourseBase): ... 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = message 1234567891011121314151617181920212223242526272829303132333435363738394041# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 测试 编辑点击数据中的编辑按钮可以对已有的课程数据，进行修改 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .request(&#123; url: data.form.id ? &quot;/course/update&quot; : &quot;/course/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true;&#125;;&lt;/script&gt; 后端123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return resultapp.include_router(course_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import desc, selectfrom common.utils import set_attrsfrom exception.customException import CourseExistException, CourseNotExistExceptionfrom model import Sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdateclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_course(course: CourseCreate, db_session: Session): query = select(Course).where(Course.name == course.name) exist_course: Course = db_session.execute(query).scalars().all() if exist_course: raise CourseExistException(&quot;课程名已存在&quot;) course = Course(**course.dict()) db_session.add(course) db_session.commit() return course @staticmethod def update_by_id(course: CourseUpdate, db_session: Session): query = select(Course).where(Course.id == course.id) exist_course: Course = db_session.execute(query).scalar() if not exist_course: raise CourseNotExistException(&quot;课程不存在&quot;) set_attrs(exist_course, jsonable_encoder(course)) db_session.commit() return exist_course 123456789101112131415161718192021222324252627282930313233343536373839# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False)class CourseSearch(BaseModel): name: str | None number: str | None teacher: str | Noneclass CourseBase(BaseModel): name: str number: str description: str periods: str teacher: strclass CourseCreate(CourseBase): ...class CourseUpdate(CourseBase): id: int 实现给对象的属性更新的一个方法，在项目目录/common下，新建一个utils.py 123456789# -*- coding:utf-8 -*-# Author: Zachary# 用于更新对象属性def set_attrs(obj, data: dict): if data: for key, value in data.items(): setattr(obj, key, value) 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = message 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result)) 测试 删除点击已有课程数据中的删除按钮，实现删除数据表中对应数据 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .request(&#123; url: data.form.id ? &quot;/course/update&quot; : &quot;/course/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/course/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return result@course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): CourseService.delete_by_id(id, db_session) result = Result.success() return resultapp.include_router(course_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import desc, selectfrom common.utils import set_attrsfrom exception.customException import CourseExistException, CourseNotExistExceptionfrom model import Sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdateclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_course(course: CourseCreate, db_session: Session): query = select(Course).where(Course.name == course.name) exist_course: Course = db_session.execute(query).scalars().all() if exist_course: raise CourseExistException(&quot;课程名已存在&quot;) course = Course(**course.dict()) db_session.add(course) db_session.commit() return course @staticmethod def update_by_id(course: CourseUpdate, db_session: Session): exist_course: Course = check_course_exist(course.id, db_session) set_attrs(exist_course, jsonable_encoder(course)) db_session.commit() return exist_course @staticmethod def delete_by_id(id: int, db_session: Session): exist_course: Course = check_course_exist(id, db_session) db_session.delete(exist_course) db_session.commit() return exist_coursedef check_course_exist(course_id: int, db_session: Session): query = select(Course).where(Course.id == course_id) exist_course: Course = db_session.execute(query).scalar() if not exist_course: raise CourseNotExistException(&quot;课程不存在&quot;) return exist_course 测试先创建一个课程 然后删除 删除成功 更新: 2024-05-03 22:02:17原文: https://www.yuque.com/zacharyblock/iacda/lsqxkzaok37g7aaz","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"JWT权限校验","slug":"FastAPI入门/JWT权限校验","date":"2024-05-03T21:50:00.000Z","updated":"2024-05-03T21:50:00.000Z","comments":true,"path":"blog/1398871575/","permalink":"https://blockzachary.github.io/blog/1398871575/","excerpt":"","text":"JWT 权限校验在退出登录之后，依旧可以进入到主页面；同样后续其他 api 接口也需要在登录之后才能调用，需要加上 token，使用 JWT 实现。 前端首先从前端这块处理，除了 login 和后续会增加的 register 页面不需要登录才能访问，其他页面，都需要登录用户之后才能访问，否则自动跳转回 login 页面 请求头给请求头带上 token，提供给后端进行验证 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;../router&quot;;import axios from &quot;axios&quot;;const request = axios.create(&#123; baseURL: import.meta.env.VITE_BASE_URL, timeout: 30000, // 后台接口超时时间设置&#125;);// request 拦截器// 可以自请求发送前对请求做一些处理request.interceptors.request.use( (config) =&gt; &#123; const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); config.headers[&quot;Content-Type&quot;] = &quot;application/json;charset=utf-8&quot;; if (user) &#123; config.headers.Authorization = `Bearer $&#123;user.token&#125;`; &#125; return config; &#125;, (error) =&gt; &#123; return Promise.reject(error); &#125;);// response 拦截器// 可以在接口响应后统一处理结果request.interceptors.response.use( (response) =&gt; &#123; let res = response.data; // 如果是返回的文件 if (response.config.responseType === &quot;blob&quot;) &#123; return res; &#125; // 兼容服务端返回的字符串数据 if (typeof res === &quot;string&quot;) &#123; res = res ? JSON.parse(res) : res; &#125; // 当权限验证不通过的时候给出提示 if (res.code === &quot;401&quot;) &#123; ElMessage.error(res.msg); router.push(&quot;/login&quot;); &#125; return res; &#125;, (error) =&gt; &#123; console.log(&quot;err&quot; + error); return Promise.reject(error); &#125;);export default request; 路由实现在没有 token 的情况下无法进入主页而跳转到 login 页面，在路由守卫中进行判断和处理 123456789101112131415161718192021222324252627282930313233343536373839import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; \u0000 测试不登录，无法进入 home 页面 登录后，才可以进入 home 页面 后端后端这块需要实现一下 jwt，包括密码的校验和生成，以及 token 的生成和校验；那么之前的密码校验就可以舍去了，写一个统一的 auth 验证 安装依赖这里需要两个依赖：pyjwt、passlib[bcrypt] 12345fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23pyjwtpasslib[bcrypt] AuthHandler密码生成与校验接下先来编写 密码的生成和校验，在项目目录的/common下创建一个auth.py 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.security import HTTPBearerfrom passlib.context import CryptContextclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password)if __name__ == &#x27;__main__&#x27;: auth = AuthHandler() print(auth.get_password_hash(&quot;admin&quot;)) print(auth.verify_password(&quot;admin&quot;, &#x27;$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum&#x27;)) print(auth.verify_password(&quot;123&quot;, &#x27;$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum&#x27;)) 其中的$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum是数据库中存储的 admin 的密码 运行一下 可以看到，之前使用 bcrypt 直接生成的 hash 密码，虽然与现在生成的不一样，但是依旧可以用于验证 修改一下 adminService 的验证逻辑，尝试一下登录 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.security import HTTPBearerfrom passlib.context import CryptContextclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password)auth_handler = AuthHandler() 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModelclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) result = db_session.execute(query).scalars().first() if not result: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(admin.password, result.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) return result token 的生成与校验通过装饰器实现一个，登录验证 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetime, timedeltaimport jwtfrom fastapi import Securityfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentialsfrom passlib.context import CryptContextfrom exception.customException import TokenExceptionclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password) def encode_token(self, user_id): payload = &#123; &#x27;exp&#x27;: datetime.utcnow() + timedelta(days=7, minutes=0, seconds=0), &#x27;iat&#x27;: datetime.utcnow(), &#x27;sub&#x27;: user_id &#125; return jwt.encode( payload, self.secret, algorithm=&#x27;HS256&#x27; ) def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=[&#x27;HS256&#x27;]) return payload[&#x27;sub&#x27;] except jwt.ExpiredSignatureError: raise TokenException(&quot;token过期&quot;) except jwt.InvalidTokenError: raise TokenException(&quot;无效token&quot;) def auth_required(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials)auth_handler = AuthHandler() 给customException.py添加一个自定义异常 123class TokenException(Exception): def __init__(self, message: str): self.message = message 给exceptionHandler.py添加一个异常处理 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result)) 这个先写到这，后面新增加 api 的时候进行一个验证 更新: 2024-07-30 17:40:29原文: https://www.yuque.com/zacharyblock/iacda/pkecek3noxmavqwz","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"管理员登录","slug":"FastAPI入门/管理员登录","date":"2024-05-03T21:30:00.000Z","updated":"2024-05-03T21:30:00.000Z","comments":true,"path":"blog/701228072/","permalink":"https://blockzachary.github.io/blog/701228072/","excerpt":"","text":"管理员登录前端Login首先绘制一个登录页面 参考 element-plus 官网提供的表单https://element-plus.org/zh-CN/component/form.html 在项目路径/src/views下创建一个Login.vue 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;template&gt; &lt;div&gt; &lt;div class=&quot;login-container&quot;&gt; &lt;div style=&quot;width: 420px&quot; class=&quot;login-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 登录&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot;&gt; &lt;el-form-item&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Avatar&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%;font-size: 18px&quot; &gt;登 录&lt;/el-button &gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:35px;text-align: right;font-size: 15px&quot;&gt; 还没有账号？请&lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;const data = reactive(&#123; form: &#123;&#125;,&#125;);&lt;/script&gt;&lt;style scoped&gt;.login-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.login-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 背景图片添加一张登录背景图片到/src/assets/imags/login_background.png https://iconscout.com/free-illustration/children-are-doing-chemical-experiments-10946611 路由添加在/src/router/index.js中添加一下上面这个Login的路由 123456789101112131415161718192021222324252627import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, ],&#125;);export default router; 通过http://localhost:5173/login可以访问到登录页面 表单校验和登录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;template&gt; &lt;div&gt; &lt;div class=&quot;login-container&quot;&gt; &lt;div style=&quot;width: 420px&quot; class=&quot;login-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 登录&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot;&gt; &lt;el-form-item prop=&quot;username&quot;&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Avatar&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot;&gt; &lt;el-input show-password style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%;font-size: 18px&quot; @click=&quot;login&quot; &gt;登 录&lt;/el-button &gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:35px;text-align: right;font-size: 15px&quot;&gt; 还没有账号？请&lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: &#123;&#125;,&#125;);const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const login = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .post(&quot;/login&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; localStorage.setItem(&quot;student-user&quot;, JSON.stringify(res.data)); ElMessage.success(&quot;登录成功&quot;); router.push(&quot;/home&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.login-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.login-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 后端数据库IDE 连接 MySQL 创建库首先在数据库中创建一个 student_info 库 创建 admin 表 插入一条数据 数据库配置查看 sqlalchemy 官方文档https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb requirements.txt通过 sqlalchemy 连接数据库需要增加两个驱动 123fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23 .env在.env 文件下添加数据库的配置信息（记得改成你们自己的内容） 123456789HOST = &quot;localhost&quot;PORT = &quot;9090&quot;MYSQL_DIALECT = &quot;mysql+mysqldb&quot;MYSQL_HOST = &quot;localhost&quot;MYSQL_PORT = &quot;3306&quot;MYSQL_USER = &quot;root&quot;MYSQL_PASSWORD = &quot;XXXXXX&quot;MYSQL_DATABASE = &quot;student_info&quot; constant.py添加数据库配置常量 1234567891011121314# -*- coding:utf-8 -*-# Author: Zacharyfrom common.config import configHOST = config.env.get(&quot;HOST&quot;)PORT = config.env.get(&quot;PORT&quot;)MYSQL_DIALECT = config.env.get(&quot;MYSQL_DIALECT&quot;)MYSQL_HOST = config.env.get(&quot;MYSQL_HOST&quot;)MYSQL_PORT = config.env.get(&quot;MYSQL_PORT&quot;)MYSQL_USER = config.env.get(&quot;MYSQL_USER&quot;)MYSQL_PASSWORD = config.env.get(&quot;MYSQL_PASSWORD&quot;)MYSQL_DATABASE = config.env.get(&quot;MYSQL_DATABASE&quot;) model&#x2F;init.py12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import create_enginefrom sqlalchemy.orm import DeclarativeBase, sessionmakerfrom common.constant import *class Base(DeclarativeBase): pass# mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;engine = create_engine( f&quot;&#123;MYSQL_DIALECT&#125;://&#123;MYSQL_USER&#125;:&#123;MYSQL_PASSWORD&#125;@&#123;MYSQL_HOST&#125;:&#123;MYSQL_PORT&#125;/&#123;MYSQL_DATABASE&#125;?charset=utf8mb4&quot;, echo=True)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine) 管理员实体类定义在/model下创建一个admin.py文件 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False)class AdminModel(BaseModel): username: str password: str 管理员登录的 api 接口为了实现每一个 api 都能拿到一个连接数据库的 session，在/model/__init__.py中实现一个 session 的获取方法 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import create_enginefrom sqlalchemy.orm import DeclarativeBase, sessionmakerfrom common.constant import *class Base(DeclarativeBase): pass# mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;engine = create_engine( f&quot;&#123;MYSQL_DIALECT&#125;://&#123;MYSQL_USER&#125;:&#123;MYSQL_PASSWORD&#125;@&#123;MYSQL_HOST&#125;:&#123;MYSQL_PORT&#125;/&#123;MYSQL_DATABASE&#125;?charset=utf8mb4&quot;, echo=True)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)def get_db_session(): session = Session() try: yield session finally: session.close() adminApi12345678910111213141516# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import Body, Dependsfrom fastapi.encoders import jsonable_encoderfrom api import appfrom common.result import Result, ResultModelfrom model import Session, get_db_sessionfrom model.admin import AdminModelfrom service.adminService import AdminService@app.post(&quot;/login&quot;, response_model=ResultModel)async def login(admin: AdminModel = Body(...), db_session: Session = Depends(get_db_session)): dbadmin = AdminService.login(admin, db_session) return Result.success(jsonable_encoder(dbadmin)) adminService12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModelclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) result = db_session.execute(query).scalars().first() if not result: raise UserNotFoundException(&quot;用户不存在&quot;) if result.password != admin.password: raise PasswordNotMatchException(&quot;身份验证未通过&quot;) return result exception创建自定义异常的exception的 package 然后创建一个customException.py 1234567891011# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = message exceptionHandler在/api包下面创建一个exceptionHandler.py用于处理异常 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result)) &#x2F;api&#x2F;init.py12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()from api import adminApi, exceptionHandler 测试postman 测试后端接口正确登录： 密码错误： 账号错误： 前后端测试跨域问题 发生了跨域 CORS 的问题 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler 正确账号密码： 错误账号： 错误密码： 数据库密码为了安全，数据库中的 password 不应该以明文显示，需要做个加密 这里需要使用到一个库 bcrypt 1234fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23bcrypt==4.1.1 密码加密通过hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt()) 依据生成的盐值，生成 hash 后的密码值，结果是字节码 12345678910(venv) ➜ studentbackend python3Python 3.10.11 (v3.10.11:7d4cc5aa85, Apr 4 2023, 19:05:19) [Clang 13.0.0 (clang-1300.0.29.30)] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import bcrypt&gt;&gt;&gt; password = &quot;admin&quot;&gt;&gt;&gt; hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())&gt;&gt;&gt; print(hashed_pw)b&#x27;$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum&#x27;&gt;&gt;&gt; print(hashed_pw.decode(&#x27;utf-8&#x27;))$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum 将密码对应的加密密码 $2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum 替换到数据库中的 admin 账号中（这一步操作其实应该是，在注册的时候将这个密码值写入数据库 de~） 密码验证通过bcrypt.check(check_pw.encode(), hashed_pw)检验密码是否匹配 给 Admin 实体类定义一个密码检查方法 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyimport bcryptfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) def password_check(self, password): return bcrypt.checkpw(password.encode(), self.password.encode())class AdminModel(BaseModel): username: str password: str 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModelclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) result = db_session.execute(query).scalars().first() if not result: raise UserNotFoundException(&quot;用户不存在&quot;) if result.password_check(admin.password) is False: raise PasswordNotMatchException(&quot;身份验证未通过&quot;) return result 前后端测试密码错误： 密码正确： 更新: 2024-05-03 22:08:05原文: https://www.yuque.com/zacharyblock/iacda/qhg30r2hbk5wb58m","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"环境及项目初始化","slug":"FastAPI入门/环境及项目初始化","date":"2024-05-03T21:00:30.000Z","updated":"2024-05-03T21:00:30.000Z","comments":true,"path":"blog/3296237781/","permalink":"https://blockzachary.github.io/blog/3296237781/","excerpt":"","text":"环境及项目初始化环境介绍开发环境版本： Python3.10.11、Node.js16.9.0、Vue3、MySQL5.7.31 官方文档Node.js：https://nodejs.org/en Vue：https://cn.vuejs.org/ Vite：https://cn.vitejs.dev/guide/ Element-Plus：https://element-plus.org/zh-CN/ FastAPI：https://fastapi.tiangolo.com/zh/ SQLAlchemy：https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb 图片素材库：https://iconscout.com/ 前端 Vue安装 Node.js进入官网 https://nodejs.org/download/release/v16.19.0/安装好 node.js 安装 vue-cli然后使用npm install -g @vue/cli命令安装 vue-cli 创建 vue 项目使用 vite 进行构建 通过npm create vite@latest studentfontend -- --template vue构建前端项目 1234567891011121314151617➜ ~ cd Documents/PythonCode➜ PythonCode mkdir studentProject➜ PythonCode cd studentProject➜ studentProject npm create vite@latest studentfontend -- --template vueScaffolding project in /Users/zachary/Documents/PythonCode/studentProject/studentfontend...Done. Now run: cd studentfontend npm install npm run dev➜ studentProject cd studentfontend➜ studentfontend lsREADME.md package.json srcindex.html public vite.config.js npm 源如果 npm 命令运行的时候很卡的话，尝试换源 npm config set registry [https://registry.npmmirror.com](https://registry.npmmirror.com) 打开 vue 项目使用 WebStorm 打开创建好的前端项目 先什么都不做，尝试把项目运行起来 123456789101112131415161718192021222324252627282930➜ studentfontend npm installnpm WARN EBADENGINE Unsupported engine &#123;npm WARN EBADENGINE package: &#x27;@vitejs/plugin-vue@5.0.4&#x27;,npm WARN EBADENGINE required: &#123; node: &#x27;^18.0.0 || &gt;=20.0.0&#x27; &#125;,npm WARN EBADENGINE current: &#123; node: &#x27;v16.19.0&#x27;, npm: &#x27;8.19.3&#x27; &#125;npm WARN EBADENGINE &#125;npm WARN EBADENGINE Unsupported engine &#123;npm WARN EBADENGINE package: &#x27;rollup@4.12.1&#x27;,npm WARN EBADENGINE required: &#123; node: &#x27;&gt;=18.0.0&#x27;, npm: &#x27;&gt;=8.0.0&#x27; &#125;,npm WARN EBADENGINE current: &#123; node: &#x27;v16.19.0&#x27;, npm: &#x27;8.19.3&#x27; &#125;npm WARN EBADENGINE &#125;npm WARN EBADENGINE Unsupported engine &#123;npm WARN EBADENGINE package: &#x27;vite@5.1.5&#x27;,npm WARN EBADENGINE required: &#123; node: &#x27;^18.0.0 || &gt;=20.0.0&#x27; &#125;,npm WARN EBADENGINE current: &#123; node: &#x27;v16.19.0&#x27;, npm: &#x27;8.19.3&#x27; &#125;npm WARN EBADENGINE &#125;up to date in 649ms➜ studentfontend npm run dev&gt; studentfontend@0.0.0 dev&gt; vite VITE v5.1.5 ready in 814 ms ➜ Local: http://127.0.0.1:5173/ ➜ Network: use --host to expose ➜ press h + enter to show help 项目整改现在我们把这个项目做好看些，为了学生信息管理系统做准备的， 需要把路由写好，同时修改主题色，还有 request http 的请求封装，选择一个自己喜欢的页面标题及 icon index.html修改项目下的 index.html 文件 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;学生信息管理系统&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;app&quot;&gt;&lt;/div&gt; &lt;script type=&quot;module&quot; src=&quot;/src/main.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; css&amp;imgs删除/assets下的vue.svg 在/src/assets路径下创建一个css和imgs目录 在创建好的/css目录下分别创建global.css和index.scss 全局 css 样式 1234567891011121314151617181920* &#123; box-sizing: border-box;&#125;body &#123; margin: 0; padding: 0; color: #252424;&#125;a &#123; text-decoration: none;&#125;.card &#123; background-color: rgb(255, 255, 255); border-radius: 5px; padding: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);&#125; 主题色配置文件 12345678910111213141516171819@forward &quot;element-plus/theme-chalk/src/common/var.scss&quot; with ( $colors: ( &quot;primary&quot;: ( &quot;base&quot;: #0a7fce ), &quot;success&quot;: ( &quot;base&quot;: #08b41f ), &quot;warning&quot;: ( &quot;base&quot;: #e8af56 ), &quot;danger&quot;: ( &quot;base&quot;: #ef3030 ), &quot;info&quot;: ( &quot;base&quot;: #5d66ea ) )); 路由设置在/src路径下创建一个router目录，在其中创建一个index.js文件 12345678910111213141516171819202122import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), &#125;, ], &#125;, ],&#125;);export default router; request 请求/src路径下创建一个utils目录，在其中创建一个request.js文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;../router&quot;;import axios from &quot;axios&quot;;const request = axios.create(&#123; baseURL: import.meta.env.VITE_BASE_URL, timeout: 30000, // 后台接口超时时间设置&#125;);// request 拦截器// 可以自请求发送前对请求做一些处理request.interceptors.request.use( (config) =&gt; &#123; config.headers[&quot;Content-Type&quot;] = &quot;application/json;charset=utf-8&quot;; return config; &#125;, (error) =&gt; &#123; return Promise.reject(error); &#125;);// response 拦截器// 可以在接口响应后统一处理结果request.interceptors.response.use( (response) =&gt; &#123; let res = response.data; // 如果是返回的文件 if (response.config.responseType === &quot;blob&quot;) &#123; return res; &#125; // 兼容服务端返回的字符串数据 if (typeof res === &quot;string&quot;) &#123; res = res ? JSON.parse(res) : res; &#125; // 当权限验证不通过的时候给出提示 if (res.code === &quot;401&quot;) &#123; ElMessage.error(res.msg); router.push(&quot;/login&quot;); &#125; return res; &#125;, (error) =&gt; &#123; console.log(&quot;err&quot; + error); return Promise.reject(error); &#125;);export default request; views/src路径下的/components修改为/views目录，将其中的HelloWorld.vue修改成Manager.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;管理员&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt;&lt;HomeFilled /&gt;&lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt;&lt;User /&gt;&lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt;&lt;SwitchButton /&gt;&lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 接着在/src/views路径下创建一个manager目录，在其中创建一个Home.vue文件 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div class=&quot;welcome-container&quot;&gt; &lt;div class=&quot;custom-card bg-white shadow rounded p-4 mb-5&quot;&gt; &lt;h2 class=&quot;text-center text-primary&quot;&gt;欢迎来到本系统&lt;/h2&gt; &lt;p class=&quot;text-center mt-3&quot;&gt; 您好 &lt;span :style=&quot;&#123; color: &#x27;#116ca9&#x27; &#125;&quot;&gt;&#123;&#123; user.username &#125;&#125;&lt;/span &gt;，祝您使用愉快！ &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import request from &quot;@/utils/request&quot;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.welcome-container &#123; display: flex; justify-content: center; align-items: center; min-height: calc(100vh - 100px); /* 根据实际项目需要调整高度 */&#125;.custom-card &#123; max-width: 400px; border: none;&#125;&lt;/style&gt; App.vue修改项目中的/src/App.vue 123&lt;template&gt; &lt;RouterView /&gt;&lt;/template&gt; main.js修改项目中的/src/main.js 1234567891011121314151617181920import &#123; createApp &#125; from &quot;vue&quot;;import App from &quot;./App.vue&quot;;import router from &quot;./router&quot;;import ElementPlus from &quot;element-plus&quot;;import zhCn from &quot;element-plus/dist/locale/zh-cn.mjs&quot;;import * as ElementPlusIconsVue from &quot;@element-plus/icons-vue&quot;;import &quot;@/assets/css/global.css&quot;;const app = createApp(App);app.use(router);app.use(ElementPlus, &#123; locale: zhCn,&#125;);app.mount(&quot;#app&quot;);for (const [key, component] of Object.entries(ElementPlusIconsVue)) &#123; app.component(key, component);&#125; .env在项目路径下创建两个文件.env.development、.env.production 1VITE_BASE_URL=&#x27;http://localhost:9090&#x27; 1VITE_BASE_URL=&#x27;http://:9090&#x27; json 配置修改项目路径下的文件：package.json 12345678910111213141516171819202122232425&#123; &quot;name&quot;: &quot;studentfontend&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vite&quot;, &quot;build&quot;: &quot;vite build&quot;, &quot;preview&quot;: &quot;vite preview&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;@element-plus/icons-vue&quot;: &quot;^2.1.0&quot;, &quot;axios&quot;: &quot;^1.6.2&quot;, &quot;element-plus&quot;: &quot;^2.4.2&quot;, &quot;sass&quot;: &quot;^1.69.5&quot;, &quot;unplugin-element-plus&quot;: &quot;^0.8.0&quot;, &quot;vue&quot;: &quot;^3.3.4&quot;, &quot;vue-router&quot;: &quot;^4.2.5&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;@vitejs/plugin-vue&quot;: &quot;^4.4.0&quot;, &quot;unplugin-auto-import&quot;: &quot;^0.16.7&quot;, &quot;unplugin-vue-components&quot;: &quot;^0.25.2&quot;, &quot;vite&quot;: &quot;^4.4.11&quot; &#125;&#125; vite.config.js修改项目路径下的文件：vite.config.js 12345678910111213141516171819202122232425262728293031323334353637383940import &#123; fileURLToPath, URL &#125; from &quot;node:url&quot;;import &#123; defineConfig &#125; from &quot;vite&quot;;import vue from &quot;@vitejs/plugin-vue&quot;;import AutoImport from &quot;unplugin-auto-import/vite&quot;;import Components from &quot;unplugin-vue-components/vite&quot;;import &#123; ElementPlusResolver &#125; from &quot;unplugin-vue-components/resolvers&quot;;import ElementPlus from &quot;unplugin-element-plus/vite&quot;;export default defineConfig(&#123; plugins: [ vue(), AutoImport(&#123; resolvers: [ElementPlusResolver(&#123; importStyle: &quot;sass&quot; &#125;)], &#125;), Components(&#123; resolvers: [ElementPlusResolver(&#123; importStyle: &quot;sass&quot; &#125;)], &#125;), ElementPlus(&#123; useSource: true, &#125;), ], resolve: &#123; alias: &#123; &quot;@&quot;: fileURLToPath(new URL(&quot;./src&quot;, import.meta.url)), &#125;, &#125;, css: &#123; preprocessorOptions: &#123; scss: &#123; additionalData: ` @use &quot;@/assets/css/index.scss&quot; as *; `, &#125;, &#125;, &#125;,&#125;); logo修改一下 logo 和标题的 icon 分别放在/public/favicon.ico和/src/assets/imgs/logo.png路径下 删除/public/vite.svg 可以去这个网站下载https://iconscout.com/icons https://iconscout.com/free-icon/library-2642818，将该图片保存为/src/assets/imgs/logo.png 或者https://iconscout.com/free-icon/student-79 https://iconscout.com/free-icon/student-reading-2909468，保存为/public/favicon.ico 运行命令运行1234567891011121314➜ studentfontend npm installadded 93 packages, removed 1 package, and changed 5 packages in 16s➜ studentfontend npm run dev&gt; studentfontend@0.0.0 dev&gt; vite VITE v4.5.2 ready in 1169 ms ➜ Local: http://127.0.0.1:5173/ ➜ Network: use --host to expose ➜ press h to show help 一键运行通过配置一个启动项，便捷运行项目 后端 FastAPI创建空项目新建一个项目进入 FastAPI 的世界 先创建项目文件夹 12345678➜ studentProject lltotal 0drwxr-xr-x@ 16 zachary staff 512B 3 10 20:25 studentfontend➜ studentProject mkdir studentbackend➜ studentProject lltotal 0drwxr-xr-x@ 2 zachary staff 64B 3 10 20:41 studentbackenddrwxr-xr-x@ 16 zachary staff 512B 3 10 20:25 studentfontend 然后使用 Pycharm 创建一个空项目 依赖包安装需要安装一个 FastAPI 的依赖包 命令安装pip install fastapi[all] requirements.txt 安装1fastapi[all] 实现一个 api创建项目目录下创建一个main.py 1234567891011# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)async def hello(): return &#123;&quot;message&quot;: &quot;Hello World&quot;&#125; 运行需要使用 fastapi 提供的一个uvicornASGI 网关服务器来启动 api 服务 命令运行uvicorn main:app --reload 一键运行 配置 main 函数 123456789101112131415# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)async def hello(): return &#123;&quot;message&quot;: &quot;Hello World&quot;&#125;if __name__ == &quot;__main__&quot;: uvicorn.run(&quot;main:app&quot;, reload=True) 启动配置项 以上两种方式均可以实现，具体看个人习惯 项目整改.env这个文件用于存放环境变量，包括项目的运行 ip、端口号等，后面的数据库环境变量也在这里存放 12HOST = &quot;localhost&quot;PORT = &quot;9090&quot; common在项目路径下创建一个/common的 package，用于实现公共类或者公共方法 环境变量配置文件在/common包下创建一个config.py文件，实现对环境变量的获取 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyimport osfrom pathlib import Pathfrom dotenv import load_dotenvclass Config: def __init__(self): dotenv_path = Path(__file__).parent.parent / &quot;.env&quot; load_dotenv(dotenv_path=dotenv_path) self._env = dict(os.environ) @property def env(self): return self._envconfig = Config() 在/common包下创建一个constant.py文件，用于配置常量 1234567# -*- coding:utf-8 -*-# Author: Zacharyfrom common.config import configHOST = config.env.get(&quot;HOST&quot;)PORT = config.env.get(&quot;PORT&quot;) 返回类 Result实现一下 api 的通用返回类，在/common包下创建一个result.py 123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelclass ResultBase: code: str msg: str data: dictclass ResultModel(BaseModel, ResultBase): passclass Result(ResultBase): def __init__(self, code, msg, data): self.code = code self.msg = msg self.data = data @classmethod def success(cls, data: object = None, code: str = &quot;200&quot;, msg: str = &quot;success&quot;): if not data: data = &#123;&#125; return cls(code, msg, data) @classmethod def error(cls, data: object = None, code: str = &quot;500&quot;, msg: str = &quot;error&quot;): if not data: data = &#123;&#125; return cls(code, msg, data) exception创建一个/exception的 package 用于自定义异常 api创建一个/api的 package，用于创建后端的 API，实际就是 Controller 层 init.py用于创建 FastAPI 应用初始化 123456# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI() adminApi.py创建一个 hello fastapi 接口测试一下项目 12345678910# -*- coding:utf-8 -*-# Author: Zacharyfrom api import appfrom common.result import Result@app.get(&quot;/&quot;)async def hello(): return Result.success() 然后新增了一个 api 文件之后需要给 api 的init.py 说明一下新增了一个 api 文件 12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()from api import adminApi service创建一个/service的 package 用于实现 Service 层的业务代码 model创建一个/model的 package 用于实现数据库的映射类 main用于启动 FastAPI 的主入口程序 12345678910# -*- coding:utf-8 -*-# Author: Zacharyfrom api import appimport uvicornfrom common.constant import HOST, PORTif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, host=HOST, port=int(PORT), reload=True) 运行直接运行 main.py 文件即可 出现这个就是访问成功啦 至此，我们的前端后端项目就都初始化好了 更新: 2024-05-03 22:13:04原文: https://www.yuque.com/zacharyblock/iacda/sengqtgphw3hc0hv","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"项目介绍","slug":"FastAPI入门/项目介绍","date":"2024-05-03T20:30:00.000Z","updated":"2024-05-03T20:30:00.000Z","comments":true,"path":"blog/1071630779/","permalink":"https://blockzachary.github.io/blog/1071630779/","excerpt":"","text":"项目介绍学生信息管理系统——前后端分离技术栈后端：FastAPI + SQLAlchemy 前端：Vue3 + Element-plus 数据库：MySQL 所需工具Pycharm、WebStorm、Postman 项目功能管理员 登录 学生管理 课程管理 选课管理 成绩管理 学生 登录、注册 查看、修改个人信息 查看课程、选课 查看成绩 查看、修改评价 链接 🔗 BiliBili：https://www.bilibili.com/video/BV1Rx4y1U79A/?vd_source&#x3D;4eb61e12ff64fa3d03cfec0f2eb09ce7 语雀：[https://www.yuque.com/zacharyblock/iacda?# 《PythonLearning》](https://www.yuque.com/zacharyblock/iacda?# 《PythonLearning》) Github： 前端：https://github.com/BlockZachary/studentfontend 后端：https://github.com/BlockZachary/studentbackend 更新: 2024-05-26 21:30:46原文: https://www.yuque.com/zacharyblock/iacda/wlw9b68ykem94qi1","categories":[{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"}]},{"title":"面经2","slug":"面经_面试题/面经2","date":"2024-03-19T00:10:00.000Z","updated":"2024-03-19T00:10:00.000Z","comments":true,"path":"blog/1445218469/","permalink":"https://blockzachary.github.io/blog/1445218469/","excerpt":"","text":"面经 2题目 001: 在 Python 中如何实现单例模式。点评：单例模式是指让一个类只能创建出唯一的实例，这个题目在面试中出现的频率极高，因为它考察的不仅仅是单例模式，更是对 Python 语言到底掌握到何种程度，建议大家用装饰器和元类这两种方式来实现单例模式，因为这两种方式的通用性最强，而且也可以顺便展示自己对装饰器和元类中两个关键知识点的理解。 方法一：使用装饰器实现单例模式。 12345678910111213141516171819from functools import wrapsdef singleton(cls): &quot;&quot;&quot;单例类装饰器&quot;&quot;&quot; instances = &#123;&#125; @wraps(cls) def wrapper(*args, **kwargs): if cls not in instances: instances[cls] = cls(*args, **kwargs) return instances[cls] return wrapper@singletonclass President: pass 扩展：装饰器是 Python 中非常有特色的语法，用一个函数去装饰另一个函数或类，为其添加额外的能力。通常通过装饰来实现的功能都属横切关注功能，也就是跟正常的业务逻辑没有必然联系，可以动态添加或移除的功能。装饰器可以为代码提供缓存、代理、上下文环境等服务，它是对设计模式中代理模式的践行。在写装饰器的时候，带装饰功能的函数（上面代码中的wrapper函数）通常都会用functools模块中的wraps再加以装饰，这个装饰器最重要的作用是给被装饰的类或函数动态添加一个wrapped属性，这个属性会将被装饰之前的类或函数保留下来，这样在我们不需要装饰功能的时候，可以通过它来取消装饰器，例如可以使用President &#x3D; President.wrapped来取消对President类做的单例处理。需要提醒大家的是：上面的单例并不是线程安全的，如果要做到线程安全，需要对创建对象的代码进行加锁的处理。在 Python 中可以使用threading模块的RLock对象来提供锁，可以使用锁对象的acquire和release方法来实现加锁和解锁的操作。当然，更为简便的做法是使用锁对象的with上下文语法来进行隐式的加锁和解锁操作。 方法二：使用元类实现单例模式。 123456789101112131415class SingletonMeta(type): &quot;&quot;&quot;自定义单例元类&quot;&quot;&quot; def __init__(cls, *args, **kwargs): cls.__instance = None super().__init__(*args, **kwargs) def __call__(cls, *args, **kwargs): if cls.__instance is None: cls.__instance = super().__call__(*args, **kwargs) return cls.__instanceclass President(metaclass=SingletonMeta): pass 扩展：Python 是面向对象的编程语言，在面向对象的世界中，一切皆为对象。对象是通过类来创建的，而类本身也是对象，类这样的对象是通过元类来创建的。我们在定义类时，如果没有给一个类指定父类，那么默认的父类是object，如果没有给一个类指定元类，那么默认的元类是type。通过自定义的元类，我们可以改变一个类默认的行为，就如同上面的代码中，我们通过元类的call魔术方法，改变了President类的构造器那样。 补充：关于单例模式，在面试中还有可能被问到它的应用场景。通常一个对象的状态是被其他对象共享的，就可以将其设计为单例，例如项目中使用的数据库连接池对象和配置对象通常都是单例，这样才能保证所有地方获取到的数据库连接和配置信息是完全一致的；而且由于对象只有唯一的实例，因此从根本上避免了重复创建对象造成的时间和空间上的开销，也避免了对资源的多重占用。再举个例子，项目中的日志操作通常也会使用单例模式，这是因为共享的日志文件一直处于打开状态，只能有一个实例去操作它，否则在写入日志的时候会产生混乱。 题目 002：不使用中间变量，交换两个变量a和b的值。点评：典型的送人头的题目，通常交换两个变量需要借助一个中间变量，如果不允许使用中间变量，在其他编程语言中可以使用异或运算的方式来实现交换两个变量的值，但是 Python 中有更为简单明了的做法。 方法一： 123a = a ^ bb = a ^ ba = a ^ b 方法二： 1a, b = b, a 扩展：需要注意，a, b &#x3D; b, a这种做法其实并不是元组解包，虽然很多人都这样认为。Python 字节码指令中有ROT_TWO指令来支持这个操作，类似的还有ROT_THREE，对于 3 个以上的元素，如a, b, c, d &#x3D; b, c, d, a，才会用到创建元组和元组解包。想知道你的代码对应的字节码指令，可以使用 Python 标准库中dis模块的dis函数来反汇编你的 Python 代码。 题目 003：写一个删除列表中重复元素的函数，要求去重后元素相对位置保持不变。点评：这个题目在初中级 Python 岗位面试的时候经常出现，题目源于《Python Cookbook》这本书第一章的第 10 个问题，有很多面试题其实都是这本书上的原题，所以建议大家有时间好好研读一下这本书。 12345678def dedup(items): no_dup_items = [] seen = set() for item in items: if item not in seen: no_dup_items.append(item) seen.add(item) return no_dup_items 如果愿意也可以把上面的函数改造成一个生成器，代码如下所示。 123456def dedup(items): seen = set() for item in items: if item not in seen: yield item seen.add(item) 扩展：由于 Python 中的集合底层使用哈希存储，所以集合的in和not in成员运算在性能上远远优于列表，所以上面的代码我们使用了集合来保存已经出现过的元素。集合中的元素必须是hashable对象，因此上面的代码在列表元素不是hashable对象时会失效，要解决这个问题可以给函数增加一个参数，该参数可以设计为返回哈希码或hashable对象的函数。 题目 004：假设你使用的是官方的 CPython，说出下面代码的运行结果。点评：下面的程序对实际开发并没有什么意义，但却是 CPython 中的一个大坑，这道题旨在考察面试者对官方的 Python 解释器到底了解到什么程度。 1234567891011a, b, c, d = 1, 1, 1000, 1000print(a is b, c is d)def foo(): e = 1000 f = 1000 print(e is f, e is d) g = 1 print(g is a)foo() 运行结果： 123True FalseTrue FalseTrue 上面代码中a is b的结果是True但c is d的结果是False，这一点的确让人费解。CPython 解释器出于性能优化的考虑，把频繁使用的整数对象用一个叫smallints的对象池缓存起来造成的。smallints缓存的整数值被设定为[-5, 256]这个区间，也就是说，在任何引用这些整数的地方，都不需要重新创建int对象，而是直接引用缓存池中的对象。如果整数不在该范围内，那么即便两个整数的值相同，它们也是不同的对象。 CPython 底层为了进一步提升性能还做了另一个设定，对于同一个代码块中值不在small_ints缓存范围内的整数，如果同一个代码块中已经存在一个值与其相同的整数对象，那么就直接引用该对象，否则创建新的int对象。需要大家注意的是，这条规则对数值型适用，但对字符串则需要考虑字符串的长度，这一点大家可以自行证明。 扩展：如果你用 PyPy（另一种 Python 解释器实现，支持 JIT，对 CPython 的缺点进行了改良，在性能上优于 CPython，但对三方库的支持略差）来运行上面的代码，你会发现所有的输出都是 True。 题目 005：Lambda 函数是什么，举例说明的它的应用场景。点评：这个题目主要想考察的是 Lambda 函数的应用场景，潜台词是问你在项目中有没有使用过 Lambda 函数，具体在什么场景下会用到 Lambda 函数，借此来判断你写代码的能力。因为 Lambda 函数通常用在高阶函数中，主要的作用是通过向函数传入函数或让函数返回函数最终实现代码的解耦合。 Lambda 函数也叫匿名函数，它是功能简单用一行代码就能实现的小型函数。Python 中的 Lambda 函数只能写一个表达式，这个表达式的执行结果就是函数的返回值，不用写return关键字。Lambda 函数因为没有名字，所以也不会跟其他函数发生命名冲突的问题。 扩展：面试的时候有可能还会考你用 Lambda 函数来实现一些功能，也就是用一行代码来实现题目要求的功能，例如：用一行代码实现求阶乘的函数，用一行代码实现求最大公约数的函数等。 12fac = lambda x: __import__(&#x27;functools&#x27;).reduce(int.__mul__, range(1, x + 1), 1)gcd = lambda x, y: y % x and gcd(y % x, x) or x Lambda 函数其实最为主要的用途是把一个函数传入另一个高阶函数（如 Python 内置的filter、map等）中来为函数做解耦合，增强函数的灵活性和通用性。下面的例子通过使用filter和map函数，实现了从列表中筛选出奇数并求平方构成新列表的操作，因为用到了高阶函数，过滤和映射数据的规则都是函数的调用者通过另外一个函数传入的，因此这filter和map函数没有跟特定的过滤和映射数据的规则耦合在一起。 123items = [12, 5, 7, 10, 8, 19]items = list(map(lambda x: x ** 2, filter(lambda x: x % 2, items)))print(items) # [25, 49, 361] 扩展：用列表的生成式来实现上面的代码会更加简单明了，代码如下所示。 123items = [12, 5, 7, 10, 8, 19]items = [x ** 2 for x in items if x % 2]print(items) # [25, 49, 361] 题目 006：说说 Python 中的浅拷贝和深拷贝。点评：这个题目本身出现的频率非常高，但是就题论题而言没有什么技术含量。对于这种面试题，在回答的时候一定要让你的答案能够超出面试官的预期，这样才能获得更好的印象分。所以回答这个题目的要点不仅仅是能够说出浅拷贝和深拷贝的区别，深拷贝的时候可能遇到的两大问题，还要说出 Python 标准库对浅拷贝和深拷贝的支持，然后可以说说列表、字典如何实现拷贝操作以及如何通过序列化和反序列的方式实现深拷贝，最后还可以提到设计模式中的原型模式以及它在项目中的应用。 浅拷贝通常只复制对象本身，而深拷贝不仅会复制对象，还会递归的复制对象所关联的对象。深拷贝可能会遇到两个问题：一是一个对象如果直接或间接的引用了自身，会导致无休止的递归拷贝；二是深拷贝可能对原本设计为多个对象共享的数据也进行拷贝。Python 通过copy模块中的copy和deepcopy函数来实现浅拷贝和深拷贝操作，其中deepcopy可以通过memo字典来保存已经拷贝过的对象，从而避免刚才所说的自引用递归问题；此外，可以通过copyreg模块的pickle函数来定制指定类型对象的拷贝行为。 deepcopy函数的本质其实就是对象的一次序列化和一次返回序列化，面试题中还考过用自定义函数实现对象的深拷贝操作，显然我们可以使用pickle模块的dumps和loads来做到，代码如下所示。 123import picklemy_deep_copy = lambda obj: pickle.loads(pickle.dumps(obj)) 列表的切片操作[:]相当于实现了列表对象的浅拷贝，而字典的copy方法可以实现字典对象的浅拷贝。对象拷贝其实是更为快捷的创建对象的方式。在 Python 中，通过构造器创建对象属于两阶段构造，首先是分配内存空间，然后是初始化。在创建对象时，我们也可以基于“原型”对象来创建新对象，通过对原型对象的拷贝（复制内存）就完成了对象的创建和初始化，这种做法更加高效，这也就是设计模式中的原型模式。在 Python 中，我们可以通过元类的方式来实现原型模式，代码如下所示。 1234567891011121314151617181920import copyclass PrototypeMeta(type): &quot;&quot;&quot;实现原型模式的元类&quot;&quot;&quot; def __init__(cls, *args, **kwargs): super().__init__(*args, **kwargs) # 为对象绑定clone方法来实现对象拷贝 cls.clone = lambda self, is_deep=True: \\ copy.deepcopy(self) if is_deep else copy.copy(self)class Person(metaclass=PrototypeMeta): passp1 = Person()p2 = p1.clone() # 深拷贝p3 = p1.clone(is_deep=False) # 浅拷贝 题目 007：Python 是如何实现内存管理的？点评：当面试官问到这个问题的时候，一个展示自己的机会就摆在面前了。你要先反问面试官：“你说的是官方的 CPython 解释器吗？”。这个反问可以展示出你了解过 Python 解释器的不同的实现版本，而且你也知道面试官想问的是 CPython。当然，很多面试官对不同的 Python 解释器底层实现到底有什么差别也没有概念。所以，千万不要觉得面试官一定比你强，怀揣着这份自信可以让你更好的完成面试。 Python 提供了自动化的内存管理，也就是说内存空间的分配与释放都是由 Python 解释器在运行时自动进行的，自动管理内存功能极大的减轻程序员的工作负担，也能够帮助程序员在一定程度上解决内存泄露的问题。以 CPython 解释器为例，它的内存管理有三个关键点：引用计数、标记清理、分代收集。 引用计数：对于 CPython 解释器来说，Python 中的每一个对象其实就是PyObject结构体，它的内部有一个名为ob_refcnt 的引用计数器成员变量。程序在运行的过程中ob_refcnt的值会被更新并藉此来反映引用有多少个变量引用到该对象。当对象的引用计数值为 0 时，它的内存就会被释放掉。 12345typedef struct _object &#123; _PyObject_HEAD_EXTRA Py_ssize_t ob_refcnt; struct _typeobject *ob_type;&#125; PyObject; 以下情况会导致引用计数加1： 对象被创建 对象被引用 对象作为参数传入到一个函数中 对象作为元素存储到一个容器中 以下情况会导致引用计数减1： 用del语句显示删除对象引用 对象引用被重新赋值其他对象 一个对象离开它所在的作用域 持有该对象的容器自身被销毁 持有该对象的容器删除该对象 可以通过sys模块的getrefcount函数来获得对象的引用计数。引用计数的内存管理方式在遇到循环引用的时候就会出现致命伤，因此需要其他的垃圾回收算法对其进行补充。 标记清理：CPython 使用了“标记-清理”（Mark and Sweep）算法解决容器类型可能产生的循环引用问题。该算法在垃圾回收时分为两个阶段：标记阶段，遍历所有的对象，如果对象是可达的（被其他对象引用），那么就标记该对象为可达；清除阶段，再次遍历对象，如果发现某个对象没有标记为可达，则就将其回收。CPython 底层维护了两个双端链表，一个链表存放着需要被扫描的容器对象（姑且称之为链表 A），另一个链表存放着临时不可达对象（姑且称之为链表 B）。为了实现“标记-清理”算法，链表中的每个节点除了有记录当前引用计数的ref_count变量外，还有一个gc_ref变量，这个gc_ref是ref_count的一个副本，所以初始值为ref_count的大小。执行垃圾回收时，首先遍历链表 A 中的节点，并且将当前对象所引用的所有对象的gc_ref减1，这一步主要作用是解除循环引用对引用计数的影响。再次遍历链表 A 中的节点，如果节点的gc_ref值为0，那么这个对象就被标记为“暂时不可达”（GC_TENTATIVELY_UNREACHABLE）并被移动到链表 B 中；如果节点的gc_ref不为0，那么这个对象就会被标记为“可达“（GC_REACHABLE），对于”可达“对象，还要递归的将该节点可以到达的节点标记为”可达“；链表 B 中被标记为”可达“的节点要重新放回到链表 A 中。在两次遍历之后，链表 B 中的节点就是需要释放内存的节点。 分代回收：在循环引用对象的回收中，整个应用程序会被暂停，为了减少应用程序暂停的时间，Python 通过分代回收（空间换时间）的方法提高垃圾回收效率。分代回收的基本思想是：对象存在的时间越长，是垃圾的可能性就越小，应该尽量不对这样的对象进行垃圾回收。CPython 将对象分为三种世代分别记为0、1、2，每一个新生对象都在第0代中，如果该对象在一轮垃圾回收扫描中存活下来，那么它将被移到第1代中，存在于第1代的对象将较少的被垃圾回收扫描到；如果在对第1代进行垃圾回收扫描时，这个对象又存活下来，那么它将被移至第 2 代中，在那里它被垃圾回收扫描的次数将会更少。分代回收扫描的门限值可以通过gc模块的get_threshold函数来获得，该函数返回一个三元组，分别表示多少次内存分配操作后会执行0代垃圾回收，多少次0代垃圾回收后会执行1代垃圾回收，多少次1代垃圾回收后会执行2代垃圾回收。需要说明的是，如果执行一次2代垃圾回收，那么比它年轻的代都要执行垃圾回收。如果想修改这几个门限值，可以通过gc模块的set_threshold函数来做到。 题目 008：说一下你对 Python 中迭代器和生成器的理解。点评：很多人面试者都会写迭代器和生成器，但是却无法准确的解释什么是迭代器和生成器。如果你也有同样的困惑，可以参考下面的回答。 迭代器是实现了迭代器协议的对象。跟其他编程语言不通，Python 中没有用于定义协议或表示约定的关键字，像interface、protocol这些单词并不在 Python 语言的关键字列表中。Python 语言通过魔法方法来表示约定，也就是我们所说的协议，而*next和iter*这两个魔法方法就代表了迭代器协议。可以通过for-in循环从迭代器对象中取出值，也可以使用next函数取出迭代器对象中的下一个值。生成器是迭代器的语法升级版本，可以用更为简单的代码来实现一个迭代器。 扩展：面试中经常让写生成斐波那契数列的迭代器，大家可以参考下面的代码。 12345678910111213141516class Fib(object): def __init__(self, num): self.num = num self.a, self.b = 0, 1 self.idx = 0 def __iter__(self): return self def __next__(self): if self.idx &lt; self.num: self.a, self.b = self.b, self.a + self.b self.idx += 1 return self.a raise StopIteration() 如果用生成器的语法来改写上面的代码，代码会简单优雅很多。 12345def fib(num): a, b = 0, 1 for _ in range(num): a, b = b, a + b yield a 题目 009：正则表达式的 match 方法和 search 方法有什么区别？点评：正则表达式是字符串处理的重要工具，所以也是面试中经常考察的知识点。在 Python 中，使用正则表达式有两种方式，一种是直接调用re模块中的函数，传入正则表达式和需要处理的字符串；一种是先通过re模块的compile函数创建正则表达式对象，然后再通过对象调用方法并传入需要处理的字符串。如果一个正则表达式被频繁的使用，我们推荐用**re.**compile**函数创建正则表达式对象，这样会减少频繁编译同一个正则表达式所造成的开销**。 match方法是从字符串的起始位置进行正则表达式匹配，返回Match对象或 None。search方法会扫描整个字符串来找寻匹配的模式，同样也是返回 Match 对象或 None。 题目 010：下面这段代码的执行结果是什么。1234def multiply(): return [lambda x: i * x for i in range(4)]print([m(100) for m in multiply()]) 运行结果： 1[300, 300, 300, 300] 上面代码的运行结果很容易被误判为[0, 100, 200, 300]。首先需要注意的是multiply函数用生成式语法返回了一个列表，列表中保存了 4 个 Lambda 函数，这 4 个 Lambda 函数会返回传入的参数乘以i的结果。需要注意的是这里有闭包（closure）现象，multiply函数中的局部变量i的生命周期被延展了，由于i最终的值是3，所以通过m(100)调列表中的 Lambda 函数时会返回300，而且 4 个调用都是如此。 如果想得到[0, 100, 200, 300]这个结果，可以按照下面几种方式来修改multiply函数。 方法一：使用生成器，让函数获得i的当前值。 1234def multiply(): return (lambda x: i * x for i in range(4))print([m(100) for m in multiply()]) 或者 12345def multiply(): for i in range(4): yield lambda x: x * iprint([m(100) for m in multiply()]) 方法二：使用偏函数，彻底避开闭包。 1234567from functools import partialfrom operator import __mul__def multiply(): return [partial(__mul__, i) for i in range(4)]print([m(100) for m in multiply()]) 题目 011：Python 中为什么没有函数重载？点评：C++、Java、C#等诸多编程语言都支持函数重载，所谓函数重载指的是在同一个作用域中有多个同名函数，它们拥有不同的参数列表（参数个数不同或参数类型不同或二者皆不同），可以相互区分。重载也是一种多态性，因为通常是在编译时通过参数的个数和类型来确定到底调用哪个重载函数，所以也被称为编译时多态性或者叫前绑定。这个问题的潜台词其实是问面试者是否有其他编程语言的经验，是否理解 Python 是动态类型语言，是否知道 Python 中函数的可变参数、关键字参数这些概念。 首先 Python 是解释型语言，函数重载现象通常出现在编译型语言中。其次 Python 是动态类型语言，函数的参数没有类型约束，也就无法根据参数类型来区分重载。再者 Python 中函数的参数可以有默认值，可以使用可变参数和关键字参数，因此即便没有函数重载，也要可以让一个函数根据调用者传入的参数产生不同的行为。 题目 012：用 Python 代码实现 Python 内置函数 max。点评：这个题目看似简单，但实际上还是比较考察面试者的功底。因为 Python 内置的max函数既可以传入可迭代对象找出最大，又可以传入两个或多个参数找出最大；最为关键的是还可以通过命名关键字参数key来指定一个用于元素比较的函数，还可以通过default命名关键字参数来指定当可迭代对象为空时返回的默认值。 下面的代码仅供参考： 123456789101112131415161718192021222324def my_max(*args, key=None, default=None): &quot;&quot;&quot; 获取可迭代对象中最大的元素或两个及以上实参中最大的元素 :param args: 一个可迭代对象或多个元素 :param key: 提取用于元素比较的特征值的函数，默认为None :param default: 如果可迭代对象为空则返回该默认值，如果没有给默认值则引发ValueError异常 :return: 返回可迭代对象或多个元素中的最大元素 &quot;&quot;&quot; if len(args) == 1 and len(args[0]) == 0: if default: return default else: raise ValueError(&#x27;max() arg is an empty sequence&#x27;) items = args[0] if len(args) == 1 else args max_elem, max_value = items[0], items[0] if key: max_value = key(max_value) for item in items: value = item if key: value = key(item) if value &gt; max_value: max_elem, max_value = item, value return max_elem 题目 013：写一个函数统计传入的列表中每个数字出现的次数并返回对应的字典。点评：送人头的题目，不解释。 123456def count_letters(items): result = &#123;&#125; for item in items: if isinstance(item, (int, float)): result[item] = result.get(item, 0) + 1 return result 也可以直接使用 Python 标准库中collections模块的Counter类来解决这个问题，Counter是dict的子类，它会将传入的序列中的每个元素作为键，元素出现的次数作为值来构造字典。 123456from collections import Counterdef count_letters(items): counter = Counter(items) return &#123;key: value for key, value in counter.items() \\ if isinstance(key, (int, float))&#125; 题目 014：使用 Python 代码实现遍历一个文件夹的操作。点评：基本也是送人头的题目，只要用过os模块就应该知道怎么做。 Python 标准库os模块的walk函数提供了遍历一个文件夹的功能，它返回一个生成器。 12345678import osg = os.walk(&#x27;/Users/Hao/Downloads/&#x27;)for path, dir_list, file_list in g: for dir_name in dir_list: print(os.path.join(path, dir_name)) for file_name in file_list: print(os.path.join(path, file_name)) 说明：os.path模块提供了很多进行路径操作的工具函数，在项目开发中也是经常会用到的。如果题目明确要求不能使用os.walk函数，那么可以使用os.listdir函数来获取指定目录下的文件和文件夹，然后再通过循环遍历用os.isdir函数判断哪些是文件夹，对于文件夹可以通过递归调用进行遍历，这样也可以实现遍历一个文件夹的操作。 题目 015：现有 2 元、3 元、5 元共三种面额的货币，如果需要找零 99 元，一共有多少种找零的方式？点评：还有一个非常类似的题目：“一个小朋友走楼梯，一次可以走 1 个台阶、2 个台阶或 3 个台阶，问走完 10 个台阶一共有多少种走法？”，这两个题目的思路是一样，如果用递归函数来写的话非常简单。 1234567891011from functools import lru_cache@lru_cache()def change_money(total): if total == 0: return 1 if total &lt; 0: return 0 return change_money(total - 2) + change_money(total - 3) + \\ change_money(total - 5) 说明：在上面的代码中，我们用lru_cache装饰器装饰了递归函数change_money，如果不做这个优化，上面代码的渐近时间复杂度将会是，而如果参数total的值是99，这个运算量是非常巨大的。lru_cache装饰器会缓存函数的执行结果，这样就可以减少重复运算所造成的开销，这是空间换时间的策略，也是动态规划的编程思想。 题目 016：写一个函数，给定矩阵的阶数&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;n&lt;/font&gt;，输出一个螺旋式数字矩阵。例如：n &#x3D; 2，返回： 121 24 3 例如：n &#x3D; 3，返回： 1231 2 38 9 47 6 5 这个题目本身并不复杂，下面的代码仅供参考。 123456789101112131415161718192021222324252627282930313233def show_spiral_matrix(n): matrix = [[0] * n for _ in range(n)] row, col = 0, 0 num, direction = 1, 0 while num &lt;= n ** 2: if matrix[row][col] == 0: matrix[row][col] = num num += 1 if direction == 0: if col &lt; n - 1 and matrix[row][col + 1] == 0: col += 1 else: direction += 1 elif direction == 1: if row &lt; n - 1 and matrix[row + 1][col] == 0: row += 1 else: direction += 1 elif direction == 2: if col &gt; 0 and matrix[row][col - 1] == 0: col -= 1 else: direction += 1 else: if row &gt; 0 and matrix[row - 1][col] == 0: row -= 1 else: direction += 1 direction %= 4 for x in matrix: for y in x: print(y, end=&#x27;\\t&#x27;) print() 题目 017：阅读下面的代码，写出程序的运行结果。123456items = [1, 2, 3, 4]print([i for i in items if i &gt; 2])print([i for i in items if i % 2])print([(x, y) for x, y in zip(&#x27;abcd&#x27;, (1, 2, 3, 4, 5))])print(&#123;x: f&#x27;item&#123;x ** 2&#125;&#x27; for x in (2, 4, 6)&#125;)print(len(&#123;x for x in &#x27;hello world&#x27; if x not in &#x27;abcdefg&#x27;&#125;)) 点评：生成式（推导式）属于 Python 的特色语法之一，几乎是面试必考内容。Python 中通过生成式字面量语法，可以创建出列表、集合、字典。 12345[3, 4][1, 3][(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2), (&#x27;c&#x27;, 3), (&#x27;d&#x27;, 4)]&#123;2: &#x27;item4&#x27;, 4: &#x27;item16&#x27;, 6: &#x27;item36&#x27;&#125;6 题目 018：说出下面代码的运行结果。1234567891011121314class Parent: x = 1class Child1(Parent): passclass Child2(Parent): passprint(Parent.x, Child1.x, Child2.x)Child1.x = 2print(Parent.x, Child1.x, Child2.x)Parent.x = 3print(Parent.x, Child1.x, Child2.x) 点评：运行上面的代码首先输出1 1 1，这一点大家应该没有什么疑问。接下来，通过Child1.x &#x3D; 2给类Child1重新绑定了属性x并赋值为2，所以Child1.x会输出2，而Parent和Child2并不受影响。执行Parent.x &#x3D; 3会重新给Parent类的x属性赋值为3，由于Child2的x属性继承自Parent，所以Child2.x的值也是3；而之前我们为Child1重新绑定了x属性，那么它的x属性值不会受到Parent.x &#x3D; 3的影响，还是之前的值2。 1231 1 11 2 13 2 3 题目 19：说说你用过 Python 标准库中的哪些模块。点评：Python 标准库中的模块非常多，建议大家根据自己过往的项目经历来介绍你用过的标准库和三方库，因为这些是你最为熟悉的，经得起面试官深挖的。 模块名 介绍 sys 跟 Python 解释器相关的变量和函数，例如：sys.version、sys.exit() os 和操作系统相关的功能，例如：os.listdir()、os.remove() re 和正则表达式相关的功能，例如：re.compile()、re.search() math 和数学运算相关的功能，例如：math.pi、math.e、math.cos logging 和日志系统相关的类和函数，例如：logging.Logger、logging.Handler json &#x2F; pickle 实现对象序列化和反序列的模块，例如：json.loads、json.dumps hashlib 封装了多种哈希摘要算法的模块，例如：hashlib.md5、hashlib.sha1 urllib 包含了和 URL 相关的子模块，例如：urllib.request、urllib.parse itertools 提供各种迭代器的模块，例如：itertools.cycle、itertools.product functools 函数相关工具模块，例如：functools.partial、functools.lru_cache collections &#x2F; heapq 封装了常用数据结构和算法的模块，例如：collections.deque threading &#x2F; multiprocessing 多线程&#x2F;多进程相关类和函数的模块，例如：threading.Thread concurrent.futures &#x2F; asyncio 并发编程&#x2F;异步编程相关的类和函数的模块，例如：ThreadPoolExecutor base64 提供 BASE-64 编码相关函数的模块，例如：bas64.encode csv 和读写 CSV 文件相关的模块，例如：csv.reader、csv.writer profile &#x2F; cProfile &#x2F; pstats 和代码性能剖析相关的模块，例如：cProfile.run、pstats.Stats unittest 和单元测试相关的模块，例如：unittest.TestCase 题目 20：&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;__&lt;/font&gt;**&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;init__&lt;/font&gt;**和**&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;__new__&lt;/font&gt;**方法有什么区别？Python 中调用构造器创建对象属于两阶段构造过程，首先执行*new方法获得保存对象所需的内存空间，再通过init执行对内存空间数据的填充（对象属性的初始化）。new方法的返回值是创建好的 Python 对象（的引用），而init方法的第一个参数就是这个对象（的引用），所以在init中可以完成对对象的初始化操作。new是类方法，它的第一个参数是类，init*是对象方法，它的第一个参数是对象。 题目 21：输入年月日，判断这个日期是这一年的第几天。方法一：不使用标准库中的模块和函数。 12345678910111213def is_leap_year(year): &quot;&quot;&quot;判断指定的年份是不是闰年，平年返回False，闰年返回True&quot;&quot;&quot; return year % 4 == 0 and year % 100 != 0 or year % 400 == 0def which_day(year, month, date): &quot;&quot;&quot;计算传入的日期是这一年的第几天&quot;&quot;&quot; # 用嵌套的列表保存平年和闰年每个月的天数 days_of_month = [ [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] ] days = days_of_month[is_leap_year(year)][:month - 1] return sum(days) + date 方法二：使用标准库中的datetime模块。 123456import datetimedef which_day(year, month, date): end = datetime.date(year, month, date) start = datetime.date(year, 1, 1) return (end - start).days + 1 题目 22：平常工作中用什么工具进行静态代码分析。点评：静态代码分析工具可以从代码中提炼出各种静态属性，这使得开发者可以对代码的复杂性、可维护性和可读性有更好的了解，这里所说的静态属性包括： 代码是否符合编码规范，例如：PEP-8。 代码中潜在的问题，包括：语法错误、缩进问题、导入缺失、变量覆盖等。 代码中的坏味道。 代码的复杂度。 代码的逻辑问题。 工作中静态代码分析主要用到的是 Pylint 和 Flake8。Pylint 可以检查出代码错误、坏味道、不规范的代码等问题，较新的版本中还提供了代码复杂度统计数据，可以生成检查报告。Flake8 封装了 Pyflakes（检查代码逻辑错误）、McCabe（检查代码复杂性）和 Pycodestyle（检查代码是否符合 PEP-8 规范）工具，它可以执行这三个工具提供的检查。 题目 23：说一下你知道的 Python 中的魔术方法。点评：魔术方法也称为魔法方法，是 Python 中的特色语法，也是面试中的高频问题。 魔术方法 作用 new、init、del 创建和销毁对象相关 add、sub、mul、div、floordiv、mod 算术运算符相关 eq、ne、lt、gt、le、ge 关系运算符相关 pos、neg、invert 一元运算符相关 lshift、rshift、and、or、xor 位运算相关 enter、exit 上下文管理器协议 iter、next、reversed 迭代器协议 int、long、float、oct、hex 类型&#x2F;进制转换相关 str、repr、hash、dir 对象表述相关 len、getitem、setitem、contains、missing 序列相关 copy、deepcopy 对象拷贝相关 call、setattr、getattr、delattr 其他魔术方法 题目 24：函数参数_&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;arg&lt;/font&gt;_和&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;*kwargs&lt;/font&gt;分别代表什么？Python 中，函数的参数分为位置参数、可变参数、关键字参数、命名关键字参数。**args代表可变参数，可以接收0个或任意多个参数，当不确定调用者会传入多少个位置参数时，就可以使用可变参数，它会将传入的参数打包成一个元组。**kwargs代表关键字参数，可以接收用参数名&#x3D;参数值的方式传入的参数，传入的参数的会打包成一个字典。定义函数时如果同时使用*args和**kwargs*，那么函数可以接收任意参数。 题目 25：写一个记录函数执行时间的装饰器。点评：高频面试题，也是最简单的装饰器，面试者必须要掌握的内容。 方法一：用函数实现装饰器。 1234567891011121314from functools import wrapsfrom time import timedef record_time(func): @wraps(func) def wrapper(*args, **kwargs): start = time() result = func(*args, **kwargs) print(f&#x27;&#123;func.__name__&#125;执行时间: &#123;time() - start&#125;秒&#x27;) return result return wrapper 方法二：用类实现装饰器。类有*call*魔术方法，该类对象就是可调用对象，可以当做装饰器来使用。 12345678910111213141516from functools import wrapsfrom time import timeclass Record: def __call__(self, func): @wraps(func) def wrapper(*args, **kwargs): start = time() result = func(*args, **kwargs) print(f&#x27;&#123;func.__name__&#125;执行时间: &#123;time() - start&#125;秒&#x27;) return result return wrapper 说明：装饰器可以用来装饰类或函数，为其提供额外的能力，属于设计模式中的代理模式。 扩展：装饰器本身也可以参数化，例如上面的例子中，如果不希望在终端中显示函数的执行时间而是希望由调用者来决定如何输出函数的执行时间，可以通过参数化装饰器的方式来做到，代码如下所示。 12345678910111213141516171819from functools import wrapsfrom time import timedef record_time(output): &quot;&quot;&quot;可以参数化的装饰器&quot;&quot;&quot; def decorate(func): @wraps(func) def wrapper(*args, **kwargs): start = time() result = func(*args, **kwargs) output(func.__name__, time() - start) return result return wrapper return decorate 题目 26：什么是鸭子类型（duck typing）？鸭子类型是动态类型语言判断一个对象是不是某种类型时使用的方法，也叫做鸭子判定法。简单的说，鸭子类型是指判断一只鸟是不是鸭子，我们只关心它游泳像不像鸭子、叫起来像不像鸭子、走路像不像鸭子就足够了。换言之，如果对象的行为跟我们的预期是一致的（能够接受某些消息），我们就认定它是某种类型的对象。 在 Python 语言中，有很多 bytes-like 对象（如：bytes、bytearray、array.array、memoryview）、file-like 对象（如：StringIO、BytesIO、GzipFile、socket）、path-like 对象（如：str、bytes），其中 file-like 对象都能支持read和write操作，可以像文件一样读写，这就是所谓的对象有鸭子的行为就可以判定为鸭子的判定方法。再比如 Python 中列表的extend方法，它需要的参数并不一定要是列表，只要是可迭代对象就没有问题。 说明：动态语言的鸭子类型使得设计模式的应用被大大简化。 题目 27：说一下 Python 中变量的作用域。Python 中有四种作用域，分别是局部作用域（Local）、嵌套作用域（Embedded）、全局作用域（Global）、内置作用域（Built-in），搜索一个标识符时，会按照LEGB的顺序进行搜索，如果所有的作用域中都没有找到这个标识符，就会引发NameError异常。 题目 28：说一下你对闭包的理解。闭包是支持一等函数的编程语言（Python、JavaScript 等）中实现词法绑定的一种技术。当捕捉闭包的时候，它的自由变量（在函数外部定义但在函数内部使用的变量）会在捕捉时被确定，这样即便脱离了捕捉时的上下文，它也能照常运行。简单的说，可以将闭包理解为能够读取其他函数内部变量的函数。正在情况下，函数的局部变量在函数调用结束之后就结束了生命周期，但是闭包使得局部变量的生命周期得到了延展。使用闭包的时候需要注意，闭包会使得函数中创建的对象不会被垃圾回收，可能会导致很大的内存开销，所以闭包一定不能滥用。 题目 29：说一下 Python 中的多线程和多进程的应用场景和优缺点。线程是操作系统分配 CPU 的基本单位，进程是操作系统分配内存的基本单位。通常我们运行的程序会包含一个或多个进程，而每个进程中又包含一个或多个线程。多线程的优点在于多个线程可以共享进程的内存空间，所以线程间的通信非常容易实现；但是如果使用官方的 CPython 解释器，多线程受制于 GIL（全局解释器锁），并不能利用 CPU 的多核特性，这是一个很大的问题。使用多进程可以充分利用 CPU 的多核特性，但是进程间通信相对比较麻烦，需要使用 IPC 机制（管道、套接字等）。 多线程适合那些会花费大量时间在 I&#x2F;O 操作上，但没有太多并行计算需求且不需占用太多内存的 I&#x2F;O 密集型应用。多进程适合执行计算密集型任务（如：视频编码解码、数据处理、科学计算等）、可以分解为多个并行子任务并能合并子任务执行结果的任务以及在内存使用方面没有任何限制且不强依赖于 I&#x2F;O 操作的任务。 扩展：Python 中实现并发编程通常有多线程、多进程和异步编程三种选择。异步编程实现了协作式并发，通过多个相互协作的子程序的用户态切换，实现对 CPU 的高效利用，这种方式也是非常适合 I&#x2F;O 密集型应用的。 题目 30：说一下 Python 2 和 Python 3 的区别。点评：这种问题千万不要背所谓的参考答案，说一些自己最熟悉的就足够了。 Python 2 中的print和exec都是关键字，在 Python 3 中变成了函数。 Python 3 中没有long类型，整数都是int类型。 Python 2 中的不等号&lt;&gt;在 Python 3 中被废弃，统一使用!&#x3D;。 Python 2 中的xrange函数在 Python 3 中被range函数取代。 Python 3 对 Python 2 中不安全的input函数做出了改进，废弃了raw_input函数。 Python 2 中的file函数被 Python 3 中的open函数取代。 Python 2 中的&#x2F;运算对于int类型是整除，在 Python 3 中要用*&#x2F;&#x2F;*来做整除除法。 Python 3 中改进了 Python 2 捕获异常的代码，很明显 Python 3 的写法更合理。 Python 3 生成式中循环变量的作用域得到了更好的控制，不会影响到生成式之外的同名变量。 Python 3 中的round函数可以返回int或float类型，Python 2 中的round函数返回float类型。 Python 3 的str类型是 Unicode 字符串，Python 2 的str类型是字节串，相当于 Python 3 中的bytes。 Python 3 中的比较运算符必须比较同类对象。 Python 3 中定义类的都是新式类，Python 2 中定义的类有新式类（显式继承自object的类）和旧式类（经典类）之分，新式类和旧式类在 MRO 问题上有非常显著的区别，新式类可以使用class属性获取自身类型，新式类可以使用slots魔法。 Python 3 对代码缩进的要求更加严格，如果混用空格和制表键会引发TabError。 Python 3 中字典的keys、values、items方法都不再返回list对象，而是返回view object，内置的map、filter等函数也不再返回list对象，而是返回迭代器对象。 Python 3 标准库中某些模块的名字跟 Python 2 是有区别的；而在三方库方面，有些三方库只支持 Python 2，有些只能支持 Python 3。 题目 31：谈谈你对“猴子补丁”（monkey patching）的理解。“猴子补丁”是动态类型语言的一个特性，代码运行时在不修改源代码的前提下改变代码中的方法、属性、函数等以达到热补丁（hot patch）的效果。很多系统的安全补丁也是通过猴子补丁的方式来实现的，但实际开发中应该避免对猴子补丁的使用，以免造成代码行为不一致的问题。 在使用gevent库的时候，我们会在代码开头的地方执行gevent.monkey.patch_all()，这行代码的作用是把标准库中的socket模块给替换掉，这样我们在使用socket的时候，不用修改任何代码就可以实现对代码的协程化，达到提升性能的目的，这就是对猴子补丁的应用。 另外，如果希望用ujson三方库替换掉标准库中的json，也可以使用猴子补丁的方式，代码如下所示。 12345import json, ujsonjson.__name__ = &#x27;ujson&#x27;json.dumps = ujson.dumpsjson.loads = ujson.loads 单元测试中的Mock技术也是对猴子补丁的应用，Python 中的unittest.mock模块就是解决单元测试中用Mock对象替代被测对象所依赖的对象的模块。 题目 32：阅读下面的代码说出运行结果。123456789101112131415161718192021class A: def who(self): print(&#x27;A&#x27;, end=&#x27;&#x27;)class B(A): def who(self): super(B, self).who() print(&#x27;B&#x27;, end=&#x27;&#x27;)class C(A): def who(self): super(C, self).who() print(&#x27;C&#x27;, end=&#x27;&#x27;)class D(B, C): def who(self): super(D, self).who() print(&#x27;D&#x27;, end=&#x27;&#x27;)item = D()item.who() 点评：这道题考查到了两个知识点： Python 中的 MRO（方法解析顺序）。在没有多重继承的情况下，向对象发出一个消息，如果对象没有对应的方法，那么向上（父类）搜索的顺序是非常清晰的。如果向上追溯到object类（所有类的父类）都没有找到对应的方法，那么将会引发AttributeError异常。但是有多重继承尤其是出现菱形继承（钻石继承）的时候，向上追溯到底应该找到那个方法就得确定 MRO。Python 3 中的类以及 Python 2 中的新式类使用 C3 算法来确定 MRO，它是一种类似于广度优先搜索的方法；Python 2 中的旧式类（经典类）使用深度优先搜索来确定 MRO。在搞不清楚 MRO 的情况下，可以使用类的mro方法或mro属性来获得类的 MRO 列表。 super()函数的使用。在使用super函数时，可以通过super(类型, 对象)来指定对哪个对象以哪个类为起点向上搜索父类方法。所以上面B类代码中的super(B, self).who()表示以 B 类为起点，向上搜索self（D 类对象）的who方法，所以会找到C类中的who方法，因为D类对象的 MRO 列表是D –&gt; B –&gt; C –&gt; A –&gt; object。 1ACBD 题目 33：编写一个函数实现对逆波兰表达式求值，不能使用 Python 的内置函数。点评：逆波兰表达式也称为“后缀表达式”，相较于平常我们使用的“中缀表达式”，逆波兰表达式不需要括号来确定运算的优先级，例如5 _ (2 + 3)对应的逆波兰表达式是5 2 3 + _。逆波兰表达式求值需要借助栈结构，扫描表达式遇到运算数就入栈，遇到运算符就出栈两个元素做运算，将运算结果入栈。表达式扫描结束后，栈中只有一个数，这个数就是最终的运算结果，直接出栈即可。 12345678910111213141516171819202122232425262728293031323334353637383940import operatorclass Stack: &quot;&quot;&quot;栈（FILO）&quot;&quot;&quot; def __init__(self): self.elems = [] def push(self, elem): &quot;&quot;&quot;入栈&quot;&quot;&quot; self.elems.append(elem) def pop(self): &quot;&quot;&quot;出栈&quot;&quot;&quot; return self.elems.pop() @property def is_empty(self): &quot;&quot;&quot;检查栈是否为空&quot;&quot;&quot; return len(self.elems) == 0def eval_suffix(expr): &quot;&quot;&quot;逆波兰表达式求值&quot;&quot;&quot; operators = &#123; &#x27;+&#x27;: operator.add, &#x27;-&#x27;: operator.sub, &#x27;*&#x27;: operator.mul, &#x27;/&#x27;: operator.truediv &#125; stack = Stack() for item in expr.split(): if item.isdigit(): stack.push(float(item)) else: num2 = stack.pop() num1 = stack.pop() stack.push(operators[item](num1, num2)) return stack.pop() 题目 34：Python 中如何实现字符串替换操作？Python 中实现字符串替换大致有两类方法：字符串的replace方法和正则表达式的sub方法。 方法一：使用字符串的replace方法。 12message = &#x27;hello, world!&#x27;print(message.replace(&#x27;o&#x27;, &#x27;O&#x27;).replace(&#x27;l&#x27;, &#x27;L&#x27;).replace(&#x27;he&#x27;, &#x27;HE&#x27;)) 方法二：使用正则表达式的sub方法。 12345import remessage = &#x27;hello, world!&#x27;pattern = re.compile(&#x27;[aeiou]&#x27;)print(pattern.sub(&#x27;#&#x27;, message)) 扩展：还有一个相关的面试题，对保存文件名的列表排序，要求文件名按照字母表和数字大小进行排序，例如对于列表filenames &#x3D; [‘a12.txt’, ‘a8.txt’, ‘b10.txt’, ‘b2.txt’, ‘b19.txt’, ‘a3.txt’]，排序的结果是[‘a3.txt‘, ‘a8.txt‘, ‘a12.txt‘, ‘b2.txt‘, ‘b10.txt‘, ‘b19.txt‘]。提示一下，可以通过字符串替换的方式为文件名补位，根据补位后的文件名用sorted函数来排序，大家可以思考下这个问题如何解决。 题目 35：如何剖析 Python 代码的执行性能？剖析代码性能可以使用 Python 标准库中的cProfile和pstats模块，cProfile的run函数可以执行代码并收集统计信息，创建出Stats对象并打印简单的剖析报告。Stats是pstats模块中的类，它是一个统计对象。当然，也可以使用三方工具line_profiler和memory_profiler来剖析每一行代码耗费的时间和内存，这两个三方工具都会用非常友好的方式输出剖析结构。如果使用 PyCharm，可以利用“Run”菜单的“Profile”菜单项对代码进行性能分析，PyCharm 中可以用表格或者调用图（Call Graph）的方式来显示性能剖析的结果。 下面是使用cProfile剖析代码性能的例子。 example.py 12345678910111213141516171819202122232425262728293031import cProfiledef is_prime(num): for factor in range(2, int(num ** 0.5) + 1): if num % factor == 0: return False return Trueclass PrimeIter: def __init__(self, total): self.counter = 0 self.current = 1 self.total = total def __iter__(self): return self def __next__(self): if self.counter &lt; self.total: self.current += 1 while not is_prime(self.current): self.current += 1 self.counter += 1 return self.current raise StopIteration()cProfile.run(&#x27;list(PrimeIter(10000))&#x27;) 如果使用line_profiler三方工具，可以直接剖析is_prime函数每行代码的性能，需要给is_prime函数添加一个profiler装饰器，代码如下所示。 123456@profilerdef is_prime(num): for factor in range(2, int(num ** 0.5) + 1): if num % factor == 0: return False return True 安装line_profiler。 1pip install line_profiler 使用line_profiler。 1kernprof -lv example.py 运行结果如下所示。 12345678Line # Hits Time Per Hit % Time Line Contents============================================================== 1 @profile 2 def is_prime(num): 3 86624 48420.0 0.6 50.5 for factor in range(2, int(num ** 0.5) + 1): 4 85624 44000.0 0.5 45.9 if num % factor == 0: 5 6918 3080.0 0.4 3.2 return False 6 1000 430.0 0.4 0.4 return True 题目 36：如何使用&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;random&lt;/font&gt;模块生成随机数、实现随机乱序和随机抽样？点评：送人头的题目，因为 Python 标准库中的常用模块应该是 Python 开发者都比较熟悉的内容，这个问题回如果答不上来，整个面试基本也就砸锅了。 random.random()函数可以生成[0.0, 1.0)之间的随机浮点数。 random.uniform(a, b)函数可以生成[a, b]或[b, a]之间的随机浮点数。 random.randint(a, b)函数可以生成[a, b]或[b, a]之间的随机整数。 random.shuffle(x)函数可以实现对序列x的原地随机乱序。 random.choice(seq)函数可以从非空序列中取出一个随机元素。 random.choices(population, weights&#x3D;None, *, cum_weights&#x3D;None, k&#x3D;1)函数可以从总体中随机抽取（有放回抽样）出容量为k的样本并返回样本的列表，可以通过参数指定个体的权重，如果没有指定权重，个体被选中的概率均等。 random.sample(population, k)函数可以从总体中随机抽取（无放回抽样）出容量为k的样本并返回样本的列表。 扩展：random模块提供的函数除了生成均匀分布的随机数外，还可以生成其他分布的随机数，例如random.gauss(mu, sigma)函数可以生成高斯分布（正态分布）的随机数；random.paretovariate(alpha)函数会生成帕累托分布的随机数；random.gammavariate(alpha, beta)函数会生成伽马分布的随机数。 题目 37：解释一下线程池的工作原理。点评：池化技术就是一种典型空间换时间的策略，我们使用的数据库连接池、线程池等都是池化技术的应用，Python 标准库currrent.futures模块的ThreadPoolExecutor就是线程池的实现，如果要弄清楚它的工作原理，可以参考下面的内容。 线程池是一种用于减少线程本身创建和销毁造成的开销的技术，属于典型的空间换时间操作。如果应用程序需要频繁的将任务派发到线程中执行，线程池就是必选项，因为创建和释放线程涉及到大量的系统底层操作，开销较大，如果能够在应用程序工作期间，将创建和释放线程的操作变成预创建和借还操作，将大大减少底层开销。线程池在应用程序启动后，立即创建一定数量的线程，放入空闲队列中。这些线程最开始都处于阻塞状态，不会消耗 CPU 资源，但会占用少量的内存空间。当任务到来后，从队列中取出一个空闲线程，把任务派发到这个线程中运行，并将该线程标记为已占用。当线程池中所有的线程都被占用后，可以选择自动创建一定数量的新线程，用于处理更多的任务，也可以选择让任务排队等待直到有空闲的线程可用。在任务执行完毕后，线程并不退出结束，而是继续保持在池中等待下一次的任务。当系统比较空闲时，大部分线程长时间处于闲置状态时，线程池可以自动销毁一部分线程，回收系统资源。基于这种预创建技术，线程池将线程创建和销毁本身所带来的开销分摊到了各个具体的任务上，执行次数越多，每个任务所分担到的线程本身开销则越小。 一般线程池都必须具备下面几个组成部分： 线程池管理器：用于创建并管理线程池。 工作线程和线程队列：线程池中实际执行的线程以及保存这些线程的容器。 任务接口：将线程执行的任务抽象出来，形成任务接口，确保线程池与具体的任务无关。 任务队列：线程池中保存等待被执行的任务的容器。 题目 38：举例说明什么情况下会出现&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;KeyError&lt;/font&gt;、&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;TypeError&lt;/font&gt;、&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;ValueError&lt;/font&gt;。举一个简单的例子，变量a是一个字典，执行int(a[‘x’])这个操作就有可能引发上述三种类型的异常。如果字典中没有键x，会引发KeyError；如果键x对应的值不是str、float、int、bool以及bytes-like类型，在调用int函数构造int类型的对象时，会引发TypeError；如果a[x]是一个字符串或者字节串，而对应的内容又无法处理成int时，将引发ValueError。 题目 39：说出下面代码的运行结果。12345678910def extend_list(val, items=[]): items.append(val) return itemslist1 = extend_list(10)list2 = extend_list(123, [])list3 = extend_list(&#x27;a&#x27;)print(list1)print(list2)print(list3) 点评：Python 函数在定义的时候，默认参数items的值就被计算出来了，即[]。因为默认参数items引用了对象[]，每次调用该函数，如果对items引用的列表进行了操作，下次调用时，默认参数还是引用之前的那个列表而不是重新赋值为[]，所以列表中会有之前添加的元素。如果通过传参的方式为items重新赋值，那么items将引用到新的列表对象，而不再引用默认的那个列表对象。这个题在面试中经常被问到，通常不建议使用容器类型的默认参数，像 PyLint 这样的代码检查工具也会对这种代码提出质疑和警告。 123[10, &#x27;a&#x27;][123][10, &#x27;a&#x27;] 题目 40：如何读取大文件，例如内存只有 4G，如何读取一个大小为 8G 的文件？很显然 4G 内存要一次性的加载大小为 8G 的文件是不现实的，遇到这种情况必须要考虑多次读取和分批次处理。在 Python 中读取文件可以先通过open函数获取文件对象，在读取文件时，可以通过read方法的size参数指定读取的大小，也可以通过seek方法的offset参数指定读取的位置，这样就可以控制单次读取数据的字节数和总字节数。除此之外，可以使用内置函数iter将文件对象处理成迭代器对象，每次只读取少量的数据进行处理，代码大致写法如下所示。 123with open(&#x27;...&#x27;, &#x27;rb&#x27;) as file: for data in iter(lambda: file.read(2097152), b&#x27;&#x27;): pass 在 Linux 系统上，可以通过split命令将大文件切割为小片，然后通过读取切割后的小文件对数据进行处理。例如下面的命令将名为filename的大文件切割为大小为 512M 的多个文件。 1split -b 512m filename 如果愿意， 也可以将名为filename的文件切割为 10 个文件，命令如下所示。 1split -n 10 filename 扩展：外部排序跟上述的情况非常类似，由于处理的数据不能一次装入内存，只能放在读写较慢的外存储器（通常是硬盘）上。“排序-归并算法”就是一种常用的外部排序策略。在排序阶段，先读入能放在内存中的数据量，将其排序输出到一个临时文件，依此进行，将待排序数据组织为多个有序的临时文件，然后在归并阶段将这些临时文件组合为一个大的有序文件，这个大的有序文件就是排序的结果。 题目 41：说一下你对 Python 中模块和包的理解。每个 Python 文件就是一个模块，而保存这些文件的文件夹就是一个包，但是这个作为 Python 包的文件夹必须要有一个名为*init.py的文件，否则无法导入这个包。通常一个文件夹下还可以有子文件夹，这也就意味着一个包下还可以有子包，子包中的init*.py并不是必须的。模块和包解决了 Python 中命名冲突的问题，不同的包下可以有同名的模块，不同的模块下可以有同名的变量、函数或类。在 Python 中可以使用import或from … import …来导入包和模块，在导入的时候还可以使用as关键字对包、模块、类、函数、变量等进行别名，从而彻底解决编程中尤其是多人协作团队开发时的命名冲突问题。 题目 42：说一下你知道的 Python 编码规范。点评：企业的 Python 编码规范基本上是参照 PEP-8 或谷歌开源项目风格指南来制定的，后者还提到了可以使用 Lint 工具来检查代码的规范程度，面试的时候遇到这类问题，可以先说下这两个参照标准，然后挑重点说一下 Python 编码的注意事项。 空格的使用 使用空格来表示缩进而不要用制表符（Tab）。 和语法相关的每一层缩进都用 4 个空格来表示。 每行的字符数不要超过 79 个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上 4 个空格。 函数和类的定义，代码前后都要用两个空行进行分隔。 在同一个类中，各个方法之间应该用一个空行进行分隔。 二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。 标识符命名 变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。 类中受保护的实例属性，应该以一个下划线开头。 类中私有的实例属性，应该以两个下划线开头。 类和异常的命名，应该每个单词首字母大写。 模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。 类的实例方法，应该把第一个参数命名为self以表示对象自身。 类的类方法，应该把第一个参数命名为cls以表示该类自身。 表达式和语句 采用内联形式的否定词，而不要把否定词放在整个表达式的前面。例如：if a is not b就比if not a is b更容易让人理解。 不要用检查长度的方式来判断字符串、列表等是否为None或者没有元素，应该用if not x这样的写法来检查它。 就算if分支、for循环、except异常捕获等中只有一行代码，也不要将代码和if、for、except等写在一起，分开写才会让代码更清晰。 import语句总是放在文件开头的地方。 引入模块的时候，from math import sqrt比import math更好。 如果有多个import语句，应该将其分为三部分，从上到下分别是 Python标准模块、第三方模块和自定义模块，每个部分内部应该按照模块名称的字母表顺序来排列。 题目 43：运行下面的代码是否会报错，如果报错请说明哪里有什么样的错，如果不报错请说出代码的执行结果。123456789101112class A: def __init__(self, value): self.__value = value @property def value(self): return self.__valueobj = A(1)obj.__value = 2print(obj.value)print(obj.__value) 点评：这道题有两个考察点，一个考察点是对_和__开头的对象属性访问权限以及@property装饰器的了解，另外一个考察的点是对动态语言的理解，不需要过多的解释。 1212 扩展：如果不希望代码运行时动态的给对象添加新属性，可以在定义类时使用slots魔法。例如，我们可以在上面的A中添加一行slots &#x3D; (‘__value’, )，再次运行上面的代码，将会在原来的第 10 行处产生AttributeError错误。 题目 44：对下面给出的字典按值从大到小对键进行排序。123456789prices = &#123; &#x27;AAPL&#x27;: 191.88, &#x27;GOOG&#x27;: 1186.96, &#x27;IBM&#x27;: 149.24, &#x27;ORCL&#x27;: 48.44, &#x27;ACN&#x27;: 166.89, &#x27;FB&#x27;: 208.09, &#x27;SYMC&#x27;: 21.29&#125; 点评：sorted函数的高阶用法在面试的时候经常出现，key参数可以传入一个函数名或一个 Lambda 函数，该函数的返回值代表了在排序时比较元素的依据。 1sorted(prices, key=lambda x: prices[x], reverse=True) 题目 45：说一下&lt;font style=&quot;color:rgb(85, 87, 112);&quot;&gt;namedtuple&lt;/font&gt;的用法和作用。点评：Python 标准库的collections模块提供了很多有用的数据结构，这些内容并不是每个开发者都清楚，就比如题目问到的namedtuple，在我参加过的面试中，90%的面试者都不能准确的说出它的作用和应用场景。此外，deque也是一个非常有用但又经常被忽视的类，还有Counter、OrderedDict 、defaultdict 、UserDict等类，大家清楚它们的用法吗？ 在使用面向对象编程语言的时候，定义类是最常见的一件事情，有的时候，我们会用到只有属性没有方法的类，这种类的对象通常只用于组织数据，并不能接收消息，所以我们把这种类称为数据类或者退化的类，就像 C 语言中的结构体那样。我们并不建议使用这种退化的类，在 Python 中可以用namedtuple（命名元组）来替代这种类。 1234567from collections import namedtupleCard = namedtuple(&#x27;Card&#x27;, (&#x27;suite&#x27;, &#x27;face&#x27;))card1 = Card(&#x27;红桃&#x27;, 13)card2 = Card(&#x27;草花&#x27;, 5)print(f&#x27;&#123;card1.suite&#125;&#123;card1.face&#125;&#x27;)print(f&#x27;&#123;card2.suite&#125;&#123;card2.face&#125;&#x27;) 命名元组与普通元组一样是不可变容器，一旦将数据存储在namedtuple的顶层属性中，数据就不能再修改了，也就意味着对象上的所有属性都遵循“一次写入，多次读取”的原则。和普通元组不同的是，命名元组中的数据有访问名称，可以通过名称而不是索引来获取保存的数据，不仅在操作上更加简单，代码的可读性也会更好。 命名元组的本质就是一个类，所以它还可以作为父类创建子类。除此之外，命名元组内置了一系列的方法，例如，可以通过asdict方法将命名元组处理成字典，也可以通过replace方法创建命名元组对象的浅拷贝。 123456789101112class MyCard(Card): def show(self): faces = [&#x27;&#x27;, &#x27;A&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;10&#x27;, &#x27;J&#x27;, &#x27;Q&#x27;, &#x27;K&#x27;] return f&#x27;&#123;self.suite&#125;&#123;faces[self.face]&#125;&#x27;print(Card) # &lt;class &#x27;__main__.Card&#x27;&gt;card3 = MyCard(&#x27;方块&#x27;, 12)print(card3.show()) # 方块Qprint(dict(card1._asdict())) # &#123;&#x27;suite&#x27;: &#x27;红桃&#x27;, &#x27;face&#x27;: 13&#125;print(card2._replace(suite=&#x27;方块&#x27;)) # Card(suite=&#x27;方块&#x27;, face=5) 总而言之，命名元组能更好的组织数据结构，让代码更加清晰和可读，在很多场景下是元组、字典和数据类的替代品。在需要创建占用空间更少的不可变类时，命名元组就是很好的选择。 题目 46：按照题目要求写出对应的函数。要求：写一个函数，传入一个有若干个整数的列表，该列表中某个元素出现的次数超过了 50%，返回这个元素。 123456789101112def more_than_half(items): temp, times = None, 0 for item in items: if times == 0: temp = item times += 1 else: if item == temp: times += 1 else: times -= 1 return temp 点评：LeetCode 上的题目，在 Python 面试中出现过，利用元素出现次数超过了 50%这一特征，出现和temp相同的元素就将计数值加 1，出现和temp不同的元素就将计数值减 1。如果计数值为0，说明之前出现的元素已经对最终的结果没有影响，用temp记下当前元素并将计数值置为1。最终，出现次数超过了 50%的这个元素一定会被赋值给变量temp。 题目 47：按照题目要求写出对应的函数。要求：写一个函数，传入的参数是一个列表（列表中的元素可能也是一个列表），返回该列表最大的嵌套深度。例如：列表[1, 2, 3]的嵌套深度为1，列表[[1], [2, [3]]]的嵌套深度为3。 1234567def list_depth(items): if isinstance(items, list): max_depth = 1 for item in items: max_depth = max(list_depth(item) + 1, max_depth) return max_depth return 0 点评：看到题目应该能够比较自然的想到使用递归的方式检查列表中的每个元素。 题目 48：按照题目要求写出对应的装饰器。要求：有一个通过网络获取数据的函数（可能会因为网络原因出现异常），写一个装饰器让这个函数在出现指定异常时可以重试指定的次数，并在每次重试之前随机延迟一段时间，最长延迟时间可以通过参数进行控制。 方法一： 123456789101112131415161718192021from functools import wrapsfrom random import randomfrom time import sleepdef retry(*, retry_times=3, max_wait_secs=5, errors=(Exception, )): def decorate(func): @wraps(func) def wrapper(*args, **kwargs): for _ in range(retry_times): try: return func(*args, **kwargs) except errors: sleep(random() * max_wait_secs) return None return wrapper return decorate 方法二： 123456789101112131415161718192021222324from functools import wrapsfrom random import randomfrom time import sleepclass Retry(object): def __init__(self, *, retry_times=3, max_wait_secs=5, errors=(Exception, )): self.retry_times = retry_times self.max_wait_secs = max_wait_secs self.errors = errors def __call__(self, func): @wraps(func) def wrapper(*args, **kwargs): for _ in range(self.retry_times): try: return func(*args, **kwargs) except self.errors: sleep(random() * self.max_wait_secs) return None return wrapper 点评：我们不止一次强调过，装饰器几乎是 Python 面试必问内容，这个题目比之前的题目稍微复杂一些，它需要的是一个参数化的装饰器。 题目 49：写一个函数实现字符串反转，尽可能写出你知道的所有方法。点评：烂大街的题目，基本上算是送人头的题目。 方法一：反向切片 12def reverse_string(content): return content[::-1] 方法二：反转拼接 12def reverse_string(content): return &#x27;&#x27;.join(reversed(content)) 方法三：递归调用 1234def reverse_string(content): if len(content) &lt;= 1: return content return reverse_string(content[1:]) + content[0] 方法四：双端队列 123456from collections import dequedef reverse_string(content): q = deque() q.extendleft(content) return &#x27;&#x27;.join(q) 方法五：反向组装 1234567from io import StringIOdef reverse_string(content): buffer = StringIO() for i in range(len(content) - 1, -1, -1): buffer.write(content[i]) return buffer.getvalue() 方法六：反转拼接 12def reverse_string(content): return &#x27;&#x27;.join([content[i] for i in range(len(content) - 1, -1, -1)]) 方法七：半截交换 12345def reverse_string(content): length, content= len(content), list(content) for i in range(length // 2): content[i], content[length - 1 - i] = content[length - 1 - i], content[i] return &#x27;&#x27;.join(content) 方法八：对位交换 12345def reverse_string(content): length, content= len(content), list(content) for i, j in zip(range(length // 2), range(length - 1, length // 2 - 1, -1)): content[i], content[j] = content[j], content[i] return &#x27;&#x27;.join(content) 扩展：这些方法其实都是大同小异的，面试的时候能够给出几种有代表性的就足够了。给大家留一个思考题，上面这些方法，哪些做法的性能较好呢？我们之前提到过剖析代码性能的方法，大家可以用这些方法来检验下你给出的答案是否正确。 题目 50：按照题目要求写出对应的函数。要求：列表中有1000000个元素，取值范围是[1000, 10000)，设计一个函数找出列表中的重复元素。 1234567def find_dup(items: list): dups = [0] * 9000 for item in items: dups[item - 1000] += 1 for idx, val in enumerate(dups): if val &gt; 1: yield idx + 1000 点评：这道题的解法和计数排序的原理一致，虽然元素的数量非常多，但是取值范围[1000, 10000)并不是很大，只有 9000 个可能的取值，所以可以用一个能够保存 9000 个元素的dups列表来记录每个元素出现的次数，dups列表所有元素的初始值都是0，通过对items列表中元素的遍历，当出现某个元素时，将dups列表对应位置的值加 1，最后dups列表中值大于 1 的元素对应的就是items列表中重复出现过的元素。 更新: 2024-05-02 11:38:36原文: https://www.yuque.com/zacharyblock/cx2om6/slgtyqlpzyibq4yr","categories":[{"name":"Python 面经","slug":"Python-面经","permalink":"https://blockzachary.github.io/categories/Python-%E9%9D%A2%E7%BB%8F/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"面经","slug":"面经","permalink":"https://blockzachary.github.io/tags/%E9%9D%A2%E7%BB%8F/"}]},{"title":"面经","slug":"面经_面试题/面经","date":"2024-03-18T23:42:00.000Z","updated":"2024-03-18T23:42:00.000Z","comments":true,"path":"blog/2565273121/","permalink":"https://blockzachary.github.io/blog/2565273121/","excerpt":"","text":"面经一面网络和操作系统方面 说一下 TCP 的三次握手？ 什么时候用多线程？多线程的优势是什么？为什么用多线程不用多进程？python 的多线程 start 以后立马能起来吗？ 讲一下 IO 多路复用？ flask 方面 Flask 的底层原理讲一下？描述一下 flask 是怎么处理 url 请求的，整个底层流程是怎么样大概说下就行； endpoint 是啥，讲一下？ before request 有用过吗？触发 before request 钩子是在 view function 以前还是以后？ 常用的 rest 接口有哪些？你是怎么写类视图的？例子讲一下； 大概就这么多，其他问题的想不起来了 mysql 方面 讲下聚簇索引？ 聚簇索引的优点？ 为什么使用 B+树作为索引数据结构？ 你是怎么 sql 或者索引调优的？慢查询日志里面的内容是啥？ 数据库方面问的不多，比较简单，如果忘了可以看我右边这篇博客Github-Mysql 热点问题总结 redis 方面 redis 常用的数据类型有哪些？ 持久化 rdb 和 aof 讲一下 知道 redis 中 list 的底层实现原理吗？ redis 问也比较基础，如果忘了可以看右边这篇博客Github-Redis 热点问题总结 python 基础 用的是 python2 还是 3？为什么用 3？知道最新的稳定版本是哪个吗？ 知道 python3 的新特性吗？ 迭代器和生成器说一下？ 类方法用过吗？str和repr区别？ 类里面怎么实现iter？ GIL 讲一下？讲一下多线程下 GIL 和线程的关系？ 协程用过吗？yield 讲一下 二面 未来有什么职业规划？ 觉得杭州怎么样？ 觉得技术该如何深入？哪方面深入有想过吗？ 觉得 python 未来怎么样？python 机会这么少有考虑以后怎么深入学习吗？ 聊一下高并发下缓存和数据库双写一致问题？ 你有什么要问我的吗 https://zhuanlan.zhihu.com/p/657610494 更新: 2024-03-19 00:02:17原文: https://www.yuque.com/zacharyblock/cx2om6/htbuqvxbegprrme6","categories":[{"name":"Python 面经","slug":"Python-面经","permalink":"https://blockzachary.github.io/categories/Python-%E9%9D%A2%E7%BB%8F/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"面经","slug":"面经","permalink":"https://blockzachary.github.io/tags/%E9%9D%A2%E7%BB%8F/"}]},{"title":"面试题","slug":"面经_面试题/面试题","date":"2024-03-18T23:37:00.000Z","updated":"2024-03-18T23:37:00.000Z","comments":true,"path":"blog/1376120437/","permalink":"https://blockzachary.github.io/blog/1376120437/","excerpt":"","text":"面试题Python 基础语言特性1 Python 反转序列(列表、元组、字符串)的几种方法原文参考：Python 反转序列(列表、元组、字符串)的几种方法 2 Python 矩阵转置方法(二维列表行列互换)原文参考：Python 矩阵转置方法(二维列表行列互换) 3 Python 合并两个字典成一个新字典的几种方法分析比较原文参考：Python 合并两个字典成一个新字典的几种方法分析比较 4 用 pythonic 的方法合并两个列表成一个字典原文参考：用 pythonic 的方法合并两个列表成一个字典 5 三种 pythonic 的方法交换字典的键 keys 和值 values原文参考：三种 pythonic 的方法交换字典的键 keys 和值 values 6 Python 文件内容按行读取到列表中原文参考：Python 文件内容按行读取到列表中 7 Python 内置函数 any 和 all 的用法及示例原文参考：Python 内置函数 any 和 all 的用法及示例 8 Python2 和 Python3 中字典的 keys()、values()、items()方法的区别原文参考：Python2 和 Python3 中字典的 keys()、values()、items()方法的区别 Python 数据结构与算法1 剑指 offer-Python 版答案原文参考：剑指 offer-Python 版答案 2 Python 基于列表实现数据结构栈 stack 和队列 queue原文参考：Python 基于列表实现数据结构栈 stack 和队列 queue Python 实现经典编程题1 Python 求斐波那契数列的第 n 项几种方法原文参考：Python 求斐波那契数列的第 n 项几种方法 2 Python 解决跳台阶、变态跳台阶、矩形覆盖问题原文参考：[Python 解决跳台阶、变态跳台阶、矩形覆盖问题]( 更新: 2024-03-18 23:38:17原文: https://www.yuque.com/zacharyblock/cx2om6/mhqafzzferxw1206","categories":[{"name":"Python 面经","slug":"Python-面经","permalink":"https://blockzachary.github.io/categories/Python-%E9%9D%A2%E7%BB%8F/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"面经","slug":"面经","permalink":"https://blockzachary.github.io/tags/%E9%9D%A2%E7%BB%8F/"}]},{"title":"FastAPI实战汇总版","slug":"PythonWeb/FastAPI实战教学版本","date":"2024-03-09T00:06:00.000Z","updated":"2024-03-09T00:06:00.000Z","comments":true,"path":"blog/493630022/","permalink":"https://blockzachary.github.io/blog/493630022/","excerpt":"","text":"FastAPI 实战汇总版学生信息管理系统——前后端分离技术栈后端：FastAPI + SQLAlchemy 前端：Vue3 + Element-plus 数据库：MySQL 所需工具Pycharm、WebStorm、Postman 项目功能管理员 登录 学生管理 课程管理 选课管理 成绩管理 学生 登录、注册 查看、修改个人信息 查看课程、选课 查看成绩 查看、修改评价 环境介绍开发环境版本： Python3.10.11、Node.js16.9.0、Vue3、MySQL5.7.31 官方文档Node.js：https://nodejs.org/en Vue：https://cn.vuejs.org/ Vite：https://cn.vitejs.dev/guide/ Element-Plus：https://element-plus.org/zh-CN/ FastAPI：https://fastapi.tiangolo.com/zh/ SQLAlchemy：https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb 字节 Icon 库：https://iconpark.oceanengine.com/official 图片素材库：https://iconscout.com/ 项目初始化前端 Vue安装 Node.js进入官网 https://nodejs.org/download/release/v16.19.0/安装好 node.js 安装 vue-cli然后使用npm install -g @vue/cli命令安装 vue-cli 创建 vue 项目使用 vite 进行构建 通过npm create vite@latest studentfontend -- --template vue构建前端项目 1234567891011121314151617➜ ~ cd Documents/PythonCode➜ PythonCode mkdir studentProject➜ PythonCode cd studentProject➜ studentProject npm create vite@latest studentfontend -- --template vueScaffolding project in /Users/zachary/Documents/PythonCode/studentProject/studentfontend...Done. Now run: cd studentfontend npm install npm run dev➜ studentProject cd studentfontend➜ studentfontend lsREADME.md package.json srcindex.html public vite.config.js npm 源如果 npm 命令运行的时候很卡的话，尝试换源 npm config set registry [https://registry.npmmirror.com](https://registry.npmmirror.com) 打开 vue 项目使用 WebStorm 打开创建好的前端项目 先什么都不做，尝试把项目运行起来 123456789101112131415161718192021222324252627282930➜ studentfontend npm installnpm WARN EBADENGINE Unsupported engine &#123;npm WARN EBADENGINE package: &#x27;@vitejs/plugin-vue@5.0.4&#x27;,npm WARN EBADENGINE required: &#123; node: &#x27;^18.0.0 || &gt;=20.0.0&#x27; &#125;,npm WARN EBADENGINE current: &#123; node: &#x27;v16.19.0&#x27;, npm: &#x27;8.19.3&#x27; &#125;npm WARN EBADENGINE &#125;npm WARN EBADENGINE Unsupported engine &#123;npm WARN EBADENGINE package: &#x27;rollup@4.12.1&#x27;,npm WARN EBADENGINE required: &#123; node: &#x27;&gt;=18.0.0&#x27;, npm: &#x27;&gt;=8.0.0&#x27; &#125;,npm WARN EBADENGINE current: &#123; node: &#x27;v16.19.0&#x27;, npm: &#x27;8.19.3&#x27; &#125;npm WARN EBADENGINE &#125;npm WARN EBADENGINE Unsupported engine &#123;npm WARN EBADENGINE package: &#x27;vite@5.1.5&#x27;,npm WARN EBADENGINE required: &#123; node: &#x27;^18.0.0 || &gt;=20.0.0&#x27; &#125;,npm WARN EBADENGINE current: &#123; node: &#x27;v16.19.0&#x27;, npm: &#x27;8.19.3&#x27; &#125;npm WARN EBADENGINE &#125;up to date in 649ms➜ studentfontend npm run dev&gt; studentfontend@0.0.0 dev&gt; vite VITE v5.1.5 ready in 814 ms ➜ Local: http://127.0.0.1:5173/ ➜ Network: use --host to expose ➜ press h + enter to show help 项目整改现在我们把这个项目做好看些，为了学生信息管理系统做准备的， 需要把路由写好，同时修改主题色，还有 request http 的请求封装，选择一个自己喜欢的页面标题及 icon index.html修改项目下的 index.html 文件 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;学生信息管理系统&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;app&quot;&gt;&lt;/div&gt; &lt;script type=&quot;module&quot; src=&quot;/src/main.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; css&amp;imgs删除/assets下的vue.svg 在/src/assets路径下创建一个css和imgs目录 在创建好的/css目录下分别创建global.css和index.scss 全局 css 样式 1234567891011121314151617181920* &#123; box-sizing: border-box;&#125;body &#123; margin: 0; padding: 0; color: #252424;&#125;a &#123; text-decoration: none;&#125;.card &#123; background-color: rgb(255, 255, 255); border-radius: 5px; padding: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);&#125; 主题色配置文件 12345678910111213141516171819@forward &quot;element-plus/theme-chalk/src/common/var.scss&quot; with ( $colors: ( &quot;primary&quot;: ( &quot;base&quot;: #0a7fce ), &quot;success&quot;: ( &quot;base&quot;: #08b41f ), &quot;warning&quot;: ( &quot;base&quot;: #e8af56 ), &quot;danger&quot;: ( &quot;base&quot;: #ef3030 ), &quot;info&quot;: ( &quot;base&quot;: #5d66ea ) )); 路由设置在/src路径下创建一个router目录，在其中创建一个index.js文件 12345678910111213141516171819202122import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), &#125;, ], &#125;, ],&#125;);export default router; request 请求/src路径下创建一个utils目录，在其中创建一个request.js文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;../router&quot;;import axios from &quot;axios&quot;;const request = axios.create(&#123; baseURL: import.meta.env.VITE_BASE_URL, timeout: 30000, // 后台接口超时时间设置&#125;);// request 拦截器// 可以自请求发送前对请求做一些处理request.interceptors.request.use( (config) =&gt; &#123; config.headers[&quot;Content-Type&quot;] = &quot;application/json;charset=utf-8&quot;; return config; &#125;, (error) =&gt; &#123; return Promise.reject(error); &#125;);// response 拦截器// 可以在接口响应后统一处理结果request.interceptors.response.use( (response) =&gt; &#123; let res = response.data; // 如果是返回的文件 if (response.config.responseType === &quot;blob&quot;) &#123; return res; &#125; // 兼容服务端返回的字符串数据 if (typeof res === &quot;string&quot;) &#123; res = res ? JSON.parse(res) : res; &#125; // 当权限验证不通过的时候给出提示 if (res.code === &quot;401&quot;) &#123; ElMessage.error(res.msg); router.push(&quot;/login&quot;); &#125; return res; &#125;, (error) =&gt; &#123; console.log(&quot;err&quot; + error); return Promise.reject(error); &#125;);export default request; views/src路径下的/components修改为/views目录，将其中的HelloWorld.vue修改成Manager.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;管理员&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt;&lt;HomeFilled /&gt;&lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt;&lt;User /&gt;&lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt;&lt;SwitchButton /&gt;&lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 接着在/src/views路径下创建一个manager目录，在其中创建一个Home.vue文件 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div class=&quot;welcome-container&quot;&gt; &lt;div class=&quot;custom-card bg-white shadow rounded p-4 mb-5&quot;&gt; &lt;h2 class=&quot;text-center text-primary&quot;&gt;欢迎来到本系统&lt;/h2&gt; &lt;p class=&quot;text-center mt-3&quot;&gt; 您好 &lt;span :style=&quot;&#123; color: &#x27;#116ca9&#x27; &#125;&quot;&gt;&#123;&#123; user.username &#125;&#125;&lt;/span &gt;，祝您使用愉快！ &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import request from &quot;@/utils/request&quot;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.welcome-container &#123; display: flex; justify-content: center; align-items: center; min-height: calc(100vh - 100px); /* 根据实际项目需要调整高度 */&#125;.custom-card &#123; max-width: 400px; border: none;&#125;&lt;/style&gt; App.vue修改项目中的/src/App.vue 123&lt;template&gt; &lt;RouterView /&gt;&lt;/template&gt; main.js修改项目中的/src/main.js 1234567891011121314151617181920import &#123; createApp &#125; from &quot;vue&quot;;import App from &quot;./App.vue&quot;;import router from &quot;./router&quot;;import ElementPlus from &quot;element-plus&quot;;import zhCn from &quot;element-plus/dist/locale/zh-cn.mjs&quot;;import * as ElementPlusIconsVue from &quot;@element-plus/icons-vue&quot;;import &quot;@/assets/css/global.css&quot;;const app = createApp(App);app.use(router);app.use(ElementPlus, &#123; locale: zhCn,&#125;);app.mount(&quot;#app&quot;);for (const [key, component] of Object.entries(ElementPlusIconsVue)) &#123; app.component(key, component);&#125; .env在项目路径下创建两个文件.env.development、.env.production 1VITE_BASE_URL=&#x27;http://localhost:9090&#x27; 1VITE_BASE_URL=&#x27;http://:9090&#x27; json 配置修改项目路径下的文件：package.json 12345678910111213141516171819202122232425&#123; &quot;name&quot;: &quot;studentfontend&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vite&quot;, &quot;build&quot;: &quot;vite build&quot;, &quot;preview&quot;: &quot;vite preview&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;@element-plus/icons-vue&quot;: &quot;^2.1.0&quot;, &quot;axios&quot;: &quot;^1.6.2&quot;, &quot;element-plus&quot;: &quot;^2.4.2&quot;, &quot;sass&quot;: &quot;^1.69.5&quot;, &quot;unplugin-element-plus&quot;: &quot;^0.8.0&quot;, &quot;vue&quot;: &quot;^3.3.4&quot;, &quot;vue-router&quot;: &quot;^4.2.5&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;@vitejs/plugin-vue&quot;: &quot;^4.4.0&quot;, &quot;unplugin-auto-import&quot;: &quot;^0.16.7&quot;, &quot;unplugin-vue-components&quot;: &quot;^0.25.2&quot;, &quot;vite&quot;: &quot;^4.4.11&quot; &#125;&#125; vite.config.js修改项目路径下的文件：vite.config.js 12345678910111213141516171819202122232425262728293031323334353637383940import &#123; fileURLToPath, URL &#125; from &quot;node:url&quot;;import &#123; defineConfig &#125; from &quot;vite&quot;;import vue from &quot;@vitejs/plugin-vue&quot;;import AutoImport from &quot;unplugin-auto-import/vite&quot;;import Components from &quot;unplugin-vue-components/vite&quot;;import &#123; ElementPlusResolver &#125; from &quot;unplugin-vue-components/resolvers&quot;;import ElementPlus from &quot;unplugin-element-plus/vite&quot;;export default defineConfig(&#123; plugins: [ vue(), AutoImport(&#123; resolvers: [ElementPlusResolver(&#123; importStyle: &quot;sass&quot; &#125;)], &#125;), Components(&#123; resolvers: [ElementPlusResolver(&#123; importStyle: &quot;sass&quot; &#125;)], &#125;), ElementPlus(&#123; useSource: true, &#125;), ], resolve: &#123; alias: &#123; &quot;@&quot;: fileURLToPath(new URL(&quot;./src&quot;, import.meta.url)), &#125;, &#125;, css: &#123; preprocessorOptions: &#123; scss: &#123; additionalData: ` @use &quot;@/assets/css/index.scss&quot; as *; `, &#125;, &#125;, &#125;,&#125;); logo修改一下 logo 和标题的 icon 分别放在/public/favicon.ico和/src/assets/imgs/logo.png路径下 删除/public/vite.svg 可以去这个网站下载https://iconscout.com/icons https://iconscout.com/free-icon/library-2642818，将该图片保存为/src/assets/imgs/logo.png 或者https://iconscout.com/free-icon/student-79 https://iconscout.com/free-icon/student-reading-2909468，保存为/public/favicon.ico 运行命令运行1234567891011121314➜ studentfontend npm installadded 93 packages, removed 1 package, and changed 5 packages in 16s➜ studentfontend npm run dev&gt; studentfontend@0.0.0 dev&gt; vite VITE v4.5.2 ready in 1169 ms ➜ Local: http://127.0.0.1:5173/ ➜ Network: use --host to expose ➜ press h to show help 一键运行通过配置一个启动项，便捷运行项目 后端 FastAPI创建空项目新建一个项目进入 FastAPI 的世界 先创建项目文件夹 12345678➜ studentProject lltotal 0drwxr-xr-x@ 16 zachary staff 512B 3 10 20:25 studentfontend➜ studentProject mkdir studentbackend➜ studentProject lltotal 0drwxr-xr-x@ 2 zachary staff 64B 3 10 20:41 studentbackenddrwxr-xr-x@ 16 zachary staff 512B 3 10 20:25 studentfontend 然后使用 Pycharm 创建一个空项目 依赖包安装需要安装一个 FastAPI 的依赖包 命令安装pip install fastapi[all] requirements.txt 安装1fastapi[all] 实现一个 api创建项目目录下创建一个main.py 1234567891011# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)async def hello(): return &#123;&quot;message&quot;: &quot;Hello World&quot;&#125; 运行需要使用 fastapi 提供的一个uvicornASGI 网关服务器来启动 api 服务 命令运行uvicorn main:app --reload 一键运行 配置 main 函数 123456789101112131415# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)async def hello(): return &#123;&quot;message&quot;: &quot;Hello World&quot;&#125;if __name__ == &quot;__main__&quot;: uvicorn.run(&quot;main:app&quot;, reload=True) 启动配置项 以上两种方式均可以实现，具体看个人习惯 项目整改.env这个文件用于存放环境变量，包括项目的运行 ip、端口号等，后面的数据库环境变量也在这里存放 12HOST = &quot;localhost&quot;PORT = &quot;9090&quot; common在项目路径下创建一个/common的 package，用于实现公共类或者公共方法 环境变量配置文件在/common包下创建一个config.py文件，实现对环境变量的获取 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyimport osfrom pathlib import Pathfrom dotenv import load_dotenvclass Config: def __init__(self): dotenv_path = Path(__file__).parent.parent / &quot;.env&quot; load_dotenv(dotenv_path=dotenv_path) self._env = dict(os.environ) @property def env(self): return self._envconfig = Config() 在/common包下创建一个constant.py文件，用于配置常量 1234567# -*- coding:utf-8 -*-# Author: Zacharyfrom common.config import configHOST = config.env.get(&quot;HOST&quot;)PORT = config.env.get(&quot;PORT&quot;) 返回类 Result实现一下 api 的通用返回类，在/common包下创建一个result.py 123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelclass ResultBase: code: str msg: str data: dictclass ResultModel(BaseModel, ResultBase): passclass Result(ResultBase): def __init__(self, code, msg, data): self.code = code self.msg = msg self.data = data @classmethod def success(cls, data: object = None, code: str = &quot;200&quot;, msg: str = &quot;success&quot;): if not data: data = &#123;&#125; return cls(code, msg, data) @classmethod def error(cls, data: object = None, code: str = &quot;500&quot;, msg: str = &quot;error&quot;): if not data: data = &#123;&#125; return cls(code, msg, data) exception创建一个/exception的 package 用于自定义异常 api创建一个/api的 package，用于创建后端的 API，实际就是 Controller 层 init.py用于创建 FastAPI 应用初始化 123456# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI() adminApi.py创建一个 hello fastapi 接口测试一下项目 12345678910# -*- coding:utf-8 -*-# Author: Zacharyfrom api import appfrom common.result import Result@app.get(&quot;/&quot;)async def hello(): return Result.success() 然后新增了一个 api 文件之后需要给 api 的init.py 说明一下新增了一个 api 文件 12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()from api import adminApi service创建一个/service的 package 用于实现 Service 层的业务代码 model创建一个/model的 package 用于实现数据库的映射类 main用于启动 FastAPI 的主入口程序 12345678910# -*- coding:utf-8 -*-# Author: Zacharyfrom api import appimport uvicornfrom common.constant import HOST, PORTif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, host=HOST, port=int(PORT), reload=True) 运行直接运行 main.py 文件即可 出现这个就是访问成功啦 至此，我们的前端后端项目就都初始化好了 管理员登录前端Login首先绘制一个登录页面 参考 element-plus 官网提供的表单https://element-plus.org/zh-CN/component/form.html 在项目路径/src/views下创建一个Login.vue 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;template&gt; &lt;div&gt; &lt;div class=&quot;login-container&quot;&gt; &lt;div style=&quot;width: 420px&quot; class=&quot;login-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 登录&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot;&gt; &lt;el-form-item&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Avatar&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%;font-size: 18px&quot; &gt;登 录&lt;/el-button &gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:35px;text-align: right;font-size: 15px&quot;&gt; 还没有账号？请&lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;const data = reactive(&#123; form: &#123;&#125;,&#125;);&lt;/script&gt;&lt;style scoped&gt;.login-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.login-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 背景图片添加一张登录背景图片到/src/assets/imags/login_background.png https://iconscout.com/free-illustration/children-are-doing-chemical-experiments-10946611 路由添加在/src/router/index.js中添加一下上面这个Login的路由 123456789101112131415161718192021222324252627import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, ],&#125;);export default router; 通过http://localhost:5173/login可以访问到登录页面 表单校验和登录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;template&gt; &lt;div&gt; &lt;div class=&quot;login-container&quot;&gt; &lt;div style=&quot;width: 420px&quot; class=&quot;login-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 登录&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot;&gt; &lt;el-form-item prop=&quot;username&quot;&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Avatar&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot;&gt; &lt;el-input show-password style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%;font-size: 18px&quot; @click=&quot;login&quot; &gt;登 录&lt;/el-button &gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:35px;text-align: right;font-size: 15px&quot;&gt; 还没有账号？请&lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: &#123;&#125;,&#125;);const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const login = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .post(&quot;/login&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; localStorage.setItem(&quot;student-user&quot;, JSON.stringify(res.data)); ElMessage.success(&quot;登录成功&quot;); router.push(&quot;/home&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.login-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.login-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 后端数据库IDE 连接 MySQL 创建库首先在数据库中创建一个 student_info 库 创建 admin 表 插入一条数据 数据库配置查看 sqlalchemy 官方文档https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb requirements.txt通过 sqlalchemy 连接数据库需要增加两个驱动 123fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23 .env在.env 文件下添加数据库的配置信息 123456789HOST = &quot;localhost&quot;PORT = &quot;9090&quot;MYSQL_DIALECT = &quot;mysql+mysqldb&quot;MYSQL_HOST = &quot;localhost&quot;MYSQL_PORT = &quot;3306&quot;MYSQL_USER = &quot;root&quot;MYSQL_PASSWORD = &quot;980226&quot;MYSQL_DATABASE = &quot;student_info&quot; constant.py添加数据库配置常量 1234567891011121314# -*- coding:utf-8 -*-# Author: Zacharyfrom common.config import configHOST = config.env.get(&quot;HOST&quot;)PORT = config.env.get(&quot;PORT&quot;)MYSQL_DIALECT = config.env.get(&quot;MYSQL_DIALECT&quot;)MYSQL_HOST = config.env.get(&quot;MYSQL_HOST&quot;)MYSQL_PORT = config.env.get(&quot;MYSQL_PORT&quot;)MYSQL_USER = config.env.get(&quot;MYSQL_USER&quot;)MYSQL_PASSWORD = config.env.get(&quot;MYSQL_PASSWORD&quot;)MYSQL_DATABASE = config.env.get(&quot;MYSQL_DATABASE&quot;) model&#x2F;init.py12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import create_enginefrom sqlalchemy.orm import DeclarativeBase, sessionmakerfrom common.constant import *class Base(DeclarativeBase): pass# mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;engine = create_engine( f&quot;&#123;MYSQL_DIALECT&#125;://&#123;MYSQL_USER&#125;:&#123;MYSQL_PASSWORD&#125;@&#123;MYSQL_HOST&#125;:&#123;MYSQL_PORT&#125;/&#123;MYSQL_DATABASE&#125;?charset=utf8mb4&quot;, echo=True)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine) 管理员实体类定义在/model下创建一个admin.py文件 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False)class AdminModel(BaseModel): username: str password: str 管理员登录的 api 接口为了实现每一个 api 都能拿到一个连接数据库的 session，在/model/__init__.py中实现一个 session 的获取方法 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import create_enginefrom sqlalchemy.orm import DeclarativeBase, sessionmakerfrom common.constant import *class Base(DeclarativeBase): pass# mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;engine = create_engine( f&quot;&#123;MYSQL_DIALECT&#125;://&#123;MYSQL_USER&#125;:&#123;MYSQL_PASSWORD&#125;@&#123;MYSQL_HOST&#125;:&#123;MYSQL_PORT&#125;/&#123;MYSQL_DATABASE&#125;?charset=utf8mb4&quot;, echo=True)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)def get_db_session(): session = Session() try: yield session finally: session.close() adminApi12345678910111213141516# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import Body, Dependsfrom fastapi.encoders import jsonable_encoderfrom api import appfrom common.result import Result, ResultModelfrom model import Session, get_db_sessionfrom model.admin import AdminModelfrom service.adminService import AdminService@app.post(&quot;/login&quot;, response_model=ResultModel)async def login(admin: AdminModel = Body(...), db_session: Session = Depends(get_db_session)): dbadmin = AdminService.login(admin, db_session) return Result.success(jsonable_encoder(dbadmin)) adminService12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModelclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) result = db_session.execute(query).scalars().first() if not result: raise UserNotFoundException(&quot;用户不存在&quot;) if result.password != admin.password: raise PasswordNotMatchException(&quot;身份验证未通过&quot;) return result exception创建自定义异常的exception的 package 然后创建一个customException.py 1234567891011# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = message exceptionHandler在/api包下面创建一个exceptionHandler.py用于处理异常 12345678910111213141516171819202122232425262728# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result)) &#x2F;api&#x2F;init.py12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()from api import adminApi, exceptionHandler 测试postman 测试后端接口正确登录： 密码错误： 账号错误： 前后端测试跨域问题 发生了跨域 CORS 的问题 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler 正确账号密码： 错误账号： 错误密码： 数据库密码为了安全，数据库中的 password 不应该以明文显示，需要做个加密 这里需要使用到一个库 bcrypt 1234fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23bcrypt==4.1.1 密码加密通过hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt()) 依据生成的盐值，生成 hash 后的密码值，结果是字节码 12345678910(venv) ➜ studentbackend python3Python 3.10.11 (v3.10.11:7d4cc5aa85, Apr 4 2023, 19:05:19) [Clang 13.0.0 (clang-1300.0.29.30)] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import bcrypt&gt;&gt;&gt; password = &quot;admin&quot;&gt;&gt;&gt; hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())&gt;&gt;&gt; print(hashed_pw)b&#x27;$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum&#x27;&gt;&gt;&gt; print(hashed_pw.decode(&#x27;utf-8&#x27;))$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum 将密码对应的加密密码 $2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum 替换到数据库中的 admin 账号中（这一步操作其实应该是，在注册的时候将这个密码值写入数据库 de~） 密码验证通过bcrypt.check(check_pw.encode(), hashed_pw)检验密码是否匹配 给 Admin 实体类定义一个密码检查方法 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyimport bcryptfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) def password_check(self, password): return bcrypt.checkpw(password.encode(), self.password.encode())class AdminModel(BaseModel): username: str password: str 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModelclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) result = db_session.execute(query).scalars().first() if not result: raise UserNotFoundException(&quot;用户不存在&quot;) if result.password_check(admin.password) is False: raise PasswordNotMatchException(&quot;身份验证未通过&quot;) return result 前后端测试密码错误： 密码正确： JWT 权限校验在退出登录之后，依旧可以进入到主页面；同样后续其他 api 接口也需要在登录之后才能调用，需要加上 token，使用 JWT 实现。 前端首先从前端这块处理，除了 login 和后续会增加的 register 页面不需要登录才能访问，其他页面，都需要登录用户之后才能访问，否则自动跳转回 login 页面 请求头给请求头带上 token，提供给后端进行验证 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;../router&quot;;import axios from &quot;axios&quot;;const request = axios.create(&#123; baseURL: import.meta.env.VITE_BASE_URL, timeout: 30000, // 后台接口超时时间设置&#125;);// request 拦截器// 可以自请求发送前对请求做一些处理request.interceptors.request.use( (config) =&gt; &#123; const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); config.headers[&quot;Content-Type&quot;] = &quot;application/json;charset=utf-8&quot;; if (user) &#123; config.headers.Authorization = &quot;Bearer $&#123;user.token&#125;&quot;; &#125; return config; &#125;, (error) =&gt; &#123; return Promise.reject(error); &#125;);// response 拦截器// 可以在接口响应后统一处理结果request.interceptors.response.use( (response) =&gt; &#123; let res = response.data; // 如果是返回的文件 if (response.config.responseType === &quot;blob&quot;) &#123; return res; &#125; // 兼容服务端返回的字符串数据 if (typeof res === &quot;string&quot;) &#123; res = res ? JSON.parse(res) : res; &#125; // 当权限验证不通过的时候给出提示 if (res.code === &quot;401&quot;) &#123; ElMessage.error(res.msg); router.push(&quot;/login&quot;); &#125; return res; &#125;, (error) =&gt; &#123; console.log(&quot;err&quot; + error); return Promise.reject(error); &#125;);export default request; 路由实现在没有 token 的情况下无法进入主页而跳转到 login 页面，在路由守卫中进行判断和处理 1234567891011121314151617181920212223242526272829303132333435363738import &#123;createRouter, createWebHistory&#125; from &#x27;vue-router&#x27;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &#x27;/&#x27;, name: &#x27;Manager&#x27;, component: () =&gt; import(&#x27;@/views/Manager.vue&#x27;), redirect: &#x27;/home&#x27;, children: [ &#123; path: &#x27;home&#x27;, name: &#x27;Home&#x27;, component: () =&gt; import(&#x27;@/views/manager/Home.vue&#x27;), meta: &#123;requiresAuth: true&#125; &#125;, ] &#125;, &#123; path: &#x27;/login&#x27;, name: &#x27;Login&#x27;, component: () =&gt; import(&#x27;@/views/Login.vue&#x27;) &#125; ]&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some(record =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&#x27;student-user&#x27;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&#x27;/login&#x27;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;)export default router \u0000 测试不登录，无法进入 home 页面 登录后，才可以进入 home 页面 后端后端这块需要实现一下 jwt，包括密码的校验和生成，以及 token 的生成和校验；那么之前的密码校验就可以舍去了，写一个统一的 auth 验证 安装依赖这里需要两个依赖：pyjwt、passlib[bcrypt] 12345fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23pyjwtpasslib[bcrypt] AuthHandler密码生成与校验接下先来编写 密码的生成和校验，在项目目录的/common下创建一个auth.py 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.security import HTTPBearerfrom passlib.context import CryptContextclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password)if __name__ == &#x27;__main__&#x27;: auth = AuthHandler() print(auth.get_password_hash(&quot;admin&quot;)) print(auth.verify_password(&quot;admin&quot;, &#x27;$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum&#x27;)) print(auth.verify_password(&quot;123&quot;, &#x27;$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum&#x27;)) 其中的$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum是数据库中存储的 admin 的密码 运行一下 可以看到，之前使用 bcrypt 直接生成的 hash 密码，虽然与现在生成的不一样，但是依旧可以用于验证 修改一下 adminService 的验证逻辑，尝试一下登录 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.security import HTTPBearerfrom passlib.context import CryptContextclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password)auth_handler = AuthHandler() 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModelclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) result = db_session.execute(query).scalars().first() if not result: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(admin.password, result.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) return result token 的生成与校验通过装饰器实现一个，登录验证 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetime, timedeltaimport jwtfrom fastapi import Securityfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentialsfrom passlib.context import CryptContextfrom exception.customException import TokenExceptionclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password) def encode_token(self, user_id): payload = &#123; &#x27;exp&#x27;: datetime.utcnow() + timedelta(days=7, minutes=0, seconds=0), &#x27;iat&#x27;: datetime.utcnow(), &#x27;sub&#x27;: user_id &#125; return jwt.encode( payload, self.secret, algorithm=&#x27;HS256&#x27; ) def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=[&#x27;HS256&#x27;]) return payload[&#x27;sub&#x27;] except jwt.ExpiredSignatureError: raise TokenException(&quot;token过期&quot;) except jwt.InvalidTokenError: raise TokenException(&quot;无效token&quot;) def auth_required(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials)auth_handler = AuthHandler() 给customException.py添加一个自定义异常 123class TokenException(Exception): def __init__(self, message: str): self.message = message 给exceptionHandler.py添加一个异常处理 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result)) 这个先写到这，后面新增加 api 的时候进行一个验证 课程管理接下来开发一个课程管理功能，用于管理和显示学生课程的 数据库先设计一下课程数据表，命名为 course，字段（课程名称、课程编号、课程描述、课时、任课老师） 课程页面在前端的项目目录下的/manage下创建一个Course.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin: 0 0 0 10px&quot; plain &gt;查询&lt;/el-button &gt; &lt;el-button type=&quot;info&quot; plain&gt;重置&lt;/el-button&gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination background layout=&quot;prev, pager, next&quot; :total=&quot;1000&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [ &#123; id: 1, name: &quot;大学英语&quot;, number: &quot;001&quot;, description: &quot;大学英语不想学-6学分&quot;, periods: &quot;36课时&quot;, teacher: &quot;张三&quot;, &#125;, &#123; id: 2, name: &quot;高等数学&quot;, number: &quot;002&quot;, description: &quot;高等数学好难学-4学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;李四&quot;, &#125;, &#123; id: 3, name: &quot;必修物理&quot;, number: &quot;003&quot;, description: &quot;必修物理有难度-2学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;王五&quot;, &#125;, &#123; id: 4, name: &quot;思想政治&quot;, number: &quot;004&quot;, description: &quot;思想政治必修课-4学分&quot;, periods: &quot;18课时&quot;, teacher: &quot;赵六&quot;, &#125;, &#123; id: 5, name: &quot;微机原理&quot;, number: &quot;005&quot;, description: &quot;微机原理很基础-3学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;钱七&quot;, &#125;, &#123; id: 6, name: &quot;通信原理&quot;, number: &quot;006&quot;, description: &quot;通信原理很难懂-4学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;孙八&quot;, &#125;, &#123; id: 7, name: &quot;离散数学&quot;, number: &quot;007&quot;, description: &quot;离散数学很离散-2学分&quot;, periods: &quot;18课时&quot;, teacher: &quot;周九&quot;, &#125;, &#123; id: 8, name: &quot;工程制图&quot;, number: &quot;008&quot;, description: &quot;工程制图好有趣-3学分&quot;, periods: &quot;24课时&quot;, teacher: &quot;吴十&quot;, &#125;, ],&#125;);&lt;/script&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;管理员&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 课程查询 apiCourse 实体类定义在项目目录/model下创建一个course.py 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False) 课程管理 Api 接口courseApi在项目目录/api下创建一个courseApi.py 123456789101112131415161718192021222324# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_list = CourseService.select_page(db_session) result = Result.success(pageInfo.of(course_list)) return resultapp.include_router(course_router) 需要在/api/__init__.py下增加 courseApi 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi courseService在项目目录/service下创建一个courseService.py 123456789101112131415# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom model import Sessionfrom model.course import Courseclass CourseService: @staticmethod def select_page(db_session: Session): query = select(Course).order_by(desc(Course.id)) result = db_session.execute(query).scalars().all() return result 分页插件在项目路径的/common下创建一个pageHelper.py 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderclass Page: list: list total: int pageNum: int pageSize: int def __init__(self, list: list, total: int, pageNum: int, pageSize: int): self.list = list self.total = total self.pageNum = pageNum self.pageSize = pageSizeclass PageHelper: page: int size: int limit: int offset: int def __init__(self, page: int, size: int, limit: int, offset: int): self.page = page self.size = size self.limit = limit self.offset = offset @classmethod def startPage(cls, page: int, size: int): limit = size offset = size * (page - 1) return cls(page, size, limit, offset) def of(self, data): data_list = [jsonable_encoder(dataitem) for dataitem in data[self.offset:self.offset + self.limit]] data_total = len(data) page = Page(data_list, data_total, self.page, self.size) return jsonable_encoder(page) 测试 可以发现，请求是成功的，但就是没数据，因为数据库里面是空的，给数据库中插入数据 再次使用 postman 测试一下 增删查改实现数据分页前端这块需要调用分页查询的请求接口，并将结果显示出来 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin: 0 0 0 10px&quot; plain &gt;查询&lt;/el-button &gt; &lt;el-button type=&quot;info&quot; plain&gt;重置&lt;/el-button&gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [], total: 0,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: 1, pageSize: 5, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();&lt;/script&gt; 虽然可以显示一部分数据，但是这个换页有问题，不显示后续跳转的页面按钮 需要绑定一下这两个值 同时还需要，在换了页面之后也重新刷新一下数据，触发 current-change 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin: 0 0 0 10px&quot; plain &gt;查询&lt;/el-button &gt; &lt;el-button type=&quot;info&quot; plain&gt;重置&lt;/el-button&gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;&lt;/script&gt; 分页成功实现了 查询和重置为了实现依据课程名称实现筛查的功能，需要传递一个name字段传给后端进行数据库层面的模糊查询 重置按钮要将查询的内容清空，同时显示回完整的数据 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; load();&#125;;&lt;/script&gt; 后端123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_list = CourseService.select_page(name, db_session) result = Result.success(pageInfo.of(course_list)) return resultapp.include_router(course_router) 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom model import Sessionfrom model.course import Courseclass CourseService: @staticmethod def select_page(name, db_session: Session): query = select(Course).order_by(desc(Course.id)) if name: query = query.where(Course.name.like(f&quot;%&#123;name&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result 测试 查询扩展当需要筛选的字段不只是课程名称时，需要怎么处理；比如加上课程编号、任课教师进行多条件模糊查询 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;&lt;/script&gt; 后端12345678910111213141516171819202122232425262728293031# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearchfrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return resultapp.include_router(course_router) 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom model import Sessionfrom model.course import Course, CourseSearchclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False)class CourseSearch(BaseModel): name: str | None number: str | None teacher: str | None 测试 新增下面实现给课程表新增数据的功能，需要点击新增按钮后，出现弹窗 在官网找一个Dialog组件 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain&gt;编辑&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .post(&quot;/course/add&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;新增成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端1234567891011121314151617181920212223242526272829303132333435363738# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearch, CourseCreatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return resultapp.include_router(course_router) 123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import desc, selectfrom exception.customException import CourseExistExceptionfrom model import Sessionfrom model.course import Course, CourseSearch, CourseCreateclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_course(course: CourseCreate, db_session: Session): query = select(Course).where(Course.name == course.name) exist_course: Course = db_session.execute(query).scalars().all() if exist_course: raise CourseExistException(&quot;课程名已存在&quot;) course = Course(**course.dict()) db_session.add(course) db_session.commit() return course 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False)class CourseSearch(BaseModel): name: str | None number: str | None teacher: str | Noneclass CourseBase(BaseModel): name: str number: str description: str periods: str teacher: strclass CourseCreate(CourseBase): ... 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = message 1234567891011121314151617181920212223242526272829303132333435363738394041# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 测试 编辑点击数据中的编辑按钮可以对已有的课程数据，进行修改 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .request(&#123; url: data.form.id ? &quot;/course/update&quot; : &quot;/course/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true;&#125;;&lt;/script&gt; 后端123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return resultapp.include_router(course_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import desc, selectfrom common.utils import set_attrsfrom exception.customException import CourseExistException, CourseNotExistExceptionfrom model import Sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdateclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_course(course: CourseCreate, db_session: Session): query = select(Course).where(Course.name == course.name) exist_course: Course = db_session.execute(query).scalars().all() if exist_course: raise CourseExistException(&quot;课程名已存在&quot;) course = Course(**course.dict()) db_session.add(course) db_session.commit() return course @staticmethod def update_by_id(course: CourseUpdate, db_session: Session): query = select(Course).where(Course.id == course.id) exist_course: Course = db_session.execute(query).scalar() if not exist_course: raise CourseNotExistException(&quot;课程不存在&quot;) set_attrs(exist_course, jsonable_encoder(course)) db_session.commit() return exist_course 123456789101112131415161718192021222324252627282930313233343536373839# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Course(Base): __tablename__ = &quot;course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) description: Mapped[str] = mapped_column(String(255), nullable=False) periods: Mapped[str] = mapped_column(String(255), nullable=False) teacher: Mapped[str] = mapped_column(String(255), nullable=False)class CourseSearch(BaseModel): name: str | None number: str | None teacher: str | Noneclass CourseBase(BaseModel): name: str number: str description: str periods: str teacher: strclass CourseCreate(CourseBase): ...class CourseUpdate(CourseBase): id: int 实现给对象的属性更新的一个方法，在项目目录/common下，新建一个utils.py 123456789# -*- coding:utf-8 -*-# Author: Zachary# 用于更新对象属性def set_attrs(obj, data: dict): if data: for key, value in data.items(): setattr(obj, key, value) 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = message 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result)) 测试 删除点击已有课程数据中的删除按钮，实现删除数据表中对应数据 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .request(&#123; url: data.form.id ? &quot;/course/update&quot; : &quot;/course/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/course/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return result@course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): CourseService.delete_by_id(id, db_session) result = Result.success() return resultapp.include_router(course_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import desc, selectfrom common.utils import set_attrsfrom exception.customException import CourseExistException, CourseNotExistExceptionfrom model import Sessionfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdateclass CourseService: @staticmethod def select_page(course_search: CourseSearch, db_session: Session): query = select(Course).order_by(desc(Course.id)) if course_search.name: query = query.where(Course.name.like(f&quot;%&#123;course_search.name&#125;%&quot;)) if course_search.number: query = query.where(Course.number.like(f&quot;%&#123;course_search.number&#125;%&quot;)) if course_search.teacher: query = query.where(Course.teacher.like(f&quot;%&#123;course_search.teacher&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_course(course: CourseCreate, db_session: Session): query = select(Course).where(Course.name == course.name) exist_course: Course = db_session.execute(query).scalars().all() if exist_course: raise CourseExistException(&quot;课程名已存在&quot;) course = Course(**course.dict()) db_session.add(course) db_session.commit() return course @staticmethod def update_by_id(course: CourseUpdate, db_session: Session): exist_course: Course = check_course_exist(course.id, db_session) set_attrs(exist_course, jsonable_encoder(course)) db_session.commit() return exist_course @staticmethod def delete_by_id(id: int, db_session: Session): exist_course: Course = check_course_exist(id, db_session) db_session.delete(exist_course) db_session.commit() return exist_coursedef check_course_exist(course_id: int, db_session: Session): query = select(Course).where(Course.id == course_id) exist_course: Course = db_session.execute(query).scalar() if not exist_course: raise CourseNotExistException(&quot;课程不存在&quot;) return exist_course 测试先创建一个课程 然后删除 删除成功 API 鉴权为了不允许，任何人都可以调用后端的 api 接口，现在给 api 接口加上权限校验，只有登录过的才能调用后端的 api 接口，之前在auth.py中实现了一个校验，通过依赖注入给 api 直接加上即可 依赖注入比如给courseApi.py的所有接口加上 token 校验的依赖 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Query, Dependsfrom api import appfrom common.auth import auth_handlerfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.course import CourseSearch, CourseCreate, CourseUpdatefrom service.courseService import CourseServicecourse_router = APIRouter(prefix=&quot;/course&quot;)@course_router.get(&quot;/selectPage&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Course name&quot;), number: Optional[str] = Query(None, description=&quot;Course number&quot;), teacher: Optional[str] = Query(None, description=&quot;Course teacher&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) course_search = CourseSearch(name=name, number=number, teacher=teacher) course_list = CourseService.select_page(course_search, db_session) result = Result.success(pageInfo.of(course_list)) return result@course_router.post(&quot;/add&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def add(course: CourseCreate, db_session: Session = Depends(get_db_session)): CourseService.add_course(course, db_session) result = Result.success() return result@course_router.put(&quot;/update&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)): CourseService.update_by_id(course, db_session) result = Result.success() return result@course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def delete(id: int, db_session: Session = Depends(get_db_session)): CourseService.delete_by_id(id, db_session) result = Result.success() return resultapp.include_router(course_router) 这样如果没有登录的情况下，直接用 postman 是无法调用接口的 登录 token虽然现在前端页面上已经登录了，但由于请求头没有带上 token，所以无法获取数据 为了让浏览器拿到后端生成的这个 token，需要改变一下登录后的返回结果 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.admin import Admin, AdminModel, AdminLoginResponseclass AdminService: @staticmethod def login(admin: AdminModel, db_session: Session) -&gt; Admin: query = select(Admin).where(Admin.username == admin.username) exist_admin: Admin = db_session.execute(query).scalars().first() if not exist_admin: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(admin.password, exist_admin.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) admin_login_response = AdminLoginResponse(id=exist_admin.id, username=exist_admin.username, token=auth_handler.encode_token(exist_admin.id)) return admin_login_response 1234567891011121314151617181920212223242526272829# -*- coding:utf-8 -*-# Author: Zacharyimport bcryptfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) def password_check(self, password): return bcrypt.checkpw(password.encode(), self.password.encode())class AdminModel(BaseModel): username: str password: strclass AdminLoginResponse(BaseModel): id: int username: str token: str 这样子在重新登录之后就可以获得后端返回的 token，前端 axios 会在发起请求之前，将 token 放到请求头中，再向后端请求 api 接口 登录后会返回 token： 能正确获取数据： token 超时失效为了让前端的 token 失效之后，自动回到 Login 页面，需要做些调整 当请求 api 接口的时候返回的状态值为 401 的时候，移除存储的 student-user，这样就会自动跳转回 login 页面重新进行登录lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;课程信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程编号&quot;&gt; &lt;el-input v-model=&quot;data.form.number&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课程描述&quot;&gt; &lt;el-input v-model=&quot;data.form.description&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;课时&quot;&gt; &lt;el-input v-model=&quot;data.form.periods&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;任课教师&quot;&gt; &lt;el-input v-model=&quot;data.form.teacher&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123;&#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123;&#125;;&#125;;const save = () =&gt; &#123; request .request(&#123; url: data.form.id ? &quot;/course/update&quot; : &quot;/course/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/course/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; \u0000 token 超时配置为了更便捷地配置 token 的超时时间，设置一下超时时间常量 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom common.config import configHOST = config.env.get(&quot;HOST&quot;)PORT = config.env.get(&quot;PORT&quot;)MYSQL_DIALECT = config.env.get(&quot;MYSQL_DIALECT&quot;)MYSQL_HOST = config.env.get(&quot;MYSQL_HOST&quot;)MYSQL_PORT = config.env.get(&quot;MYSQL_PORT&quot;)MYSQL_USER = config.env.get(&quot;MYSQL_USER&quot;)MYSQL_PASSWORD = config.env.get(&quot;MYSQL_PASSWORD&quot;)MYSQL_DATABASE = config.env.get(&quot;MYSQL_DATABASE&quot;)TOKEN_EXPIRE_DAYS = 7TOKEN_EXPIRE_MINUTES = 0TOKEN_EXPIRE_SECONDS = 0 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetime, timedeltaimport jwtfrom fastapi import Securityfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentialsfrom passlib.context import CryptContextfrom common.constant import TOKEN_EXPIRE_DAYS, TOKEN_EXPIRE_MINUTES, TOKEN_EXPIRE_SECONDSfrom exception.customException import TokenExceptionclass AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;) secret = &quot;SECRET&quot; def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, plain_password, hashed_password): return self.pwd_context.verify(plain_password, hashed_password) def encode_token(self, user_id): payload = &#123; &#x27;exp&#x27;: datetime.utcnow() + timedelta(days=TOKEN_EXPIRE_DAYS, minutes=TOKEN_EXPIRE_MINUTES, seconds=TOKEN_EXPIRE_SECONDS), &#x27;iat&#x27;: datetime.utcnow(), &#x27;sub&#x27;: user_id &#125; return jwt.encode( payload, self.secret, algorithm=&#x27;HS256&#x27; ) def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=[&#x27;HS256&#x27;]) return payload[&#x27;sub&#x27;] except jwt.ExpiredSignatureError: raise TokenException(&quot;token过期&quot;) except jwt.InvalidTokenError: raise TokenException(&quot;无效token&quot;) def auth_required(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials)auth_handler = AuthHandler() 学生管理数据库先在数据库中创建一张学生信息表 Student 实体类定义在/model的包下创建一个student.py 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Student(Base): __tablename__ = &quot;student&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) phone: Mapped[str] = mapped_column(String(255), nullable=False) gender: Mapped[str] = mapped_column(String(255), nullable=False) birthday: Mapped[str] = mapped_column(String(255), nullable=False) avatar: Mapped[str] = mapped_column(String(255), nullable=False 学生登录前端-登录页面学生登录和 admin 的登录，我们复用同一个前端页面和后端接口，所以需要加一个role用以区分是 admin 登录了还是普通的 student 登录了；同时，不同用户进入页面之后。看到的内容应该是不同的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118&lt;template&gt; &lt;div&gt; &lt;div class=&quot;login-container&quot;&gt; &lt;div style=&quot;width: 420px&quot; class=&quot;login-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 登录&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot;&gt; &lt;el-form-item prop=&quot;username&quot;&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Avatar&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot;&gt; &lt;el-input show-password style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;role&quot;&gt; &lt;el-radio-group size=&quot;large&quot; v-model=&quot;data.form.role&quot;&gt; &lt;el-radio-button style=&quot;margin-left: 70px&quot; label=&quot;管理员&quot; value=&quot;ADMIN&quot; /&gt; &lt;el-radio-button style=&quot;margin-left: 50px&quot; label=&quot;学生&quot; value=&quot;STUDENT&quot; /&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%;font-size: 18px&quot; plain @click=&quot;login&quot; &gt;登 录&lt;/el-button &gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:35px;text-align: right;font-size: 15px&quot;&gt; 还没有账号？请&lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: &#123; role: &quot;ADMIN&quot; &#125;,&#125;);const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const login = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .post(&quot;/login&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; localStorage.setItem(&quot;student-user&quot;, JSON.stringify(res.data)); ElMessage.success(&quot;登录成功&quot;); router.push(&quot;/home&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.login-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.login-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 后端-管理员&#x2F;学生登录的 api 接口管理员和学生的登录复用同一个 api 接口 所以需要修改一下之前的登录逻辑 Account在/model下创建一个account.py，接收前端传递来的账号、密码、角色 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelclass AccountLogin(BaseModel): username: str password: str role: strclass AccountLoginResponse: id: int username: str name: str role: str token: str Student给 student 表追加role字段 给/model/student.py更新一下 12345678910111213141516171819# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Student(Base): __tablename__ = &quot;student&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) phone: Mapped[str] = mapped_column(String(255), nullable=False) gender: Mapped[str] = mapped_column(String(255), nullable=False) birthday: Mapped[str] = mapped_column(String(255), nullable=False) avatar: Mapped[str] = mapped_column(String(255), nullable=False) role: Mapped[str] = mapped_column(String(255), nullable=False) Admin给 admin 表追加name字段和role字段 给/model/admin.py更新一下 12345678910111213141516171819202122232425262728# -*- coding:utf-8 -*-# Author: Zacharyimport bcryptfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Admin(Base): __tablename__ = &quot;admin&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) role: Mapped[str] = mapped_column(String(255), nullable=False)class AdminModel(BaseModel): username: str password: strclass AdminLoginResponse(BaseModel): id: int username: str token: str Service在项目目录/service下创建一个studentService.py 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.account import AccountLogin, AccountLoginResponsefrom model.student import Studentclass StudentService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Student).where(Student.username == account.username) exist_student: Student = db_session.execute(query).scalars().first() if not exist_student: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_student.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_student)) account_login_response.token = auth_handler.encode_token(exist_student.id) return account_login_response 然后修改adminService.py 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import selectfrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchExceptionfrom model import Sessionfrom model.account import AccountLoginResponse, AccountLoginfrom model.admin import Adminclass AdminService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Admin).where(Admin.username == account.username) exist_admin: Admin = db_session.execute(query).scalars().first() if not exist_admin: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_admin.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_admin)) account_login_response.token = auth_handler.encode_token(exist_admin.id) return account_login_response Role创建一个枚举类 Role，用以区分学生和管理员 在/common下创建一个Enum.py 12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumclass Role(str, Enum): ADMIN = &quot;管理员&quot; STUDENT = &quot;学生&quot; API然后修改一下登录的 api 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import Dependsfrom fastapi.encoders import jsonable_encoderfrom api import appfrom common.Enum import Rolefrom common.result import Result, ResultModelfrom model import Session, get_db_sessionfrom model.account import AccountLoginfrom service.adminService import AdminServicefrom service.studentService import StudentService@app.post(&quot;/login&quot;, response_model=ResultModel)async def login(account: AccountLogin, db_session: Session = Depends(get_db_session)): if Role.ADMIN.name.__eq__(account.role): db_account = AdminService.login(account, db_session) elif Role.STUDENT.name.__eq__(account.role): db_account = StudentService.login(account, db_session) else: return Result.error(&quot;角色错误&quot;) return Result.success(jsonable_encoder(db_account)) 学生注册前端-注册页面写一下学生的注册页面，这里管理员就不参与注册了 在前端项目目录/views下创建一个Register.vue（这里我偷懒了，没有替换注册页的背景图，大家可以自行替换） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;template&gt; &lt;div&gt; &lt;div class=&quot;register-container&quot;&gt; &lt;div style=&quot;width: 400px&quot; class=&quot;register-box&quot;&gt; &lt;div class=&quot;title&quot;&gt;学生信息管理系统 - 注册&lt;/div&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot;&gt; &lt;el-form-item prop=&quot;username&quot;&gt; &lt;el-input style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;User&quot; v-model=&quot;data.form.username&quot; placeholder=&quot;请输入账号&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot;&gt; &lt;el-input show-password style=&quot;height: 40px;font-size: 18px&quot; prefix-icon=&quot;Lock&quot; v-model=&quot;data.form.password&quot; placeholder=&quot;请输入密码&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%&quot; plain @click=&quot;register&quot; &gt;注 册&lt;/el-button &gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div style=&quot;margin-top:30px;text-align: right&quot;&gt; 已有账号？请直接&lt;a href=&quot;/login&quot;&gt;登录&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: &#123;&#125;,&#125;);const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const register = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .post(&quot;/register&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;注册成功&quot;); router.push(&quot;/login&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.register-container &#123; min-height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; background-image: url(&quot;@/assets/imgs/login_background.png&quot;); background-size: cover;&#125;.register-box &#123; background-color: rgb(255, 255, 255, 50%); box-shadow: 0 0 10px rgba(84, 221, 245, 0.41); padding: 30px;&#125;.title &#123; font-weight: bold; font-size: 30px; text-align: center; margin-bottom: 35px;&#125;&lt;/style&gt; 添加一下注册页面的路由 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 后端-注册的 api 接口接下来实现一下，后端注册的逻辑 API因为这个注册只是给学生使用的，在项目目录/api下新建一个studentApi.py 123456789101112131415# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import Dependsfrom api import appfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.account import AccountRegisterfrom service.studentService import StudentService@app.post(&quot;/register&quot;, response_model=ResultModel)async def register(account: AccountRegister, db_session: Session = Depends(get_db_session)): StudentService.register(account, db_session) return Result.success() 添加一下 studentApi 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi 给account.py添加注册的请求体 12345678910111213141516171819202122# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelclass AccountLogin(BaseModel): username: str password: str role: strclass AccountLoginResponse: id: int username: str name: str role: str token: strclass AccountRegister(BaseModel): username: str password: str Service实现一下注册的 service 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import selectfrom common.Enum import Rolefrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchException, UserExistExceptionfrom model import Sessionfrom model.account import AccountLogin, AccountLoginResponse, AccountRegisterfrom model.student import Studentclass StudentService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Student).where(Student.username == account.username) exist_student: Student = db_session.execute(query).scalars().first() if not exist_student: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_student.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_student)) account_login_response.token = auth_handler.encode_token(exist_student.id) return account_login_response @staticmethod def register(account: AccountRegister, db_session: Session): query = select(Student).where(Student.username == account.username) exist_student = db_session.execute(query).scalars().first() if exist_student: raise UserExistException(&quot;账号已存在&quot;) new_student = Student() account.password = auth_handler.get_password_hash(account.password) set_attrs(new_student, jsonable_encoder(account)) if new_student.name is None: new_student.name = account.username new_student.role = Role.STUDENT.name db_session.add(new_student) db_session.commit() return new_student 添加自定义异常 12345678910111213141516171819202122232425262728293031# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = message 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 登录&#x2F;注册测试现在测试一下学生登录和注册的逻辑 学生注册 学生登录 现在登录进来了，但是右上角的显示不太对，等下改改 管理员登录 学生管理这块咱们做个设定，当管理员新增用户、替用户修改用户数据，密码必须重新设置为初始密码-123456 前端复制粘贴一下之前的Course.vue，命名为Student.vuelt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.username&quot; placeholder=&quot;请输入要查询的学生学号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的学生姓名&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;username&quot; label=&quot;学生学号&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;学生姓名&quot; /&gt; &lt;el-table-column prop=&quot;gender&quot; label=&quot;性别&quot; /&gt; &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机号&quot; /&gt; &lt;el-table-column prop=&quot;birthday&quot; label=&quot;出生日期&quot; /&gt; &lt;el-table-column prop=&quot;avatar&quot; label=&quot;头像&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;学生信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; :rules=&quot;rules&quot; ref=&quot;formRef&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;学生学号&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;data.form.username&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input v-model=&quot;data.form.password&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生姓名&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;性别&quot;&gt; &lt;el-radio-group v-model=&quot;data.form.gender&quot;&gt; &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt; &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机号&quot;&gt; &lt;el-input v-model=&quot;data.form.phone&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;出生日期&quot;&gt; &lt;el-date-picker format=&quot;YYYY-MM-DD&quot; value-format=&quot;YYYY-MM-DD&quot; v-model=&quot;data.form.birthday&quot; &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;头像&quot;&gt; &lt;el-input v-model=&quot;data.form.avatar&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; username: &quot;&quot;, name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123; password: &quot;123456&quot; &#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/student/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, username: data.username, name: data.name, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.username = &quot;&quot;; data.name = &quot;&quot;; load();&#125;;const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入学生学号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123; password: &quot;123456&quot; &#125;;&#125;;const save = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .request(&#123; url: data.form.id ? &quot;/student/update&quot; : &quot;/student/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true; data.form.password = &quot;123456&quot;;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/student/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;管理员&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端直接一次性实现学生管理的增删查改 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import Depends, APIRouter, Queryfrom api import appfrom common.auth import auth_handlerfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.account import AccountRegisterfrom model.student import StudentSearch, StudentCreate, StudentUpdatefrom service.studentService import StudentService@app.post(&quot;/register&quot;, response_model=ResultModel)async def register(account: AccountRegister, db_session: Session = Depends(get_db_session)): StudentService.register(account, db_session) return Result.success()student_router = APIRouter(prefix=&quot;/student&quot;)@student_router.get(&quot;/selectPage&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), username: Optional[str] = Query(None, description=&quot;Student username&quot;), name: Optional[str] = Query(None, description=&quot;Student name&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) student_search = StudentSearch(username=username, name=name) student_list = StudentService.select_page(student_search, db_session) return Result.success(pageInfo.of(student_list))@student_router.post(&quot;/add&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def add(student: StudentCreate, db_session: Session = Depends(get_db_session)): StudentService.add_student(student, db_session) return Result.success()@student_router.put(&quot;/update&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def update(student: StudentUpdate, db_session: Session = Depends(get_db_session)): StudentService.update_by_id(student, db_session) return Result.success()@student_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])async def delete(id: int, db_session: Session = Depends(get_db_session)): StudentService.delete_by_id(id, db_session) return Result.success()app.include_router(student_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, ascfrom common.Enum import Rolefrom common.auth import auth_handlerfrom common.utils import set_attrsfrom exception.customException import UserNotFoundException, PasswordNotMatchException, UserExistExceptionfrom model import Sessionfrom model.account import AccountLogin, AccountLoginResponse, AccountRegisterfrom model.student import Student, StudentCreate, StudentUpdateclass StudentService: @staticmethod def login(account: AccountLogin, db_session: Session) -&gt; AccountLoginResponse: query = select(Student).where(Student.username == account.username) exist_student: Student = db_session.execute(query).scalars().first() if not exist_student: raise UserNotFoundException(&quot;用户不存在&quot;) if not auth_handler.verify_password(account.password, exist_student.password): raise PasswordNotMatchException(&quot;身份验证未通过&quot;) account_login_response = AccountLoginResponse() set_attrs(account_login_response, jsonable_encoder(exist_student)) account_login_response.token = auth_handler.encode_token(exist_student.id) return account_login_response @staticmethod def register(account: AccountRegister, db_session: Session): query = select(Student).where(Student.username == account.username) exist_student = db_session.execute(query).scalars().first() if exist_student: raise UserExistException(&quot;账号已存在&quot;) new_student = Student() account.password = auth_handler.get_password_hash(account.password) set_attrs(new_student, jsonable_encoder(account)) if new_student.name is None: new_student.name = account.username new_student.role = Role.STUDENT.name db_session.add(new_student) db_session.commit() return new_student @staticmethod def select_page(student_search: Student, db_session: Session): query = select(Student).order_by(asc(Student.id)) if student_search.username: query = query.where(Student.username.like(f&quot;%&#123;student_search.username&#125;%&quot;)) if student_search.name: query = query.where(Student.name.like(f&quot;%&#123;student_search.name&#125;%&quot;)) result = db_session.execute(query).scalars().all() return result @staticmethod def add_student(student: StudentCreate, db_session: Session): query = select(Student).where(Student.username == student.username) exist_student = db_session.execute(query).scalars().all() if exist_student: raise UserExistException(&quot;账号已存在&quot;) student.password = auth_handler.get_password_hash(student.password) student = Student(**student.dict()) if student.name is None: student.name = student.username student.role = Role.STUDENT.name db_session.add(student) db_session.commit() return student @staticmethod def update_by_id(student: StudentUpdate, db_session: Session): exist_student: Student = check_student_exist(student.id, db_session) student.password = auth_handler.get_password_hash(student.password) set_attrs(exist_student, jsonable_encoder(student)) db_session.commit() return exist_student @staticmethod def delete_by_id(id: int, db_session: Session): exist_student: Student = check_student_exist(id, db_session) db_session.delete(exist_student) db_session.commit() return exist_studentdef check_student_exist(student_id: int, db_session: Session): query = select(Student).where(Student.id == student_id) exist_student: Student = db_session.execute(query).scalar() if not exist_student: raise UserNotFoundException(&quot;账号不存在&quot;) return exist_student 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom pydantic import BaseModel, Fieldfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Baseclass Student(Base): __tablename__ = &quot;student&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) username: Mapped[str] = mapped_column(String(255), nullable=False) password: Mapped[str] = mapped_column(String(255), nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) phone: Mapped[str] = mapped_column(String(255), nullable=False) gender: Mapped[str] = mapped_column(String(255), nullable=False) birthday: Mapped[str] = mapped_column(String(255), nullable=False) avatar: Mapped[str] = mapped_column(String(255), nullable=False) role: Mapped[str] = mapped_column(String(255), nullable=False)class StudentBase(BaseModel): username: str password: str = Field(..., min_length=1) name: Optional[str] = None role: Optional[str] = Noneclass StudentSearch(BaseModel): username: str | None name: str | Noneclass StudentCreate(StudentBase): phone: Optional[str] = None gender: Optional[str] = None birthday: Optional[str] = Field(None) avatar: Optional[str] = Field(None)class StudentUpdate(StudentCreate): id: int 测试增 删 查 改 但是修改过后，密码会被强制重置为 123456 限制权限现在不管普通的学生还是管理员都能看到管理页面 这不符合 需要加入一个权限v-if=&quot;user.role === &#39;ADMIN&#39;&quot; 顺便修改一下右上角和主页显示的用户名称 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img src=&quot;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div class=&quot;welcome-container&quot;&gt; &lt;div class=&quot;custom-card bg-white shadow rounded p-4 mb-5&quot;&gt; &lt;h2 class=&quot;text-center text-primary&quot;&gt;欢迎来到本系统&lt;/h2&gt; &lt;p class=&quot;text-center mt-3&quot;&gt; 您好 &lt;span :style=&quot;&#123; color: &#x27;#116ca9&#x27; &#125;&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span &gt;，祝您使用愉快！ &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import request from &quot;@/utils/request&quot;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.welcome-container &#123; display: flex; justify-content: center; align-items: center; min-height: calc(100vh - 100px); /* 根据实际项目需要调整高度 */&#125;.custom-card &#123; max-width: 400px; border: none;&#125;&lt;/style&gt; 普通学生登录 管理员登录 个人页面文件上传与下载依赖包需要安装一下werkzeug这个包 \u0000 123456fastapi[all]mysqlclient==2.1.1SQLAlchemy==2.0.23pyjwtpasslib[bcrypt]werkzeug fileApi为了实现头像上传的功能创建一个新的fileApi.py 注意： StreamingResponse 引得是from fastapi.responses import StreamingResponse secure_filename 引得是from werkzeug.utils import secure_filename 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# -*- coding:utf-8 -*-# Author: Zacharyimport mimetypesimport osfrom datetime import datetimefrom fastapi.encoders import jsonable_encoderfrom werkzeug.utils import secure_filenamefrom fastapi.responses import StreamingResponsefrom fastapi import APIRouter, UploadFilefrom api import appfrom common.constant import HOST, PORTfrom common.profile import Profilefrom common.result import ResultModel, Resultfrom exception.customException import FileNotFoundExceptionfile_router = APIRouter(prefix=&quot;/files&quot;)@file_router.post(&quot;/upload&quot;, response_model=ResultModel)async def upload(file: UploadFile): original_filename = secure_filename(file.filename) timestamp = int(datetime.now().timestamp()) unique_filename = f&quot;&#123;timestamp&#125;_&#123;original_filename&#125;&quot; file_save_path = Profile.get_files_path() # 创建保存文件的完整路径 file_final_path = file_save_path.joinpath(unique_filename) # 将文件保存到指定位置 with open(file_final_path, &#x27;wb&#x27;) as buffer_file: content = await file.read() buffer_file.write(content) # 构建文件访问URL url = f&quot;http://&#123;HOST&#125;:&#123;PORT&#125;/files/download?filename=&#123;unique_filename&#125;&quot; return Result.success(jsonable_encoder(&#123;&quot;url&quot;: url&#125;))@file_router.get(&quot;/download&quot;)async def download(filename: str): file_save_path = Profile.get_files_path() file_path = file_save_path.joinpath(filename) if not file_path.exists(): raise FileNotFoundException(&quot;文件不存在&quot;) # 用于触发下载文件的 # return FileResponse(file_path, media_type=&#x27;image/png&#x27;, filename=filename) mime_type, _ = mimetypes.guess_type(file_path) # 创建一个StreamingResponse，以便流式传输大文件，同时设置正确的MIME类型 response = StreamingResponse( open(file_path, &#x27;rb&#x27;), media_type=mime_type, ) # 不设置Content-Disposition，避免浏览器触发下载 return responseapp.include_router(file_router) 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi, fileApi Profile在项目目录/common下创建一个profile.py，用于获取项目目录路径 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom pathlib import Pathclass Profile: __file_path = None @staticmethod def get_files_path(): project_path = Path(__file__).parent.parent # 获取项目根目录 file_path = project_path.joinpath(&quot;files&quot;) if not file_path.exists(): file_path.mkdir(parents=True) Profile.__file_path = file_path return file_path 自定义异常123456789101112131415161718192021222324252627282930313233343536# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = message 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result)) 测试使用 postman 测试一下 上传 下载 完善图片上传修改一下Student.vue头像上传的功能lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.username&quot; placeholder=&quot;请输入要查询的学生学号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的学生姓名&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-button type=&quot;primary&quot; style=&quot;margin-bottom: 5px&quot; plain @click=&quot;handleAdd&quot; &gt;新增&lt;/el-button &gt; &lt;/div&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;username&quot; label=&quot;学生学号&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;学生姓名&quot; /&gt; &lt;el-table-column prop=&quot;gender&quot; label=&quot;性别&quot; /&gt; &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机号&quot; /&gt; &lt;el-table-column prop=&quot;birthday&quot; label=&quot;出生日期&quot; /&gt; &lt;el-table-column prop=&quot;avatar&quot; label=&quot;头像&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-image v-if=&quot;scope.row.avatar&quot; :src=&quot;scope.row.avatar&quot; :preview-src-list=&quot;[scope.row.avatar]&quot; style=&quot;width: 40px; height: 40px&quot; &gt;&lt;/el-image&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; &gt;编辑&lt;/el-button &gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;handleDelete(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;el-dialog width=&quot;35%&quot; v-model=&quot;data.formVisible&quot; title=&quot;学生信息&quot;&gt; &lt;el-form :model=&quot;data.form&quot; :rules=&quot;rules&quot; ref=&quot;formRef&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 45px&quot; &gt; &lt;el-form-item label=&quot;学生学号&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;data.form.username&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input v-model=&quot;data.form.password&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生姓名&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;性别&quot;&gt; &lt;el-radio-group v-model=&quot;data.form.gender&quot;&gt; &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt; &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机号&quot;&gt; &lt;el-input v-model=&quot;data.form.phone&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;出生日期&quot;&gt; &lt;el-date-picker format=&quot;YYYY-MM-DD&quot; value-format=&quot;YYYY-MM-DD&quot; v-model=&quot;data.form.birthday&quot; &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;头像&quot;&gt; &lt;el-upload action=&quot;http://localhost:9090/files/upload&quot; list-type=&quot;picture&quot; :on-success=&quot;handleImgUploadSuccess&quot; &gt; &lt;el-button type=&quot;primary&quot;&gt;上传头像 &lt;/el-button&gt; &lt;/el-upload&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;data.formVisible = false&quot; plain&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot; plain&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive, ref &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; username: &quot;&quot;, name: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, formVisible: false, form: &#123; password: &quot;123456&quot; &#125;,&#125;);const load = () =&gt; &#123; request .get(&quot;/student/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, username: data.username, name: data.name, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.username = &quot;&quot;; data.name = &quot;&quot;; load();&#125;;const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入学生学号&quot;, trigger: &quot;blur&quot; &#125;], password: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],&#125;);const formRef = ref();const handleAdd = () =&gt; &#123; data.formVisible = true; data.form = &#123; password: &quot;123456&quot; &#125;;&#125;;const save = () =&gt; &#123; formRef.value.validate((valid) =&gt; &#123; if (valid) &#123; request .request(&#123; url: data.form.id ? &quot;/student/update&quot; : &quot;/student/add&quot;, method: data.form.id ? &quot;put&quot; : &quot;post&quot;, data: data.form, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;); &#125; &#125;);&#125;;const handleEdit = (row) =&gt; &#123; data.form = JSON.parse(JSON.stringify(row)); data.formVisible = true; data.form.password = &quot;123456&quot;;&#125;;const handleDelete = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/student/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;删除成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;const handleImgUploadSuccess = (res) =&gt; &#123; data.form.avatar = res.data.url;&#125;;&lt;/script&gt; 个人资料在项目目录/manager文件夹下面创建一个Person.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;width: 50%; padding: 40px&quot;&gt; &lt;el-form :model=&quot;data.form&quot; ref=&quot;formRef&quot; :rules=&quot;rules&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;头像&quot;&gt; &lt;el-upload class=&quot;avatar-uploader&quot; action=&quot;http://localhost:9090/files/upload&quot; :show-file-list=&quot;false&quot; :on-success=&quot;handleImgUploadSuccess&quot; &gt; &lt;img v-if=&quot;data.form.avatar&quot; :src=&quot;data.form.avatar&quot; class=&quot;avatar&quot; /&gt; &lt;el-icon v-else class=&quot;avatar-uploader-icon&quot;&gt; &lt;Plus /&gt; &lt;/el-icon&gt; &lt;/el-upload&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生学号&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;data.form.username&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input show-password v-model=&quot;data.form.password&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生姓名&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;性别&quot;&gt; &lt;el-radio-group v-model=&quot;data.form.gender&quot;&gt; &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt; &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机号&quot;&gt; &lt;el-input v-model=&quot;data.form.phone&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;出生日期&quot;&gt; &lt;el-date-picker format=&quot;YYYY-MM-DD&quot; value-format=&quot;YYYY-MM-DD&quot; v-model=&quot;data.form.birthday&quot; &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item style=&quot;padding-left: 60%&quot;&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;update&quot;&gt;保存&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref, reactive &#125; from &quot;vue&quot;;import &#123; Plus &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage &#125; from &quot;element-plus&quot;;import router from &quot;@/router&quot;;const data = reactive(&#123; form: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);if (data.form) &#123; data.form.password = &quot;&quot;;&#125;const rules = reactive(&#123; username: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;], password: [ &#123; required: true, message: &quot;修改个人资料必须重新输入密码&quot;, trigger: &quot;blur&quot;, &#125;, ],&#125;);const update = () =&gt; &#123; request .put(&quot;/student/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); router.push(&quot;/login&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;const handleImgUploadSuccess = (res) =&gt; &#123; data.form.avatar = res.data;&#125;;&lt;/script&gt;&lt;style&gt;.avatar-uploader .el-upload &#123; border: 1px dashed #d9d9d9; border-radius: 6px; cursor: pointer; position: relative; overflow: hidden;&#125;.avatar-uploader .el-upload:hover &#123; border-color: #409eff;&#125;.el-icon.avatar-uploader-icon &#123; font-size: 28px; color: #8c939d; width: 100px; height: 100px; line-height: 100px; text-align: center;&#125;.avatar &#123; width: 100px; height: 100px; display: block;&#125;&lt;/style&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 学生选课功能数据库新增一张学生选课表 前端学生选课页面，把 Course 页面复制粘贴一份，命名为CourseList.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.teacher&quot; placeholder=&quot;请输入任课老师&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;80&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;课程描述&quot; width=&quot;240&quot; /&gt; &lt;el-table-column prop=&quot;periods&quot; label=&quot;课时&quot; width=&quot;180&quot; /&gt; &lt;el-table-column prop=&quot;teacher&quot; label=&quot;任课教师&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;selectCourse(scope.row)&quot; &gt;选课&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, teacher: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 5, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; request .get(&quot;/course/selectPage&quot;, &#123; params: &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, teacher: data.teacher, &#125;, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取课程数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; data.teacher = &quot;&quot;; load();&#125;;const selectCourse = (row) =&gt; &#123; request .post(&quot;/studentCourse/add&quot;, &#123; studentId: data.user.id, name: row.name, number: row.number, courseId: row.id, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;选课成功&quot;); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;courseList&quot;, name: &quot;CourseList&quot;, component: () =&gt; import(&quot;@/views/manager/CourseList.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/courseList&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;学生选课&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端选课实体类定义在项目目录/model下创建一个studentCourse.py 12345678910111213141516# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, String, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False) 学生选课接着实现学生选课的 api 部分，在/api下创建一个studentCourseApi.py 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import APIRouter, Dependsfrom api import appfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.studentCourse import StudentCourseCreatefrom service.studentCourseService import StudentCourseServicestudent_course_router = APIRouter(prefix=&quot;/studentCourse&quot;)@student_course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)): StudentCourseService.add_student_course(student_course, db_session) return Result.success()app.include_router(student_course_router) 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi, fileApi, studentCourseApi 在/servie下创建一个studentCourseService.py 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_from common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.studentCourse import StudentCourseCreate, StudentCourseclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course 123456789101112131415161718192021222324252627282930# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, String, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False)class StudentCourseBase(BaseModel): name: str number: str studentId: int courseId: intclass StudentCourseCreate(StudentCourseBase): pass 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseExistException(Exception): def __init__(self, message: str): self.message = message 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\ StudentCourseExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(StudentCourseExistException)async def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 查看数据库有无数据插入 管理员&#x2F;学生查看已选课程这个需要做到： 学生只看自己的 管理员看全部的 前端学生选课页面，将CourseList.vue复制粘贴一下作为StudentCourse.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123;&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;courseList&quot;, name: &quot;CourseList&quot;, component: () =&gt; import(&quot;@/views/manager/CourseList.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;studentCourse&quot;, name: &quot;StudentCourse&quot;, component: () =&gt; import(&quot;@/views/manager/StudentCourse.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/courseList&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;学生选课&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/studentCourse&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;选课记录&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端123456789101112131415161718192021222324252627282930313233343536# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.studentCourse import StudentCourseCreate, StudentCourseSearchfrom service.studentCourseService import StudentCourseServicestudent_course_router = APIRouter(prefix=&quot;/studentCourse&quot;)@student_course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)): StudentCourseService.add_student_course(student_course, db_session) return Result.success()@student_course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Student name&quot;), number: Optional[str] = Query(None, description=&quot;Student number&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) student_course_search = StudentCourseSearch(name=name, number=number, studentId=studentId) student_list = StudentCourseService.select_page(student_course_search, db_session) return Result.success(pageInfo.of(student_list))app.include_router(student_course_router) 123456789101112131415161718192021222324252627282930313233343536373839# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearchclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course @staticmethod def select_page(student_course_search: StudentCourseSearch, db_session: Session): query = select(StudentCourse).order_by(asc(StudentCourse.id)) if student_course_search.name: query = query.where(StudentCourse.name.like(f&quot;%&#123;student_course_search.name&#125;%&quot;)) if student_course_search.number: query = query.where(StudentCourse.number.like(f&quot;%&#123;student_course_search.number&#125;%&quot;)) if student_course_search.studentId: query = query.where(StudentCourse.studentId == student_course_search.studentId) result = db_session.execute(query).scalars().all() return result 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False)class StudentCourseBase(BaseModel): name: str number: str studentId: int courseId: intclass StudentCourseCreate(StudentCourseBase): passclass StudentCourseSearch(BaseModel): name: str | None number: str | None studentId: int | None 从学生用户这里来看是挺好的，但是如果，多插入几个学生选课 从管理员的角度来看是这样的，并不能直接看出是哪位学生选了这门课 修改我们给显示选课记录的这个表格，加一列学生姓名 学生选课表就需要追加一个表的关联，去关联一下学生表获取学生姓名 123456789101112131415161718192021222324252627282930313233343536# -*- coding:utf-8 -*-# Author: Zacharyfrom pydantic import BaseModelfrom sqlalchemy import Integer, String, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.student import Studentclass StudentCourse(Base): __tablename__ = &quot;student_course&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) name: Mapped[str] = mapped_column(String(255), nullable=False) number: Mapped[str] = mapped_column(String(255), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, ForeignKey(&#x27;student.id&#x27;), nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False) student: Mapped[Student] = relationship(lazy=False, backref=&quot;student_course&quot;)class StudentCourseBase(BaseModel): name: str number: str studentId: int courseId: intclass StudentCourseCreate(StudentCourseBase): passclass StudentCourseSearch(BaseModel): name: str | None number: str | None studentId: int | None 123456789101112131415161718192021222324252627282930313233343536373839# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.student import Studentfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearchclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course @staticmethod def select_page(student_course_search: StudentCourseSearch, db_session: Session): query = select(StudentCourse, Student).join(StudentCourse.student).order_by(asc(StudentCourse.id)) if student_course_search.name: query = query.where(StudentCourse.name.like(f&quot;%&#123;student_course_search.name&#125;%&quot;)) if student_course_search.number: query = query.where(StudentCourse.number.like(f&quot;%&#123;student_course_search.number&#125;%&quot;)) if student_course_search.studentId: query = query.where(StudentCourse.studentId == student_course_search.studentId) result = db_session.execute(query).scalars().all() return result 然后给前端这块 数据显示加一列，同时得是管理员的时候才显示这么一列 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123;&#125;;&lt;/script&gt; 学生选课删除现在实现删除学生所选课程 前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;),&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.studentCourse import StudentCourseCreate, StudentCourseSearchfrom service.studentCourseService import StudentCourseServicestudent_course_router = APIRouter(prefix=&quot;/studentCourse&quot;)@student_course_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)): StudentCourseService.add_student_course(student_course, db_session) return Result.success()@student_course_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), name: Optional[str] = Query(None, description=&quot;Student name&quot;), number: Optional[str] = Query(None, description=&quot;Student number&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) student_course_search = StudentCourseSearch(name=name, number=number, studentId=studentId) student_list = StudentCourseService.select_page(student_course_search, db_session) return Result.success(pageInfo.of(student_list))@student_course_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): StudentCourseService.delete_by_id(id, db_session) return Result.success()app.include_router(student_course_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import StudentCourseExistExceptionfrom model import Sessionfrom model.student import Studentfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearchclass StudentCourseService: @staticmethod def add_student_course(student_course: StudentCourseCreate, db_session: Session): query = select(StudentCourse).where( and_(StudentCourse.studentId == student_course.studentId, StudentCourse.courseId == student_course.courseId)) exist_student_course: StudentCourse = db_session.execute(query).scalar() if exist_student_course: raise StudentCourseExistException(&quot;课程已选过&quot;) new_student_course = StudentCourse() set_attrs(new_student_course, jsonable_encoder(student_course)) db_session.add(new_student_course) db_session.commit() return new_student_course @staticmethod def select_page(student_course_search: StudentCourseSearch, db_session: Session): query = select(StudentCourse, Student).join(StudentCourse.student).order_by(asc(StudentCourse.id)) if student_course_search.name: query = query.where(StudentCourse.name.like(f&quot;%&#123;student_course_search.name&#125;%&quot;)) if student_course_search.number: query = query.where(StudentCourse.number.like(f&quot;%&#123;student_course_search.number&#125;%&quot;)) if student_course_search.studentId: query = query.where(StudentCourse.studentId == student_course_search.studentId) result = db_session.execute(query).scalars().all() return result @staticmethod def delete_by_id(id, db_session): exist_student_course: StudentCourse = check_student_course_exist(id, db_session) db_session.delete(exist_student_course) db_session.commit() return exist_student_coursedef check_student_course_exist(student_course_id: int, db_session: Session): query = select(StudentCourse).where(StudentCourse.id == student_course_id) exist_student_course: StudentCourse = db_session.execute(query).scalar() if not exist_student_course: raise StudentCourseNotExistException(&quot;选课记录不存在&quot;) return exist_student_course 这种写法很冗余，大家自己想想可以怎么优化，我就不改了，或者后面有空改 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseExistException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseNotExistException(Exception): def __init__(self, message: str): self.message = message 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\ StudentCourseExistException, StudentCourseNotExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(StudentCourseExistException)async def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(StudentCourseNotExistException)async def student_course_not_exist_exception_handler(request: Request, exc: StudentCourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result)) 测试管理员删除 学生自己删除 学生成绩管理成绩表设计 管理员课程打分前端添加课程打分弹窗 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.name&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.number&quot; placeholder=&quot;请输入课程编号&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;number&quot; label=&quot;课程编号&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;addGrade(scope.row)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;评分 &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; &gt;删除&lt;/el-button &gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;成绩信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.gradeForm&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;课程名称&quot;&gt; &lt;el-input v-model=&quot;data.gradeForm.name&quot; autocomplete=&quot;off&quot; disabled /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;分数&quot;&gt; &lt;el-input v-model=&quot;data.gradeForm.score&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;评语&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.gradeForm.comment&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; name: &quot;&quot;, number: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), gradeForm: &#123;&#125;, formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, name: data.name, number: data.number, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/studentCourse/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.name = &quot;&quot;; data.number = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分函数，弹窗const addGrade = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.gradeForm.name = row.name; data.gradeForm.studentId = row.studentId; data.gradeForm.courseId = row.courseId; data.gradeForm.score = &quot;&quot;; data.gradeForm.comment = &quot;&quot;;&#125;;const save = () =&gt; &#123; request .post(&quot;/grade/add&quot;, data.gradeForm) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端依次创建上：gradeApi.py、gradeService.py、grade.py 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import APIRouter, Dependsfrom api import appfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.grade import GradeCreatefrom service.gradeService import GradeServicegrade_router = APIRouter(prefix=&quot;/grade&quot;)@grade_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)): GradeService.add_grade(grade, db_session) return Result.success()app.include_router(grade_router) 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIfrom starlette.middleware.cors import CORSMiddlewareapp = FastAPI()# 跨域问题origins = [&quot;http://localhost:5173&quot;, &quot;http://127.0.0.1:5173&quot;] # 替换为你的前端应用的实际地址app.add_middleware( CORSMiddleware, allow_origins=origins, # 允许跨域访问的来源域名列表 allow_credentials=True, # 是否允许携带cookie allow_methods=[&quot;*&quot;], # 允许的方法，默认包含常见的GET、POST等，&quot;*&quot;表示所有方法 allow_headers=[&quot;*&quot;], # 允许的请求头，默认包含常见的Content-Type等，&quot;*&quot;表示所有请求头)from api import adminApi, exceptionHandler, courseApi, studentApi, fileApi, studentCourseApi, gradeApi 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_from common.utils import set_attrsfrom exception.customException import GradeExistExceptionfrom model import Sessionfrom model.grade import GradeCreate, Gradeclass GradeService: @staticmethod def add_grade(grade: GradeCreate, db_session: Session): query = select(Grade).where( and_(Grade.studentId == grade.studentId, Grade.courseId == grade.courseId)) exist_grade: Grade = db_session.execute(query).scalar() if exist_grade: raise GradeExistException(&quot;课程已打分&quot;) new_grade = Grade() set_attrs(new_grade, jsonable_encoder(grade)) db_session.add(new_grade) db_session.commit() return new_grade 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom pydantic import BaseModelfrom sqlalchemy import Integer, Double, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom model import Basefrom model.course import Coursefrom model.student import Studentclass Grade(Base): __tablename__ = &quot;grade&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, nullable=False) score: Mapped[str] = mapped_column(Double, nullable=False) comment: Mapped[str] = mapped_column(String(255), nullable=False) feedback: Mapped[str] = mapped_column(String(255), nullable=False)class GradeBase(BaseModel): courseId: int studentId: int score: Optional[float] = None comment: Optional[str] = None feedback: Optional[str] = Noneclass GradeCreate(GradeBase): pass 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# -*- coding:utf-8 -*-# Author: Zacharyclass UserNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass UserExistException(Exception): def __init__(self, message: str): self.message = messageclass PasswordNotMatchException(Exception): def __init__(self, message: str): self.message = messageclass TokenException(Exception): def __init__(self, message: str): self.message = messageclass CourseExistException(Exception): def __init__(self, message: str): self.message = messageclass CourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass FileNotFoundException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseExistException(Exception): def __init__(self, message: str): self.message = messageclass StudentCourseNotExistException(Exception): def __init__(self, message: str): self.message = messageclass GradeExistException(Exception): def __init__(self, message: str): self.message = message 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom starlette.responses import JSONResponsefrom api import appfrom fastapi import Requestfrom common.result import Resultfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\ CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\ StudentCourseExistException, StudentCourseNotExistException, GradeExistException@app.exception_handler(Exception)async def exception_handler(request: Request, exc: Exception): result = Result.error(code=&quot;500&quot;, msg=str(exc)) return JSONResponse(status_code=500, content=jsonable_encoder(result))@app.exception_handler(UserNotFoundException)async def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(PasswordNotMatchException)async def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(TokenException)async def token_exception_handler(request: Request, exc: TokenException): result = Result.error(code=&quot;401&quot;, msg=exc.message) return JSONResponse(status_code=401, content=jsonable_encoder(result))@app.exception_handler(CourseExistException)async def course_exist_exception_handler(request: Request, exc: CourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(CourseNotExistException)async def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(UserExistException)async def user_exist_exception_handler(request: Request, exc: UserExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(FileNotFoundException)async def file_not_found_exception_handler(request: Request, exc: FileNotFoundException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(StudentCourseExistException)async def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result))@app.exception_handler(StudentCourseNotExistException)async def student_course_not_exist_exception_handler(request: Request, exc: StudentCourseNotExistException): result = Result.error(code=&quot;404&quot;, msg=exc.message) return JSONResponse(status_code=404, content=jsonable_encoder(result))@app.exception_handler(GradeExistException)async def grade_exist_exception_handler(request: Request, exc: GradeExistException): result = Result.error(code=&quot;400&quot;, msg=exc.message) return JSONResponse(status_code=400, content=jsonable_encoder(result)) 测试管理员评分 显示课程分数前端复制StudentCourse.vue重命名为Grade.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.courseName&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.studentName&quot; placeholder=&quot;请输入要查询的学生名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;course.name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column prop=&quot;score&quot; label=&quot;成绩&quot; /&gt; &lt;el-table-column prop=&quot;comment&quot; label=&quot;教师评语&quot; /&gt; &lt;el-table-column prop=&quot;feedback&quot; label=&quot;学生评价&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;删除 &lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;setFeedback(scope.row)&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot; &gt;评价 &lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;反馈信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;反馈&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.feedback&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; form: &#123;&#125;, courseName: &quot;&quot;, studentName: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, courseName: data.courseName, studentName: data.studentName, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/grade/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.courseName = &quot;&quot;; data.studentName = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分const setFeedback = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.form = JSON.parse(JSON.stringify(row));&#125;;const save = () =&gt; &#123; request .post(&quot;/grade/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [ &#123; path: &quot;/&quot;, name: &quot;Manager&quot;, component: () =&gt; import(&quot;@/views/Manager.vue&quot;), redirect: &quot;/home&quot;, children: [ &#123; path: &quot;home&quot;, name: &quot;Home&quot;, component: () =&gt; import(&quot;@/views/manager/Home.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;course&quot;, name: &quot;Course&quot;, component: () =&gt; import(&quot;@/views/manager/Course.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;student&quot;, name: &quot;Student&quot;, component: () =&gt; import(&quot;@/views/manager/Student.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;person&quot;, name: &quot;Person&quot;, component: () =&gt; import(&quot;@/views/manager/Person.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;courseList&quot;, name: &quot;CourseList&quot;, component: () =&gt; import(&quot;@/views/manager/CourseList.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;studentCourse&quot;, name: &quot;StudentCourse&quot;, component: () =&gt; import(&quot;@/views/manager/StudentCourse.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, &#123; path: &quot;grade&quot;, name: &quot;Grade&quot;, component: () =&gt; import(&quot;@/views/manager/Grade.vue&quot;), meta: &#123; requiresAuth: true &#125;, &#125;, ], &#125;, &#123; path: &quot;/login&quot;, name: &quot;Login&quot;, component: () =&gt; import(&quot;@/views/Login.vue&quot;), &#125;, &#123; path: &quot;/register&quot;, name: &quot;Register&quot;, component: () =&gt; import(&quot;@/views/Register.vue&quot;), &#125;, ],&#125;);router.beforeEach((to, from, next) =&gt; &#123; const requiresAuth = to.matched.some((record) =&gt; record.meta.requiresAuth); const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;)); if (requiresAuth &amp;&amp; !user) &#123; // 如果目标路由需要认证,并且用户未登录 next(&quot;/login&quot;); // 跳转到登录页面 &#125; else &#123; next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由 &#125;&#125;);export default router; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150&lt;template&gt; &lt;div&gt; &lt;div style=&quot;height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2&quot; &gt; &lt;div style=&quot;flex: 1&quot;&gt; &lt;div style=&quot;padding-left: 20px; display: flex; align-items: center&quot;&gt; &lt;img src=&quot;@/assets/imgs/logo.png&quot; alt=&quot;&quot; style=&quot;width: 40px&quot; /&gt; &lt;div style=&quot;font-weight: bold; font-size: 24px; margin-left: 5px&quot;&gt; 学生信息管理系统 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;width: fit-content; padding-right: 10px; display: flex; align-items: center;&quot; &gt; &lt;img :src=&quot; user.avatar || &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27; &quot; alt=&quot;&quot; style=&quot;width: 40px; height: 40px; border-radius: 50%&quot; /&gt; &lt;span style=&quot;margin-left: 5px&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)&quot; &gt; &lt;el-menu router style=&quot;border: none&quot; :default-active=&quot;$route.path&quot; :default-openeds=&quot;[&#x27;/home&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]&quot; &gt; &lt;el-menu-item index=&quot;/home&quot;&gt; &lt;el-icon&gt; &lt;HomeFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;系统首页&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-sub-menu index=&quot;2&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;学生管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/student&quot;&gt; &lt;el-icon&gt; &lt;UserFilled /&gt; &lt;/el-icon&gt; &lt;span&gt;学生信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Memo /&gt; &lt;/el-icon&gt; &lt;span&gt;课程管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/course&quot; v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;课程信息&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/courseList&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;学生选课&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/studentCourse&quot;&gt; &lt;el-icon&gt; &lt;Document /&gt; &lt;/el-icon&gt; &lt;span&gt;选课记录&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;4&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt; &lt;Management /&gt; &lt;/el-icon&gt; &lt;span&gt;成绩信息&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;/grade&quot;&gt; &lt;el-icon&gt; &lt;List /&gt; &lt;/el-icon&gt; &lt;span&gt;学生成绩&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-menu-item index=&quot;/person&quot; v-if=&quot;user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-icon&gt; &lt;User /&gt; &lt;/el-icon&gt; &lt;span&gt;个人资料&lt;/span&gt; &lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;/login&quot; @click=&quot;logout&quot;&gt; &lt;el-icon&gt; &lt;SwitchButton /&gt; &lt;/el-icon&gt; &lt;span&gt;退出系统&lt;/span&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt; &lt;/div&gt; &lt;div style=&quot;flex: 1; width: 0; background-color: #eaeaee; padding: 10px&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &quot;vue-router&quot;;const $route = useRoute();console.log($route.path);const logout = () =&gt; &#123; localStorage.removeItem(&quot;student-user&quot;);&#125;;const user = JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;);&lt;/script&gt;&lt;style scoped&gt;.el-menu-item.is-active &#123; background-color: #c3d7d3 !important;&#125;.el-menu-item:hover &#123; color: #0c98d5;&#125;:deep(th) &#123; color: #333;&#125;&lt;/style&gt; 后端12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.grade import GradeCreate, GradeSearch, GradeUpdatefrom service.gradeService import GradeServicegrade_router = APIRouter(prefix=&quot;/grade&quot;)@grade_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)): GradeService.add_grade(grade, db_session) return Result.success()@grade_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), studentName: Optional[str] = Query(None, description=&quot;Student name&quot;), courseName: Optional[str] = Query(None, description=&quot;Course name&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) grade_search: GradeSearch = GradeSearch(studentName=studentName, courseName=courseName, studentId=studentId) grade_list = GradeService.select_page(grade_search, db_session) return Result.success(pageInfo.of(grade_list))@grade_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(grade: GradeUpdate, db_session: Session = Depends(get_db_session)): GradeService.update_by_id(grade, db_session) return Result.success()app.include_router(grade_router) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import GradeExistExceptionfrom model import Sessionfrom model.course import Coursefrom model.grade import GradeCreate, Grade, GradeSearch, GradeUpdatefrom model.student import Studentclass GradeService: @staticmethod def add_grade(grade: GradeCreate, db_session: Session): query = select(Grade).where( and_(Grade.studentId == grade.studentId, Grade.courseId == grade.courseId)) exist_grade: Grade = db_session.execute(query).scalar() if exist_grade: raise GradeExistException(&quot;课程已打分&quot;) new_grade = Grade() set_attrs(new_grade, jsonable_encoder(grade)) db_session.add(new_grade) db_session.commit() return new_grade @staticmethod def select_page(grade_search: GradeSearch, db_session: Session): query = select(Grade, Student, Course).outerjoin(Grade.student).outerjoin(Grade.course).order_by(asc(Grade.id)) if grade_search.courseName: query = query.where(Course.name.like(f&quot;%&#123;grade_search.courseName&#125;%&quot;)) if grade_search.studentName: query = query.where(Student.name.like(f&quot;%&#123;grade_search.studentName&#125;%&quot;)) if grade_search.studentId: query = query.where(Grade.studentId == grade_search.studentId) result = db_session.execute(query).scalars().all() return result @staticmethod def update_by_id(grade: GradeUpdate, db_session: Session): exist_grade: Grade = check_grade_exist(grade.id, db_session) set_attrs(exist_grade, jsonable_encoder(grade)) db_session.commit() return exist_gradedef check_grade_exist(grade_id: int, db_session: Session): query = select(Grade).where(Grade.id == grade_id) exist_grade: Grade = db_session.execute(query).scalar() if not exist_grade: raise GradeExistException(&quot;成绩记录不存在&quot;) return exist_grade 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom pydantic import BaseModelfrom sqlalchemy import Integer, Double, ForeignKey, Stringfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom model import Basefrom model.course import Coursefrom model.student import Studentclass Grade(Base): __tablename__ = &quot;grade&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False) courseId: Mapped[int] = mapped_column(&quot;course_id&quot;, Integer, ForeignKey(&#x27;course.id&#x27;), nullable=False) studentId: Mapped[int] = mapped_column(&quot;student_id&quot;, Integer, ForeignKey(&#x27;student.id&#x27;), nullable=False) score: Mapped[str] = mapped_column(Double, nullable=False) comment: Mapped[str] = mapped_column(String(255), nullable=False) feedback: Mapped[str] = mapped_column(String(255), nullable=False) student: Mapped[Student] = relationship(lazy=False, backref=&quot;grade&quot;) course: Mapped[Course] = relationship(lazy=False, backref=&quot;grade&quot;)class GradeBase(BaseModel): courseId: int studentId: int score: Optional[float] = None comment: Optional[str] = None feedback: Optional[str] = Noneclass GradeCreate(GradeBase): passclass GradeSearch(BaseModel): courseName: str | None studentName: str | None studentId: str | Noneclass GradeUpdate(GradeBase): id: int 测试管理员 课程分数编辑123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.courseName&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.studentName&quot; placeholder=&quot;请输入要查询的学生名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;course.name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column prop=&quot;score&quot; label=&quot;成绩&quot; /&gt; &lt;el-table-column prop=&quot;comment&quot; label=&quot;教师评语&quot; /&gt; &lt;el-table-column prop=&quot;feedback&quot; label=&quot;学生评价&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;编辑 &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;删除 &lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot; &gt;评价 &lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;反馈信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;分数&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input v-model=&quot;data.form.score&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;教师评语&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.comment&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生评价&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.feedback&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; form: &#123;&#125;, courseName: &quot;&quot;, studentName: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, courseName: data.courseName, studentName: data.studentName, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/grade/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.courseName = &quot;&quot;; data.studentName = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/studentCourse/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分const handleEdit = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.form = JSON.parse(JSON.stringify(row));&#125;;const save = () =&gt; &#123; request .post(&quot;/grade/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 学生： 管理员： 课程分数删除前端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222&lt;template&gt; &lt;div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;el-input @input=&quot;load&quot; style=&quot;width: 260px&quot; v-model=&quot;data.courseName&quot; placeholder=&quot;请输入要查询的课程名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-input @input=&quot;load&quot; style=&quot;margin-left:10px; width: 260px&quot; v-model=&quot;data.studentName&quot; placeholder=&quot;请输入要查询的学生名称&quot; :prefix-icon=&quot;Search&quot; /&gt; &lt;el-button type=&quot;info&quot; plain style=&quot;margin: 0 0 0 10px&quot; @click=&quot;reset&quot; &gt;重置&lt;/el-button &gt; &lt;/div&gt; &lt;div class=&quot;card&quot; style=&quot;margin-bottom: 10px&quot;&gt; &lt;div&gt; &lt;el-table :data=&quot;data.tableData&quot; stripe style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; /&gt; &lt;el-table-column prop=&quot;course.name&quot; label=&quot;课程名称&quot; /&gt; &lt;el-table-column prop=&quot;student.name&quot; label=&quot;学生名称&quot; /&gt; &lt;el-table-column prop=&quot;score&quot; label=&quot;成绩&quot; /&gt; &lt;el-table-column prop=&quot;comment&quot; label=&quot;教师评语&quot; /&gt; &lt;el-table-column prop=&quot;feedback&quot; label=&quot;学生评价&quot; /&gt; &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot; width=&quot;180px&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;编辑 &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot; size=&quot;small&quot; plain @click=&quot;del(scope.row.id)&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot; &gt;删除 &lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; plain @click=&quot;handleEdit(scope.row)&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot; &gt;评价 &lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;card&quot;&gt; &lt;el-pagination v-model:current-page=&quot;data.pageNum&quot; v-model:page-size=&quot;data.pageSize&quot; @current-change=&quot;handleCurrentChange&quot; background layout=&quot;prev, pager, next&quot; :total=&quot;data.total&quot; /&gt; &lt;/div&gt; &lt;!-- 评分表单--&gt; &lt;el-dialog v-model=&quot;data.formVisible&quot; title=&quot;反馈信息&quot; width=&quot;35%&quot;&gt; &lt;el-form :model=&quot;data.form&quot; label-width=&quot;100px&quot; label-position=&quot;right&quot; style=&quot;padding-right: 40px&quot; &gt; &lt;el-form-item label=&quot;分数&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input v-model=&quot;data.form.score&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;教师评语&quot; v-if=&quot;data.user.role === &#x27;ADMIN&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.comment&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;学生评价&quot; v-if=&quot;data.user.role === &#x27;STUDENT&#x27;&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;data.form.feedback&quot; autocomplete=&quot;off&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button plain @click=&quot;data.formVisible = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; plain @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; reactive &#125; from &quot;vue&quot;;import &#123; Search &#125; from &quot;@element-plus/icons-vue&quot;;import request from &quot;@/utils/request&quot;;import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;const data = reactive(&#123; form: &#123;&#125;, courseName: &quot;&quot;, studentName: &quot;&quot;, tableData: [], total: 0, pageNum: 1, pageSize: 10, user: JSON.parse(localStorage.getItem(&quot;student-user&quot;) || &quot;&#123;&#125;&quot;), formVisible: false,&#125;);const load = () =&gt; &#123; let params = &#123; pageNum: data.pageNum, pageSize: data.pageSize, courseName: data.courseName, studentName: data.studentName, &#125;; if (data.user.role === &quot;STUDENT&quot;) &#123; params.studentId = data.user.id; &#125; request .get(&quot;/grade/selectPage&quot;, &#123; params: params, &#125;) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; data.tableData = res.data?.list || []; data.total = res.data?.total || 0; &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 加载一次 获取学生选课数据load();const handleCurrentChange = () =&gt; &#123; // 当翻页的时候重新加载数据 load();&#125;;const reset = () =&gt; &#123; data.courseName = &quot;&quot;; data.studentName = &quot;&quot;; load();&#125;;const del = (id) =&gt; &#123; ElMessageBox.confirm(&quot;删除后内容将无法恢复，您确认删除嘛？&quot;, &quot;删除确认&quot;, &#123; type: &quot;warning&quot;, &#125;) .then((res) =&gt; &#123; request.delete(&quot;/grade/delete/&quot; + id).then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;); &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;// 打分const handleEdit = (row) =&gt; &#123; // 弹窗 data.formVisible = true; data.form = JSON.parse(JSON.stringify(row));&#125;;const save = () =&gt; &#123; request .put(&quot;/grade/update&quot;, data.form) .then((res) =&gt; &#123; if (res.code === &quot;200&quot;) &#123; ElMessage.success(&quot;操作成功&quot;); data.formVisible = false; load(); &#125; else &#123; ElMessage.error(res.msg); &#125; &#125;) .catch((err) =&gt; &#123; if (err.response?.data?.code === &quot;401&quot;) &#123; localStorage.removeItem(&quot;student-user&quot;); &#125; ElMessage.error(err.response?.data?.msg || err.message); &#125;);&#125;;&lt;/script&gt; 后端12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalfrom fastapi import APIRouter, Depends, Queryfrom api import appfrom common.pageHelper import PageHelperfrom common.result import ResultModel, Resultfrom model import Session, get_db_sessionfrom model.grade import GradeCreate, GradeSearch, GradeUpdatefrom service.gradeService import GradeServicegrade_router = APIRouter(prefix=&quot;/grade&quot;)@grade_router.post(&quot;/add&quot;, response_model=ResultModel)async def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)): GradeService.add_grade(grade, db_session) return Result.success()@grade_router.get(&quot;/selectPage&quot;, response_model=ResultModel)async def select_page(page: int = Query(1, ge=1, alias=&quot;pageNum&quot;, description=&quot;Page number&quot;), size: int = Query(5, gt=0, le=100, alias=&quot;pageSize&quot;, description=&quot;Page size&quot;), studentName: Optional[str] = Query(None, description=&quot;Student name&quot;), courseName: Optional[str] = Query(None, description=&quot;Course name&quot;), studentId: Optional[str] = Query(None, description=&quot;Student id&quot;), db_session: Session = Depends(get_db_session)): pageInfo = PageHelper.startPage(page, size) grade_search: GradeSearch = GradeSearch(studentName=studentName, courseName=courseName, studentId=studentId) grade_list = GradeService.select_page(grade_search, db_session) return Result.success(pageInfo.of(grade_list))@grade_router.put(&quot;/update&quot;, response_model=ResultModel)async def update(grade: GradeUpdate, db_session: Session = Depends(get_db_session)): GradeService.update_by_id(grade, db_session) return Result.success()@grade_router.delete(&quot;/delete/&#123;id&#125;&quot;, response_model=ResultModel)async def delete(id: int, db_session: Session = Depends(get_db_session)): GradeService.delete_by_id(id, db_session) return Result.success()app.include_router(grade_router) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi.encoders import jsonable_encoderfrom sqlalchemy import select, and_, ascfrom common.utils import set_attrsfrom exception.customException import GradeExistExceptionfrom model import Sessionfrom model.course import Coursefrom model.grade import GradeCreate, Grade, GradeSearch, GradeUpdatefrom model.student import Studentclass GradeService: @staticmethod def add_grade(grade: GradeCreate, db_session: Session): query = select(Grade).where( and_(Grade.studentId == grade.studentId, Grade.courseId == grade.courseId)) exist_grade: Grade = db_session.execute(query).scalar() if exist_grade: raise GradeExistException(&quot;课程已打分&quot;) new_grade = Grade() set_attrs(new_grade, jsonable_encoder(grade)) db_session.add(new_grade) db_session.commit() return new_grade @staticmethod def select_page(grade_search: GradeSearch, db_session: Session): query = select(Grade, Student, Course).outerjoin(Grade.student).outerjoin(Grade.course).order_by(asc(Grade.id)) if grade_search.courseName: query = query.where(Course.name.like(f&quot;%&#123;grade_search.courseName&#125;%&quot;)) if grade_search.studentName: query = query.where(Student.name.like(f&quot;%&#123;grade_search.studentName&#125;%&quot;)) if grade_search.studentId: query = query.where(Grade.studentId == grade_search.studentId) result = db_session.execute(query).scalars().all() return result @staticmethod def update_by_id(grade: GradeUpdate, db_session: Session): exist_grade: Grade = check_grade_exist(grade.id, db_session) set_attrs(exist_grade, jsonable_encoder(grade)) db_session.commit() return exist_grade @staticmethod def delete_by_id(id: int, db_session: Session): exist_grade: Grade = check_grade_exist(id, db_session) db_session.delete(exist_grade) db_session.commit() return exist_gradedef check_grade_exist(grade_id: int, db_session: Session): query = select(Grade).where(Grade.id == grade_id) exist_grade: Grade = db_session.execute(query).scalar() if not exist_grade: raise GradeExistException(&quot;成绩记录不存在&quot;) return exist_grade 测试 i 更新: 2024-05-26 21:19:26原文: https://www.yuque.com/zacharyblock/cx2om6/ka7buim7w1uxo6pg","categories":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/categories/Python-Web/"}],"tags":[{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"SQLAlchemy","slug":"SQLAlchemy","permalink":"https://blockzachary.github.io/tags/SQLAlchemy/"},{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/tags/Python-Web/"},{"name":"RESTful API","slug":"RESTful-API","permalink":"https://blockzachary.github.io/tags/RESTful-API/"},{"name":"项目","slug":"项目","permalink":"https://blockzachary.github.io/tags/%E9%A1%B9%E7%9B%AE/"},{"name":"Element-plus","slug":"Element-plus","permalink":"https://blockzachary.github.io/tags/Element-plus/"}]},{"title":"FastAPI日志系统","slug":"PythonWeb/FastAPI日志系统","date":"2024-03-01T03:13:00.000Z","updated":"2024-03-01T03:13:00.000Z","comments":true,"path":"blog/1086041718/","permalink":"https://blockzachary.github.io/blog/1086041718/","excerpt":"","text":"FastAPI 日志系统1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586import osimport sysimport timeimport loggingfrom types import FrameTypefrom typing import castfrom loguru import loggerfrom .path_conf import LogPathclass Logger: &quot;&quot;&quot;输出日志到文件和控制台&quot;&quot;&quot; def __init__(self): # 文件的命名 log_name = f&quot;Fast_&#123;time.strftime(&#x27;%Y-%m-%d&#x27;, time.localtime()).replace(&#x27;-&#x27;, &#x27;_&#x27;)&#125;.log&quot; log_path = os.path.join(LogPath, &quot;Fast_&#123;time:YYYY-MM-DD&#125;.log&quot;) self.logger = logger # 清空所有设置 self.logger.remove() # 判断日志文件夹是否存在，不存则创建 if not os.path.exists(LogPath): os.makedirs(LogPath) # 日志输出格式 formatter = &quot;&#123;time:YYYY-MM-DD HH:mm:ss&#125; | &#123;level&#125;: &#123;message&#125;&quot; # 添加控制台输出的格式,sys.stdout为输出到屏幕;关于这些配置还需要自定义请移步官网查看相关参数说明 self.logger.add(sys.stdout, format=&quot;&lt;green&gt;&#123;time:YYYYMMDD HH:mm:ss&#125;&lt;/green&gt; | &quot; # 颜色&gt;时间 &quot;&#123;process.name&#125; | &quot; # 进程名 &quot;&#123;thread.name&#125; | &quot; # 进程名 &quot;&lt;cyan&gt;&#123;module&#125;&lt;/cyan&gt;.&lt;cyan&gt;&#123;function&#125;&lt;/cyan&gt;&quot; # 模块名.方法名 &quot;:&lt;cyan&gt;&#123;line&#125;&lt;/cyan&gt; | &quot; # 行号 &quot;&lt;level&gt;&#123;level&#125;&lt;/level&gt;: &quot; # 等级 &quot;&lt;level&gt;&#123;message&#125;&lt;/level&gt;&quot;, # 日志内容 ) # 日志写入文件 self.logger.add(log_path, # 写入目录指定文件 format=&#x27;&#123;time:YYYYMMDD HH:mm:ss&#125; - &#x27; # 时间 &quot;&#123;process.name&#125; | &quot; # 进程名 &quot;&#123;thread.name&#125; | &quot; # 进程名 &#x27;&#123;module&#125;.&#123;function&#125;:&#123;line&#125; - &#123;level&#125; -&#123;message&#125;&#x27;, # 模块名.方法名:行号 encoding=&#x27;utf-8&#x27;, retention=&#x27;7 days&#x27;, # 设置历史保留时长 backtrace=True, # 回溯 diagnose=True, # 诊断 enqueue=True, # 异步写入 rotation=&quot;00:00&quot;, # 每日更新时间 # rotation=&quot;5kb&quot;, # 切割，设置文件大小，rotation=&quot;12:00&quot;，rotation=&quot;1 week&quot; # filter=&quot;my_module&quot; # 过滤模块 # compression=&quot;zip&quot; # 文件压缩 ) def init_config(self): LOGGER_NAMES = (&quot;uvicorn.asgi&quot;, &quot;uvicorn.access&quot;, &quot;uvicorn&quot;) # change handler for default uvicorn logger logging.getLogger().handlers = [InterceptHandler()] for logger_name in LOGGER_NAMES: logging_logger = logging.getLogger(logger_name) logging_logger.handlers = [InterceptHandler()] def get_logger(self): return self.loggerclass InterceptHandler(logging.Handler): def emit(self, record: logging.LogRecord) -&gt; None: # pragma: no cover # Get corresponding Loguru level if it exists try: level = logger.level(record.levelname).name except ValueError: level = str(record.levelno) # Find caller from where originated the logged message frame, depth = logging.currentframe(), 2 while frame.f_code.co_filename == logging.__file__: # noqa: WPS609 frame = cast(FrameType, frame.f_back) depth += 1 logger.opt(depth=depth, exception=record.exc_info).log( level, record.getMessage(), )Loggers = Logger()log = Loggers.get_logger() 12345678910111213141516171819import uvicornfrom fastapi import FastAPIfrom log import log, Loggersapp = FastAPI()@app.get(&quot;/&quot;)def index(): log.error(&quot;/index&quot;) return &quot;Hello, World.&quot;if __name__ == &#x27;__main__&#x27;: config = uvicorn.Config(&quot;test7:app&quot;, host=&#x27;0.0.0.0&#x27;, port=9999) server = uvicorn.Server(config) # 将uvicorn输出的全部让loguru管理 Loggers.init_config() server.run() 更新: 2024-03-12 03:37:43原文: https://www.yuque.com/zacharyblock/cx2om6/fcy7e77xzlh1offr","categories":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/categories/Python-Web/"}],"tags":[{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/tags/Python-Web/"},{"name":"Python日志","slug":"Python日志","permalink":"https://blockzachary.github.io/tags/Python%E6%97%A5%E5%BF%97/"}]},{"title":"FastAPI","slug":"PythonWeb/FastAPI","date":"2024-02-03T04:15:00.000Z","updated":"2024-02-03T04:15:00.000Z","comments":true,"path":"blog/3889409409/","permalink":"https://blockzachary.github.io/blog/3889409409/","excerpt":"","text":"FastAPIFast API 是一个快速、高效、简单、标准化的 Web 框架 基于 Python3.8+进行使用 Hello FastAPI接下来新建一个项目带领进入 FastAPI 的世界 依赖包安装 pip install fastapi[all] 1fastapi[all] 实现 api创建一个hellofastapi.py文件 123456789101112# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)async def hello(): return &#123;&quot;message&quot;: &quot;Hello World&quot;&#125; 运行需要使用 fastapi 提供的一个uvicornASGI 网关服务器来启动 api 服务 uvicorn hellofastapi:app --reload 1234567(venv) ➜ fastApiProject uvicorn hellofastapi:app --reloadINFO: Will watch for changes in these directories: [&#x27;/Users/zachary/Documents/PythonCode/fastApiProject&#x27;]INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)INFO: Started reloader process [2378] using WatchFilesINFO: Started server process [2382]INFO: Waiting for application startup.INFO: Application startup complete. 直接在浏览器输入下方的地址：http://127.0.0.1:8000 我们再额外加一个 api 12345678910111213141516# -*- coding:utf-8 -*-# Author: Zacharyfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)async def hello(): return &#123;&quot;message&quot;: &quot;Hello World&quot;&#125;@app.get(&quot;/hello/&#123;user&#125;&quot;)async def hello_user(user): return &#123;&quot;message&quot;: f&quot;Hello &#123;user&#125;&quot;&#125; 文档直接在浏览器键入：http://127.0.0.1:8000/docs 就有已经自动帮我们生成好的 swagger 文档 快速运行当然也可以不使用命令行运行我们的 api 项目 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/&quot;)async def hello(): return &#123;&quot;message&quot;: &quot;Hello World&quot;&#125;@app.get(&quot;/hello/&#123;user&#125;&quot;)async def hello_user(user): return &#123;&quot;message&quot;: f&quot;Hello &#123;user&#125;&quot;&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;hellofastapi:app&quot;, reload=True) 路径参数路径参数在 URL 中在 URL 中可以存在参数作为变量使用到程序中 重新建立一个目录/path_params在其中新建一个文件main.py 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/user/&#123;user_id&#125;&quot;)async def get_user(user_id): user = &#123; &quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; return &#123;&quot;user&quot;: user&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 路径参数的校验如果给路径参数指定类型，例如int，那么在进行 api 调用的时候 swagger 文档会自动帮我们进行一个校验 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/user/&#123;user_id&#125;&quot;)async def get_user(user_id: int): user = &#123; &quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; return &#123;&quot;user&quot;: user&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) api 定义的顺序假定我现在需要访问这么两个 api：/users/current和/users/1 分别用于获取当前用户和 user_id 为 1 的用户 那么定义的时候顺序是很重要的 第一种顺序 123456789101112131415161718192021222324252627282930# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/users/&#123;user_id&#125;&quot;)async def get_user(user_id: int): user = &#123; &quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; return &#123;&quot;user&quot;: user&#125;@app.get(&quot;/users/current&quot;)async def get_current_user(): user = &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;Jane Guilherme&quot;, &quot;gender&quot;: &quot;female&quot; &#125; return &#123;&quot;user&quot;: user&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 访问/users/current会出问题 第二种顺序 需要调换一下 current 和 user_id 的定义顺序 123456789101112131415161718192021222324252627282930# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/users/current&quot;)async def get_current_user(): user = &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;Jane Guilherme&quot;, &quot;gender&quot;: &quot;female&quot; &#125; return &#123;&quot;user&quot;: user&#125;@app.get(&quot;/users/&#123;user_id&#125;&quot;)async def get_user(user_id: int): user = &#123; &quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; return &#123;&quot;user&quot;: user&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 这样都可以成功访问到 枚举定义选择项目前在 swagger-UI 中的一些参数都是需要手动键入的 但有时候一些参数可能是一些固定选项，例如性别（男、女）这时候如果能实现选择项输入就更好了 使用枚举类实现选择项的定义 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumimport uvicornfrom fastapi import FastAPIapp = FastAPI()class Gender(str, Enum): male = &quot;男性&quot; female = &quot;女性&quot;@app.get(&quot;/students/&#123;gender&#125;&quot;)async def get_student(gender: Gender): student = &#123; &quot;id&quot;: 1, &quot;name&quot;: &quot;Tony Stark&quot;, &quot;gender&quot;: gender &#125; return &#123;&quot;student&quot;: student&#125;@app.get(&quot;/users/current&quot;)async def get_current_user(): user = &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;Jane Guilherme&quot;, &quot;gender&quot;: &quot;female&quot; &#125; return &#123;&quot;user&quot;: user&#125;@app.get(&quot;/users/&#123;user_id&#125;&quot;)async def get_user(user_id: int): user = &#123; &quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; return &#123;&quot;user&quot;: user&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 查询参数什么是查询参数，类似于http://127.0.0.1:8000/users?page_index=1&amp;page_size=10 其中的 page_index 和 page_size 都是查询参数 来个实例看看怎么做，先创建一个/query_params目录，然后目录下面创建main.py 查询参数在方法参数中 在注解处 就可以不用声明这两个查询参数了 直接在方法的参数中声明 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/users&quot;)async def get_current_user(page_index: int, page_size: int): user = &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;Jane Guilherme&quot;, &quot;gender&quot;: &quot;female&quot; &#125; page_info = &#123; &quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size &#125; return &#123;&quot;user&quot;: user, &quot;page_info&quot;: page_info&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 运行代码后直接在浏览器键入：http://127.0.0.1:8000/users?page_index&#x3D;2&amp;page_size&#x3D;10 可以查看到结果 查询参数的校验 同样，在方法中的类型声明，会自动帮我们做类型验证，如果输入的类型与声明类型不符，会报错 如果键入：http://127.0.0.1:8000/users?page_index&#x3D;2&amp;page_size&#x3D;a 使用 swagger-UI 也会帮我们做参数类型校验 配置可选查询参数 使用Optional声明可选查询参数，若查询参数不传值，希望有一个默认值 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/users&quot;)async def get_current_user(page_index: int, page_size: Optional[int] = 10): user = &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;Jane Guilherme&quot;, &quot;gender&quot;: &quot;female&quot; &#125; page_info = &#123; &quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size &#125; return &#123;&quot;user&quot;: user, &quot;page_info&quot;: page_info&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 路径参数与查询参数混用结合上一节的路径参数，可以与查询参数混合使用，并且在方法参数中的顺序是没有要求的 12345678910111213141516171819202122232425262728293031323334353637383940# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/users&quot;)async def get_current_user(page_index: int, page_size: Optional[int] = 10): user = &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;Jane Guilherme&quot;, &quot;gender&quot;: &quot;female&quot; &#125; page_info = &#123; &quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size &#125; return &#123;&quot;user&quot;: user, &quot;page_info&quot;: page_info&#125;@app.get(&quot;/users/&#123;user_id&#125;/friends&quot;)async def get_user_friends(user_id: int, page_index: int, page_size: Optional[int] = 10): user_friends = &#123; &quot;id&quot;: user_id + 1, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; page_info = &#123; &quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size &#125; return &#123;&quot;user_friends&quot;: user_friends, &quot;page_info&quot;: page_info&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 请求体什么是请求体请求体是用于发送数据给 API 不能使用GET请求发送请求体 发送请求体的类型应该是POST、PUT、DELETE或者PATCH 定义请求体中数据的模型 使用pydantic模块下的BaseModel 在项目目录下创建一个/request_body目录，然后创建一个main.py 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()class UserModel(BaseModel): id: Optional[int] = 1 name: str description: Optional[str] = &quot;No description&quot;@app.post(&quot;/users&quot;)async def create_user(user: UserModel): # 做一些创建用户的数据库操作 user = user.model_dump() return userif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 只传入非 Optional 的参数： 给可选参数传入值 不给非可选参数传值，会报错，指出缺少的参数信息 请求体中定义枚举选择项在前面的路径参数中，对一些参数可以使用选择项进行输入，那么同样在请求体中的某些参数也可以配置为枚举类进行选择项输入 枚举类定义选择项 123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumfrom typing import Optionalimport uvicornfrom fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()class Gender(str, Enum): male = &quot;男性&quot; female = &quot;女性&quot;class UserModel(BaseModel): id: Optional[int] = 1 name: str gender: Gender description: Optional[str] = &quot;No description&quot;@app.post(&quot;/users&quot;)async def create_user(user: UserModel): # 做一些创建用户的数据库操作 user = user.model_dump() return userif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 会对枚举选择项，自动做内容校验 输入错误的枚举类型，结果会报错，具体错误信息 请求体与路径参数混用这块逻辑需要先改一下 因为对于更新数据而言，我们可能请求体发送的时候只是发送要更新的数据，我们一般不会知道 id 是多少，所以 UserModel 先去掉 id，然后在修改完之后给他从路径参数中把 id 加过来 实际上在开发的时候这些 User 类就要做一下区分：如 UserVO，User，UserDTO 等等 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumfrom typing import Optionalimport uvicornfrom fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()class Gender(str, Enum): male = &quot;男性&quot; female = &quot;女性&quot;class UserModel(BaseModel): name: str gender: Gender description: Optional[str] = &quot;No description&quot;@app.post(&quot;/users&quot;)async def create_user(user: UserModel): # 做一些创建用户的数据库操作 user = user.model_dump() user.update(&#123;&quot;id&quot;: 1&#125;) return user@app.put(&quot;/users/&#123;user_id&#125;&quot;)async def update_user(user_id: int, user: UserModel): # 做一些更新用户的数据库操作 user = user.model_dump() user.update(&#123;&quot;id&quot;: user_id&#125;) return userif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 函数的参数识别规则 FastAPI 如何区分方法中的路径参数、查询参数、请求体对象 如果在路径参数中定义了，函数的参数会匹配为路径参数 如果路径参数中没有定义，然后函数的参数定义为 int、str 等基础类型，会匹配为查询参数 如果是 pydantic 模型类（继承 BaseModel），则匹配为请求体 参数验证目录路径下创建一个/params_validation目录，然后创建一个main.py 路径参数的验证 使用fastapi.Path类实现 路径参数都是必须项 格式： ...表示该路径参数必填 title表示对该路径参数的名称 ge值大于等于，gt大于 le值小于等于，lt小于 min_length 字符串最小长度 max_length 字符串最大长度 regex正则表达式验证 常用格式r&quot;^[正则内容]$&quot; 12345@app.get(&quot;/users/&#123;user_id&#125;&quot;)async def get_user(user_id: int = Path(..., title=&quot;The ID of the user to get&quot;, ge=1, le=200)): 下面看一下具体实例 整数类型验证123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPI, Pathapp = FastAPI()@app.get(&quot;/users/&#123;user_id&#125;&quot;)async def get_user(user_id: int = Path(..., title=&quot;The ID of the user to get&quot;, ge=1, le=200)): user = &#123; &quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; return &#123;&quot;user&quot;: user&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 路径参数会显示最大值最小值范围，若输入不在范围，则会报错 上面这个例子是一个整数的类型，下面来一个字符串类型的验证 字符串类型验证12345678910111213141516171819202122232425262728293031# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPI, Pathapp = FastAPI()@app.get(&quot;/users/&#123;user_id&#125;&quot;)async def get_user(user_id: int = Path(..., title=&quot;The ID of the user to get&quot;, ge=1, le=200)): user = &#123; &quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; return &#123;&quot;user&quot;: user&#125;@app.get(&quot;/books/&#123;book_name&#125;&quot;)async def get_book(book_name: str = Path(..., title=&quot;The name of the book to get&quot;, min_length=3, max_length=10)): book = &#123; &quot;id&quot;: 1, &quot;name&quot;: book_name, &quot;description&quot;: &quot;The description of the book...&quot; &#125; return &#123;&quot;book&quot;: book&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 正则表达式验证123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPI, Pathapp = FastAPI()@app.get(&quot;/users/&#123;user_id&#125;&quot;)async def get_user(user_id: int = Path(..., title=&quot;The ID of the user to get&quot;, ge=1, le=200)): user = &#123; &quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; return &#123;&quot;user&quot;: user&#125;@app.get(&quot;/books/&#123;book_name&#125;&quot;)async def get_book(book_name: str = Path(..., title=&quot;The name of the book to get&quot;, min_length=3, max_length=10)): book = &#123; &quot;id&quot;: 1, &quot;name&quot;: book_name, &quot;description&quot;: &quot;The description of the book...&quot; &#125; return &#123;&quot;book&quot;: book&#125;@app.get(&quot;/milkteas/&#123;milktea_name&#125;&quot;)async def get_milktea( milktea_name: str = Path(..., title=&quot;The name of the milktea to get&quot;, regex=r&quot;^.*茶$&quot;, min_length=2)): milktea = &#123; &quot;id&quot;: 1, &quot;name&quot;: milktea_name, &quot;description&quot;: &quot;The description of the milktea...&quot; &#125; return &#123;&quot;milktea&quot;: milktea&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 实现了一个查询奶茶的 api，其中要求奶茶名必须是茶结尾，并且字符串长度大于等于 2 查询参数的验证 使用fastapi.Query类实现 使用方法与Path大体一致 区别在于： Query(..., )表示该查询参数为必选项 Query(None, )表示该查询参数为 可选项，其中None可以是任何内容表示默认值 Query(alias=&quot;[别名]&quot;)设置查询参数别名，起了别名之后原先参数名失效 整数类型验证123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPI, Path, Queryapp = FastAPI()@app.get(&quot;/users/current&quot;)async def get_current_user(page_index: int = Query(1, ge=1, le=100), page_size: int = Query(10, ge=1, le=100)): user = &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;Jane Guilherme&quot;, &quot;gender&quot;: &quot;female&quot; &#125; page_info = &#123; &quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size &#125; return &#123;&quot;user&quot;: user, &quot;page_info&quot;: page_info&#125;@app.get(&quot;/users/&#123;user_id&#125;&quot;)async def get_user(user_id: int = Path(..., title=&quot;The ID of the user to get&quot;, ge=1, le=200)): user = &#123; &quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; return &#123;&quot;user&quot;: user&#125;@app.get(&quot;/books/&#123;book_name&#125;&quot;)async def get_book(book_name: str = Path(..., title=&quot;The name of the book to get&quot;, min_length=3, max_length=10)): book = &#123; &quot;id&quot;: 1, &quot;name&quot;: book_name, &quot;description&quot;: &quot;The description of the book...&quot; &#125; return &#123;&quot;book&quot;: book&#125;@app.get(&quot;/milkteas/&#123;milktea_name&#125;&quot;)async def get_milktea( milktea_name: str = Path(..., title=&quot;The name of the milktea to get&quot;, regex=r&quot;^.*茶$&quot;, min_length=2)): milktea = &#123; &quot;id&quot;: 1, &quot;name&quot;: milktea_name, &quot;description&quot;: &quot;The description of the milktea...&quot; &#125; return &#123;&quot;milktea&quot;: milktea&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 查询参数别名123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPI, Path, Queryapp = FastAPI()@app.get(&quot;/users/current&quot;)async def get_current_user(page_index: int = Query(1, alias=&quot;page-index&quot;, ge=1, le=100), page_size: int = Query(10, alias=&quot;page-size&quot;, ge=1, le=100)): user = &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;Jane Guilherme&quot;, &quot;gender&quot;: &quot;female&quot; &#125; page_info = &#123; &quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size &#125; return &#123;&quot;user&quot;: user, &quot;page_info&quot;: page_info&#125;@app.get(&quot;/users/&#123;user_id&#125;&quot;)async def get_user(user_id: int = Path(..., title=&quot;The ID of the user to get&quot;, ge=1, le=200)): user = &#123; &quot;id&quot;: user_id, &quot;name&quot;: &quot;John Doe&quot;, &quot;gender&quot;: &quot;male&quot; &#125; return &#123;&quot;user&quot;: user&#125;@app.get(&quot;/books/&#123;book_name&#125;&quot;)async def get_book(book_name: str = Path(..., title=&quot;The name of the book to get&quot;, min_length=3, max_length=10)): book = &#123; &quot;id&quot;: 1, &quot;name&quot;: book_name, &quot;description&quot;: &quot;The description of the book...&quot; &#125; return &#123;&quot;book&quot;: book&#125;@app.get(&quot;/milkteas/&#123;milktea_name&#125;&quot;)async def get_milktea( milktea_name: str = Path(..., title=&quot;The name of the milktea to get&quot;, regex=r&quot;^.*茶$&quot;, min_length=2)): milktea = &#123; &quot;id&quot;: 1, &quot;name&quot;: milktea_name, &quot;description&quot;: &quot;The description of the milktea...&quot; &#125; return &#123;&quot;milktea&quot;: milktea&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 起了查询参数别名之后，可以键入：http://127.0.0.1:8000/users/current?page-index=2&page-size=10 这时如果还使用原先的查询参数就会失效啦，会使用默认值而不是传入的值 请求体-进阶创建一个/request_body_advance目录，然后创建一个main.py 多个请求体参数1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumfrom typing import Optionalimport uvicornfrom fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()class User(BaseModel): name: str description: Optional[str] = &quot;No description&quot;class Order(BaseModel): number: int goods: str@app.put(&quot;/carts/&#123;cart_id&#125;&quot;)async def update_cart(cart_id: int, user: User, order: Order): # 做一些更新购物车的数据库操作 result = &#123; &quot;cart_id&quot;: cart_id, &quot;user_name&quot;: user.name, &quot;order_good&quot;: order.goods &#125; return resultif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 单一数据类型作为请求体参数当函数参数列表中有一个 int 或者 str 类型的单一数据类型时，API 会默认将它作为一个查询参数，那么我们应该怎么做让其声明为一个请求体参数呢 使用fastapi.Body类声明，使用方法与上面的 Path、Query 大体相同 12345678910111213141516171819202122232425262728293031323334353637# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Bodyfrom pydantic import BaseModelapp = FastAPI()class User(BaseModel): name: str description: Optional[str] = &quot;No description&quot;class Order(BaseModel): number: int goods: str@app.put(&quot;/carts/&#123;cart_id&#125;&quot;)async def update_cart(cart_id: int, user: User, order: Order, total_price: float = Body(...)): # 做一些更新购物车的数据库操作 result = &#123; &quot;cart_id&quot;: cart_id, &quot;user_name&quot;: user.name, &quot;order_good&quot;: order.goods, &quot;total_price&quot;: total_price &#125; return resultif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 这时 total_price 可以作为请求体参数发给 API 请求体模型中的属性验证 使用pydantic.Field进行验证 12345678910111213141516171819202122232425262728293031323334353637# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Bodyfrom pydantic import BaseModel, Fieldapp = FastAPI()class User(BaseModel): name: str = Field(..., min_length=4) description: Optional[str] = Field(&quot;No description&quot;, min_length=10)class Order(BaseModel): number: int = Field(..., ge=1) goods: str@app.put(&quot;/carts/&#123;cart_id&#125;&quot;)async def update_cart(cart_id: int, user: User, order: Order, total_price: float = Body(...)): # 做一些更新购物车的数据库操作 result = &#123; &quot;cart_id&quot;: cart_id, &quot;user_name&quot;: user.name, &quot;order_good&quot;: order.goods, &quot;total_price&quot;: total_price &#125; return resultif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 错误的参数： 正确的参数： 请求体模型嵌套12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Bodyfrom pydantic import BaseModel, Fieldapp = FastAPI()class Address(BaseModel): province: str city: strclass User(BaseModel): name: str = Field(..., min_length=4) description: Optional[str] = Field(&quot;No description&quot;, min_length=10)class Order(BaseModel): number: int = Field(..., ge=1) goods: str address: Address@app.put(&quot;/carts/&#123;cart_id&#125;&quot;)async def update_cart(cart_id: int, user: User, order: Order, total_price: float = Body(...)): # 做一些更新购物车的数据库操作 result = &#123; &quot;cart_id&quot;: cart_id, &quot;user_name&quot;: user.name, &quot;order_good&quot;: order.goods, &quot;total_price&quot;: total_price &#125; return resultif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 模型内使用 list、set 等数据结构 goods: List[str] goods: list 12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumfrom typing import Optional, Listimport uvicornfrom fastapi import FastAPI, Bodyfrom pydantic import BaseModel, Fieldapp = FastAPI()class Address(BaseModel): province: str city: strclass User(BaseModel): name: str = Field(..., min_length=4) description: Optional[str] = Field(&quot;No description&quot;, min_length=10)class Order(BaseModel): number: int = Field(..., ge=1) goods: List[str] = Field(..., min_items=1) address: Address@app.put(&quot;/carts/&#123;cart_id&#125;&quot;)async def update_cart(cart_id: int, user: User, order: Order, total_price: float = Body(...)): # 做一些更新购物车的数据库操作 result = &#123; &quot;cart_id&quot;: cart_id, &quot;user_name&quot;: user.name, &quot;order_good&quot;: order.goods, &quot;total_price&quot;: total_price &#125; return resultif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 示例数据在 swagger-UI 中每一个 API 会有一个默认的示例数据 示例数据是显示在文档中的例子，可以给使用者提供示例数据格式，可视化更直接，更便于使用者理解 API 如何使用 Body &gt; model_config &gt; Field 但是更推荐使用Field，因为如果请求体数据模型有修改，会更便利 通过 Field 定义示例数据 Field(..., examples=[&quot;具体数据&quot;]) 12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumfrom typing import Optional, Listimport uvicornfrom fastapi import FastAPI, Bodyfrom pydantic import BaseModel, Fieldapp = FastAPI()class Address(BaseModel): province: str = Field(..., examples=[&quot;广东省&quot;]) city: str = Field(..., examples=[&quot;深圳市&quot;])class User(BaseModel): name: str = Field(..., min_length=4, examples=[&quot;Zachary&quot;]) description: Optional[str] = Field(&quot;No description&quot;, min_length=10, examples=[&quot;该用户是新人，拥有新人优惠券&quot;])class Order(BaseModel): number: int = Field(..., ge=1, examples=[1]) goods: List[str] = Field(..., min_items=1, examples=[[&quot;苹果&quot;, &quot;香蕉&quot;]]) address: Address@app.put(&quot;/carts/&#123;cart_id&#125;&quot;)async def update_cart(cart_id: int, user: User, order: Order, total_price: float = Body(...)): # 做一些更新购物车的数据库操作 result = &#123; &quot;cart_id&quot;: cart_id, &quot;user_name&quot;: user.name, &quot;order_good&quot;: order.goods, &quot;total_price&quot;: total_price &#125; return resultif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 通过定义模型属性 model_config model_config优先级更高 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumfrom typing import Optional, Listimport uvicornfrom fastapi import FastAPI, Bodyfrom pydantic import BaseModel, Fieldapp = FastAPI()class Address(BaseModel): province: str = Field(...) city: str = Field(...) model_config = &#123; &quot;json_schema_extra&quot;: &#123; &quot;examples&quot;: [&#123; &quot;province&quot;: &quot;江苏省&quot;, &quot;city&quot;: &quot;南京市&quot; &#125;] &#125; &#125;class User(BaseModel): name: str = Field(..., min_length=4) description: Optional[str] = Field(&quot;No description&quot;, min_length=10) model_config = &#123; &quot;json_schema_extra&quot;: &#123; &quot;examples&quot;: [&#123; &quot;name&quot;: &quot;Zachary&quot;, &quot;description&quot;: &quot;该用户是新人，拥有新人优惠券&quot; &#125;] &#125; &#125;class Order(BaseModel): number: int = Field(..., ge=1, examples=[1]) goods: List[str] = Field(..., min_items=1, examples=[[&quot;苹果&quot;, &quot;香蕉&quot;]]) address: Address@app.put(&quot;/carts/&#123;cart_id&#125;&quot;)async def update_cart(cart_id: int, user: User, order: Order, total_price: float = Body(...)): # 做一些更新购物车的数据库操作 result = &#123; &quot;cart_id&quot;: cart_id, &quot;user_name&quot;: user.name, &quot;order_good&quot;: order.goods, &quot;total_price&quot;: total_price &#125; return resultif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 通过 Body 定义示例数据 Body主要是定义单一数据类型作为请求体参数时用的，但同时请求体数据模型也适用Body进行配置 Body优先级最高 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# -*- coding:utf-8 -*-# Author: Zacharyfrom enum import Enumfrom typing import Optional, Listimport uvicornfrom fastapi import FastAPI, Bodyfrom pydantic import BaseModel, Fieldapp = FastAPI()class Address(BaseModel): province: str = Field(...) city: str = Field(...) model_config = &#123; &quot;json_schema_extra&quot;: &#123; &quot;examples&quot;: [&#123; &quot;province&quot;: &quot;江苏省&quot;, &quot;city&quot;: &quot;南京市&quot; &#125;] &#125; &#125;class User(BaseModel): name: str = Field(..., min_length=4) description: Optional[str] = Field(&quot;No description&quot;, min_length=10) model_config = &#123; &quot;json_schema_extra&quot;: &#123; &quot;examples&quot;: [&#123; &quot;name&quot;: &quot;Zachary&quot;, &quot;description&quot;: &quot;该用户是新人，拥有新人优惠券&quot; &#125;] &#125; &#125;class Order(BaseModel): number: int = Field(..., ge=1, examples=[1]) goods: List[str] = Field(..., min_items=1, examples=[[&quot;苹果&quot;, &quot;香蕉&quot;]]) address: Address@app.put(&quot;/carts/&#123;cart_id&#125;&quot;)async def update_cart(cart_id: int, user: User, order: Order, total_price: float = Body(..., examples=[188888.88])): # 做一些更新购物车的数据库操作 result = &#123; &quot;cart_id&quot;: cart_id, &quot;user_name&quot;: user.name, &quot;order_good&quot;: order.goods, &quot;total_price&quot;: total_price &#125; return resultif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 这里提及一个小技巧 对方法来说，如果def func(*, num1, num2)参数列表的第一个*把所有位置参数占了，后面的所有参数都是关键字参数，并且没有顺序 Cookie 与 Header 参数创建一个目录/cookie_header，然后在这其中创建一个main.py 放在 cookie 中的键值对数据，常用的键不使用_连接，常用-，但是用-不符合 Python 编程规范，因此可以设置别名 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optional, Unionimport uvicornfrom fastapi import FastAPI, Cookie, Headerapp = FastAPI()@app.put(&quot;/cookieAndHeader&quot;)async def cookie_and_header(*, favorite_schema: Optional[str] = Cookie(default=None, alias=&quot;favorite-schema&quot;), api_token: Union[str, None] = Header(default=None, alias=&quot;api-token&quot;)): result_dict = &#123; &quot;favorite_schema&quot;: favorite_schema, &quot;api_token&quot;: api_token &#125; return result_dictif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 但是尝试测试可以发现，在 swagger-UI 里面无法显示 cookie 的内容 这是由于浏览器的原因，需要使用 postman 来测试，设置好 header 和 cookie 这时，可以获得完整的 cookie 如果一定想要通过 swagger-UI 来实现 cookie 的查看，需要设置一下 cookie 通过Response来设置 cookie 的内容，实际上这个 Response 就是发送给客户端结果的 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optional, Unionimport uvicornfrom fastapi import FastAPI, Cookie, Header, Responseapp = FastAPI()@app.put(&quot;/cookieAndHeader&quot;)async def cookie_and_header(*, response: Response, favorite_schema: Optional[str] = Cookie(default=None, alias=&quot;favorite-schema&quot;), api_token: Union[str, None] = Header(default=None, alias=&quot;api-token&quot;)): result_dict = &#123; &quot;favorite_schema&quot;: favorite_schema, &quot;api_token&quot;: api_token &#125; response.set_cookie(key=&quot;favorite-schema&quot;, value=&quot;black&quot;) return result_dictif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 之后再去 swagger-UI 查看的时候，第一次调用仍旧没有 cookie，但是服务端进行了设置，第二次调用的时候，就能看到服务端所设置的 cookie 了 响应模型在 swagger-UI 中，我们只能得到一个响应模型的精简例子，只能知道返回的内容是什么类型，不能知道一个具体格式 在项目路径下创建一个/response_model，然后创建一个main.py 定义响应模型 response_model指定响应模型 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPIfrom pydantic import BaseModelusers = &#123; &quot;s&quot;: &#123;&quot;id&quot;: 0&#125;, &quot;a&quot;: &#123;&quot;id&quot;: 1, &quot;username&quot;: &quot;a&quot;&#125;, &quot;b&quot;: &#123;&quot;id&quot;: 2, &quot;username&quot;: &quot;b&quot;, &quot;password&quot;: &quot;bbb&quot;&#125;, &quot;c&quot;: &#123;&quot;id&quot;: 3, &quot;username&quot;: &quot;c&quot;, &quot;password&quot;: &quot;ccc&quot;, &quot;description&quot;: &quot;default&quot;&#125;, &quot;d&quot;: &#123;&quot;id&quot;: 4, &quot;username&quot;: &quot;d&quot;, &quot;password&quot;: &quot;ddd&quot;, &quot;description&quot;: &quot;it&#x27;s user d&quot;&#125;, &quot;e&quot;: &#123;&quot;id&quot;: 5, &quot;username&quot;: &quot;e&quot;, &quot;password&quot;: &quot;eee&quot;, &quot;description&quot;: &quot;it&#x27;s user e&quot;, &quot;fullname&quot;: &quot;Tony Stark&quot;&#125;&#125;app = FastAPI()class UserOut(BaseModel): id: int username: str password: Optional[str] = &quot;default&quot; description: Optional[str] = &quot;default&quot; fullname: Optional[str] = &quot;default&quot;@app.get(&quot;/users/&#123;username&#125;&quot;, response_model=UserOut)async def get_user(username: str): return users.get(username, &#123;&#125;)if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 这时查看一下 responses，就能看出来返回结果具体包括的内容 resoinse_model_include可以指定响应模型只输出的内容 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPIfrom pydantic import BaseModelusers = &#123; &quot;s&quot;: &#123;&quot;id&quot;: 0&#125;, &quot;a&quot;: &#123;&quot;id&quot;: 1, &quot;username&quot;: &quot;a&quot;&#125;, &quot;b&quot;: &#123;&quot;id&quot;: 2, &quot;username&quot;: &quot;b&quot;, &quot;password&quot;: &quot;bbb&quot;&#125;, &quot;c&quot;: &#123;&quot;id&quot;: 3, &quot;username&quot;: &quot;c&quot;, &quot;password&quot;: &quot;ccc&quot;, &quot;description&quot;: &quot;default&quot;&#125;, &quot;d&quot;: &#123;&quot;id&quot;: 4, &quot;username&quot;: &quot;d&quot;, &quot;password&quot;: &quot;ddd&quot;, &quot;description&quot;: &quot;it&#x27;s user d&quot;&#125;, &quot;e&quot;: &#123;&quot;id&quot;: 5, &quot;username&quot;: &quot;e&quot;, &quot;password&quot;: &quot;eee&quot;, &quot;description&quot;: &quot;it&#x27;s user e&quot;, &quot;fullname&quot;: &quot;Tony Stark&quot;&#125;&#125;app = FastAPI()class UserOut(BaseModel): id: int username: str password: Optional[str] = &quot;default&quot; description: Optional[str] = &quot;default&quot; fullname: Optional[str] = &quot;default&quot;@app.get(&quot;/users/&#123;username&#125;&quot;, response_model=UserOut, response_model_include=&#123;&quot;id&quot;, &quot;username&quot;, &quot;description&quot;&#125;)async def get_user(username: str): return users.get(username, &#123;&#125;)if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 这样的话 response 只有指定的 response_model_exclude也是同样的用法 response_model_exclude_unset如果数据包含这个值，就显示出来 1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPIfrom pydantic import BaseModelusers = &#123; &quot;s&quot;: &#123;&quot;id&quot;: 0&#125;, &quot;a&quot;: &#123;&quot;id&quot;: 1, &quot;username&quot;: &quot;a&quot;&#125;, &quot;b&quot;: &#123;&quot;id&quot;: 2, &quot;username&quot;: &quot;b&quot;, &quot;password&quot;: &quot;bbb&quot;&#125;, &quot;c&quot;: &#123;&quot;id&quot;: 3, &quot;username&quot;: &quot;c&quot;, &quot;password&quot;: &quot;ccc&quot;, &quot;description&quot;: &quot;default&quot;&#125;, &quot;d&quot;: &#123;&quot;id&quot;: 4, &quot;username&quot;: &quot;d&quot;, &quot;password&quot;: &quot;ddd&quot;, &quot;description&quot;: &quot;it&#x27;s user d&quot;&#125;, &quot;e&quot;: &#123;&quot;id&quot;: 5, &quot;username&quot;: &quot;e&quot;, &quot;password&quot;: &quot;eee&quot;, &quot;description&quot;: &quot;it&#x27;s user e&quot;, &quot;fullname&quot;: &quot;Tony Stark&quot;&#125;&#125;app = FastAPI()class UserOut(BaseModel): id: int username: str password: Optional[str] = &quot;default&quot; description: Optional[str] = &quot;default&quot; fullname: Optional[str] = &quot;default&quot;@app.get(&quot;/users/&#123;username&#125;&quot;, response_model=UserOut, response_model_exclude_unset=True)async def get_user(username: str): return users.get(username, &#123;&#125;)if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 响应模型列表 response_model=List[User] 1234567891011121314151617181920212223242526272829303132333435363738394041# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optional, Listimport uvicornfrom fastapi import FastAPIfrom pydantic import BaseModelusers = &#123; # &quot;s&quot;: &#123;&quot;id&quot;: 0&#125;, &quot;a&quot;: &#123;&quot;id&quot;: 1, &quot;username&quot;: &quot;a&quot;&#125;, &quot;b&quot;: &#123;&quot;id&quot;: 2, &quot;username&quot;: &quot;b&quot;, &quot;password&quot;: &quot;bbb&quot;&#125;, &quot;c&quot;: &#123;&quot;id&quot;: 3, &quot;username&quot;: &quot;c&quot;, &quot;password&quot;: &quot;ccc&quot;, &quot;description&quot;: &quot;default&quot;&#125;, &quot;d&quot;: &#123;&quot;id&quot;: 4, &quot;username&quot;: &quot;d&quot;, &quot;password&quot;: &quot;ddd&quot;, &quot;description&quot;: &quot;it&#x27;s user d&quot;&#125;, &quot;e&quot;: &#123;&quot;id&quot;: 5, &quot;username&quot;: &quot;e&quot;, &quot;password&quot;: &quot;eee&quot;, &quot;description&quot;: &quot;it&#x27;s user e&quot;, &quot;fullname&quot;: &quot;Tony Stark&quot;&#125;&#125;app = FastAPI()class UserOut(BaseModel): id: int username: str password: Optional[str] = &quot;default&quot; description: Optional[str] = &quot;default&quot; fullname: Optional[str] = &quot;default&quot;@app.get(&quot;/users/&#123;username&#125;&quot;, response_model=UserOut, response_model_exclude_unset=True)async def get_user(username: str): return users.get(username, &#123;&#125;)@app.get(&quot;/users&quot;, response_model=List[UserOut])async def get_users(): return users.values()if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 状态码与异常处理创建一个/exception_handler目录，然后创建main.py 状态码返回指定状态码 status_code= 12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()users = &#123; &quot;a&quot;: &#123;&quot;id&quot;: 1, &quot;username&quot;: &quot;a&quot;&#125;, &quot;b&quot;: &#123;&quot;id&quot;: 2, &quot;username&quot;: &quot;b&quot;, &quot;password&quot;: &quot;bbb&quot;&#125;, &quot;c&quot;: &#123;&quot;id&quot;: 3, &quot;username&quot;: &quot;c&quot;, &quot;password&quot;: &quot;ccc&quot;, &quot;description&quot;: &quot;default&quot;&#125;, &quot;d&quot;: &#123;&quot;id&quot;: 4, &quot;username&quot;: &quot;d&quot;, &quot;password&quot;: &quot;ddd&quot;, &quot;description&quot;: &quot;it&#x27;s user d&quot;&#125;, &quot;e&quot;: &#123;&quot;id&quot;: 5, &quot;username&quot;: &quot;e&quot;, &quot;password&quot;: &quot;eee&quot;, &quot;description&quot;: &quot;it&#x27;s user e&quot;, &quot;fullname&quot;: &quot;Tony Stark&quot;&#125;&#125;class UserBase(BaseModel): id: Optional[int] = None username: str description: Optional[str] = &quot;default&quot; fullname: Optional[str] = Noneclass UserIn(UserBase): password: strclass UserOut(UserBase): pass@app.post(&quot;/users&quot;, status_code=201, response_model=UserOut)async def create_user(user: UserIn): user_dict = user.model_dump() user_dict.update(&#123;&quot;id&quot;: 6&#125;) return user_dictif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 异常处理通过异常返回错误 通过抛出HTTPException来获得错误返回 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Path, HTTPException, statusfrom pydantic import BaseModelapp = FastAPI()users = &#123; &quot;a&quot;: &#123;&quot;id&quot;: 1, &quot;username&quot;: &quot;a&quot;&#125;, &quot;b&quot;: &#123;&quot;id&quot;: 2, &quot;username&quot;: &quot;b&quot;, &quot;password&quot;: &quot;bbb&quot;&#125;, &quot;c&quot;: &#123;&quot;id&quot;: 3, &quot;username&quot;: &quot;c&quot;, &quot;password&quot;: &quot;ccc&quot;, &quot;description&quot;: &quot;default&quot;&#125;, &quot;d&quot;: &#123;&quot;id&quot;: 4, &quot;username&quot;: &quot;d&quot;, &quot;password&quot;: &quot;ddd&quot;, &quot;description&quot;: &quot;it&#x27;s user d&quot;&#125;, &quot;e&quot;: &#123;&quot;id&quot;: 5, &quot;username&quot;: &quot;e&quot;, &quot;password&quot;: &quot;eee&quot;, &quot;description&quot;: &quot;it&#x27;s user e&quot;, &quot;fullname&quot;: &quot;Tony Stark&quot;&#125;&#125;class UserBase(BaseModel): id: Optional[int] = None username: str description: Optional[str] = &quot;default&quot; fullname: Optional[str] = Noneclass UserIn(UserBase): password: strclass UserOut(UserBase): pass@app.post(&quot;/users&quot;, status_code=201, response_model=UserOut)async def create_user(user: UserIn): user_dict = user.model_dump() user_dict.update(&#123;&quot;id&quot;: 6&#125;) return user_dict@app.get(&quot;/users/&#123;username&#125;&quot;, status_code=200, response_model=UserOut)async def get_user(username: str = Path(..., min_length=1)): user = users.get(username, None) if user: return user raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f&quot;&#123;username&#125; not found&quot;)if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 自定义异常 通过使用@app.exception_handler()进行异常处理 通过JSONResponse返回异常结果 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Path, HTTPException, status, Requestfrom fastapi.responses import JSONResponsefrom pydantic import BaseModelapp = FastAPI()users = &#123; &quot;a&quot;: &#123;&quot;id&quot;: 1, &quot;username&quot;: &quot;a&quot;&#125;, &quot;b&quot;: &#123;&quot;id&quot;: 2, &quot;username&quot;: &quot;b&quot;, &quot;password&quot;: &quot;bbb&quot;&#125;, &quot;c&quot;: &#123;&quot;id&quot;: 3, &quot;username&quot;: &quot;c&quot;, &quot;password&quot;: &quot;ccc&quot;, &quot;description&quot;: &quot;default&quot;&#125;, &quot;d&quot;: &#123;&quot;id&quot;: 4, &quot;username&quot;: &quot;d&quot;, &quot;password&quot;: &quot;ddd&quot;, &quot;description&quot;: &quot;it&#x27;s user d&quot;&#125;, &quot;e&quot;: &#123;&quot;id&quot;: 5, &quot;username&quot;: &quot;e&quot;, &quot;password&quot;: &quot;eee&quot;, &quot;description&quot;: &quot;it&#x27;s user e&quot;, &quot;fullname&quot;: &quot;Tony Stark&quot;&#125;&#125;class UserBase(BaseModel): id: Optional[int] = None username: str description: Optional[str] = &quot;default&quot; fullname: Optional[str] = Noneclass UserIn(UserBase): password: strclass UserOut(UserBase): passclass UserNotFoundException(Exception): def __init__(self, username: str): self.username = username@app.post(&quot;/users&quot;, status_code=201, response_model=UserOut)async def create_user(user: UserIn): user_dict = user.model_dump() user_dict.update(&#123;&quot;id&quot;: 6&#125;) return user_dict@app.get(&quot;/users/&#123;username&#125;&quot;, status_code=200, response_model=UserOut)async def get_user(username: str = Path(..., min_length=1)): user = users.get(username, None) if user: return user raise UserNotFoundException(username)@app.exception_handler(UserNotFoundException)async def user_not_found_exception_handler(request: Request, exc: UserNotFoundException): return JSONResponse(status_code=404, content=&#123; &quot;error_code&quot;: 404, &quot;message&quot;: f&quot;user: &#123;exc.username&#125; not found&quot;&#125;)if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 处理多种返回 通过responses=参数指定会包含的多种异常返回响应模型 但是这块需要注意一点：responses 中的异常响应模型，并不会对 return 的内容做格式化，所以需要自己处理一下返回的内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Path, HTTPException, status, Requestfrom fastapi.responses import JSONResponsefrom pydantic import BaseModelapp = FastAPI()users = &#123; &quot;a&quot;: &#123;&quot;id&quot;: 1, &quot;username&quot;: &quot;a&quot;&#125;, &quot;b&quot;: &#123;&quot;id&quot;: 2, &quot;username&quot;: &quot;b&quot;, &quot;password&quot;: &quot;bbb&quot;&#125;, &quot;c&quot;: &#123;&quot;id&quot;: 3, &quot;username&quot;: &quot;c&quot;, &quot;password&quot;: &quot;ccc&quot;, &quot;description&quot;: &quot;default&quot;&#125;, &quot;d&quot;: &#123;&quot;id&quot;: 4, &quot;username&quot;: &quot;d&quot;, &quot;password&quot;: &quot;ddd&quot;, &quot;description&quot;: &quot;it&#x27;s user d&quot;&#125;, &quot;e&quot;: &#123;&quot;id&quot;: 5, &quot;username&quot;: &quot;e&quot;, &quot;password&quot;: &quot;eee&quot;, &quot;description&quot;: &quot;it&#x27;s user e&quot;, &quot;fullname&quot;: &quot;Tony Stark&quot;&#125;&#125;class UserBase(BaseModel): id: Optional[int] = None username: str description: Optional[str] = &quot;default&quot; fullname: Optional[str] = Noneclass UserIn(UserBase): password: strclass UserOut(UserBase): passclass ErrorMessage(BaseModel): error_code: int message: strclass UserNotFoundException(Exception): def __init__(self, username: str): self.username = username@app.post(&quot;/users&quot;, status_code=201, response_model=UserOut, responses=&#123; 400: &#123; &quot;model&quot;: ErrorMessage, &#125;, 401: &#123; &quot;model&quot;: ErrorMessage, &#125;&#125;)async def create_user(user: UserIn): if users.get(user.username, None): error_message = ErrorMessage(error_code=400, message=f&quot;user: &#123;user.username&#125; already exists&quot;) return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content=error_message.model_dump()) user_dict = user.model_dump() user_dict.update(&#123;&quot;id&quot;: 6&#125;) return user_dict@app.get(&quot;/users/&#123;username&#125;&quot;, status_code=200, response_model=UserOut)async def get_user(username: str = Path(..., min_length=1)): user = users.get(username, None) if user: return user raise UserNotFoundException(username)@app.exception_handler(UserNotFoundException)async def user_not_found_exception_handler(request: Request, exc: UserNotFoundException): return JSONResponse(status_code=404, content=&#123; &quot;error_code&quot;: 404, &quot;message&quot;: f&quot;user: &#123;exc.username&#125; not found&quot;&#125;)if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 这会儿看结果就会有响应模型 400、401 的 同时重复创建用户的话 依赖注入 依赖注入用于对依赖项的参数进行调用&#x2F;引用，便于代码的复用，如分页功能 创建一个/depends目录，然后在下面创建main.py 函数作为依赖项1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Dependsapp = FastAPI()def pageinfo_params(page_index: Optional[int] = 1, page_size: Optional[int] = 10): return &#123;&quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size&#125;@app.get(&quot;/items&quot;)async def get_items(page_info: dict = Depends(pageinfo_params)): return page_info@app.get(&quot;/users&quot;)async def get_users(page_info: dict = Depends(pageinfo_params)): return page_infoif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 类作为依赖项 类作为依赖项时，以下两个表达效果一致 page_info: PageInfo = Depends(PageInfo) page_info: PageInfo = Depends() 1234567891011121314151617181920212223242526272829303132# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Dependsapp = FastAPI()def pageinfo_params(page_index: Optional[int] = 1, page_size: Optional[int] = 10): return &#123;&quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size&#125;class PageInfo: def __init__(self, page_index: Optional[int] = 1, page_size: Optional[int] = 10): self.page_index = page_index self.page_size = page_size@app.get(&quot;/items&quot;)async def get_items(page_info: dict = Depends(pageinfo_params)): return page_info@app.get(&quot;/users&quot;)async def get_users(page_info: PageInfo = Depends(PageInfo)): return page_infoif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 子依赖项子依赖项其实就是 依赖项中某项具有依赖项 增加一个总页码的项 123456789101112131415161718192021222324252627282930313233343536373839# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Dependsapp = FastAPI()def total_pages_params(total_page: Optional[int] = 1): return total_pagedef pageinfo_params(page_index: Optional[int] = 1, page_size: Optional[int] = 10, total: Optional[int] = Depends(total_pages_params)): return &#123;&quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size, &quot;total&quot;: total&#125;class PageInfo: def __init__(self, page_index: Optional[int] = 1, page_size: Optional[int] = 10, total: Optional[int] = Depends(total_pages_params)): self.page_index = page_index self.page_size = page_size self.total = total@app.get(&quot;/items&quot;)async def get_items(page_info: dict = Depends(pageinfo_params)): return page_info@app.get(&quot;/users&quot;)async def get_users(page_info: PageInfo = Depends(PageInfo)): return page_infoif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 通过依赖注解使用 dependencies给 get_users 加上一个鉴权的功能 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Depends, Header, HTTPExceptionapp = FastAPI()async def auth_verify(api_token: Optional[str] = Header(default=None, alias=&quot;api-token&quot;)): if not api_token: raise HTTPException(status_code=401, detail=&quot;No API token provided,Unauthorized&quot;)def total_pages_params(total_page: Optional[int] = 1): return total_pagedef pageinfo_params(page_index: Optional[int] = 1, page_size: Optional[int] = 10, total: Optional[int] = Depends(total_pages_params)): return &#123;&quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size, &quot;total&quot;: total&#125;class PageInfo: def __init__(self, page_index: Optional[int] = 1, page_size: Optional[int] = 10, total: Optional[int] = Depends(total_pages_params)): self.page_index = page_index self.page_size = page_size self.total = total@app.get(&quot;/items&quot;)async def get_items(page_info: dict = Depends(pageinfo_params)): return page_info@app.get(&quot;/users&quot;, dependencies=[Depends(auth_verify)])async def get_users(page_info: PageInfo = Depends(PageInfo)): return page_infoif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 全局依赖注入如果不只是 get_user 需要鉴权，所有 api 都需要鉴权，这是可以在构造 app 的时候传入 dependencies 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Optionalimport uvicornfrom fastapi import FastAPI, Depends, Header, HTTPExceptionasync def auth_verify(api_token: Optional[str] = Header(default=None, alias=&quot;api-token&quot;)): if not api_token: raise HTTPException(status_code=401, detail=&quot;No API token provided,Unauthorized&quot;)app = FastAPI(dependencies=[Depends(auth_verify)])def total_pages_params(total_page: Optional[int] = 1): return total_pagedef pageinfo_params(page_index: Optional[int] = 1, page_size: Optional[int] = 10, total: Optional[int] = Depends(total_pages_params)): return &#123;&quot;page_index&quot;: page_index, &quot;page_size&quot;: page_size, &quot;total&quot;: total&#125;class PageInfo: def __init__(self, page_index: Optional[int] = 1, page_size: Optional[int] = 10, total: Optional[int] = Depends(total_pages_params)): self.page_index = page_index self.page_size = page_size self.total = total@app.get(&quot;/items&quot;)async def get_items(page_info: dict = Depends(pageinfo_params)): return page_info@app.get(&quot;/users&quot;)async def get_users(page_info: PageInfo = Depends(PageInfo)): return page_infoif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) API 的身份认证插件准备 python-multipart==0.0.6 PyJWT==2.8.0 123fastapi[all]python-multipart==0.0.6PyJWT==2.8.0 用户登录的 API创建一个目录/security然后创建一个main.py 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetime, timezone, timedeltaimport jwtimport uvicornfrom fastapi import FastAPI, Depends, HTTPExceptionfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestFormfrom pydantic import BaseModelSECURITY_KEY = &quot;zacharysecret&quot;ALGORITHMS = &quot;HS256&quot;oauth2_scheme = OAuth2PasswordBearer(tokenUrl=&quot;/token&quot;)class Token(BaseModel): access_token: str token_type: strapp = FastAPI()def validate_user(username: str, password: str): if username == &quot;zachary&quot; and password == &quot;123456&quot;: return username return Nonedef get_current_user(token: str = Depends(oauth2_scheme)): unauth_exp = HTTPException(status_code=401, detail=&quot;Unauthorized&quot;) try: username = None token_data = jwt.decode(token, SECURITY_KEY, ALGORITHMS) if token_data: username = token_data.get(&quot;username&quot;, None) except Exception as e: raise unauth_exp if not username: raise unauth_exp return username@app.post(&quot;/token&quot;)async def login(login_form: OAuth2PasswordRequestForm = Depends()): username = validate_user(login_form.username, login_form.password) if not username: raise HTTPException(status_code=401, detail=&quot;Incorrect username or password&quot;, headers=&#123;&quot;WWW-Authenticate&quot;: &quot;Bearer&quot;&#125;) token_expires = datetime.now(timezone.utc) + timedelta(minutes=30) token_data = &#123;&quot;username&quot;: username, &quot;exp&quot;: token_expires&#125; token = jwt.encode(token_data, SECURITY_KEY, ALGORITHMS) return Token(access_token=token, token_type=&quot;bearer&quot;)@app.get(&quot;/items&quot;)async def get_items(username: str = Depends(get_current_user)): return &#123;&quot;current_user&quot;: username&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 可以点击小锁头 先进行一个登录 然后再实现需要登录的 api 连接数据库插件准备 mysqlclient SQLAlchemy 12345fastapi[all]python-multipart==0.0.6PyJWT==2.8.0mysqlclient==2.1.1SQLAlchemy==2.0.23 定义数据库表映射类创建一个/db_process目录，然后创建一个main.py 12345678910111213141516171819202122232425262728293031323334# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIfrom sqlalchemy import create_engine, Integer, Stringfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmakerclass Base(DeclarativeBase): passengine = create_engine(&quot;mysql+mysqldb://root:980226@localhost:3306/testApi&quot;, echo=True)# 定义数据库映射类class StudentEntity(Base): __tablename__ = &quot;students&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True) name: Mapped[str] = mapped_column(String(128), unique=True, nullable=False) gender: Mapped[str] = mapped_column(String(10), nullable=False)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)app = FastAPI()# 定义API内容if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 如果现在运行一下这个代码，就会生成 students 这张表 运行后 准备 API 的输入输出 schema 类12345678910111213...# 定义API模型class StudentBase(BaseModel): name: str gender: strclass StudentCreate(StudentBase): passclass StudentOut(StudentBase): id: int 准备用户数据库连接的 depends 依赖项123456def get_bd_session(): session = Session() try: yield session finally: session.close() 创建和查看所有用户 API123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Listimport uvicornfrom fastapi import FastAPI, Depends, HTTPExceptionfrom pydantic import BaseModelfrom sqlalchemy import create_engine, Integer, String, select, ascfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmakerclass Base(DeclarativeBase): passengine = create_engine(&quot;mysql+mysqldb://root:980226@localhost:3306/testApi&quot;, echo=True)# 定义数据库映射类class StudentEntity(Base): __tablename__ = &quot;students&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True) name: Mapped[str] = mapped_column(String(128), unique=True, nullable=False) gender: Mapped[str] = mapped_column(String(10), nullable=False)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)app = FastAPI()# 定义API模型class StudentBase(BaseModel): name: str gender: strclass StudentCreate(StudentBase): passclass StudentOut(StudentBase): id: intdef get_bd_session(): session = Session() try: yield session finally: session.close()@app.post(&#x27;/students&#x27;, response_model=StudentOut)async def create_student(student: StudentCreate, db_session: Session = Depends(get_bd_session)): query = select(StudentEntity).where(StudentEntity.name == student.name) result = db_session.execute(query).scalars().all() if result: raise HTTPException(status_code=400, detail=f&quot;该学生(&#123;student.name&#125;)已存在&quot;) student = StudentEntity(name=student.name, gender=student.gender) db_session.add(student) db_session.commit() return student@app.get(&#x27;/students&#x27;, response_model=List[StudentOut])async def get_students(db_session: Session = Depends(get_bd_session)): query = select(StudentEntity).order_by(asc(StudentEntity.name)) return db_session.execute(query).scalars().all()if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 创建一个不存在的用户：成功 查看所有学生列表：成功 创建一个已经存在的学生：异常 实现更新与删除在/db_process/main.py中做修改 更新123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Listimport uvicornfrom fastapi import FastAPI, Depends, HTTPException, Pathfrom pydantic import BaseModelfrom sqlalchemy import create_engine, Integer, String, select, ascfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmakerclass Base(DeclarativeBase): passengine = create_engine(&quot;mysql+mysqldb://root:980226@localhost:3306/testApi&quot;, echo=True)# 定义数据库映射类class StudentEntity(Base): __tablename__ = &quot;students&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True) name: Mapped[str] = mapped_column(String(128), unique=True, nullable=False) gender: Mapped[str] = mapped_column(String(10), nullable=False)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)app = FastAPI()# 定义API模型class StudentBase(BaseModel): name: str gender: strclass StudentCreate(StudentBase): passclass StudentUpdate(StudentBase): passclass StudentOut(StudentBase): id: intdef get_bd_session(): session = Session() try: yield session finally: session.close()@app.post(&#x27;/students&#x27;, response_model=StudentOut)async def create_student(student: StudentCreate, db_session: Session = Depends(get_bd_session)): query = select(StudentEntity).where(StudentEntity.name == student.name) result = db_session.execute(query).scalars().all() if result: raise HTTPException(status_code=400, detail=f&quot;该学生(&#123;student.name&#125;)已存在&quot;) student = StudentEntity(name=student.name, gender=student.gender) db_session.add(student) db_session.commit() return student@app.get(&#x27;/students&#x27;, response_model=List[StudentOut])async def get_students(db_session: Session = Depends(get_bd_session)): query = select(StudentEntity).order_by(asc(StudentEntity.name)) return db_session.execute(query).scalars().all()@app.put(&#x27;/students/&#123;student_id&#125;&#x27;, response_model=StudentOut)async def update_student(*, student_id: int = Path(...), student: StudentUpdate, db_session: Session = Depends(get_bd_session)): query = select(StudentEntity).where(StudentEntity.id == student_id) exist_student = db_session.execute(query).scalar() if not exist_student: raise HTTPException(status_code=404, detail=f&quot;该学生(&#123;student_id&#125;)不存在&quot;) exist_student.name = student.name exist_student.gender = student.gender db_session.commit() return exist_studentif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 更新已经可以实现了，但是这块仍旧会有些问题： 如果 StudentUpdate 有更新的话，就会需要修改字段更新的部分 如果字段比较多的话需要写的内容也比较多 虽然 SQLAlchemy 提供了 update 方法可以直接更新，但是更新的内容不能直接返回，还需要重新查一次数据库才行 这块列出三种更新方法 12345678910111213141516def set_attrs(obj, data: dict): if data: for key, value in data.items(): setattr(obj, key, value)# 更新方法1，缺点：无法直接获取返回的对象，需要再查一次库，优点：很方便# update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(**student.dict())update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(student.model_dump())db_session.execute(update_query)# 更新方法2，缺点：如果字段很多，需要一个一个写很麻烦，如果实体类改变字段也需要改 优点：可以直接修改内存中的对象，修改后可以返回exist_student.name = student.nameexist_student.gender = student.gender# 更新方法3 优点：可以获取内存中的对象，便于返回；同时如果实体类改变，也会对应修改set_attrs(exist_student, student.dict()) 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Listimport uvicornfrom fastapi import FastAPI, Depends, HTTPException, Pathfrom pydantic import BaseModelfrom sqlalchemy import create_engine, Integer, String, select, asc, updatefrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmakerdef set_attrs(obj, data: dict): if data: for key, value in data.items(): setattr(obj, key, value)class Base(DeclarativeBase): passengine = create_engine(&quot;mysql+mysqldb://root:980226@localhost:3306/testApi&quot;, echo=True)# 定义数据库映射类class StudentEntity(Base): __tablename__ = &quot;students&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True) name: Mapped[str] = mapped_column(String(128), unique=True, nullable=False) gender: Mapped[str] = mapped_column(String(10), nullable=False)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)app = FastAPI()# 定义API模型class StudentBase(BaseModel): name: str gender: strclass StudentCreate(StudentBase): passclass StudentUpdate(StudentBase): passclass StudentOut(StudentBase): id: intdef get_bd_session(): session = Session() try: yield session finally: session.close()@app.post(&#x27;/students&#x27;, response_model=StudentOut)async def create_student(student: StudentCreate, db_session: Session = Depends(get_bd_session)): query = select(StudentEntity).where(StudentEntity.name == student.name) result = db_session.execute(query).scalars().all() if result: raise HTTPException(status_code=400, detail=f&quot;该学生(&#123;student.name&#125;)已存在&quot;) student = StudentEntity(name=student.name, gender=student.gender) db_session.add(student) db_session.commit() return student@app.get(&#x27;/students&#x27;, response_model=List[StudentOut])async def get_students(db_session: Session = Depends(get_bd_session)): query = select(StudentEntity).order_by(asc(StudentEntity.name)) return db_session.execute(query).scalars().all()@app.put(&#x27;/students/&#123;student_id&#125;&#x27;, response_model=StudentOut)async def update_student(*, student_id: int = Path(...), student: StudentUpdate, db_session: Session = Depends(get_bd_session)): query = select(StudentEntity).where(StudentEntity.id == student_id) exist_student = db_session.execute(query).scalar() if not exist_student: raise HTTPException(status_code=404, detail=f&quot;该学生(&#123;student_id&#125;)不存在&quot;) # # 更新方法1，缺点：无法直接获取返回的对象，需要再查一次库，优点：很方便 # # update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(**student.dict()) # update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(student.model_dump()) # db_session.execute(update_query) # # # 更新方法2，缺点：如果字段很多，需要一个一个写很麻烦，如果实体类改变字段也需要改 优点：可以直接修改内存中的对象，修改后可以返回 # exist_student.name = student.name # exist_student.gender = student.gender # 更新方法3 优点：可以获取内存中的对象，便于返回；同时如果实体类改变，也会对应修改 set_attrs(exist_student, student.dict()) db_session.commit() return exist_studentif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 删除123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Listimport uvicornfrom fastapi import FastAPI, Depends, HTTPException, Pathfrom pydantic import BaseModelfrom sqlalchemy import create_engine, Integer, String, select, asc, updatefrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmakerdef set_attrs(obj, data: dict): if data: for key, value in data.items(): setattr(obj, key, value)class Base(DeclarativeBase): passengine = create_engine(&quot;mysql+mysqldb://root:980226@localhost:3306/testApi&quot;, echo=True)# 定义数据库映射类class StudentEntity(Base): __tablename__ = &quot;students&quot; id: Mapped[int] = mapped_column(Integer, primary_key=True) name: Mapped[str] = mapped_column(String(128), unique=True, nullable=False) gender: Mapped[str] = mapped_column(String(10), nullable=False)Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)app = FastAPI()# 定义API模型class StudentBase(BaseModel): name: str gender: strclass StudentCreate(StudentBase): passclass StudentUpdate(StudentBase): passclass StudentOut(StudentBase): id: intdef get_bd_session(): session = Session() try: yield session finally: session.close()@app.post(&#x27;/students&#x27;, response_model=StudentOut)async def create_student(student: StudentCreate, db_session: Session = Depends(get_bd_session)): query = select(StudentEntity).where(StudentEntity.name == student.name) result = db_session.execute(query).scalars().all() if result: raise HTTPException(status_code=400, detail=f&quot;该学生(&#123;student.name&#125;)已存在&quot;) student = StudentEntity(name=student.name, gender=student.gender) db_session.add(student) db_session.commit() return student@app.get(&#x27;/students&#x27;, response_model=List[StudentOut])async def get_students(db_session: Session = Depends(get_bd_session)): query = select(StudentEntity).order_by(asc(StudentEntity.name)) return db_session.execute(query).scalars().all()def check_student_exist(student_id: int, db_session: Session) -&gt; StudentEntity: query = select(StudentEntity).where(StudentEntity.id == student_id) exist_student = db_session.execute(query).scalar() if not exist_student: raise HTTPException(status_code=404, detail=f&quot;该学生(&#123;student_id&#125;)不存在&quot;) return exist_student@app.put(&#x27;/students/&#123;student_id&#125;&#x27;, response_model=StudentOut)async def update_student(*, student_id: int = Path(...), student: StudentUpdate, db_session: Session = Depends(get_bd_session)): exist_student = check_student_exist(student_id, db_session) # # 更新方法1，缺点：无法直接获取返回的对象，需要再查一次库，优点：很方便 # # update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(**student.dict()) # update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(student.model_dump()) # db_session.execute(update_query) # # # 更新方法2，缺点：如果字段很多，需要一个一个写很麻烦，如果实体类改变字段也需要改 优点：可以直接修改内存中的对象，修改后可以返回 # exist_student.name = student.name # exist_student.gender = student.gender # 更新方法3 优点：可以获取内存中的对象，便于返回；同时如果实体类改变，也会对应修改 set_attrs(exist_student, student.dict()) db_session.commit() return exist_student@app.delete(&#x27;/students/&#123;student_id&#125;&#x27;)async def delete_student(student_id: int = Path(...), db_session: Session = Depends(get_bd_session)): exist_student = check_student_exist(student_id, db_session) db_session.delete(exist_student) db_session.commit() return exist_studentif __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 后台任务为什么需要后台任务当一个 API 执行任务的时间较长时，调用者不希望一直等待任务完成 创建一个目录/background_task，然后创建一个main.py 任务函数 任务函数是一个普通的带参数或者无参数的函数 可以是 async 函数或者普通函数 12345678910111213141516171819202122232425# -*- coding:utf-8 -*-# Author: Zacharyimport timeimport uvicornfrom fastapi import FastAPI, BackgroundTasksapp = FastAPI()def send_message(message: str): print(f&quot;start sending message: &#123;message&#125;&quot;) time.sleep(5) print(f&quot;finish sending message: &#123;message&#125;&quot;) return True@app.post(&quot;/notify&quot;)async def send_notification(message: str, background_tasks: BackgroundTasks): background_tasks.add_task(send_message, message=message) return &#123;&quot;message&quot;: f&quot;Sending notification: &#123;message&#125; in background&quot;&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 元数据与文档 URL标题、描述和版本信息 title description version 目前默认的 swagger-UI 的标题和版本信息都是默认的，没有描述 上面这些内容都可以在构造 app 的时候设置 项目目录下创建一个/metadata_api，然后创建一个main.py 1234567891011121314151617181920212223# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIapp = FastAPI(title=&quot;My API about query&quot;, description=&quot;All this API is some query api use to zachary&#x27;s blog&quot;, version=&quot;1.0.0&quot;)@app.get(&quot;/books&quot;)async def get_books(): return &#123;&quot;books&quot;: [&quot;book1&quot;, &quot;book2&quot;, &quot;book3&quot;]&#125;@app.get(&quot;/users&quot;)async def get_users(): return &#123;&quot;users&quot;: [&quot;user1&quot;, &quot;user2&quot;, &quot;user3&quot;]&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 服务条款与协议信息 terms_of_service服务条款 contact联系信息 name姓名 url连接 email邮箱 license_info协议信息 name协议名称 url协议地址 123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPIapp = FastAPI(title=&quot;My API about query&quot;, description=&quot;All this API is some query api use to zachary&#x27;s blog&quot;, version=&quot;1.0.0&quot;, terms_of_service=&quot;https://zachary.com&quot;, contact=&#123; &quot;name&quot;: &quot;zachary&quot;, &quot;url&quot;: &quot;https://zachary.com&quot;, &quot;email&quot;: &quot;zachary@qq.com&quot; &#125;, license_info=&#123; &quot;name&quot;: &quot;Apache 2.0&quot;, &quot;url&quot;: &quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;, &#125;)@app.get(&quot;/books&quot;)async def get_books(): return &#123;&quot;books&quot;: [&quot;book1&quot;, &quot;book2&quot;, &quot;book3&quot;]&#125;@app.get(&quot;/users&quot;)async def get_users(): return &#123;&quot;users&quot;: [&quot;user1&quot;, &quot;user2&quot;, &quot;user3&quot;]&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 标签 openapi_tags=tags_metadata 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPItags_metadata = [ &#123; &quot;name&quot;: &quot;books&quot;, &quot;description&quot;: &quot;All this API for books management&quot;, &quot;externalDocs&quot;: &#123; &quot;description&quot;: &quot;Books external docs&quot;, &quot;url&quot;: &quot;https://www.baidu.com&quot; &#125; &#125;, &#123; &quot;name&quot;: &quot;users&quot;, &quot;description&quot;: &quot;All this API for users management&quot;, &#125;]app = FastAPI(title=&quot;My API about query&quot;, description=&quot;All this API is some query api use to zachary&#x27;s blog&quot;, version=&quot;1.0.0&quot;, terms_of_service=&quot;https://zachary.com&quot;, contact=&#123; &quot;name&quot;: &quot;zachary&quot;, &quot;url&quot;: &quot;https://zachary.com&quot;, &quot;email&quot;: &quot;zachary@qq.com&quot; &#125;, license_info=&#123; &quot;name&quot;: &quot;Apache 2.0&quot;, &quot;url&quot;: &quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;, &#125;, openapi_tags=tags_metadata)@app.get(&quot;/books&quot;, tags=[&quot;books&quot;, &quot;users&quot;])async def get_books(): return &#123;&quot;books&quot;: [&quot;book1&quot;, &quot;book2&quot;, &quot;book3&quot;]&#125;@app.get(&quot;/users&quot;, tags=[&quot;users&quot;])async def get_users(): return &#123;&quot;users&quot;: [&quot;user1&quot;, &quot;user2&quot;, &quot;user3&quot;]&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) openapiURL openapi_url=&quot;/api/v1/openapi.json&quot; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPItags_metadata = [ &#123; &quot;name&quot;: &quot;books&quot;, &quot;description&quot;: &quot;All this API for books management&quot;, &quot;externalDocs&quot;: &#123; &quot;description&quot;: &quot;Books external docs&quot;, &quot;url&quot;: &quot;https://www.baidu.com&quot; &#125; &#125;, &#123; &quot;name&quot;: &quot;users&quot;, &quot;description&quot;: &quot;All this API for users management&quot;, &#125;]app = FastAPI(title=&quot;My API about query&quot;, description=&quot;All this API is some query api use to zachary&#x27;s blog&quot;, version=&quot;1.0.0&quot;, terms_of_service=&quot;https://zachary.com&quot;, contact=&#123; &quot;name&quot;: &quot;zachary&quot;, &quot;url&quot;: &quot;https://zachary.com&quot;, &quot;email&quot;: &quot;zachary@qq.com&quot; &#125;, license_info=&#123; &quot;name&quot;: &quot;Apache 2.0&quot;, &quot;url&quot;: &quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;, &#125;, openapi_tags=tags_metadata, openapi_url=&quot;/api/v1/openapi.json&quot;)@app.get(&quot;/books&quot;, tags=[&quot;books&quot;, &quot;users&quot;])async def get_books(): return &#123;&quot;books&quot;: [&quot;book1&quot;, &quot;book2&quot;, &quot;book3&quot;]&#125;@app.get(&quot;/users&quot;, tags=[&quot;users&quot;])async def get_users(): return &#123;&quot;users&quot;: [&quot;user1&quot;, &quot;user2&quot;, &quot;user3&quot;]&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 文档 URL docs_url=&quot;/xxx&quot; redoc_url=&quot;/xxx&quot; 如果设置为 None 为禁用 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# -*- coding:utf-8 -*-# Author: Zacharyimport uvicornfrom fastapi import FastAPItags_metadata = [ &#123; &quot;name&quot;: &quot;books&quot;, &quot;description&quot;: &quot;All this API for books management&quot;, &quot;externalDocs&quot;: &#123; &quot;description&quot;: &quot;Books external docs&quot;, &quot;url&quot;: &quot;https://www.baidu.com&quot; &#125; &#125;, &#123; &quot;name&quot;: &quot;users&quot;, &quot;description&quot;: &quot;All this API for users management&quot;, &#125;]app = FastAPI(title=&quot;My API about query&quot;, description=&quot;All this API is some query api use to zachary&#x27;s blog&quot;, version=&quot;1.0.0&quot;, terms_of_service=&quot;https://zachary.com&quot;, contact=&#123; &quot;name&quot;: &quot;zachary&quot;, &quot;url&quot;: &quot;https://zachary.com&quot;, &quot;email&quot;: &quot;zachary@qq.com&quot; &#125;, license_info=&#123; &quot;name&quot;: &quot;Apache 2.0&quot;, &quot;url&quot;: &quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;, &#125;, openapi_tags=tags_metadata, openapi_url=&quot;/api/v1/openapi.json&quot;, redoc_url=&quot;/r&quot;, docs_url=&quot;/swagger&quot;)@app.get(&quot;/books&quot;, tags=[&quot;books&quot;, &quot;users&quot;])async def get_books(): return &#123;&quot;books&quot;: [&quot;book1&quot;, &quot;book2&quot;, &quot;book3&quot;]&#125;@app.get(&quot;/users&quot;, tags=[&quot;users&quot;])async def get_users(): return &#123;&quot;users&quot;: [&quot;user1&quot;, &quot;user2&quot;, &quot;user3&quot;]&#125;if __name__ == &#x27;__main__&#x27;: uvicorn.run(&quot;main:app&quot;, reload=True) 更新: 2024-02-09 05:17:11原文: https://www.yuque.com/zacharyblock/cx2om6/ifnigya72ztak2tr","categories":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/categories/Python-Web/"}],"tags":[{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"SQLAlchemy","slug":"SQLAlchemy","permalink":"https://blockzachary.github.io/tags/SQLAlchemy/"},{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/tags/Python-Web/"},{"name":"RESTful API","slug":"RESTful-API","permalink":"https://blockzachary.github.io/tags/RESTful-API/"}]},{"title":"RESTful API","slug":"PythonWeb/RESTfulAPI","date":"2024-02-01T02:46:00.000Z","updated":"2024-02-01T02:46:00.000Z","comments":true,"path":"blog/586091050/","permalink":"https://blockzachary.github.io/blog/586091050/","excerpt":"","text":"RESTful API初识 RESTful API什么是 RESTful API REST（Representational State Transfer）表现层状态转换 软件架构风格定义 无状态交互的客户端-服务器架构 基于 HTTP 格式的请求规范 使用 JSON 携带数据 RESTful API 的组成要素 端点（EndPoint）- URL 请求方法（Method） GET：获取服务器上保存的资源 POST：将新的资源保存到服务器上 PUT：更新服务器上现有的资源 DELETE：删除服务器上现有的资源 头部信息（Headers）- Request、Response 请求数据 - 需要发送给服务器的具体数据 实现第一个 RESTful API基于 Python3.10 实现的 flask 项目 准备一个requirements.txt 1flask==3.0.0 新建一个/routes的 package 12345678# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flaskapp = Flask(__name__)from routes import student_api 接着创建一个/routes/student_api.py 1234567891011121314# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import jsonifyfrom routes import app@app.route(&#x27;/student/&lt;student_id&gt;&#x27;, method=&#x27;GET&#x27;)def get_student(student_id): student = &#123; &#x27;id&#x27;: student_id, &#x27;name&#x27;: &#x27;Zachary&#x27;, &#x27;gender&#x27;: &#x27;male&#x27; &#125; return jsonify(student) 修改app.py中的内容 12345from routes import appif __name__ == &#x27;__main__&#x27;: app.run(debug=True) 打开 debug 模式 运行项目之后，使用 postman 调试，新建一个RESTful API集 然后新建一个GET请求，命名为Get Student by ID，在请求地址输入：http://127.0.0.1:5000/students/1 使用 flask-restful 开发 API(*)安装 flask-restful 使用 pip install flask-restful==0.3.10 在requirements.txt中添加 12flask==3.0.0flask-restful==0.3.10 创建 resources在 flask 中之前的路由管理都放在了 routes 中，在 restful api 中使用/resources进行管理 在项目路径下创建一个/resources的包 1234567# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flaskfrom flask_restful import Apiapp = Flask(__name__)api = Api(app) 创建资源类在包/resources下创建一个student_resource.py 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom flask_restful import Resourcefrom resources import apiclass StudentResource(Resource): def get(self, student_id: int): student = &#123; &#x27;id&#x27;: student_id, &#x27;name&#x27;: &#x27;Zachary&#x27;, &#x27;gender&#x27;: &#x27;male&#x27; &#125; return studentapi.add_resource(StudentResource, &#x27;/students/&lt;int:student_id&gt;&#x27;) 然后给init.py 添加一下这个 student_resource 123456789# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flaskfrom flask_restful import Apiapp = Flask(__name__)api = Api(app)from resources import student_resource 最后改一下 app.py 中的 app 对象 12345from resources import appif __name__ == &#x27;__main__&#x27;: app.run(debug=True) 增加新请求这块暂时模拟一下实现了一个 PUT请求 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# Author: Zacharyfrom flask_restful import Resourcefrom resources import apiclass StudentResource(Resource): def get(self, student_id: int): student = &#123; &#x27;id&#x27;: student_id, &#x27;name&#x27;: &#x27;Zachary&#x27;, &#x27;gender&#x27;: &#x27;male&#x27; &#125; return student def put(self, student_id: int): student = &#123; &#x27;id&#x27;: student_id, &#x27;name&#x27;: &#x27;Michael&#x27;, &#x27;gender&#x27;: &#x27;male&#x27; &#125; return studentapi.add_resource(StudentResource, &#x27;/students/&lt;int:student_id&gt;&#x27;) 然后在 postman 新增一个请求 加入状态码有时候的请求会有正确结果的响应，但有时候响应式错误的，因此需要一个用于告诉浏览器，该响应结果是正确的还是错误的这样一个标识符，所以使用状态码，200 默认可以不填 1234567891011121314151617181920212223242526272829# -*- coding:utf-8 -*-# Author: Zacharyfrom flask_restful import Resourcefrom resources import apiclass StudentResource(Resource): def get(self, student_id: int): student = &#123; &#x27;id&#x27;: student_id, &#x27;name&#x27;: &#x27;Zachary&#x27;, &#x27;gender&#x27;: &#x27;male&#x27; &#125; if student_id == 1: return student, 200 else: return &#123;&#x27;error&#x27;: &#x27;Student not found&#x27;&#125;, 404 def put(self, student_id: int): student = &#123; &#x27;id&#x27;: student_id, &#x27;name&#x27;: &#x27;Michael&#x27;, &#x27;gender&#x27;: &#x27;male&#x27; &#125; return studentapi.add_resource(StudentResource, &#x27;/students/&lt;int:student_id&gt;&#x27;) 连接数据库数据库准备先准备一下数据库，创建一个名为restful_db的数据库，然后准备一个books的表 12345678910create database restful_db;use restful_db;create TABLE `books`( `id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT, `title` VARCHAR(255) NOT NULL UNIQUE, `author` VARCHAR(255) NOT NULL, `publish_time` TIMESTAMP NOT NULL); 直接在 IDE 操作 然后随便准备点数据 相关包准备12345flask==3.0.0flask-restful==0.3.10mysqlclient==2.1.1SQLAlchemy==2.0.23flask-SQLAlchemy==3.1.1 数据库连接初始化在/resources的__init__.py中添加数据库的相关配置 12345678910111213# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flaskfrom flask_restful import Apifrom flask_sqlalchemy import SQLAlchemyapp = Flask(__name__)api = Api(app)app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;mysql+mysqldb://root:980226@localhost:3306/restful_db&#x27;db = SQLAlchemy(app)from resources import student_resource 实体类映射在项目目录下创建一个/models的 package 然后创建一个book.py 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimefrom sqlalchemy import Integer, String, TIMESTAMPfrom sqlalchemy.orm import mapped_column, Mappedfrom resources import dbclass Book(db.Model): __tablename__ = &#x27;books&#x27; id: Mapped[int] = mapped_column(Integer, primary_key=True) title: Mapped[str] = mapped_column(String(255), unique=True, nullable=False) author:Mapped[str] = mapped_column(String(255), nullable=False) publish_time:Mapped[datetime] = mapped_column(TIMESTAMP, nullable=False) 定义 BookService在项目目录下创建一个/services，在其中新建一个book_service.py 12345678910# -*- coding:utf-8 -*-# Author: Zacharyfrom models.book import Bookfrom resources import dbclass BookService: def get_book_by_id(self, book_id: int): return db.session.get(Book, book_id) 定义 BookResources在/resources目录下新建一个book_resource.py 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom flask_restful import Resourcefrom resources import apifrom services.book_service import BookServiceclass BookResource(Resource): def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book, 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;) 然后引入一下 book_resource 123456789101112# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flaskfrom flask_restful import Apifrom flask_sqlalchemy import SQLAlchemyapp = Flask(__name__)api = Api(app)app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;mysql+mysqldb://root:980226@localhost:3306/restful_db&#x27;db = SQLAlchemy(app)from resources import student_resource, book_resource 这时候如果尝试去测试一下会报错 12 raise TypeError(f&#x27;Object of type &#123;o.__class__.__name__&#125; &#x27;TypeError: Object of type Book is not JSON serializable 解决方法：使用一个序列化方法，返回对象，定义了一个serialize方法，其中 publish_time 也需要再进一步序列化，使用isoformat()将其转换为字符串 12345678910111213141516171819202122232425# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimefrom sqlalchemy import Integer, String, TIMESTAMPfrom sqlalchemy.orm import mapped_column, Mappedfrom resources import dbclass Book(db.Model): __tablename__ = &#x27;books&#x27; id: Mapped[int] = mapped_column(Integer, primary_key=True) title: Mapped[str] = mapped_column(String(255), unique=True, nullable=False) author: Mapped[str] = mapped_column(String(255), nullable=False) publish_time: Mapped[datetime] = mapped_column(TIMESTAMP, nullable=False) def serialize(self): return &#123; &#x27;id&#x27;: self.id, &#x27;title&#x27;: self.title, &#x27;author&#x27;: self.author, &#x27;publish_time&#x27;: self.publish_time.isoformat() &#125; 然后book_resource也稍微修改 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom flask_restful import Resourcefrom resources import apifrom services.book_service import BookServiceclass BookResource(Resource): def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;) 结果： 新增与修改 API新增数据 API定义资源类新增数据需要使用POST来实现，考虑到新增的时候 URL 路径不需要传递参数 但是为了区分先前定义的资源，同时可以把查找所有书籍也实现一下 重新定义一个资源类BookListResource 获取所有书籍列表 12345678910111213141516171819202122232425# -*- coding:utf-8 -*-# Author: Zacharyfrom flask_restful import Resourcefrom resources import apifrom services.book_service import BookServiceclass BookResource(Resource): def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list]api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;) 同时得实现相关的 Service，包括查询所有书籍 12345678910111213141516# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import asc, Selectfrom models.book import Bookfrom resources import dbclass BookService: def get_book_by_id(self, book_id: int): return db.session.get(Book, book_id) def get_all_books(self): query = Select(Book).order_by(asc(Book.title)) return db.session.scalars(query).all() 测试一下获取所有书籍 新增一个书籍 12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimefrom flask import requestfrom flask_restful import Resourcefrom models.book import Bookfrom resources import apifrom services.book_service import BookServiceclass BookResource(Resource): def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] def post(self): request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time = datetime.fromisoformat(request_json.get(&#x27;publish_time&#x27;, None)) book = Book(title=title, author=author, publish_time=publish_time) if title and author and publish_time: book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;) 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import asc, Selectfrom models.book import Bookfrom resources import dbclass BookService: def get_book_by_id(self, book_id: int): return db.session.get(Book, book_id) def get_all_books(self): query = Select(Book).order_by(asc(Book.title)) return db.session.scalars(query).all() def create_book(self, book: Book): db.session.add(book) db.session.commit() return book 测试一下 新增一本书籍 再使用获取书籍 获取全部书籍 修复重复提交错误显示但是如果现在重复提交的话，由于书名不允许重复就会出现这样的错误 应该修改地 显示更加直观 其实就是在新增的时候先查一下 该 title 是不是在数据库中存在 然后做个判断 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimefrom flask import requestfrom flask_restful import Resourcefrom models.book import Bookfrom resources import apifrom services.book_service import BookServiceclass BookResource(Resource): def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] def post(self): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time = datetime.fromisoformat(request_json.get(&#x27;publish_time&#x27;, None)) book = Book(title=title, author=author, publish_time=publish_time) if title and author and publish_time: book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;) 12345678910111213141516171819202122232425262728# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import asc, Selectfrom models.book import Bookfrom resources import dbclass BookService: def get_book_by_id(self, book_id: int): return db.session.get(Book, book_id) def get_all_books(self): query = Select(Book).order_by(asc(Book.title)) return db.session.scalars(query).all() def get_book_by_title(self, title: str): query = Select(Book).where(Book.title == title) return db.session.scalar(query) def create_book(self, book: Book): existed_book = self.get_book_by_title(book.title) if existed_book: raise Exception(f&#x27;Book(title:&#123;book.title&#125;) already exists&#x27;) db.session.add(book) db.session.commit() return book 这时 如果再重复提交会 修改数据 API修改数据这块的逻辑其实和上面新增数据差不多，代码大多可以复用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimefrom flask import requestfrom flask_restful import Resourcefrom models.book import Bookfrom resources import apifrom services.book_service import BookServiceclass BookResource(Resource): def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404 def put(self, book_id: int): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None book = Book(id=book_id, title=title, author=author, publish_time=publish_time) book = BookService().update_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] def post(self): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None if title and author and publish_time: book = Book(title=title, author=author, publish_time=publish_time) book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete book info&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import asc, Select, and_from models.book import Bookfrom resources import dbclass BookService: def get_book_by_id(self, book_id: int): return db.session.get(Book, book_id) def get_all_books(self): query = Select(Book).order_by(asc(Book.title)) return db.session.scalars(query).all() def get_book_by_title(self, title: str): query = Select(Book).where(Book.title == title) return db.session.scalar(query) def create_book(self, book: Book): existed_book = self.get_book_by_title(book.title) if existed_book: raise Exception(f&#x27;Book(title:&#123;book.title&#125;) already exists&#x27;) db.session.add(book) db.session.commit() return book def get_book_by_title_and_not_id(self, title: str, book_id: int): query = Select(Book).where(and_(Book.title == title, Book.id != book_id)) return db.session.scalar(query) def update_book(self, book: Book): existed_book = self.get_book_by_id(book.id) if not existed_book: raise Exception(f&#x27;Book(id:&#123;book.id&#125;) not found&#x27;) existed_same_title_book = self.get_book_by_title_and_not_id(book.title, book.id) if existed_same_title_book: raise Exception(f&#x27;Book(title:&#123;book.title&#125;) already exists&#x27;) if book.title: existed_book.title = book.title if book.author: existed_book.author = book.author if book.publish_time: existed_book.publish_time = book.publish_time db.session.commit() return existed_book API 身份认证为什么需要做身份认证通常情况，开发出来的 API 肯定是给特定客户才能使用的，比如注册过的用户、会员等，只有符合身份或者权限的客户才能调用 API，并不希望谁都可以使用 如何实现的身份认证： 包准备工作需要使用到PyJWT 123456flask==3.0.0flask-restful==0.3.10mysqlclient==2.1.1SQLAlchemy==2.0.23flask-SQLAlchemy==3.1.1PyJWT==2.8.0 准备用户表首先创建一张users表 12345create TABLE `users`( `id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT, `username` VARCHAR(128) NOT NULL UNIQUE, `password` VARCHAR(128) NOT NULL); 然后随便准备一条数据 实体类映射在/models下创建一个user.py 1234567891011121314151617181920# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Integer, Stringfrom sqlalchemy.orm import Mapped, mapped_columnfrom resources import dbclass User(db.Model): __tablename__ = &#x27;users&#x27; id: Mapped[int] = mapped_column(Integer, primary_key=True) username: Mapped[str] = mapped_column(String(128), unique=True, nullable=False) password: Mapped[str] = mapped_column(String(128), nullable=False) def serialize(self): return &#123; &#x27;id&#x27;: self.id, &#x27;username&#x27;: self.username &#125; 定义 UserService在/services下创建一个user_service.py 123456789101112# -*- coding:utf-8 -*-# Author: Zacharyfrom sqlalchemy import Select, and_from models.user import Userfrom resources import dbclass UserService: def login(self, username: str, password: str): query = Select(User).where(and_(User.username == username, User.password == password)) return db.session.scalar(query) 定义 UserResource在/resources下创建一个user_resource.py 登录一般多用的是POST请求，虽然感觉是像是去查数据库应该用 GET 1234567891011121314151617181920212223242526272829303132# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import requestfrom flask_restful import Resourcefrom resources import apifrom services.user_service import UserServiceclass LoginResource(Resource): def post(self): try: request_json = request.json if request_json: username = request_json.get(&#x27;username&#x27;, None) password = request_json.get(&#x27;password&#x27;, None) if username and password: user = UserService().login(username, password) if user: return user.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid username or password&#x27;&#125;, 401 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete username and password&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide username and password info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(LoginResource, &#x27;/login&#x27;) 同时还有 user_resource 需要添加一下 123456789101112# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flaskfrom flask_restful import Apifrom flask_sqlalchemy import SQLAlchemyapp = Flask(__name__)api = Api(app)app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;mysql+mysqldb://root:980226@localhost:3306/restful_db&#x27;db = SQLAlchemy(app)from resources import student_resource, book_resource, user_resource 写到这里可以尝试测试一下登录的功能 返回加密 token登录秘钥先在项目目录下创建一个/common的 package，然后在其中添加一个constants.py，用于保存常量 创建一个LOGIN_SECRET 1234# -*- coding:utf-8 -*-# Author: ZacharyLOGIN_SECRET = &#x27;zacharyloginsecret&#x27; 加入 token12345678910111213141516171819202122232425262728293031323334353637# -*- coding:utf-8 -*-# Author: Zacharyimport jwtfrom flask import requestfrom flask_restful import Resourcefrom common.constants import LOGIN_SECRETfrom resources import apifrom services.user_service import UserServiceclass LoginResource(Resource): def post(self): try: request_json = request.json if request_json: username = request_json.get(&#x27;username&#x27;, None) password = request_json.get(&#x27;password&#x27;, None) if username and password: user = UserService().login(username, password) if user: user_json = user.serialize() jwt_token = jwt.encode(user_json, LOGIN_SECRET, algorithm=&#x27;HS256&#x27;) user_json[&#x27;token&#x27;] = jwt_token return user_json, 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid username or password&#x27;&#125;, 401 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete username and password&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide username and password info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(LoginResource, &#x27;/login&#x27;) 添加书籍需授权才可操作现在应用一下上面生成的这个 token 现在用户需要登录了才可以使用 添加书籍 功能 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimeimport jwtfrom flask import requestfrom flask_restful import Resourcefrom common.constants import LOGIN_SECRETfrom models.book import Bookfrom resources import apifrom services.book_service import BookServiceclass BookResource(Resource): def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404 def put(self, book_id: int): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None book = Book(id=book_id, title=title, author=author, publish_time=publish_time) book = BookService().update_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] def post(self): # 添加鉴权的部分 jwt_token = request.headers.get(&#x27;token&#x27;, None) if not jwt_token: return &#123;&#x27;error&#x27;: &#x27;Unauthorized, please provide token&#x27;&#125;, 401 try: user_info = jwt.decode(jwt_token, LOGIN_SECRET, algorithms=[&#x27;HS256&#x27;]) if not user_info or not user_info.get(&#x27;username&#x27;, None): raise Exception(&#x27;Unauthorized, invalid token&#x27;) except Exception as e: return &#123;&#x27;error&#x27;: &#x27;Unauthorized, invalid token&#x27;&#125;, 401 try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None if title and author and publish_time: book = Book(title=title, author=author, publish_time=publish_time) book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete book info&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;) 测试一下 需要在 request 的 headers 中添加上 token 如果不提供 装饰器复用加密授权上面的代码可以看出 如果要加密授权需要在每一个 resource 代码的前面写上校验的代码，如果一直复制粘贴也很复杂； 使用装饰器进行一个代码复用 在/common的包下创建一个api_tools.py 1234567891011121314151617181920212223242526272829# -*- coding:utf-8 -*-# Author: Zacharyfrom functools import wrapsimport jwtfrom flask import requestfrom common.constants import LOGIN_SECRETdef token_required(): def check_token(f): @wraps(f) def wrapper(*args, **kwargs): token = request.headers.get(&#x27;token&#x27;, None) if not token: return &#123;&#x27;error&#x27;: &#x27;Unauthorized, please provide token&#x27;&#125;, 401 try: user_info = jwt.decode(token, LOGIN_SECRET, algorithms=[&#x27;HS256&#x27;]) if not user_info or not user_info.get(&#x27;username&#x27;, None): raise Exception(&#x27;Unauthorized, invalid token&#x27;) except Exception as e: return &#123;&#x27;error&#x27;: &#x27;Unauthorized, invalid token&#x27;&#125;, 401 result = f(*args, **kwargs) return result return wrapper return check_token 需要使用身份验证的代码 打上这个装饰器就可以了，并且尝试着给修改书籍信息也加上这个身份验证 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimeimport jwtfrom flask import requestfrom flask_restful import Resourcefrom common.api_tools import token_requiredfrom common.constants import LOGIN_SECRETfrom models.book import Bookfrom resources import apifrom services.book_service import BookServiceclass BookResource(Resource): def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404 @token_required() def put(self, book_id: int): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None book = Book(id=book_id, title=title, author=author, publish_time=publish_time) book = BookService().update_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] @token_required() def post(self): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None if title and author and publish_time: book = Book(title=title, author=author, publish_time=publish_time) book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete book info&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;) 测试修改书籍信息 操作文件 API文件上传RequestParser 处理请求参数输入 parser = reqparse.RequestParser parser.add_argument(&quot;请求参数&quot;, required=True, type=FileStorage, location=&quot;files&quot;, help=&quot;please provide file&quot;) &quot;请求参数&quot; - 放置的是 resource 的请求参数 required - 请求参数是否是必须得 type - 要将请求参数转换成的的数据类型 location - 请求分析器从哪里提取参数 files - 文件 headers - 请求头 args - 请求参数 help - 如果请求不包含&quot;请求参数&quot;会提示的报错信息 定义 Resource首先在/resources下创建一个attachment_resource.py 然后需要在__init__()里面使用reqparse模块的语法分析器进行请求分析，自动处理请求中的参数 123456789101112131415161718192021222324# -*- coding:utf-8 -*-# Author: Zacharyfrom flask_restful import Resource, reqparsefrom werkzeug.datastructures import FileStoragefrom common.utils import get_attachment_pathfrom resources import apiclass AttachmentListResource(Resource): def __init__(self): self.parser = reqparse.RequestParser() self.parser.add_argument(&#x27;attachment&#x27;, required=True, type=FileStorage, location=&#x27;files&#x27;, help=&#x27;please provide attachment file&#x27;) def post(self): attachment_file = self.parser.parse_args().get(&#x27;attachment&#x27;) file_path = get_attachment_path() file_save_path = file_path.joinpath(attachment_file.filename) attachment_file.save(file_save_path) return &#123;&#x27;message&#x27;: &#x27;attachment uploaded&#x27;&#125;api.add_resource(AttachmentListResource, &#x27;/attachments&#x27;) 设置上传的文件存储的位置，/common下创建utils.py 123456789101112131415161718# -*- coding:utf-8 -*-# Author: Zacharyfrom pathlib import Pathdef get_attachment_path(): &quot;&quot;&quot; 获得项目目录下的attachements文件夹的路径 该文件夹用于存储所上传的附件 :return: &quot;&quot;&quot; project_path = Path(__file__).parent.parent attachment_path = project_path.joinpath(&#x27;attachments&#x27;) if not attachment_path.exists(): attachment_path.mkdir(parents=True) return attachment_path 并且要将attachment_resource加入配置 12345678910111213# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flaskfrom flask_restful import Apifrom flask_sqlalchemy import SQLAlchemyapp = Flask(__name__)api = Api(app)app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;mysql+mysqldb://root:980226@localhost:3306/restful_db&#x27;db = SQLAlchemy(app)from resources import student_resource, book_resource, user_resource, attachment_resource 测试一下 上传文件 需要在 body - from-data - 设置 key-value 记住选择 File 可以看到成功上传了 文件下载仅需使用send_file()即可 定义 Resource12345678910111213141516171819202122232425262728293031323334# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import send_filefrom flask_restful import Resource, reqparsefrom werkzeug.datastructures import FileStoragefrom common.utils import get_attachment_pathfrom resources import apiclass AttachmentListResource(Resource): def __init__(self): self.parser = reqparse.RequestParser() self.parser.add_argument(&#x27;attachment&#x27;, required=True, type=FileStorage, location=&#x27;files&#x27;, help=&#x27;please provide attachment file&#x27;) def post(self): attachment_file = self.parser.parse_args().get(&#x27;attachment&#x27;) file_path = get_attachment_path() file_save_path = file_path.joinpath(attachment_file.filename) attachment_file.save(file_save_path) return &#123;&#x27;message&#x27;: &#x27;attachment uploaded&#x27;&#125;class AttachmentResource(Resource): def get(self, filename): file_path = get_attachment_path() file_save_path = file_path.joinpath(filename) return send_file(file_save_path)api.add_resource(AttachmentListResource, &#x27;/attachments&#x27;)api.add_resource(AttachmentResource, &#x27;/attachments/&lt;str:filename&gt;&#x27;) 这块新上传一张图片测试一下 上传和下载都测试成功 Swagger 文档生成文档所需插件 apispec flask-_apispec PyYAML 12345678910flask==3.0.0flask-restful==0.3.10mysqlclient==2.1.1SQLAlchemy==2.0.23flask-SQLAlchemy==3.1.1PyJWT==2.8.0apispec==6.3.1flask_apispec==0.11.4PyYAML==6.0.1flask_restful_swagger==0.20.2 初始化组件在构建 api 对象的时候，进行一个配置 1234567891011121314151617181920212223242526272829# -*- coding:utf-8 -*-# Author: Zacharyfrom apispec import APISpecfrom apispec.ext.marshmallow import MarshmallowPluginfrom flask import Flaskfrom flask_apispec import FlaskApiSpecfrom flask_restful import Apifrom flask_restful_swagger import swaggerfrom flask_sqlalchemy import SQLAlchemyapp = Flask(__name__)api = swagger.docs(Api(app), apiVersion=&#x27;0.1&#x27;) # swagger docsapp.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;mysql+mysqldb://root:980226@localhost:3306/restful_db&#x27;app.config.update( &#123; &#x27;APISPEC_SPEC&#x27;: APISpec( title=&#x27;RESTful API Swagger Docs&#x27;, version=&#x27;v1&#x27;, plugins=[MarshmallowPlugin()], openapi_version=&#x27;2.0.0&#x27; ), &#x27;APISPEC_SWAGGER_URL&#x27;: &#x27;/swagger/&#x27;, &#x27;APISPEC_SWAGGER_UI_URL&#x27;: &#x27;/swagger-ui/&#x27; &#125;)db = SQLAlchemy(app)docs = FlaskApiSpec(app)from resources import student_resource, book_resource, user_resource, attachment_resource 给 Resource 增加 doc 注解要给相应的 resource 下的 api 增加 doc 文档， 首先 resource 类需要 继承一个MethodResource 给需要生成 doc 的 api 方法 增加一个@doc()注解 description 该 api 的一个描述 tags 分组 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimeimport jwtfrom flask import requestfrom flask_apispec import MethodResource, docfrom flask_restful import Resourcefrom common.api_tools import token_requiredfrom common.constants import LOGIN_SECRETfrom models.book import Bookfrom resources import api, docsfrom services.book_service import BookServiceclass BookResource(MethodResource, Resource): @doc(description=&#x27;Get book by id&#x27;, tags=[&#x27;Book Requests&#x27;]) def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404 @token_required() def put(self, book_id: int): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None book = Book(id=book_id, title=title, author=author, publish_time=publish_time) book = BookService().update_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] @token_required() def post(self): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None if title and author and publish_time: book = Book(title=title, author=author, publish_time=publish_time) book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete book info&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;)docs.register(BookResource) 在浏览器输入 127.0.0.1:5000/swagger/ 127.0.0.1:5000/swagger-ui/ tags 分组 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimeimport jwtfrom flask import requestfrom flask_apispec import MethodResource, docfrom flask_restful import Resourcefrom common.api_tools import token_requiredfrom common.constants import LOGIN_SECRETfrom models.book import Bookfrom resources import api, docsfrom services.book_service import BookServiceclass BookResource(MethodResource, Resource): @doc(description=&#x27;Get a book by book id&#x27;, tags=[&#x27;Book Requests&#x27;]) def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404 @doc(description=&#x27;Update a book by book id&#x27;, tags=[&#x27;Book Requests&#x27;]) @token_required() def put(self, book_id: int): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None book = Book(id=book_id, title=title, author=author, publish_time=publish_time) book = BookService().update_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] @token_required() def post(self): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None if title and author and publish_time: book = Book(title=title, author=author, publish_time=publish_time) book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete book info&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;)docs.register(BookResource) 使用 YAML 格式1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimeimport jwtfrom flask import request, Responsefrom flask_apispec import MethodResource, docfrom flask_restful import Resourcefrom common.api_tools import token_requiredfrom common.constants import LOGIN_SECRETfrom models.book import Bookfrom resources import api, docs, appfrom services.book_service import BookServiceclass BookResource(MethodResource, Resource): @doc(description=&#x27;Get a book by book id&#x27;, tags=[&#x27;Book Requests&#x27;]) def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404 @doc(description=&#x27;Update a book by book id&#x27;, tags=[&#x27;Book Requests&#x27;]) @token_required() def put(self, book_id: int): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None book = Book(id=book_id, title=title, author=author, publish_time=publish_time) book = BookService().update_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] @token_required() def post(self): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None if title and author and publish_time: book = Book(title=title, author=author, publish_time=publish_time) book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete book info&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;)docs.register(BookResource)@app.route(&#x27;/swagger.yaml&#x27;)def generate_swagger_yaml(): yaml_doc = docs.spec.to_yaml() return Response(yaml_doc, mimetype=&#x27;text/yaml&#x27;) 在浏览器访问 127.0.0.1:5000/swagger.yaml Swagger 中的请求与响应定义 request 中的参数（schema 类）对之前所做的 book_resource 中的修改书籍信息的 put 方法为例 body 参数 在book_resource.py中定义一个类BookRequestSchema\u0000，用于指定请求所需要的参数 1234class BookRequestSchema(Schema): title = fields.String(required=True) author = fields.String(requird=True) publish_time = fields.DateTime(required=True) 然后还需要使用@use_kwargs()注解，来代替之前通过 request.json 获取的请求参数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimeimport jwtfrom flask import request, Responsefrom flask_apispec import MethodResource, doc, use_kwargsfrom flask_restful import Resourcefrom marshmallow import Schema, fieldsfrom common.api_tools import token_requiredfrom common.constants import LOGIN_SECRETfrom models.book import Bookfrom resources import api, docs, appfrom services.book_service import BookServiceclass BookRequestSchema(Schema): title = fields.String(required=True) author = fields.String(requird=True) publish_time = fields.DateTime(required=True)class BookResource(MethodResource, Resource): @doc(description=&#x27;Get a book by book id&#x27;, tags=[&#x27;Book Requests&#x27;]) def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404 @doc(description=&#x27;Update a book by book id&#x27;, tags=[&#x27;Book Requests&#x27;]) @use_kwargs(BookRequestSchema, location=&#x27;json&#x27;) @token_required() def put(self, book_id: int, **kwargs): try: title = kwargs.get(&#x27;title&#x27;, None) author = kwargs.get(&#x27;author&#x27;, None) publish_time = kwargs.get(&#x27;publish_time&#x27;, None) book = Book(id=book_id, title=title, author=author, publish_time=publish_time) book = BookService().update_book(book) return book.serialize(), 200 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] @token_required() def post(self): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None if title and author and publish_time: book = Book(title=title, author=author, publish_time=publish_time) book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete book info&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;)docs.register(BookResource)@app.route(&#x27;/swagger.yaml&#x27;)def generate_swagger_yaml(): yaml_doc = docs.spec.to_yaml() return Response(yaml_doc, mimetype=&#x27;text/yaml&#x27;) 可以直观地看到请求体所需要的参数是什么 但是由于这个PUT是需要身份验证的，如果这时候测试一下会报错 headers 参数所以还需要单独给身份验证，即 headers 中的参数做一个类 对于 headers 中的 token 也需要单独定义一个TokenSchema类 12class TokenSchema(Schema): token = fields.String(required=True) 同样为了在 resource 中的 api 中实现对应参数，可以再一次使用@use_kwargs()注解 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimeimport jwtfrom flask import request, Responsefrom flask_apispec import MethodResource, doc, use_kwargsfrom flask_restful import Resourcefrom marshmallow import Schema, fieldsfrom common.api_tools import token_requiredfrom common.constants import LOGIN_SECRETfrom models.book import Bookfrom resources import api, docs, appfrom services.book_service import BookServiceclass TokenSchema(Schema): token = fields.String(required=True)class BookRequestSchema(Schema): title = fields.String(required=True) author = fields.String(requird=True) publish_time = fields.DateTime(required=True)class BookResource(MethodResource, Resource): @doc(description=&#x27;Get a book by book id&#x27;, tags=[&#x27;Book Requests&#x27;]) def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404 @doc(description=&#x27;Update a book by book id&#x27;, tags=[&#x27;Book Requests&#x27;]) @use_kwargs(TokenSchema, location=&#x27;headers&#x27;) @use_kwargs(BookRequestSchema, location=&#x27;json&#x27;) @token_required() def put(self, book_id: int, **kwargs): try: title = kwargs.get(&#x27;title&#x27;, None) author = kwargs.get(&#x27;author&#x27;, None) publish_time = kwargs.get(&#x27;publish_time&#x27;, None) book = Book(id=book_id, title=title, author=author, publish_time=publish_time) book = BookService().update_book(book) return book.serialize(), 200 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] @token_required() def post(self): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None if title and author and publish_time: book = Book(title=title, author=author, publish_time=publish_time) book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete book info&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;)docs.register(BookResource)@app.route(&#x27;/swagger.yaml&#x27;)def generate_swagger_yaml(): yaml_doc = docs.spec.to_yaml() return Response(yaml_doc, mimetype=&#x27;text/yaml&#x27;) response 内容 同样，需要为 response 定义一个 schema 类 BookSchema,由于这个响应结果是对应的Book实体类； 所以可以使用一个SQLAlchemyAutoSchema来实现返回数据库对应的实体类对象作为 response 结果； 当然如果继续使用上面 RequestSchema 的形式是依旧可以实现的 1234class BookSchema(SQLAlchemyAutoSchema): class Meta: model = Book load_instance = True 123456789101112flask==3.0.0flask-restful==0.3.10mysqlclient==2.1.1SQLAlchemy==2.0.23flask-SQLAlchemy==3.1.1PyJWT==2.8.0apispec==6.3.1flask_apispec==0.11.4PyYAML==6.0.1flask_restful_swagger==0.20.2marshmallowmarshmallow_sqlalchemy 在 api 中使用这个类的时候，需要使用@marshal_with来使用上面的BookSchema 使用@marshal_with 就可以直接返回实体类对象了，不需要再自己实现 serialized 序列化方法了 同时，在 swagger 里面也会出现 response 的结果 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100# -*- coding:utf-8 -*-# Author: Zacharyfrom datetime import datetimeimport jwtfrom flask import request, Responsefrom flask_apispec import MethodResource, doc, use_kwargs, marshal_withfrom flask_restful import Resourcefrom marshmallow import Schema, fieldsfrom marshmallow_sqlalchemy import SQLAlchemyAutoSchemafrom common.api_tools import token_requiredfrom common.constants import LOGIN_SECRETfrom models.book import Bookfrom resources import api, docs, appfrom services.book_service import BookServiceclass TokenSchema(Schema): token = fields.String(required=True)class BookRequestSchema(Schema): title = fields.String(required=True) author = fields.String(requird=True) publish_time = fields.DateTime(required=True)class BookSchema(SQLAlchemyAutoSchema): class Meta: model = Book load_instance = Trueclass BookResource(MethodResource, Resource): @doc(description=&#x27;Get a book by book id&#x27;, tags=[&#x27;Book Requests&#x27;]) @marshal_with(BookSchema, 200) def get(self, book_id: int): book = BookService().get_book_by_id(book_id) if book: return book, 200 else: return &#123;&#x27;error&#x27;: f&#x27;Book(book_id:&#123;book_id&#125;) not found&#x27;&#125;, 404 @doc(description=&#x27;Update a book by book id&#x27;, tags=[&#x27;Book Requests&#x27;]) @use_kwargs(TokenSchema, location=&#x27;headers&#x27;) @use_kwargs(BookRequestSchema, location=&#x27;json&#x27;) @marshal_with(BookSchema, 200) @token_required() def put(self, book_id: int, **kwargs): try: title = kwargs.get(&#x27;title&#x27;, None) author = kwargs.get(&#x27;author&#x27;, None) publish_time = kwargs.get(&#x27;publish_time&#x27;, None) book = Book(id=book_id, title=title, author=author, publish_time=publish_time) book = BookService().update_book(book) return book, 200 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500class BookListResource(Resource): def get(self): book_list = BookService().get_all_books() return [book.serialize() for book in book_list] @token_required() def post(self): try: request_json = request.json if request_json: title = request_json.get(&#x27;title&#x27;, None) author = request_json.get(&#x27;author&#x27;, None) publish_time_str = request_json.get(&#x27;publish_time&#x27;, None) publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None if title and author and publish_time: book = Book(title=title, author=author, publish_time=publish_time) book = BookService().create_book(book) return book.serialize(), 200 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide complete book info&#x27;&#125;, 400 else: return &#123;&#x27;error&#x27;: &#x27;Invalid request, please provide book info as json&#x27;&#125;, 400 except Exception as e: return &#123;&#x27;error&#x27;: f&#x27;&#123;e&#125;&#x27;&#125;, 500api.add_resource(BookResource, &#x27;/books/&lt;int:book_id&gt;&#x27;)api.add_resource(BookListResource, &#x27;/books&#x27;)docs.register(BookResource)@app.route(&#x27;/swagger.yaml&#x27;)def generate_swagger_yaml(): yaml_doc = docs.spec.to_yaml() return Response(yaml_doc, mimetype=&#x27;text/yaml&#x27;) 更新: 2024-02-10 23:22:16原文: https://www.yuque.com/zacharyblock/cx2om6/ugubtklpuczalctm","categories":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/categories/Python-Web/"}],"tags":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/tags/Python-Web/"},{"name":"RESTful API","slug":"RESTful-API","permalink":"https://blockzachary.github.io/tags/RESTful-API/"},{"name":"Flask","slug":"Flask","permalink":"https://blockzachary.github.io/tags/Flask/"}]},{"title":"docker-ERROR: Version in \"./docker-compose.yaml\" is unsupported.","slug":"Docker/docker-ERROR_Versionin_._docker-compose.yaml_isunsupported.","date":"2024-01-27T20:15:00.000Z","updated":"2024-01-27T20:15:00.000Z","comments":true,"path":"blog/3658250431/","permalink":"https://blockzachary.github.io/blog/3658250431/","excerpt":"","text":"docker-ERROR: Version in “.&#x2F;docker-compose.yaml” is unsupported.123root@ubuntu-server:~/dockerProject/myWebSite# docker-compose upERROR: Version in &quot;./docker-compose.yaml&quot; is unsupported. You might be seeing this error because you&#x27;re using the wrong Compose file version. Either specify a supported version (e.g &quot;2.2&quot; or &quot;3.3&quot;) and place your service definitions under the `services` key, or omit the `version` key and place your service definitions at the root of the file to use version 1.For more on the Compose file format versions, see https://docs.docker.com/compose/compose-file/ 拉起 docker-compose 多容器的时候出现了这个错误，原因似乎是 docker 版本和 docker-compose 版本过低导致 执行一下以下命令升级一下试试： 12345678910root@ubuntu-server:~# cd /usr/local/bin &amp;&amp; sudo rm -rf docker-composeroot@ubuntu-server:/usr/local/bin# curl -SL https://github.com/docker/compose/releases/download/v2.1.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- 0:01:26 --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- 0:01:29 --:--:-- 0^Croot@ubuntu-server:/usr/local/bin# chmod +x docker-composeroot@ubuntu-server:/usr/local/bin# docker-compose --versionDocker Compose version v2.1.1root@ubuntu-server:/usr/local/bin# 更新: 2024-01-27 20:54:42原文: https://www.yuque.com/zacharyblock/cx2om6/kh6sxrnthfdul5au","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/tags/Docker/"}]},{"title":"docker-启动 wordpress 和 mysql 容器连接出错","slug":"Docker/docker-启动wordpress和mysql容器连接出错","date":"2024-01-27T02:47:00.000Z","updated":"2024-01-27T02:47:00.000Z","comments":true,"path":"blog/647255678/","permalink":"https://blockzachary.github.io/blog/647255678/","excerpt":"","text":"docker-启动 wordpress 和 mysql 容器连接出错 首先去给 mysql 数据库创建对应的库 12345678910111213141516171819202122232425262728293031323334353637383940root@ubuntu-server:~# docker inspect 6b07fc530884 | grep &quot;IPAddress&quot; &quot;SecondaryIPAddresses&quot;: null, &quot;IPAddress&quot;: &quot;&quot;, &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,root@ubuntu-server:~# mysql -h 172.18.0.2 -u root -p 123456Enter password:ERROR 1049 (42000): Unknown database &#x27;123456&#x27;root@ubuntu-server:~# mysql -h 172.18.0.2 -u root -p123456mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 81Server version: 8.3.0 MySQL Community Server - GPLCopyright (c) 2000, 2023, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| db_in_opt || information_schema || mysql || performance_schema || sys |+--------------------+5 rows in set (0.03 sec)mysql&gt; create database wordpressdb;Query OK, 1 row affected (0.02 sec)mysql&gt; exit;Byeroot@ubuntu-server:~# 如果还有问题： 检查这个 wp-config.php 文件手动改成这样子 1234567891011121314151617181920212223242526272829303132333435363738394041424344root@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESfe7e697cc62f wordpress &quot;docker-entrypoint.s…&quot; 9 minutes ago Up 9 minutes 0.0.0.0:82-&gt;80/tcp, :::82-&gt;80/tcp hungry_dirac6b07fc530884 mysql &quot;docker-entrypoint.s…&quot; 10 minutes ago Up 10 minutes 3306/tcp, 33060/tcp flamboyant_lichtermanroot@ubuntu-server:~# docker inspect fe7e697cc62f | grep -A 10 &quot;Mounts&quot; &quot;Mounts&quot;: [ &#123; &quot;Type&quot;: &quot;volume&quot;, &quot;Name&quot;: &quot;a5071bea0ad386159c64d54a3353b6614fe4cef2de943ed1d2c9b55f87ef4c59&quot;, &quot;Source&quot;: &quot;/var/lib/docker/volumes/a5071bea0ad386159c64d54a3353b6614fe4cef2de943ed1d2c9b55f87ef4c59/_data&quot;, &quot;Destination&quot;: &quot;/var/www/html&quot;, &quot;Driver&quot;: &quot;local&quot;, &quot;Mode&quot;: &quot;&quot;, &quot;RW&quot;: true, &quot;Propagation&quot;: &quot;&quot; &#125;root@ubuntu-server:~# cd /var/lib/docker/volumes/a5071bea0ad386159c64d54a3353b6614fe4cef2de943ed1d2c9b55f87ef4c59/_data/root@ubuntu-server:/var/lib/docker/volumes/a5071bea0ad386159c64d54a3353b6614fe4cef2de943ed1d2c9b55f87ef4c59/_data# lltotal 260drwxr-xr-x 5 www-data www-data 4096 Jan 26 18:44 ./drwx-----x 3 root root 4096 Jan 26 18:44 ../-rw-r--r-- 1 www-data www-data 261 Jan 20 00:51 .htaccess-rw-r--r-- 1 www-data www-data 405 Feb 6 2020 index.php-rw-r--r-- 1 www-data www-data 19915 Jan 1 2023 license.txt-rw-r--r-- 1 www-data www-data 7399 Jul 5 2023 readme.html-rw-r--r-- 1 www-data www-data 7211 May 12 2023 wp-activate.phpdrwxr-xr-x 9 www-data www-data 4096 Dec 6 16:25 wp-admin/-rw-r--r-- 1 www-data www-data 351 Feb 6 2020 wp-blog-header.php-rw-r--r-- 1 www-data www-data 2323 Jun 14 2023 wp-comments-post.php-rw-r--r-- 1 www-data www-data 5491 Jan 20 00:49 wp-config-docker.php-rw-r--r-- 1 www-data www-data 5595 Jan 26 18:44 wp-config.php-rw-r--r-- 1 www-data www-data 3013 Nov 15 17:47 wp-config-sample.phpdrwxr-xr-x 5 www-data www-data 4096 Dec 6 16:25 wp-content/-rw-r--r-- 1 www-data www-data 5638 May 30 2023 wp-cron.phpdrwxr-xr-x 27 www-data www-data 16384 Dec 6 16:25 wp-includes/-rw-r--r-- 1 www-data www-data 2502 Nov 26 2022 wp-links-opml.php-rw-r--r-- 1 www-data www-data 3927 Jul 16 2023 wp-load.php-rw-r--r-- 1 www-data www-data 50924 Sep 29 22:01 wp-login.php-rw-r--r-- 1 www-data www-data 8525 Sep 16 06:50 wp-mail.php-rw-r--r-- 1 www-data www-data 26409 Oct 10 14:05 wp-settings.php-rw-r--r-- 1 www-data www-data 34385 Jun 19 2023 wp-signup.php-rw-r--r-- 1 www-data www-data 4885 Jun 22 2023 wp-trackback.php-rw-r--r-- 1 www-data www-data 3154 Sep 30 07:39 xmlrpc.phproot@ubuntu-server:/var/lib/docker/volumes/a5071bea0ad386159c64d54a3353b6614fe4cef2de943ed1d2c9b55f87ef4c59/_data# nano wp-config.php 更新: 2024-01-27 03:19:08原文: https://www.yuque.com/zacharyblock/cx2om6/tag9c4g1eq7g2v17","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/tags/Docker/"}]},{"title":"docker-创建 mysql 容器后自动停止","slug":"Docker/docker-创建mysql容器后自动停止","date":"2024-01-26T21:40:00.000Z","updated":"2024-01-26T21:40:00.000Z","comments":true,"path":"blog/2964403529/","permalink":"https://blockzachary.github.io/blog/2964403529/","excerpt":"","text":"docker-创建 mysql 容器后自动停止在创建一个 mysql 容器的时候，创建完立刻就停止了 12345678root@ubuntu-server:~# docker run -d --rm --network nw_test --network-alias mysql_server -v /opt/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=wordpress_db mysql:8.036fa0e5c02c7bbab08191501bef5d9ce20fb332100ae14b2f3ab3464cdb0042aroot@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES36fa0e5c02c7 mysql:8.0 &quot;docker-entrypoint.s…&quot; 2 seconds ago Up 1 second 3306/tcp, 33060/tcp youthful_almeidaroot@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESroot@ubuntu-server:~# 目前来看是只有 mysql:8.0 镜像会产生这个问题 更新: 2024-01-27 01:52:13原文: https://www.yuque.com/zacharyblock/cx2om6/gbnf784n3x1agomd","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/tags/Docker/"}]},{"title":"Flask","slug":"PythonWeb/Flask","date":"2024-01-26T01:29:00.000Z","updated":"2024-01-26T01:29:00.000Z","comments":true,"path":"blog/4144374205/","permalink":"https://blockzachary.github.io/blog/4144374205/","excerpt":"","text":"Flask项目创建及安装 Flask创建一个 Flask 点击创建 Create 后，就得到 Flask 项目 requirements 文件由于集成开发环境帮我们已经安装好了 Flask 包，所以可以使用pip freeze &gt; ./requirements.txt命令，直接生成一个 requirements.txt 文件 运行尝试运行一下这个 app.py 通过浏览器访问一下 http://127.0.0.1:5000/ 之后的项目扩展 就在这个项目文件夹的基础上进行开发 路由管理项目为了区分角色：如用户、管理员的权限，需要区分一下不同权限用户的访问路由，为了方便管理路由，在项目文件夹中创建一个/routes的 package 进行路由管理，并将原先的代码进行一下整理 123456789101112from routes import app@app.route(&#x27;/&#x27;)@app.route(&#x27;/index&#x27;)def home_page(): return &#x27;Home Page!&#x27;@app.route(&#x27;/about&#x27;)def about_page(): return &#x27;About Page!&#x27; 123456from routes import app@app.route(&#x27;/create_article&#x27;)def create_article(): return &#x27;Create Article!&#x27; 123456from flask import Flaskapp = Flask(__name__)from routes import user_routesfrom routes import admin_routes 然后再修改一下 app.py 就可以运行啦 12345from routes import appif __name__ == &#x27;__main__&#x27;: app.run() Debug 模式如果给user_routes新增一个路由，但是不重启项目 1234567891011121314151617from routes import app@app.route(&#x27;/&#x27;)@app.route(&#x27;/index&#x27;)def home_page(): return &#x27;Home Page!&#x27;@app.route(&#x27;/about&#x27;)def about_page(): return &#x27;About Page!&#x27;@app.route(&#x27;/login&#x27;)def login_page(): return &#x27;Login Page!&#x27; 这时候在浏览器上访问，无法找到 为了解决这个问题，可以重新启动一下项目；但是在开发过程中，需要逐次修改、增加和验证功能，总是频繁重启项目会显得很繁琐，那么 debug 模式就可以很方便地帮我们做到修改的同时，动态地根据代码是否修改来重启项目 通过app.run(debug=True)实现 1234from routes import appif __name__ == &#x27;__main__&#x27;: app.run(debug=True) 这时候如果，对代码进行调整 无需重启项目就可以看到效果 修改运行文件配置 模板 templatesrender_template前一节我们通过浏览器访问路由 可以获得一些简单的文字页面 而模板可以给我们提供更多便捷的页面内容展示和继承使用 结合 flask 的render_template()以及html文件进行页面内容的渲染 在/templates目录下创建 index.html 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Home Page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; This is content of the home page &lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import render_templatefrom routes import app@app.route(&#x27;/&#x27;)@app.route(&#x27;/index&#x27;)def home_page(): return render_template(&#x27;index.html&#x27;)@app.route(&#x27;/about&#x27;)def about_page(): return &#x27;About Page!&#x27;@app.route(&#x27;/login&#x27;)def login_page(): return &#x27;Login Page!&#x27; 编写完这两个代码还不够，由于对 app 对象来说，它并不知道 index.html 的位置，所以这时候直接运行会报找不到模板 给/routes/__init__.py添加template_folder=&#39;../templates 123456from flask import Flaskapp = Flask(__name__, template_folder=&#x27;../templates&#x27;)from routes import user_routesfrom routes import admin_routes 刷新项目后可以看到 渲染传参如果希望前端展示的内容，可以通过后端来传递的这时候就需要用到 render_template 的参数渲染 使用一对花括号 &#123;&#123; &#125;&#125;将其抱起来的内容作为一个变量&#x2F;参数，其具体的值，通过后端的 render_template 方法来传递 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;&#123;&#123; my_title &#125;&#125;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; This is content of the home page &lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920from flask import render_templatefrom routes import app@app.route(&#x27;/&#x27;)@app.route(&#x27;/index&#x27;)def home_page(): return render_template(&#x27;index.html&#x27;, my_title=&#x27;Home Page&#x27;)@app.route(&#x27;/about&#x27;)def about_page(): return &#x27;About Page!&#x27;@app.route(&#x27;/login&#x27;)def login_page(): return &#x27;Login Page!&#x27; 运行后就会通过my_title=&#39;Home Page&#39;将内容传递给前端模板上的对应参数 base 模板随着开发的持续，html 页面也会随之越来越多 不少页面之间肯定存在着相同内容，如标题，导航栏等；如果每个页面都重复编写这些相同的内容，后期若出现功能的修改或者内容的增加，将会是一项巨大的工程，因此引入base.html作为所有 html 模板的基础模板，并通过继承（extends）&#123;% extends 'base.html' %&#125;来对 base 模板的内容进行共享 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Base Template&lt;/title&gt; &lt;/head&gt; &lt;body&gt; this is base template content &lt;/body&gt;&lt;/html&gt; 创建两个 html 文件 index 和 about 1&#123;% extends &#x27;base.html&#x27; %&#125; 然后修改一下 user_routes 1234567891011121314151617181920from flask import render_templatefrom routes import app@app.route(&#x27;/&#x27;)@app.route(&#x27;/index&#x27;)def home_page(): return render_template(&#x27;index.html&#x27;)@app.route(&#x27;/about&#x27;)def about_page(): return render_template(&#x27;about.html&#x27;)@app.route(&#x27;/login&#x27;)def login_page(): return &#x27;Login Page!&#x27; 通过两个路由 都可以访问到 base 模板 block 标签但是有时候并不是全都需要一样的模板，有可能需要对 base 的模板内容进行修改 可以使用 block 标签，起到一个占位符的作用 &#96;","categories":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/categories/Python-Web/"}],"tags":[{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/tags/Python-Web/"},{"name":"Flask","slug":"Flask","permalink":"https://blockzachary.github.io/tags/Flask/"},{"name":"项目","slug":"项目","permalink":"https://blockzachary.github.io/tags/%E9%A1%B9%E7%9B%AE/"}]},{"title":"docker-apt-get 报错 E: Unable to locate package","slug":"Docker/docker-apt-get报错E_Unabletolocatepackage","date":"2024-01-25T03:48:00.000Z","updated":"2024-01-25T03:48:00.000Z","comments":true,"path":"blog/4282897083/","permalink":"https://blockzachary.github.io/blog/4282897083/","excerpt":"","text":"docker-apt-get 报错 E: Unable to locate package遇见的问题 12345678910111213141516171819202122232425262728293031323334353637root@ubuntu-server:~/pythonProject/flaskDockerSample# docker build . -t myflasksample[+] Building 974.1s (7/10) docker:default =&gt; [internal] load build definition from Dockerfile 0.1s =&gt; =&gt; transferring dockerfile: 292B 0.0s =&gt; [internal] load .dockerignore 0.1s =&gt; =&gt; transferring context: 2B 0.0s =&gt; [internal] load metadata for docker.io/library/ubuntu:latest 817.0s =&gt; [1/6] FROM docker.io/library/ubuntu:latest@sha256:e6173d4dc55e76b87c4af8db8821b1feae4146dd47341e4d431118c7dd 7.3s =&gt; =&gt; resolve docker.io/library/ubuntu:latest@sha256:e6173d4dc55e76b87c4af8db8821b1feae4146dd47341e4d431118c7dd 0.0s =&gt; =&gt; sha256:e6173d4dc55e76b87c4af8db8821b1feae4146dd47341e4d431118c7dd060a74 1.13kB / 1.13kB 0.0s =&gt; =&gt; sha256:cb2af41f42b9c9bc9bcdc7cf1735e3c4b3d95b2137be86fd940373471a34c8b0 424B / 424B 0.0s =&gt; =&gt; sha256:e34e831650c1bb0be9b6f61c6755749cb8ea2053ba91c6cda27fded9e089811f 2.30kB / 2.30kB 0.0s =&gt; =&gt; sha256:29202e855b2021a2d7f92800619ed5f5e8ac402e267cfbb3d29a791feb13c1ee 29.55MB / 29.55MB 4.5s =&gt; =&gt; extracting sha256:29202e855b2021a2d7f92800619ed5f5e8ac402e267cfbb3d29a791feb13c1ee 2.4s =&gt; [internal] load build context 0.0s =&gt; =&gt; transferring context: 330B 0.0s =&gt; [2/6] RUN apt-get update 148.9s =&gt; ERROR [3/6] RUN apt-get install -y python3.7 python3-pip 0.6s------ &gt; [3/6] RUN apt-get install -y python3.7 python3-pip:0.487 Reading package lists...0.514 Building dependency tree...0.515 Reading state information...0.517 E: Unable to locate package python3.70.517 E: Couldn&#x27;t find any package by glob &#x27;python3.7&#x27;0.517 E: Couldn&#x27;t find any package by regex &#x27;python3.7&#x27;0.517 E: Unable to locate package python3-pip------Dockerfile:5-------------------- 3 | 4 | RUN apt-get update 5 | &gt;&gt;&gt; RUN apt-get install -y python3.7 python3-pip 6 | 7 | COPY requirements.txt .--------------------ERROR: failed to solve: process &quot;/bin/sh -c apt-get install -y python3.7 python3-pip&quot; did not complete successfully: exit code: 100 解决办法 ： 换了镜像源 &#x2F;etc&#x2F;docker&#x2F;daemon.json 把 dockerfile 中的 apt-get update 换成 apt update 莫名发现这个很好用 更新: 2024-01-25 23:33:30原文: https://www.yuque.com/zacharyblock/cx2om6/wraymddq9z9nodf4","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/tags/Docker/"}]},{"title":"git-GnuTLS recv error (-110): The TLS connection was non-properly terminated.","slug":"Git/git-GnuTLSrecverror(-110)_TheTLSconnectionwasnon-properlyterminated.","date":"2024-01-25T03:12:00.000Z","updated":"2024-01-25T03:12:00.000Z","comments":true,"path":"blog/3701004505/","permalink":"https://blockzachary.github.io/blog/3701004505/","excerpt":"","text":"git-GnuTLS recv error (-110): The TLS connection was non-properly terminated.123root@ubuntu-server:~/pythonProject# git clone https://github.com/BlockZachary/flaskDockerSample.gitCloning into &#x27;flaskDockerSample&#x27;...fatal: unable to access &#x27;https://github.com/BlockZachary/flaskDockerSample.git/&#x27;: GnuTLS recv error (-110): The TLS connection was non-properly terminated. 在确保了 ubuntu 下没有代理的情况下，依次执行 123root@ubuntu-server:~/pythonProject# export GIT_TRACE_PACKET=1root@ubuntu-server:~/pythonProject# export GIT_TRACE=1root@ubuntu-server:~/pythonProject# export GIT_CURL_VERBOSE=1 再次尝试 clone 成功了 12345678910111213root@ubuntu-server:~/pythonProject# git clone https://github.com/BlockZachary/flaskDockerSample.git19:10:50.593675 git.c:439 trace: built-in: git clone https://github.com/BlockZachary/flaskDockerSample.gitCloning into &#x27;flaskDockerSample&#x27;...19:10:50.598505 run-command.c:663 trace: run_command: git-remote-https origin https://github.com/BlockZachary/flaskDockerSample.git* Couldn&#x27;t find host github.com in the .netrc file; using defaults* Trying 140.82.113.4:443...* TCP_NODELAY set* Connected to github.com (140.82.113.4) port 443 (#0)* found 411 certificates in /etc/ssl/certs* ALPN, offering h2* ALPN, offering http/1.1* SSL connection using TLS1.3 / ECDHE_RSA_AES_128_GCM_SHA256* server certificate verification OK 更新: 2024-01-25 03:13:50原文: https://www.yuque.com/zacharyblock/cx2om6/mrus76t4yurrg5ee","categories":[{"name":"Git","slug":"Git","permalink":"https://blockzachary.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://blockzachary.github.io/tags/Git/"}]},{"title":"解决“git-Failed to connect to 127.0.0.1 port 7890: 拒绝连接","slug":"Git/git-Failedtoconnectto127.0.0.1port7890_拒绝连接","date":"2024-01-24T23:00:00.000Z","updated":"2024-01-24T23:00:00.000Z","comments":true,"path":"blog/1915393917/","permalink":"https://blockzachary.github.io/blog/1915393917/","excerpt":"","text":"git-Failed to connect to 127.0.0.1 port 7890: 拒绝连接首先查看是否使用代理 git config --global http.proxy 将使用的代理取消掉 git config --global --unset http.proxy 12345➜ ~ git config --global http.proxy127.0.0.1:7890➜ ~ git config --global --unset http.proxy➜ ~ 更新: 2024-01-24 23:03:31原文: https://www.yuque.com/zacharyblock/cx2om6/xv1hqiphn1w9xs7n","categories":[{"name":"Git","slug":"Git","permalink":"https://blockzachary.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://blockzachary.github.io/tags/Git/"}]},{"title":"Docker 入门","slug":"Docker/Docker入门","date":"2024-01-23T06:44:00.000Z","updated":"2024-01-23T06:44:00.000Z","comments":true,"path":"blog/4203719214/","permalink":"https://blockzachary.github.io/blog/4203719214/","excerpt":"","text":"Docker 入门初识 Docker概念虚拟机的出现使得 同一台物理机上实现多个操作系统（OS）运行不同 App 达到目的 成为可能 但是当虚拟机数量越来越多 或者所运行的 App 消耗的资源越来越大时 对物理机会产生极大消耗 为了使得系统性能不被多个虚拟机中的 OS 所消耗，容器技术（Container）应运而生 与虚拟机不同，容器技术依赖容器支持层，创建多个容器，用以运行多个 App 优点是极大地降低了资源消耗，同时形成多个虚拟机的效果，其中最流行的容器技术就是 Docker Docker 的特点 基于 Linux 实现的虚拟技术 依据进程隔离实现的 体积小、占用资源少 启动快 作用 用于解决软件开发中的环境配置，作用类似于 Python 的虚拟环境 安装 MacOS 系统访问 https://docs.docker.com/desktop/install/mac-install/ Windows 系统访问 https://docs.docker.com/desktop/install/windows-install/ ubuntu 系统访问 https://docs.docker.com/engine/install/ubuntu/ centos 系统访问 https://docs.docker.com/engine/install/centos/ 显示 docker 版本 docker -v 12root@ubuntu-server:~# docker -vDocker version 24.0.6, build ed223bc 显示 docker 详细信息 docker info 123456789101112root@ubuntu-server:/# docker infoClient: Docker Engine - Community Version: 24.0.6 Context: default Debug Mode: false Plugins: buildx: Docker Buildx (Docker Inc.) Version: v0.11.2 Path: /usr/libexec/docker/cli-plugins/docker-buildx compose: Docker Compose (Docker Inc.) Version: v2.21.0 Path: /usr/libexec/docker/cli-plugins/docker-compose 查看 docker 运行状态 systemctl status docker 1234567891011121314151617181920212223root@ubuntu-server:~# systemctl status docker● docker.service - Docker Application Container Engine Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2023-10-05 00:59:25 UTC; 3 months 18 days agoTriggeredBy: ● docker.socket Docs: https://docs.docker.com Main PID: 1049 (dockerd) Tasks: 10 Memory: 277.2M CGroup: /system.slice/docker.service └─1049 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sockOct 05 00:59:25 ubuntu-server dockerd[1049]: time=&quot;2023-10-05T00:59:25.580102143Z&quot; level=info msg=&quot;API listen&gt;Oct 05 00:59:25 ubuntu-server systemd[1]: Started Docker Application Container Engine.Oct 05 01:17:12 ubuntu-server dockerd[1049]: time=&quot;2023-10-05T01:17:12.301687748Z&quot; level=info msg=&quot;ignoring e&gt;Oct 05 01:17:12 ubuntu-server dockerd[1049]: time=&quot;2023-10-05T01:17:12.322715268Z&quot; level=warning msg=&quot;failed &gt;Oct 05 01:24:34 ubuntu-server dockerd[1049]: time=&quot;2023-10-05T01:24:34.725731365Z&quot; level=error msg=&quot;stream co&gt;Oct 05 01:24:34 ubuntu-server dockerd[1049]: time=&quot;2023-10-05T01:24:34.725833604Z&quot; level=error msg=&quot;stream co&gt;Oct 05 01:24:59 ubuntu-server dockerd[1049]: time=&quot;2023-10-05T01:24:59.217576662Z&quot; level=error msg=&quot;Not conti&gt;Oct 05 02:09:18 ubuntu-server dockerd[1049]: time=&quot;2023-10-05T02:09:18.848121719Z&quot; level=info msg=&quot;Container &gt;Oct 05 02:09:18 ubuntu-server dockerd[1049]: time=&quot;2023-10-05T02:09:18.883004570Z&quot; level=info msg=&quot;ignoring e&gt;Oct 05 02:09:18 ubuntu-server dockerd[1049]: time=&quot;2023-10-05T02:09:18.900091164Z&quot; level=warning msg=&quot;failed &gt;lines 1-21/21 (END) 设置 docker 开机自启动 systemctl enable docker Docker 运行最初，刚安装好 docker 的机器不存在镜像因此没办法运行 运行docker run hello-world的效果如下，由于设备上还没有拉取任何镜像，因此是从 library 上拉取的 123456789101112131415161718192021222324252627root@ubuntu-server:~# docker run hello-worldUnable to find image &#x27;hello-world:latest&#x27; locallylatest: Pulling from library/hello-worldc1ec31eb5944: Pull completeDigest: sha256:4bd78111b6914a99dbc560e6a20eab57ff6655aea4a80c50b0c5491968cbc2e6Status: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/ 启动容器 docker run [镜像名称]，若该镜像不存在 则会默认拉取最新的 1234567891011121314151617181920212223242526272829303132333435363738root@ubuntu-server:~# docker run nginxUnable to find image &#x27;nginx:latest&#x27; locallylatest: Pulling from library/nginx2f44b7a888fa: Pull complete8b7dd3ed1dc3: Pull complete35497dd96569: Pull complete36664b6ce66b: Pull complete2d455521f76c: Pull completedc9c4fdb83d6: Pull complete8056d2bcf3b6: Pull completeDigest: sha256:4c0fdaa8b6341bfdeca5f18f7837462c80cff90527ee35ef185571e1c327beacStatus: Downloaded newer image for nginx:latest/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d//docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh/docker-entrypoint.sh: Configuration complete; ready for start up2024/01/23 13:58:44 [notice] 1#1: using the &quot;epoll&quot; event method2024/01/23 13:58:44 [notice] 1#1: nginx/1.25.32024/01/23 13:58:44 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)2024/01/23 13:58:44 [notice] 1#1: OS: Linux 5.4.0-163-generic2024/01/23 13:58:44 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:10485762024/01/23 13:58:44 [notice] 1#1: start worker processes2024/01/23 13:58:44 [notice] 1#1: start worker process 282024/01/23 13:58:44 [notice] 1#1: start worker process 292024/01/23 14:01:05 [notice] 1#1: signal 28 (SIGWINCH) received2024/01/23 14:01:06 [notice] 1#1: signal 28 (SIGWINCH) received2024/01/23 14:01:06 [notice] 1#1: signal 28 (SIGWINCH) received2024/01/23 14:01:06 [notice] 1#1: signal 28 (SIGWINCH) received2024/01/23 14:01:07 [notice] 1#1: signal 28 (SIGWINCH) received2024/01/23 14:01:07 [notice] 1#1: signal 28 (SIGWINCH) received2024/01/23 14:01:08 [notice] 1#1: signal 28 (SIGWINCH) received2024/01/23 14:01:09 [notice] 1#1: signal 28 (SIGWINCH) received2024/01/23 14:01:09 [notice] 1#1: signal 28 (SIGWINCH) received 会启动一个 nginx 服务，并且等待着 查看当前容器 docker ps 查看正在运行中的或者创建了的容器 docker ps -a 查看所有容器 123456789root@ubuntu-server:~# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES8e1148f9c025 nginx &quot;/docker-entrypoint.…&quot; 6 minutes ago Up 6 minutes 80/tcp reverent_wozniakroot@ubuntu-server:~#root@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES8e1148f9c025 nginx &quot;/docker-entrypoint.…&quot; 6 minutes ago Up 6 minutes 80/tcp reverent_wozniak2d987d559739 hello-world &quot;/hello&quot; 30 minutes ago Exited (0) 30 minutes ago loving_lehmannroot@ubuntu-server:~# docker inspect [容器ID]，查看容器的信息 1234567891011121314151617181920212223242526root@ubuntu-server:~# docker inspect 8e1148f9c025[ &#123; &quot;Id&quot;: &quot;8e1148f9c02527e90a80ca1f783404ffeb0b22e87a7d3331fef40354ca237c80&quot;, &quot;Created&quot;: &quot;2024-01-23T13:58:44.354388314Z&quot;, &quot;Path&quot;: &quot;/docker-entrypoint.sh&quot;, &quot;Args&quot;: [ &quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot; ], &quot;State&quot;: &#123; &quot;Status&quot;: &quot;running&quot;, &quot;Running&quot;: true, &quot;Paused&quot;: false, &quot;Restarting&quot;: false, &quot;OOMKilled&quot;: false, &quot;Dead&quot;: false, &quot;Pid&quot;: 60563, &quot;ExitCode&quot;: 0, &quot;Error&quot;: &quot;&quot;, &quot;StartedAt&quot;: &quot;2024-01-23T13:58:44.664498639Z&quot;, &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot; &#125;, &quot;Image&quot;: &quot;sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6&quot;, ... curl http://[IpAddress]:[Ports]访问该 nginx 服务 1234567891011121314151617181920212223242526272829root@ubuntu-server:~# curl http://172.17.0.2:80curl: (7) Failed to connect to 172.17.0.2 port 80: Connection refusedroot@ubuntu-server:~# curl http://127.0.0.1:80&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt; body &#123; width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 这时候 我出现了一个问题，通过 IPAddress 访问不到，但是通过容器内部可以访问到，并且 ping 不通 172.17.0.2，解决方法如下 12345678910111213141516171819202122232425262728293031323334353637root@ubuntu-server:/# cd /etc/docker/root@ubuntu-server:/etc/docker# nano daemon.jsonroot@ubuntu-server:/etc/docker# cat daemon.json&#123; &quot;bip&quot;:&quot;172.17.0.1/24&quot;&#125;root@ubuntu-server:/etc/docker# ps -ef | grep dockerdroot 66939 64105 0 15:14 pts/0 00:00:00 dockerdroot 67596 64105 0 15:21 pts/0 00:00:00 grep --color=auto dockerdroot@ubuntu-server:/etc/docker# kill -9 66939root@ubuntu-server:/etc/docker# sudo systemctl stop docker &amp;&amp; sudo systemctl disable dockerWarning: Stopping docker.service, but it can still be activated by: docker.socket[1]+ Killed dockerdSynchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.Executing: /lib/systemd/systemd-sysv-install disable dockerroot@ubuntu-server:/etc/docker# ip link set dev docker0 downroot@ubuntu-server:~# dockerd &amp;[2] 68637root@ubuntu-server:~# INFO[2024-01-23T15:28:54.176224866Z] Starting upINFO[2024-01-23T15:28:54.177656625Z] detected 127.0.0.53 nameserver, assuming systemd-resolved, so using resolv.conf: /run/systemd/resolve/resolv.confINFO[2024-01-23T15:28:54.205339444Z] [graphdriver] using prior storage driver: overlay2INFO[2024-01-23T15:28:54.207603223Z] Loading containers: start.INFO[2024-01-23T15:28:54.420248892Z] Loading containers: done.WARN[2024-01-23T15:28:54.435812794Z] WARNING: No swap limit supportINFO[2024-01-23T15:28:54.436013678Z] Docker daemon commit=1a79695 graphdriver=overlay2 version=24.0.6INFO[2024-01-23T15:28:54.436353042Z] Daemon has completed initializationINFO[2024-01-23T15:28:54.462870900Z] API listen on /var/run/docker.sockroot@ubuntu-server:~# ps -ef | grep dockerdroot 68637 64105 0 15:28 pts/0 00:00:00 dockerdroot 68836 64105 0 15:30 pts/0 00:00:00 grep --color=auto dockerd 之后尝试重新创建一个 nginx 容器 123456789101112131415161718root@ubuntu-server:~# docker run nginx/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d//docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh/docker-entrypoint.sh: Configuration complete; ready for start up2024/01/23 15:31:01 [notice] 1#1: using the &quot;epoll&quot; event method2024/01/23 15:31:01 [notice] 1#1: nginx/1.25.32024/01/23 15:31:01 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)2024/01/23 15:31:01 [notice] 1#1: OS: Linux 5.4.0-163-generic2024/01/23 15:31:01 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:10485762024/01/23 15:31:01 [notice] 1#1: start worker processes2024/01/23 15:31:01 [notice] 1#1: start worker process 292024/01/23 15:31:01 [notice] 1#1: start worker process 30 然后使用curl http://172.17.0.2:80运行一下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455root@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES9db02b830360 nginx &quot;/docker-entrypoint.…&quot; 11 seconds ago Up 10 seconds 80/tcp heuristic_swanson2d987d559739 hello-world &quot;/hello&quot; 2 hours ago Exited (0) 2 hours ago loving_lehmannroot@ubuntu-server:~# docker inspect 9db02b830360[ &#123; &quot;Id&quot;: &quot;9db02b830360af059797b0b17c9fb043c46d468aa9d4ac7edd4e1dbb0bcc5536&quot;, &quot;Created&quot;: &quot;2024-01-23T15:31:01.321227908Z&quot;, &quot;Path&quot;: &quot;/docker-entrypoint.sh&quot;, &quot;Args&quot;: [ &quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot; ], &quot;State&quot;: &#123; &quot;Status&quot;: &quot;running&quot;, &quot;Running&quot;: true, &quot;Paused&quot;: false, &quot;Restarting&quot;: false, &quot;OOMKilled&quot;: false, &quot;Dead&quot;: false, &quot;Pid&quot;: 68908, &quot;ExitCode&quot;: 0, &quot;Error&quot;: &quot;&quot;, &quot;StartedAt&quot;: &quot;2024-01-23T15:31:01.62045826Z&quot;, &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot; &#125;, &quot;Image&quot;: &quot;sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6&quot;, ...root@ubuntu-server:~# curl http://172.17.0.2:80&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt;html &#123; color-scheme: light dark; &#125;body &#123; width: 35em; margin: 0 auto;font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 并且在另一边的 nginx 服务上可以看到访问 12345678910111213141516171819root@ubuntu-server:~# docker run nginx/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d//docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh/docker-entrypoint.sh: Configuration complete; ready for start up2024/01/23 15:31:01 [notice] 1#1: using the &quot;epoll&quot; event method2024/01/23 15:31:01 [notice] 1#1: nginx/1.25.32024/01/23 15:31:01 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)2024/01/23 15:31:01 [notice] 1#1: OS: Linux 5.4.0-163-generic2024/01/23 15:31:01 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:10485762024/01/23 15:31:01 [notice] 1#1: start worker processes2024/01/23 15:31:01 [notice] 1#1: start worker process 292024/01/23 15:31:01 [notice] 1#1: start worker process 30172.17.0.1 - - [23/Jan/2024:15:31:41 +0000] &quot;GET / HTTP/1.1&quot; 200 615 &quot;-&quot; &quot;curl/7.68.0&quot; &quot;-&quot; 停止与删除容器 docker stop [容器ID] 停止一个容器 docker &lt;container&gt; rm [容器ID]/[容器名:Tag] 删除一个容器，一个容器必须先停止了 才能被删除 docker run --rm [容器名称]创建一个容器，容器停止时自动删除 docker container prune删除所有已经停止的容器 12345678910111213141516root@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES9db02b830360 nginx &quot;/docker-entrypoint.…&quot; About an hour ago Up About an hour 80/tcp heuristic_swanson2d987d559739 hello-world &quot;/hello&quot; 3 hours ago Exited (0) 3 hours ago loving_lehmannroot@ubuntu-server:~# docker stop 9db02b8303609db02b830360root@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES9db02b830360 nginx &quot;/docker-entrypoint.…&quot; About an hour ago Exited (0) 3 seconds ago heuristic_swanson2d987d559739 hello-world &quot;/hello&quot; 3 hours ago Exited (0) 3 hours ago loving_lehmannroot@ubuntu-server:~# docker rm 9db02b8303609db02b830360root@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2d987d559739 hello-world &quot;/hello&quot; 3 hours ago Exited (0) 3 hours ago loving_lehmannroot@ubuntu-server:~# 启动指定 Image 版本容器 docker run [镜像名称] 默认表示最新版本的镜像 docker run [镜像名称]:[版本号] 使用版本号指定的镜像 查看官方维护的镜像版本号 https://hub.docker.com/ 123456789101112131415161718192021222324252627root@ubuntu-server:~# docker run nginx:1.24.0Unable to find image &#x27;nginx:1.24.0&#x27; locally1.24.0: Pulling from library/nginx0e0969fcaa82: Pull complete9cfddd3151d4: Pull complete0a14c9c58a70: Pull complete46aff079cc60: Pull complete93498c6629aa: Pull completea67e21d7eabc: Pull completeDigest: sha256:401bc2c812345a6c64a0fd5504db5e8b511c7c8e62855a827c57944280835703Status: Downloaded newer image for nginx:1.24.0/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d//docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh/docker-entrypoint.sh: Configuration complete; ready for start up2024/01/23 17:10:12 [notice] 1#1: using the &quot;epoll&quot; event method2024/01/23 17:10:12 [notice] 1#1: nginx/1.24.02024/01/23 17:10:12 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6)2024/01/23 17:10:12 [notice] 1#1: OS: Linux 5.4.0-163-generic2024/01/23 17:10:12 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:10485762024/01/23 17:10:12 [notice] 1#1: start worker processes2024/01/23 17:10:12 [notice] 1#1: start worker process 292024/01/23 17:10:12 [notice] 1#1: start worker process 30 其他的一些操作比如容器的停止与删除等都与之前一致 1234567891011121314151617181920212223242526272829303132333435363738root@ubuntu-server:~# curl http://172.17.0.2:80&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt;html &#123; color-scheme: light dark; &#125;body &#123; width: 35em; margin: 0 auto;font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;root@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESb29d1d06802e nginx:1.24.0 &quot;/docker-entrypoint.…&quot; 4 minutes ago Up 4 minutes 80/tcp eloquent_bartik2d987d559739 hello-world &quot;/hello&quot; 4 hours ago Exited (0) 4 hours ago loving_lehmannroot@ubuntu-server:~# docker rm b29d1d06802eError response from daemon: You cannot remove a running container b29d1d06802ef51cf29a0f2fcf966f5b0b98f2d10781fe9a6b73663e2e001e08. Stop the container before attempting removal or force removeroot@ubuntu-server:~# docker stop b29d1d06802eINFO[2024-01-23T17:14:43.920238667Z] ignoring event container=b29d1d06802ef51cf29a0f2fcf966f5b0b98f2d10781fe9a6b73663e2e001e08 module=libcontainerd namespace=moby topic=/tasks/delete type=&quot;*events.TaskDelete&quot;b29d1d06802eroot@ubuntu-server:~# docker rm b29d1d06802eb29d1d06802eroot@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2d987d559739 hello-world &quot;/hello&quot; 4 hours ago Exited (0) 4 hours ago loving_lehmann 创建交互式终端容器 docker run -it &lt;--name=[容器名称]&gt; [镜像名称]&lt;:[版本号]&gt; 启动后可在控制台打印输出与获取输入 docker run -it &lt;--name=[容器名称]&gt; [镜像名称]&lt;:[版本号]&gt; bash 启动后直接进入交互终端 exit退出交互式终端 12345678910111213141516171819202122232425root@ubuntu-server:~# docker run -it --name=nginx_test1 nginx/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d//docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh/docker-entrypoint.sh: Configuration complete; ready for start up2024/01/23 18:20:15 [notice] 1#1: using the &quot;epoll&quot; event method2024/01/23 18:20:15 [notice] 1#1: nginx/1.25.32024/01/23 18:20:15 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)2024/01/23 18:20:15 [notice] 1#1: OS: Linux 5.4.0-163-generic2024/01/23 18:20:15 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:10485762024/01/23 18:20:15 [notice] 1#1: start worker processes2024/01/23 18:20:15 [notice] 1#1: start worker process 292024/01/23 18:20:15 [notice] 1#1: start worker process 30root@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES550565930a6a nginx &quot;/docker-entrypoint.…&quot; 16 seconds ago Up 15 seconds 80/tcp nginx_test12d987d559739 hello-world &quot;/hello&quot; 5 hours ago Exited (0) 5 hours ago loving_lehmannroot@ubuntu-server:~# 12345678910111213141516171819202122232425262728293031323334353637383940414243root@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES550565930a6a nginx &quot;/docker-entrypoint.…&quot; 16 seconds ago Up 15 seconds 80/tcp nginx_test12d987d559739 hello-world &quot;/hello&quot; 5 hours ago Exited (0) 5 hours ago loving_lehmannroot@ubuntu-server:~# docker run -it --name=nginx_test_bash nginx:1.24.0 bashroot@9dd09b818936:/# llbash: ll: command not foundroot@9dd09b818936:/# lsbin dev docker-entrypoint.sh home lib64 mnt proc run srv tmp varboot docker-entrypoint.d etc lib media opt root sbin sys usrroot@9dd09b818936:/# ls -ltotal 72drwxr-xr-x 2 root root 4096 Jan 10 00:00 bindrwxr-xr-x 2 root root 4096 Sep 29 20:00 bootdrwxr-xr-x 5 root root 360 Jan 23 18:22 devdrwxr-xr-x 1 root root 4096 Jan 12 00:22 docker-entrypoint.d-rwxr-xr-x 1 root root 1616 Jan 12 00:21 docker-entrypoint.shdrwxr-xr-x 1 root root 4096 Jan 23 18:22 etcdrwxr-xr-x 2 root root 4096 Sep 29 20:00 homedrwxr-xr-x 1 root root 4096 Jan 10 00:00 libdrwxr-xr-x 2 root root 4096 Jan 10 00:00 lib64drwxr-xr-x 2 root root 4096 Jan 10 00:00 mediadrwxr-xr-x 2 root root 4096 Jan 10 00:00 mntdrwxr-xr-x 2 root root 4096 Jan 10 00:00 optdr-xr-xr-x 291 root root 0 Jan 23 18:22 procdrwx------ 2 root root 4096 Jan 10 00:00 rootdrwxr-xr-x 3 root root 4096 Jan 10 00:00 rundrwxr-xr-x 2 root root 4096 Jan 10 00:00 sbindrwxr-xr-x 2 root root 4096 Jan 10 00:00 srvdr-xr-xr-x 13 root root 0 Jan 23 18:22 sysdrwxrwxrwt 2 root root 4096 Jan 10 00:00 tmpdrwxr-xr-x 1 root root 4096 Jan 10 00:00 usrdrwxr-xr-x 1 root root 4096 Jan 10 00:00 varroot@9dd09b818936:/# docker ps -abash: docker: command not foundroot@9dd09b818936:/# exitexitroot@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES9dd09b818936 nginx:1.24.0 &quot;/docker-entrypoint.…&quot; About a minute ago Exited (127) 7 seconds ago nginx_test_bash550565930a6a nginx &quot;/docker-entrypoint.…&quot; 3 minutes ago Up 3 minutes 80/tcp nginx_test12d987d559739 hello-world &quot;/hello&quot; 5 hours ago Exited (0) 5 hours ago loving_lehmannroot@ubuntu-server:~# 启动映射端口的容器如果想要实现通过主机 ip 对 docker 的服务进行访问 需要执行端口映射 docker run -p [主机端口]:[容器端口] [镜像名称]&lt;:[版本号]&gt; 123456789101112131415161718root@ubuntu-server:~# docker run -p 8089:80 nginx/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d//docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh/docker-entrypoint.sh: Configuration complete; ready for start up2024/01/23 18:38:34 [notice] 1#1: using the &quot;epoll&quot; event method2024/01/23 18:38:34 [notice] 1#1: nginx/1.25.32024/01/23 18:38:34 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)2024/01/23 18:38:34 [notice] 1#1: OS: Linux 5.4.0-163-generic2024/01/23 18:38:34 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:10485762024/01/23 18:38:34 [notice] 1#1: start worker processes2024/01/23 18:38:34 [notice] 1#1: start worker process 292024/01/23 18:38:34 [notice] 1#1: start worker process 30 然后获取主机的 ip 地址 123456789101112131415161718root@ubuntu-server:~# ifconfigdocker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.17.0.1 netmask 255.255.255.0 broadcast 172.17.0.255 inet6 fe80::42:a1ff:fe46:815b prefixlen 64 scopeid 0x20&lt;link&gt; ether 02:42:a1:46:81:5b txqueuelen 0 (Ethernet) RX packets 28 bytes 4708 (4.7 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 86 bytes 7509 (7.5 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.7.128 netmask 255.255.255.0 broadcast 192.168.7.255 inet6 fe80::20c:29ff:fe88:f308 prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:0c:29:88:f3:08 txqueuelen 1000 (Ethernet) RX packets 543109 bytes 789811793 (789.8 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 45005 bytes 3778306 (3.7 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 之后在浏览器通过访问主机 ip 地址+port 端口号 (192.168.7.128:8089)，访问刚才启动的 nginx 服务 启动容器时配置环境变量 docker run mysql启动一个 MySQL 容器 1234567891011121314151617181920212223root@ubuntu-server:~# docker run mysqlUnable to find image &#x27;mysql:latest&#x27; locallylatest: Pulling from library/mysql558b7d69a2e5: Pull complete2cb5a921059e: Pull completeb85878fb9bb2: Pull completed16f3fd26a82: Pull completeafd51b5329cb: Pull complete374d2f7f3267: Pull complete4ea1bb2c9574: Pull complete1c9054053605: Pull completed79cd2da03be: Pull completee3a1aa788d17: Pull completeDigest: sha256:d7c20c5ba268c558f4fac62977f8c7125bde0630ff8946b08dde44135ef40df3Status: Downloaded newer image for mysql:latest2024-01-23 18:45:20+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.2024-01-23 18:45:21+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;2024-01-23 18:45:21+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.2024-01-23 18:45:21+00:00 [ERROR] [Entrypoint]: Database is uninitialized and password option is not specified You need to specify one of the following as an environment variable: - MYSQL_ROOT_PASSWORD - MYSQL_ALLOW_EMPTY_PASSWORD - MYSQL_RANDOM_ROOT_PASSWORD 提示需要执行以下任意一个命令 You need to specify one of the following as an environment variable: MYSQL_ROOT_PASSWORD MYSQL_ALLOW_EMPTY_PASSWORD MYSQL_RANDOM_ROOT_PASSWORD 这时候如果可以实现在启动容器的时候 就配置上环境变量，就可以实现 docker run -e [变量名]=[变量值] [镜像名称] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748root@ubuntu-server:~# docker run -e MYSQL_ROOT_PASSWORD=123456 mysql2024-01-23 18:49:31+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.2024-01-23 18:49:31+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;2024-01-23 18:49:31+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.2024-01-23 18:49:31+00:00 [Note] [Entrypoint]: Initializing database files2024-01-23T18:49:31.790608Z 0 [System] [MY-015017] [Server] MySQL Server Initialization - start.2024-01-23T18:49:31.792861Z 0 [System] [MY-013169] [Server] /usr/sbin/mysqld (mysqld 8.3.0) initializing of server in progress as process 782024-01-23T18:49:31.801893Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.2024-01-23T18:49:33.124408Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.2024-01-23T18:49:34.643504Z 6 [Warning] [MY-010453] [Server] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.2024-01-23T18:49:37.095006Z 0 [System] [MY-015018] [Server] MySQL Server Initialization - end.2024-01-23 18:49:37+00:00 [Note] [Entrypoint]: Database files initialized2024-01-23 18:49:37+00:00 [Note] [Entrypoint]: Starting temporary server2024-01-23T18:49:37.178985Z 0 [System] [MY-015015] [Server] MySQL Server - start.2024-01-23T18:49:37.938518Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 1202024-01-23T18:49:37.984832Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.2024-01-23T18:49:38.618882Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.2024-01-23T18:49:39.139280Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.2024-01-23T18:49:39.139356Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.2024-01-23T18:49:39.142832Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location &#x27;/var/run/mysqld&#x27; in the path is accessible to all OS users. Consider choosing a different directory.2024-01-23T18:49:39.222585Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Socket: /var/run/mysqld/mysqlx.sock2024-01-23T18:49:39.236461Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: &#x27;8.3.0&#x27; socket: &#x27;/var/run/mysqld/mysqld.sock&#x27; port: 0 MySQL Community Server - GPL.2024-01-23 18:49:39+00:00 [Note] [Entrypoint]: Temporary server started.&#x27;/var/lib/mysql/mysql.sock&#x27; -&gt; &#x27;/var/run/mysqld/mysqld.sock&#x27;Warning: Unable to load &#x27;/usr/share/zoneinfo/iso3166.tab&#x27; as time zone. Skipping it.Warning: Unable to load &#x27;/usr/share/zoneinfo/leap-seconds.list&#x27; as time zone. Skipping it.Warning: Unable to load &#x27;/usr/share/zoneinfo/leapseconds&#x27; as time zone. Skipping it.Warning: Unable to load &#x27;/usr/share/zoneinfo/tzdata.zi&#x27; as time zone. Skipping it.Warning: Unable to load &#x27;/usr/share/zoneinfo/zone.tab&#x27; as time zone. Skipping it.Warning: Unable to load &#x27;/usr/share/zoneinfo/zone1970.tab&#x27; as time zone. Skipping it.2024-01-23 18:49:43+00:00 [Note] [Entrypoint]: Stopping temporary server2024-01-23T18:49:43.608667Z 10 [System] [MY-013172] [Server] Received SHUTDOWN from user root. Shutting down mysqld (Version: 8.3.0).2024-01-23T18:49:44.452345Z 0 [System] [MY-010910] [Server] /usr/sbin/mysqld: Shutdown complete (mysqld 8.3.0) MySQL Community Server - GPL.2024-01-23T18:49:44.452374Z 0 [System] [MY-015016] [Server] MySQL Server - end.2024-01-23 18:49:44+00:00 [Note] [Entrypoint]: Temporary server stopped2024-01-23 18:49:44+00:00 [Note] [Entrypoint]: MySQL init process done. Ready for start up.2024-01-23T18:49:44.647019Z 0 [System] [MY-015015] [Server] MySQL Server - start.2024-01-23T18:49:44.932472Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 12024-01-23T18:49:44.939342Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.2024-01-23T18:49:45.096752Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.2024-01-23T18:49:45.319462Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.2024-01-23T18:49:45.319508Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.2024-01-23T18:49:45.321697Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location &#x27;/var/run/mysqld&#x27; in the path is accessible to all OS users. Consider choosing a different directory.2024-01-23T18:49:45.347896Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060, socket: /var/run/mysqld/mysqlx.sock2024-01-23T18:49:45.348529Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: &#x27;8.3.0&#x27; socket: &#x27;/var/run/mysqld/mysqld.sock&#x27; port: 3306 MySQL Community Server - GPL. 服务启动之后可以尝试连接一下 12345678910111213141516171819202122232425262728293031323334353637root@ubuntu-server:~# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2edfbe0997f3 mysql &quot;docker-entrypoint.s…&quot; 2 minutes ago Up 2 minutes 3306/tcp, 33060/tcp gallant_coriroot@ubuntu-server:~# docker inspect 2edfbe0997f3 | grep &quot;IPAddress&quot; &quot;SecondaryIPAddresses&quot;: null, &quot;IPAddress&quot;: &quot;172.17.0.2&quot;, &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,root@ubuntu-server:~# mysql -h 172.17.0.2 -u root -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 8Server version: 8.3.0 MySQL Community Server - GPLCopyright (c) 2000, 2023, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; show databases -&gt; ;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || sys |+--------------------+4 rows in set (0.01 sec)mysql&gt; 启动容器时配置路径映射当 docker 中的一个 mysql 服务容器删除之后，之前在这个容器中创建的数据库、表都会消失掉； 那如果可以将主机的某个路径（磁盘卷）映射到容器中，使得数据库、表存储在主机中，就不会因为容器的删除而导致数据的丢失 docker run -v [主机路径]:[容器路径] [镜像名称]创建一个映射路径的容器 先停掉之前的服务，然后创建 第一个 mysql 容器，然后在这个容器里面创建 一个数据库 之后删除掉这个容器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859root@ubuntu-server:~# docker run -e MYSQL_ROOT_PASSWORD=123456 -v /opt/mysql:/var/lib/mysql mysql2024-01-23 19:09:44+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.2024-01-23 19:09:44+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;2024-01-23 19:09:44+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.2024-01-23 19:09:44+00:00 [Note] [Entrypoint]: Initializing database files2024-01-23T19:09:44.568209Z 0 [System] [MY-015017] [Server] MySQL Server Initialization - start.2024-01-23T19:09:44.570481Z 0 [System] [MY-013169] [Server] /usr/sbin/mysqld (mysqld 8.3.0) initializing of server in progress as process 80...root@ubuntu-server:~# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES96a607ba155f mysql &quot;docker-entrypoint.s…&quot; About a minute ago Up About a minute 3306/tcp, 33060/tcp zen_newtonroot@ubuntu-server:~# mysql -h 172.17.0.2 -u root -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 8Server version: 8.3.0 MySQL Community Server - GPLCopyright (c) 2000, 2023, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; create database db_in_opt;Query OK, 1 row affected (0.00 sec)mysql&gt; show databases;+--------------------+| Database |+--------------------+| db_in_opt || information_schema || mysql || performance_schema || sys |+--------------------+5 rows in set (0.01 sec)mysql&gt; exitByeroot@ubuntu-server:~# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES96a607ba155f mysql &quot;docker-entrypoint.s…&quot; 3 minutes ago Up 3 minutes 3306/tcp, 33060/tcp zen_newtonroot@ubuntu-server:~# docker stop 96a607ba155fINFO[2024-01-23T19:12:59.513932769Z] ignoring event container=96a607ba155fb9f8095038725c3ecbc98aca97f8f2b85434790a50ce04e1d67e module=libcontainerd namespace=moby topic=/tasks/delete type=&quot;*events.TaskDelete&quot;96a607ba155froot@ubuntu-server:~# docker rm 96a607ba155f96a607ba155froot@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2edfbe0997f3 mysql &quot;docker-entrypoint.s…&quot; 23 minutes ago Exited (0) 5 minutes ago gallant_cori23c63d5c74d7 mysql &quot;docker-entrypoint.s…&quot; 27 minutes ago Exited (1) 27 minutes ago trusting_mccarthyf67b48039737 nginx &quot;/docker-entrypoint.…&quot; 34 minutes ago Exited (0) 24 minutes ago friendly_babbage9dd09b818936 nginx:1.24.0 &quot;/docker-entrypoint.…&quot; 50 minutes ago Exited (127) 49 minutes ago nginx_test_bash550565930a6a nginx &quot;/docker-entrypoint.…&quot; 52 minutes ago Exited (0) 36 minutes ago nginx_test12d987d559739 hello-world &quot;/hello&quot; 6 hours ago Exited (0) 6 hours ago loving_lehmann 紧接着 再次执行 创建映射的 MySQL 容器 查看一下之前所创建的数据库是否存在 123456789101112131415161718192021222324252627282930313233343536root@ubuntu-server:~# docker run -e MYSQL_ROOT_PASSWORD=123456 -v /opt/mysql:/var/lib/mysql mysql2024-01-23 19:14:55+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.2024-01-23 19:14:55+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;2024-01-23 19:14:55+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.&#x27;/var/lib/mysql/mysql.sock&#x27; -&gt; &#x27;/var/run/mysqld/mysqld.sock&#x27;2024-01-23T19:14:55.912867Z 0 [System] [MY-015015] [Server] MySQL Server - start....root@ubuntu-server:~# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES98c3aba2809e mysql &quot;docker-entrypoint.s…&quot; 44 seconds ago Up 44 seconds 3306/tcp, 33060/tcp peaceful_moserroot@ubuntu-server:~# mysql -h 172.17.0.2 -u root -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 8Server version: 8.3.0 MySQL Community Server - GPLCopyright (c) 2000, 2023, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| db_in_opt || information_schema || mysql || performance_schema || sys |+--------------------+5 rows in set (0.00 sec) 自定义 docker Image 镜像之前的操作都是在拉取官方的 image 运行的，若想实现一个自己的 image 需要如何操作 查看已拉取镜像 docker images docker image ls 12345678910111213root@ubuntu-server:~# docker image lsREPOSITORY TAG IMAGE ID CREATED SIZEmysql latest 56b21e040954 5 days ago 632MBnginx latest a8758716bb6a 3 months ago 187MBhello-world latest d2c94e258dcb 8 months ago 13.3kBnginx 1.24.0 f373f7a623e7 9 months ago 142MBroot@ubuntu-server:~# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmysql latest 56b21e040954 5 days ago 632MBnginx latest a8758716bb6a 3 months ago 187MBhello-world latest d2c94e258dcb 8 months ago 13.3kBnginx 1.24.0 f373f7a623e7 9 months ago 142MB 拉取镜像 docker pull [镜像名称image_name]&lt;:[版本号Tag]&gt; 不指定版本号默认拉取最新版本 123456789101112131415161718192021root@ubuntu-server:~# docker pull centosUsing default tag: latestlatest: Pulling from library/centosa1d0c7532777: Pull completeDigest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177Status: Downloaded newer image for centos:latestdocker.io/library/centos:latestroot@ubuntu-server:~# docker pull centos:77: Pulling from library/centos2d473b07cdd5: Pull completeDigest: sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4Status: Downloaded newer image for centos:7docker.io/library/centos:7root@ubuntu-server:~# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmysql latest 56b21e040954 5 days ago 632MBnginx latest a8758716bb6a 3 months ago 187MBhello-world latest d2c94e258dcb 8 months ago 13.3kBnginx 1.24.0 f373f7a623e7 9 months ago 142MBcentos 7 eeb6ee3f44bd 2 years ago 204MBcentos latest 5d0da3dc9764 2 years ago 231MB 删除镜像 docker image rm [镜像名称image_name]&lt;:[版本号Tag]&gt; 不指定版本号默认删除最新版本 docker rmi [镜像名称image_name]&lt;:[版本号Tag]&gt; 12345678910111213141516root@ubuntu-server:~# docker image rm centosUntagged: centos:latestUntagged: centos@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177Deleted: sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6Deleted: sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59root@ubuntu-server:~# docker image rm centos:7Untagged: centos:7Untagged: centos@sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4Deleted: sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809ab675bb17ab3a16c517c9Deleted: sha256:174f5685490326fc0a1c0f5570b8663732189b327007e47ff13d2ca59673db02root@ubuntu-server:~# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmysql latest 56b21e040954 5 days ago 632MBnginx latest a8758716bb6a 3 months ago 187MBhello-world latest d2c94e258dcb 8 months ago 13.3kBnginx 1.24.0 f373f7a623e7 9 months ago 142MB 编写 Dockerfile新建一个 Flask 项目并且创建 Dockerfile、app.py、requirements.txt 123456789101112FROM ubuntu:latestLABEL authors=&quot;zachary&quot;RUN apt updateRUN apt-get install -y python3 python3-pipCOPY requirements.txt .RUN pip3 install -r requirements.txtCOPY app.py /opt/app.pyENTRYPOINT FLASK_APP=/opt/app.py flask run --host=0.0.0.0 1flask 1234567891011121314151617from flask import Flaskapp = Flask(__name__)@app.route(&#x27;/&#x27;)def hello_world(): # put application&#x27;s code here return &#x27;Hello World!&#x27;@app.route(&#x27;/index&#x27;)def index(): return &#x27;Index Page!&#x27;if __name__ == &#x27;__main__&#x27;: app.run() 将上述代码打包放到 GitHub：https://github.com/BlockZachary/flaskDockerSample 然后在服务器主机上面操作，先将代码克隆到主机上 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647root@ubuntu-server:~/pythonProject# git clone https://github.com/BlockZachary/flaskDockerSample.git19:10:50.593675 git.c:439 trace: built-in: git clone https://github.com/BlockZachary/flaskDockerSample.gitCloning into &#x27;flaskDockerSample&#x27;...19:10:50.598505 run-command.c:663 trace: run_command: git-remote-https origin https://github.com/BlockZachary/flaskDockerSample.git* Couldn&#x27;t find host github.com in the .netrc file; using defaults* Trying 140.82.113.4:443...* TCP_NODELAY set* Connected to github.com (140.82.113.4) port 443 (#0)* found 411 certificates in /etc/ssl/certs* ALPN, offering h2* ALPN, offering http/1.1* SSL connection using TLS1.3 / ECDHE_RSA_AES_128_GCM_SHA256* server certificate verification OK* server certificate status verification SKIPPED* common name: github.com (matched)* server certificate expiration date OK* server certificate activation date OK* certificate public key: EC/ECDSA* certificate version: #3* subject: C=US,ST=California,L=San Francisco,O=GitHub\\, Inc.,CN=github.com* start date: Tue, 14 Feb 2023 00:00:00 GMT* expire date: Thu, 14 Mar 2024 23:59:59 GMT* issuer: C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA384 2020 CA1* ALPN, server accepted to use h2* Using HTTP2, server supports multi-use* Connection state changed (HTTP/2 confirmed)* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0* Using Stream ID: 1 (easy handle 0x55691a2a4f80)&gt; GET /BlockZachary/flaskDockerSample.git/info/refs?service=git-upload-pack HTTP/2...root@ubuntu-server:~/pythonProject# lltotal 12drwxr-xr-x 3 root root 4096 Jan 24 19:10 ./drwx------ 8 root root 4096 Jan 24 19:04 ../drwxr-xr-x 3 root root 4096 Jan 24 19:10 flaskDockerSample/root@ubuntu-server:~/pythonProject# cd flaskDockerSampleroot@ubuntu-server:~/pythonProject/flaskDockerSample# lltotal 24drwxr-xr-x 3 root root 4096 Jan 24 19:10 ./drwxr-xr-x 3 root root 4096 Jan 24 19:10 ../-rw-r--r-- 1 root root 245 Jan 24 19:10 app.py-rw-r--r-- 1 root root 253 Jan 24 19:10 Dockerfiledrwxr-xr-x 8 root root 4096 Jan 24 19:10 .git/-rw-r--r-- 1 root root 5 Jan 24 19:10 requirements.txt 构建自己的 Image docker build . -t [镜像名称]&lt;:[版本号]&gt; 不填写版本号默认是一个 latest .指的是当前目录 12345678910111213141516171819202122232425262728root@ubuntu-server:~/pythonProject/flaskDockerSample# docker build . -t myflasksample[+] Building 178.7s (11/11) FINISHED docker:default =&gt; [internal] load build definition from Dockerfile 0.0s =&gt; =&gt; transferring dockerfile: 258B 0.0s =&gt; [internal] load .dockerignore 0.0s =&gt; =&gt; transferring context: 2B 0.0s =&gt; [internal] load metadata for docker.io/library/ubuntu:latest 33.7s =&gt; CACHED [1/6] FROM docker.io/library/ubuntu@sha256:e6173d4dc55e76b87c4af8db8821b1feae4146dd47341e4d431118c7dd 0.0s =&gt; [internal] load build context 0.0s =&gt; =&gt; transferring context: 63B 0.0s =&gt; [2/6] RUN apt update 10.6s =&gt; [3/6] RUN apt-get install -y python3.6 python3-pip 45.0s =&gt; [4/6] COPY requirements.txt . 0.0s =&gt; [5/6] RUN pip3 install -r requirements.txt 86.7s =&gt; [6/6] COPY app.py /opt/app.py 0.0s =&gt; exporting to image 2.4s =&gt; =&gt; exporting layers 2.4s =&gt; =&gt; writing image sha256:e4e6142e4b4159d2becbc57a7d298796fb7613727dafca902dec9f6f641cb39f 0.0s =&gt; =&gt; naming to docker.io/library/myflasksample 0.0sroot@ubuntu-server:~/pythonProject/flaskDockerSample# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmyflasksample latest e4e6142e4b41 About a minute ago 484MBmysql latest 56b21e040954 6 days ago 632MBnginx latest a8758716bb6a 3 months ago 187MBhello-world latest d2c94e258dcb 8 months ago 13.3kBnginx 1.24.0 f373f7a623e7 9 months ago 142MBroot@ubuntu-server:~/pythonProject/flaskDockerSample# 启用自定义 Image 的容器因为这块用的例子是一个 flask 项目，端口号用的默认是 5000 12345678root@ubuntu-server:~/pythonProject/flaskDockerSample# docker run -p 8080:5000 myflasksample * Serving Flask app &#x27;/opt/app.py&#x27; * Debug mode: offWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Running on all addresses (0.0.0.0) * Running on http://127.0.0.1:5000 * Running on http://172.17.0.2:5000Press CTRL+C to quit 1234567891011root@ubuntu-server:~# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2f5c78d92ee9 myflasksample &quot;/bin/sh -c &#x27;FLASK_A…&quot; 43 seconds ago Up 41 seconds 0.0.0.0:8080-&gt;5000/tcp, :::8080-&gt;5000/tcp busy_coriroot@ubuntu-server:~# docker inspect 2f5c78d92ee9 | grep &quot;IPAddress&quot; &quot;SecondaryIPAddresses&quot;: null, &quot;IPAddress&quot;: &quot;172.17.0.2&quot;, &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,root@ubuntu-server:~# curl http://172.17.0.2:5000Hello World!root@ubuntcurl http://172.17.0.2:5000/indexIndex Page!root@ubuntu-server:~# 使用浏览器也可以正常访问 创建 docker 官方账号、登录首先在https://hub.docker.com/，注册账号 然后可以在主机中使用 docker login、docker logout进行登录、登出 123456789101112root@ubuntu-server:~# docker loginLog in with your Docker ID or email address to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com/ to create one.You can log in with your password or a Personal Access Token (PAT). Using a limited-scope PAT grants better security and is required for organizations using SSO. Learn more at https://docs.docker.com/go/access-tokens/Username: zacharyblockPassword:WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeededroot@ubuntu-server:~# 然后再去官网创建一个仓库 可以看到右侧有一段这样的命令：docker push zacharyblock/myflasksample:tagname, 为了实现推送的，必须有一个名称为 zacharyblock/myflasksample的镜像，但是前一步操作，我们只构建了一个名称为myflasksample的镜像，因此我们还需要重新构建一次 使用docker build . -t zacharyblock/myflasksample构建一下 image 123456789101112131415161718192021222324252627282930root@ubuntu-server:~/pythonProject/flaskDockerSample# docker build . -t zacharyblock/myflasksample[+] Building 34.8s (12/12) FINISHED docker:default =&gt; [internal] load build definition from Dockerfile 0.0s =&gt; =&gt; transferring dockerfile: 258B 0.0s =&gt; [internal] load .dockerignore 0.0s =&gt; =&gt; transferring context: 2B 0.0s =&gt; [internal] load metadata for docker.io/library/ubuntu:latest 34.7s =&gt; [auth] library/ubuntu:pull token for registry-1.docker.io 0.0s =&gt; [1/6] FROM docker.io/library/ubuntu@sha256:e6173d4dc55e76b87c4af8db8821b1feae4146dd47341e4d431118c7dd060a74 0.0s =&gt; [internal] load build context 0.0s =&gt; =&gt; transferring context: 63B 0.0s =&gt; CACHED [2/6] RUN apt update 0.0s =&gt; CACHED [3/6] RUN apt-get install -y python3.6 python3-pip 0.0s =&gt; CACHED [4/6] COPY requirements.txt . 0.0s =&gt; CACHED [5/6] RUN pip3 install -r requirements.txt 0.0s =&gt; CACHED [6/6] COPY app.py /opt/app.py 0.0s =&gt; exporting to image 0.0s =&gt; =&gt; exporting layers 0.0s =&gt; =&gt; writing image sha256:e4e6142e4b4159d2becbc57a7d298796fb7613727dafca902dec9f6f641cb39f 0.0s =&gt; =&gt; naming to docker.io/zacharyblock/myflasksample 0.0sroot@ubuntu-server:~/pythonProject/flaskDockerSample# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmyflasksample latest e4e6142e4b41 30 minutes ago 484MBzacharyblock/myflasksample latest e4e6142e4b41 30 minutes ago 484MBmysql latest 56b21e040954 6 days ago 632MBnginx latest a8758716bb6a 3 months ago 187MBhello-world latest d2c94e258dcb 8 months ago 13.3kBnginx 1.24.0 f373f7a623e7 9 months ago 142MBroot@ubuntu-server:~/pythonProject/flaskDockerSample# 推送镜像到远程仓库 docker push [镜像名称]&lt;:[版本号]&gt; 123456789root@ubuntu-server:~/pythonProject/flaskDockerSample# docker push zacharyblock/myflasksampleUsing default tag: latestThe push refers to repository [docker.io/zacharyblock/myflasksample]fe70b6de3f96: Pushing [==================================================&gt;] 2.56kBe30e40d2f01d: Pushing [==================================================&gt;] 4.893MB79c28b0cc016: Pushedf9d63cb94619: Pushing [========&gt; ] 61.53MB/354.7MBf0fad7c9b1fd: Pushing [====================&gt; ] 19.65MB/47.07MB8e87ff28f1b5: Waiting 推送好了之后，官网可以看到 尝试一下拉取，先删除掉已经有的这个 image，然后再拉取 1234567891011121314151617181920212223242526272829303132root@ubuntu-server:~# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmyflasksample latest e4e6142e4b41 39 minutes ago 484MBzacharyblock/myflasksample latest e4e6142e4b41 39 minutes ago 484MBmysql latest 56b21e040954 6 days ago 632MBnginx latest a8758716bb6a 3 months ago 187MBhello-world latest d2c94e258dcb 8 months ago 13.3kBnginx 1.24.0 f373f7a623e7 9 months ago 142MBroot@ubuntu-server:~# docker rmi zacharyblock/myflasksampleUntagged: zacharyblock/myflasksample:latestUntagged: zacharyblock/myflasksample@sha256:ea37221e82fe285cd50ff202ae9c08d445a779e40cc3a9f8fbe897144ca2d304root@ubuntu-server:~# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmyflasksample latest e4e6142e4b41 39 minutes ago 484MBmysql latest 56b21e040954 6 days ago 632MBnginx latest a8758716bb6a 3 months ago 187MBhello-world latest d2c94e258dcb 8 months ago 13.3kBnginx 1.24.0 f373f7a623e7 9 months ago 142MBroot@ubuntu-server:~# docker pull zacharyblock/myflasksampleUsing default tag: latestlatest: Pulling from zacharyblock/myflasksampleDigest: sha256:ea37221e82fe285cd50ff202ae9c08d445a779e40cc3a9f8fbe897144ca2d304Status: Downloaded newer image for zacharyblock/myflasksample:latestdocker.io/zacharyblock/myflasksample:latestroot@ubuntu-server:~# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmyflasksample latest e4e6142e4b41 41 minutes ago 484MBzacharyblock/myflasksample latest e4e6142e4b41 41 minutes ago 484MBmysql latest 56b21e040954 6 days ago 632MBnginx latest a8758716bb6a 3 months ago 187MBhello-world latest d2c94e258dcb 8 months ago 13.3kBnginx 1.24.0 f373f7a623e7 9 months ago 142MB Dockerfile 的 CMD 与 ENTRYPOINTCMD为了可以使用命令或者参数在启动容器的时候启动一些我们需要的默认程序，可以使用 CMD Dockerfile 中的 CMD 指令格式 CMD [shell命令] 通过 sh 的形式 CMD [&quot;命令&quot;,&quot;参数1&quot;,&quot;参数2&quot;,...] 如果 Dockerfile 中存在多条 CMD 最后一条生效 可以通过在启动容器时，添加参数对 CMD 命令进行替换 docker run -it [镜像] [命令] [参数1] [参数2] 这块来一个例子 仍旧是在 ubuntu 主机上面先创建一个项目目录，然后准备 Dockerfile 和 app.py 123456789101112131415161718192021root@ubuntu-server:~/pythonProject# mkdir cmdDockerSampleroot@ubuntu-server:~/pythonProject# cd cmdDockerSample/root@ubuntu-server:~/pythonProject/cmdDockerSample# pwd/root/pythonProject/cmdDockerSampleroot@ubuntu-server:~/pythonProject/cmdDockerSample# nano Dockerfileroot@ubuntu-server:~/pythonProject/cmdDockerSample# cat DockerfileFROM ubuntuRUN apt updateRUN apt-get install -y python3COPY app.py /opt/app.pyWORKDIR /opt/CMD [&quot;python3&quot;, &quot;app.py&quot;, &quot;para1&quot;, &quot;para2&quot;]root@ubuntu-server:~/pythonProject/cmdDockerSample# nano app.pyroot@ubuntu-server:~/pythonProject/cmdDockerSample# cat app.pyimport sysprint(sys.argv) 然后对该项目进行镜像构建，构建一个容器后会打印出参数，也可以通过命令参数进行 CMD 替换 123456789101112131415161718192021222324root@ubuntu-server:~/pythonProject/cmdDockerSample# docker build . -t cmddockersample[+] Building 209.6s (10/10) FINISHED docker:default =&gt; [internal] load .dockerignore 0.0s =&gt; =&gt; transferring context: 2B 0.0s =&gt; [internal] load build definition from Dockerfile 0.0s =&gt; =&gt; transferring dockerfile: 183B 0.0s =&gt; [internal] load metadata for docker.io/library/ubuntu:latest 0.0s =&gt; CACHED [1/5] FROM docker.io/library/ubuntu 0.0s =&gt; [internal] load build context 0.0s =&gt; =&gt; transferring context: 27B 0.0s =&gt; [2/5] RUN apt update 198.6s =&gt; [3/5] RUN apt-get install -y python3 10.6s =&gt; [4/5] COPY app.py /opt/app.py 0.1s =&gt; [5/5] WORKDIR /opt/ 0.0s =&gt; exporting to image 0.3s =&gt; =&gt; exporting layers 0.3s =&gt; =&gt; writing image sha256:153eeb8273c48d59c08f467e270a5f7518e02135fa32a758439409e0055b4f52 0.0s =&gt; =&gt; naming to docker.io/library/cmddockersample 0.0sroot@ubuntu-server:~/pythonProject/cmdDockerSample# docker run -it cmddockersample[&#x27;app.py&#x27;, &#x27;para1&#x27;, &#x27;para2&#x27;]root@ubuntu-server:~/pythonProject/cmdDockerSample# docker run -it cmddockersample sleep 5root@ubuntu-server:~/pythonProject/cmdDockerSample# ENTRYPOINT用于指定启动容器时候默认运行的程序 Dockerfile 中的 ENTRYPOINT 指令格式 ENTRYPOINT [shell命令] 通过 sh 的形式 ENTRYPOINT [&quot;命令&quot;,&quot;参数1&quot;,&quot;参数2&quot;,...] 如果 Dockerfile 中只能定义一个 ENTRYPOINT 在启动容器时，不可以对 ENTRYPOINT 命令进行替换 可以用 CMD 给 ENTRYPOINT 指定参数 来一个实例看看 先创建一个 entrypointDockerSample 目录，然后还是创建 Dockerfile 和 app.py 12345678910111213141516171819202122232425262728293031323334353637383940414243root@ubuntu-server:~/pythonProject# mkdir entrypointDockerSampleroot@ubuntu-server:~/pythonProject# cd entrypointDockerSample/root@ubuntu-server:~/pythonProject/entrypointDockerSample# nano Dockerfileroot@ubuntu-server:~/pythonProject/entrypointDockerSample# cat DockerfileFROM ubuntuRUN apt updateRUN apt-get install -y python3COPY app.py /opt/app.pyWORKDIR /opt/ENTRYPOINT [&quot;python3&quot;, &quot;app.py&quot;, &quot;para1&quot;, &quot;para2&quot;]root@ubuntu-server:~/pythonProject/entrypointDockerSample# nano app.pyroot@ubuntu-server:~/pythonProject/entrypointDockerSample# cat app.pyimport sysprint(sys.argv)root@ubuntu-server:~/pythonProject/entrypointDockerSample# docker build . -t entrypointdockersample[+] Building 0.1s (10/10) FINISHED docker:default =&gt; [internal] load build definition from Dockerfile 0.0s =&gt; =&gt; transferring dockerfile: 190B 0.0s =&gt; [internal] load .dockerignore 0.0s =&gt; =&gt; transferring context: 2B 0.0s =&gt; [internal] load metadata for docker.io/library/ubuntu:latest 0.0s =&gt; [1/5] FROM docker.io/library/ubuntu 0.0s =&gt; [internal] load build context 0.0s =&gt; =&gt; transferring context: 61B 0.0s =&gt; CACHED [2/5] RUN apt update 0.0s =&gt; CACHED [3/5] RUN apt-get install -y python3 0.0s =&gt; CACHED [4/5] COPY app.py /opt/app.py 0.0s =&gt; CACHED [5/5] WORKDIR /opt/ 0.0s =&gt; exporting to image 0.0s =&gt; =&gt; exporting layers 0.0s =&gt; =&gt; writing image sha256:d3e54cbe8477ec5f625fb675a14e5aa2ea3dc9b8be3b2b5efbd3d2a344c5be64 0.0s =&gt; =&gt; naming to docker.io/library/entrypointdockersample 0.0sroot@ubuntu-server:~/pythonProject/entrypointDockerSample# docker run -it entrypointdockersample[&#x27;app.py&#x27;, &#x27;para1&#x27;, &#x27;para2&#x27;]root@ubuntu-server:~/pythonProject/entrypointDockerSample# docker run -it entrypointdockersample sleep 5[&#x27;app.py&#x27;, &#x27;para1&#x27;, &#x27;para2&#x27;, &#x27;sleep&#x27;, &#x27;5&#x27;]root@ubuntu-server:~/pythonProject/entrypointDockerSample# 通过上面的例子可以看出来，当使用了 entrypoint 的时候 在创建容器的时候命令行增加的参数并没有替换掉原先的参数 而是给原先的参数增加上了 CMD 结合 ENTRYPOINT通过上面两个例子，如果将 CMD 和 ENTRYPOINT 结合起来使用 可以实现对既定的命令保持不变 对某些参数进行替换的操作 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849root@ubuntu-server:~/pythonProject# mkdir cmdEntrypointDockerSampleroot@ubuntu-server:~/pythonProject# cd cmdEntrypointDockerSample/root@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# nano Dockerfileroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# cat DockerfileFROM ubuntuRUN apt updateRUN apt-get install -y python3COPY app.py /opt/app.pyWORKDIR /opt/ENTRYPOINT [&quot;python3&quot;, &quot;app.py&quot;]CMD [&quot;para1&quot;,&quot;para2&quot;]root@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# nano app.pyroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# cat app.pyimport sysprint(sys.argv)root@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# docker build . -t cmdEntrypointDockerSample[+] Building 0.0s (0/0) docker:defaultERROR: invalid tag &quot;cmdEntrypointDockerSample&quot;: repository name must be lowercaseroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample#root@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# docker build . -t cmdentrypointdockersample[+] Building 0.1s (10/10) FINISHED docker:default =&gt; [internal] load build definition from Dockerfile 0.0s =&gt; =&gt; transferring dockerfile: 195B 0.0s =&gt; [internal] load .dockerignore 0.0s =&gt; =&gt; transferring context: 2B 0.0s =&gt; [internal] load metadata for docker.io/library/ubuntu:latest 0.0s =&gt; [1/5] FROM docker.io/library/ubuntu 0.0s =&gt; [internal] load build context 0.0s =&gt; =&gt; transferring context: 61B 0.0s =&gt; CACHED [2/5] RUN apt update 0.0s =&gt; CACHED [3/5] RUN apt-get install -y python3 0.0s =&gt; CACHED [4/5] COPY app.py /opt/app.py 0.0s =&gt; CACHED [5/5] WORKDIR /opt/ 0.0s =&gt; exporting to image 0.0s =&gt; =&gt; exporting layers 0.0s =&gt; =&gt; writing image sha256:01ab92cd6837ea8381cf83e66a2214eb9de94a133b460584fe9a5bf4dc03433e 0.0s =&gt; =&gt; naming to docker.io/library/cmdentrypointdockersample 0.0sroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# docker run -it cmdentrypointdockersample[&#x27;app.py&#x27;, &#x27;para1&#x27;, &#x27;para2&#x27;]root@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# docker run -it cmdentrypointdockersample hello para3[&#x27;app.py&#x27;, &#x27;hello&#x27;, &#x27;para3&#x27;]root@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# 多容器互联建立多容器互联网络 docker network ls查看当前所有网络 docker network create [网络名称] 创建一个新的网络 docker network rm [网络名称] 移除一个网络 12345678910111213root@ubuntu-server:~# docker network lsNETWORK ID NAME DRIVER SCOPE0b6264c729e5 bridge bridge local3bef0fd15183 host host local270d5cbcbd9e none null localroot@ubuntu-server:~# docker network create nw_test0a683526a3b9476ccba81290f2efd32f12bd04514c428ae6f838482533d663a5root@ubuntu-server:~# docker network lsNETWORK ID NAME DRIVER SCOPE0b6264c729e5 bridge bridge local3bef0fd15183 host host local270d5cbcbd9e none null local0a683526a3b9 nw_test bridge local 启动容器并加入互联网络 docker run --network [要加入的网络名称] --network-alias [容器在网络中的别名] [镜像名称] 自己制作一个镜像 123456FROM ubuntuRUN apt updateRUN apt-get install -y iputils-pingCMD bash 12345678910111213141516root@ubuntu-server:~/dockerDIYImage/ubuntu_Ping# nano Dockerfileroot@ubuntu-server:~/dockerDIYImage/ubuntu_Ping# docker build . -t myos[+] Building 6.2s (7/7) FINISHED docker:default =&gt; [internal] load .dockerignore 0.0s =&gt; =&gt; transferring context: 2B 0.0s =&gt; [internal] load build definition from Dockerfile 0.0s =&gt; =&gt; transferring dockerfile: 112B 0.0s =&gt; [internal] load metadata for docker.io/library/ubuntu:latest 0.0s =&gt; [1/3] FROM docker.io/library/ubuntu 0.0s =&gt; CACHED [2/3] RUN apt update 0.0s =&gt; [3/3] RUN apt-get install -y iputils-ping 6.1s =&gt; exporting to image 0.1s =&gt; =&gt; exporting layers 0.1s =&gt; =&gt; writing image sha256:eb06c6d74ffa1b4e55d02fd29677d262a031fb92985bc38a0e1eba69e784cb61 0.0s =&gt; =&gt; naming to docker.io/library/myos 0.0sroot@ubuntu-server:~/dockerDIYImage/ubuntu_Ping# 首先在一个控制台创建一个容器并起别名 12root@ubuntu-server:~# docker run -it --rm --network nw_test --network-alias c1 myosroot@e1c90c8fc513:/# 然后在另一个控制台创建另一个容器 12root@ubuntu-server:~# docker run -it --rm --network nw_test --network-alias c2 myosroot@68be5a3af8a3:/# 然后分别在两个控制台中 ping 对方容器的别名 12345678910111213root@ubuntu-server:~# docker run -it --rm --network nw_test --network-alias c1 myosroot@e1c90c8fc513:/# ping c2PING c2 (172.18.0.3) 56(84) bytes of data.64 bytes from c2.nw_test (172.18.0.3): icmp_seq=1 ttl=64 time=0.301 ms64 bytes from c2.nw_test (172.18.0.3): icmp_seq=2 ttl=64 time=0.101 ms64 bytes from c2.nw_test (172.18.0.3): icmp_seq=3 ttl=64 time=0.078 ms64 bytes from c2.nw_test (172.18.0.3): icmp_seq=4 ttl=64 time=0.098 ms64 bytes from c2.nw_test (172.18.0.3): icmp_seq=5 ttl=64 time=0.104 ms^C--- c2 ping statistics ---5 packets transmitted, 5 received, 0% packet loss, time 4007msrtt min/avg/max/mdev = 0.078/0.136/0.301/0.082 msroot@e1c90c8fc513:/# 12345678910111213root@ubuntu-server:~# docker run -it --rm --network nw_test --network-alias c2 myosroot@68be5a3af8a3:/# ping c1PING c1 (172.18.0.2) 56(84) bytes of data.64 bytes from c1.nw_test (172.18.0.2): icmp_seq=1 ttl=64 time=0.120 ms64 bytes from c1.nw_test (172.18.0.2): icmp_seq=2 ttl=64 time=0.102 ms64 bytes from c1.nw_test (172.18.0.2): icmp_seq=3 ttl=64 time=0.101 ms64 bytes from c1.nw_test (172.18.0.2): icmp_seq=4 ttl=64 time=0.101 ms64 bytes from c1.nw_test (172.18.0.2): icmp_seq=5 ttl=64 time=0.100 ms^C--- c1 ping statistics ---5 packets transmitted, 5 received, 0% packet loss, time 4070msrtt min/avg/max/mdev = 0.100/0.104/0.120/0.007 msroot@68be5a3af8a3:/# 创建一个 MySQL 容器并加入互联网络123456root@ubuntu-server:~# docker run -d --rm --network nw_test --network-alias mysql_server -v /opt/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=wordpressdb mysqle86fbcde931a1f8bf559980e6c015ff966426d185aeaab29e9b080042ed3ed5froot@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESe86fbcde931a mysql &quot;docker-entrypoint.s…&quot; 1 second ago Up 1 second 3306/tcp, 33060/tcp inspiring_roentgenroot@ubuntu-server:~# 创建一个 Wordpress 容器并加入互联网络12345678root@ubuntu-server:~# docker run -d --rm -p 82:80 --network nw_test --network-alias wordpress_server -e WORDPRESS_DB_HOST=mysql_server -e WORDPRESS_DB_NAME=wordpressdb -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=123456 wordpresse742952bbaa9b3862850eb1afd97e0d4e5700c433025e5034f0ca466581011f2root@ubuntu-server:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESe742952bbaa9 wordpress &quot;docker-entrypoint.s…&quot; About a minute ago Up About a minute 0.0.0.0:82-&gt;80/tcp, :::82-&gt;80/tcp kind_neumanne86fbcde931a mysql &quot;docker-entrypoint.s…&quot; 43 minutes ago Up 43 minutes 3306/tcp, 33060/tcp inspiring_roentgenroot@ubuntu-server:~# 在浏览器输入主机 ip:82，可以进入 wordpress 页面 有这个问题 去解决一下，需要连接一下对应的 mysql 数据库创建一下这个库 12345678910111213141516171819202122232425262728293031323334353637383940root@ubuntu-server:~# docker inspect 6b07fc530884 | grep &quot;IPAddress&quot; &quot;SecondaryIPAddresses&quot;: null, &quot;IPAddress&quot;: &quot;&quot;, &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,root@ubuntu-server:~# mysql -h 172.18.0.2 -u root -p 123456Enter password:ERROR 1049 (42000): Unknown database &#x27;123456&#x27;root@ubuntu-server:~# mysql -h 172.18.0.2 -u root -p123456mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 81Server version: 8.3.0 MySQL Community Server - GPLCopyright (c) 2000, 2023, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| db_in_opt || information_schema || mysql || performance_schema || sys |+--------------------+5 rows in set (0.03 sec)mysql&gt; create database wordpressdb;Query OK, 1 row affected (0.02 sec)mysql&gt; exit;Byeroot@ubuntu-server:~# 现在就可以啦，初步配置一下 用刚才的用户名和密码进行登录，就进入到后台 比如我们修改一下外观 这个时候用自己的服务器主机的 ip+82，可以访问到主页 可以对文章进行编辑 然后可以查看到效果 Compose用于定义和运行多容器的工具，简化上一节中讲到的多容器互联复杂的命令输入环节 通过 YAML 文件的格式定义多容器关系 安装 docker compose Mac 和 Windows 下的 docker 默认已经安装了 docker compose Linux 下的 ubuntu 安装 docker compose apt-get install docker-compose 12root@ubuntu-server:~# docker-compose --versiondocker-compose version 1.25.0, build unknown 定义 Docker Compose 多容器创建一个 docker-compose.yaml 文件 123456789101112131415161718192021version: &quot;3.8&quot;services: wordpress_server: image: wordpress ports: - &quot;82:80&quot; links: - mysql_server environment: WORDPRESS_DB_HOST: mysql_server WORDPRESS_DB_NAME: wordpressdb WORDPRESS_DB_USER: root WORDPRESS_DB_PASSWORD: 123456 mysql_server: image: mysql volumes: - /opt/mysql:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: 123456 MYSQL_DATABASE: wordpressdb 123456789101112131415161718192021222324252627282930root@ubuntu-server:~# lsdocker.cnf dockerDIYImage pythonProject snaproot@ubuntu-server:~# mkdir dockerProjectroot@ubuntu-server:~# cd dockerProject/root@ubuntu-server:~/dockerProject# mkdir myWebSiteroot@ubuntu-server:~/dockerProject# cd myWebSite/root@ubuntu-server:~/dockerProject/myWebSite# nano docker-compose.yamlroot@ubuntu-server:~/dockerProject/myWebSite# cat docker-compose.yamlversion: &#x27;3.8&#x27;services: wordpress_server: image: wordpress ports: - &quot;82:80&quot; links: - mysql_server environment: WORDPRESS_DB_HOST: mysql_server WORDPRESS_DB_NAME: wordpressdb WORDPRESS_DB_USER: root WORDPRESS_DB_PASSWORD: 123456 mysql_server: image: mysql volumes: - /opt/mysql:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: 123456 MYSQL_DATABASE: wordpressdb 启动与停止 Docker Compose docker compose up 启动 docker compose down 停止 12345678910111213141516171819202122232425root@ubuntu-server:~/dockerProject/myWebSite# docker compose up[+] Running 2/0 ✔ Container mywebsite-mysql_server-1 Created 0.0s ✔ Container mywebsite-wordpress_server-1 Created 0.0sAttaching to mywebsite-mysql_server-1, mywebsite-wordpress_server-1mywebsite-mysql_server-1 | 2024-01-27 13:00:05+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.mywebsite-mysql_server-1 | 2024-01-27 13:00:05+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;mywebsite-mysql_server-1 | 2024-01-27 13:00:05+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.mywebsite-wordpress_server-1 | WordPress not found in /var/www/html - copying now...mywebsite-mysql_server-1 | &#x27;/var/lib/mysql/mysql.sock&#x27; -&gt; &#x27;/var/run/mysqld/mysqld.sock&#x27;mywebsite-mysql_server-1 | 2024-01-27T13:00:06.091635Z 0 [System] [MY-015015] [Server] MySQL Server - start.mywebsite-mysql_server-1 | 2024-01-27T13:00:06.480419Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 1mywebsite-mysql_server-1 | 2024-01-27T13:00:06.491181Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.mywebsite-mysql_server-1 | 2024-01-27T13:00:07.542230Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.mywebsite-mysql_server-1 | 2024-01-27T13:00:08.337107Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.mywebsite-mysql_server-1 | 2024-01-27T13:00:08.338334Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.mywebsite-mysql_server-1 | 2024-01-27T13:00:08.342758Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location &#x27;/var/run/mysqld&#x27; in the path is accessible to all OS users. Consider choosing a different directory.mywebsite-mysql_server-1 | 2024-01-27T13:00:08.455139Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060, socket: /var/run/mysqld/mysqlx.sockmywebsite-mysql_server-1 | 2024-01-27T13:00:08.457193Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: &#x27;8.3.0&#x27; socket: &#x27;/var/run/mysqld/mysqld.sock&#x27; port: 3306 MySQL Community Server - GPL.mywebsite-wordpress_server-1 | Complete! WordPress has been successfully copied to /var/www/htmlmywebsite-wordpress_server-1 | No &#x27;wp-config.php&#x27; found in /var/www/html, but &#x27;WORDPRESS_...&#x27; variables supplied; copying &#x27;wp-config-docker.php&#x27; (WORDPRESS_DB_HOST WORDPRESS_DB_NAME WORDPRESS_DB_PASSWORD WORDPRESS_DB_USER)mywebsite-wordpress_server-1 | AH00558: apache2: Could not reliably determine the server&#x27;s fully qualified domain name, using 172.19.0.3. Set the &#x27;ServerName&#x27; directive globally to suppress this messagemywebsite-wordpress_server-1 | AH00558: apache2: Could not reliably determine the server&#x27;s fully qualified domain name, using 172.19.0.3. Set the &#x27;ServerName&#x27; directive globally to suppress this messagemywebsite-wordpress_server-1 | [Sat Jan 27 13:00:10.346157 2024] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.57 (Debian) PHP/8.2.15 configured -- resuming normal operationsmywebsite-wordpress_server-1 | [Sat Jan 27 13:00:10.347867 2024] [core:notice] [pid 1] AH00094: Command line: &#x27;apache2 -D FOREGROUND&#x27; 启动之后可以直接使用浏览器访问服务器 ip+82，可以直接访问到上一节的服务，因为之前是映射了 mysql 数据到了服务器主机上面的，所以这次只要还是映射了，数据依然存在，当然如果删除掉了数据，就会重新创建 123456root@ubuntu-server:~/dockerProject/myWebSite# docker compose down[+] Running 3/3 ✔ Container mywebsite-wordpress_server-1 Removed 1.3s ✔ Container mywebsite-mysql_server-1 Removed 1.6s ✔ Network mywebsite_default Removed 0.1sroot@ubuntu-server:~/dockerProject/myWebSite# 构建自己的镜像启动多容器12345678910111213141516FROM ubuntuRUN apt updateRUN apt-get install -y python3 python3-pipRUN apt-get install -y pkg-configRUN apt-get install -y default-libmysqlclient-devCOPY requirements.txt .RUN pip3 install -r requirements.txtCOPY app.py /opt/app.pyWORKDIR /opt/ENTRYPOINT [&quot;python3&quot;,&quot;app.py&quot;] 1234567891011121314151617181920import sqlalchemyimport osDB_HOST = os.getenv(&quot;DB_HOST&quot;)DB_USER = os.getenv(&quot;DB_USER&quot;, &quot;root&quot;)DB_PASSWORD = os.getenv(&quot;DB_PASSWORD&quot;)DB_PORT = os.getenv(&quot;DB_PORT&quot;,&quot;3306&quot;)DB_DATABASE = os.getenv(&quot;DB_DATABASE&quot;,&quot;mydb&quot;)engine = sqlalchemy.create_engine(f&quot;mysql://&#123;DB_USER&#125;:&#123;DB_PASSWORD&#125;@&#123;DB_HOST&#125;/&#123;DB_DATABASE&#125;&quot;)with engine.connect() as conn: query = sqlalchemy.text(&quot;SELECT @@version&quot;) result_set = conn.execute(query) print(&quot;MySQL version:&quot;) for row in result_set: print(row)engine.dispose() 1234567891011121314151617181920212223242526272829version: &quot;3.8&quot;services: dbmanager_server: build: . image: dbmanager container_name: dbmanager_server links: - mysql_server environment: DB_HOST: mysql_server DB_NAME: mydb DB_USER: root DB_PASSWORD: 123456 depends_on: mysql_server: condition: service_healthy mysql_server: image: mysql container_name: mysql_server volumes: - /opt/mysql:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: 123456 MYSQL_DATABASE: mydb healthcheck: test: [&quot;CMD&quot;, &quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-h&quot;, &quot;localhost&quot;] timeout: 20s retries: 10 12mysqlclient==2.1.1SQLAlchemy==2.0.25 由于网络太慢了 修改一下 Dockerfile 123456789101112131415FROM ubuntuRUN apt updateRUN apt-get install -y python3 python3-pipRUN apt-get install -y pkg-configRUN apt-get install -y default-libmysqlclient-devRUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com mysqlclient==2.1.1RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com SQLAlchemy==2.0.25COPY app.py /opt/app.pyWORKDIR /opt/ENTRYPOINT [&quot;python3&quot;,&quot;app.py&quot;] 但是这时候还是出了问题，定位到最后是因为没有初始化 mydb 这个数据库 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126root@ubuntu-server:~/dockerProject/docker_dbmanager# docker compose up --build[+] Building 18.5s (14/14) FINISHED docker:default =&gt; [dbmanager_server internal] load build definition from Dockerfile 0.0s =&gt; =&gt; transferring dockerfile: 492B 0.0s =&gt; [dbmanager_server internal] load metadata for docker.io/library/ubuntu:latest 0.0s =&gt; [dbmanager_server internal] load .dockerignore 0.0s =&gt; =&gt; transferring context: 2B 0.0s =&gt; [dbmanager_server 1/9] FROM docker.io/library/ubuntu:latest 0.0s =&gt; [dbmanager_server internal] load build context 0.0s =&gt; =&gt; transferring context: 28B 0.0s =&gt; CACHED [dbmanager_server 2/9] RUN apt update 0.0s =&gt; CACHED [dbmanager_server 3/9] RUN apt-get install -y python3 python3-pip 0.0s =&gt; CACHED [dbmanager_server 4/9] RUN apt-get install -y pkg-config 0.0s =&gt; CACHED [dbmanager_server 5/9] RUN apt-get install -y default-libmysqlclient-dev 0.0s =&gt; [dbmanager_server 6/9] RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com mysqlc 4.7s =&gt; [dbmanager_server 7/9] RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com SQLAlc 7.0s =&gt; [dbmanager_server 8/9] COPY app.py /opt/app.py 0.1s =&gt; [dbmanager_server 9/9] WORKDIR /opt/ 0.0s =&gt; [dbmanager_server] exporting to image 6.6s =&gt; =&gt; exporting layers 6.6s =&gt; =&gt; writing image sha256:8cea6473ccddbca8135c6c55eab4151d8414a019820618b97c02d468d2487062 0.0s =&gt; =&gt; naming to docker.io/library/dbmanager 0.0s[+] Running 3/3 ✔ Network docker_dbmanager_default Created 0.1s ✔ Container mysql_server Created 0.1s ✔ Container dbmanager_server Created 0.1sAttaching to dbmanager_server, mysql_servermysql_server | 2024-01-27 14:17:26+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.mysql_server | 2024-01-27 14:17:26+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;mysql_server | 2024-01-27 14:17:26+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.mysql_server | &#x27;/var/lib/mysql/mysql.sock&#x27; -&gt; &#x27;/var/run/mysqld/mysqld.sock&#x27;mysql_server | 2024-01-27T14:17:27.000913Z 0 [System] [MY-015015] [Server] MySQL Server - start.mysql_server | 2024-01-27T14:17:29.465711Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 1mysql_server | 2024-01-27T14:17:29.600266Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.mysql_server | 2024-01-27T14:17:30.775812Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.mysql_server | 2024-01-27T14:17:32.112855Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.mysql_server | 2024-01-27T14:17:32.112944Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.mysql_server | 2024-01-27T14:17:32.117128Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location &#x27;/var/run/mysqld&#x27; in the path is accessible to all OS users. Consider choosing a different directory.mysql_server | 2024-01-27T14:17:32.180029Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060, socket: /var/run/mysqld/mysqlx.sockmysql_server | 2024-01-27T14:17:32.180109Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: &#x27;8.3.0&#x27; socket: &#x27;/var/run/mysqld/mysqld.sock&#x27; port: 3306 MySQL Community Server - GPL.dbmanager_server | Traceback (most recent call last):dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py&quot;, line 145, in __init__dbmanager_server | self._dbapi_connection = engine.raw_connection()dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py&quot;, line 3293, in raw_connectiondbmanager_server | return self.pool.connect()dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 452, in connectdbmanager_server | return _ConnectionFairy._checkout(self)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 1269, in _checkoutdbmanager_server | fairy = _ConnectionRecord.checkout(pool)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 716, in checkoutdbmanager_server | rec = pool._do_get()dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/impl.py&quot;, line 169, in _do_getdbmanager_server | with util.safe_reraise():dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/util/langhelpers.py&quot;, line 146, in __exit__dbmanager_server | raise exc_value.with_traceback(exc_tb)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/impl.py&quot;, line 167, in _do_getdbmanager_server | return self._create_connection()dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 393, in _create_connectiondbmanager_server | return _ConnectionRecord(self)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 678, in __init__dbmanager_server | self.__connect()dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 902, in __connectdbmanager_server | with util.safe_reraise():dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/util/langhelpers.py&quot;, line 146, in __exit__dbmanager_server | raise exc_value.with_traceback(exc_tb)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 898, in __connectdbmanager_server | self.dbapi_connection = connection = pool._invoke_creator(self)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/create.py&quot;, line 645, in connectdbmanager_server | return dialect.connect(*cargs, **cparams)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/default.py&quot;, line 616, in connectdbmanager_server | return self.loaded_dbapi.connect(*cargs, **cparams)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/MySQLdb/__init__.py&quot;, line 123, in Connectdbmanager_server | return Connection(*args, **kwargs)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/MySQLdb/connections.py&quot;, line 185, in __init__dbmanager_server | super().__init__(*args, **kwargs2)dbmanager_server | MySQLdb.OperationalError: (1049, &quot;Unknown database &#x27;mydb&#x27;&quot;)dbmanager_server |dbmanager_server | The above exception was the direct cause of the following exception:dbmanager_server |dbmanager_server | Traceback (most recent call last):dbmanager_server | File &quot;/opt/app.py&quot;, line 11, in &lt;module&gt;dbmanager_server | with engine.connect() as conn:dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py&quot;, line 3269, in connectdbmanager_server | return self._connection_cls(self)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py&quot;, line 147, in __init__dbmanager_server | Connection._handle_dbapi_exception_noconnection(dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py&quot;, line 2431, in _handle_dbapi_exception_noconnectiondbmanager_server | raise sqlalchemy_exception.with_traceback(exc_info[2]) from edbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py&quot;, line 145, in __init__dbmanager_server | self._dbapi_connection = engine.raw_connection()dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py&quot;, line 3293, in raw_connectiondbmanager_server | return self.pool.connect()dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 452, in connectdbmanager_server | return _ConnectionFairy._checkout(self)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 1269, in _checkoutdbmanager_server | fairy = _ConnectionRecord.checkout(pool)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 716, in checkoutdbmanager_server | rec = pool._do_get()dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/impl.py&quot;, line 169, in _do_getdbmanager_server | with util.safe_reraise():dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/util/langhelpers.py&quot;, line 146, in __exit__dbmanager_server | raise exc_value.with_traceback(exc_tb)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/impl.py&quot;, line 167, in _do_getdbmanager_server | return self._create_connection()dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 393, in _create_connectiondbmanager_server | return _ConnectionRecord(self)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 678, in __init__dbmanager_server | self.__connect()dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 902, in __connectdbmanager_server | with util.safe_reraise():dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/util/langhelpers.py&quot;, line 146, in __exit__dbmanager_server | raise exc_value.with_traceback(exc_tb)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py&quot;, line 898, in __connectdbmanager_server | self.dbapi_connection = connection = pool._invoke_creator(self)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/create.py&quot;, line 645, in connectdbmanager_server | return dialect.connect(*cargs, **cparams)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/default.py&quot;, line 616, in connectdbmanager_server | return self.loaded_dbapi.connect(*cargs, **cparams)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/MySQLdb/__init__.py&quot;, line 123, in Connectdbmanager_server | return Connection(*args, **kwargs)dbmanager_server | File &quot;/usr/local/lib/python3.10/dist-packages/MySQLdb/connections.py&quot;, line 185, in __init__dbmanager_server | super().__init__(*args, **kwargs2)dbmanager_server | sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1049, &quot;Unknown database &#x27;mydb&#x27;&quot;)dbmanager_server | (Background on this error at: https://sqlalche.me/e/20/e3q8)dbmanager_server exited with code 1 我们不关闭这个，重新开一个终端 123456789101112131415161718192021222324252627282930313233343536373839root@ubuntu-server:~/dockerProject/docker_dbmanager# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES0d96a20ca121 dbmanager &quot;python3 app.py&quot; 7 minutes ago Exited (1) 6 minutes ago dbmanager_serverda8ce1fc7a59 mysql &quot;docker-entrypoint.s…&quot; 7 minutes ago Up 7 minutes (healthy) 3306/tcp, 33060/tcp mysql_serverroot@ubuntu-server:~/dockerProject/docker_dbmanager# docker inspect da8ce1fc7a59 | grep &quot;IPAddress&quot; &quot;SecondaryIPAddresses&quot;: null, &quot;IPAddress&quot;: &quot;&quot;, &quot;IPAddress&quot;: &quot;172.20.0.2&quot;,root@ubuntu-server:~/dockerProject/docker_dbmanager# mysql -h 172.20.0.2 -u root -p123456mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 23Server version: 8.3.0 MySQL Community Server - GPLCopyright (c) 2000, 2023, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| db_in_opt || information_schema || mysql || performance_schema || sys || wordpressdb |+--------------------+6 rows in set (0.06 sec)mysql&gt; create database mydb;Query OK, 1 row affected (0.02 sec)mysql&gt; 然后重新执行一次拉起操作 12345678910111213141516171819202122232425262728293031323334353637383940414243root@ubuntu-server:~/dockerProject/docker_dbmanager# docker compose up --build[+] Building 0.1s (14/14) FINISHED docker:default =&gt; [dbmanager_server internal] load build definition from Dockerfile 0.0s =&gt; =&gt; transferring dockerfile: 492B 0.0s =&gt; [dbmanager_server internal] load metadata for docker.io/library/ubuntu:latest 0.0s =&gt; [dbmanager_server internal] load .dockerignore 0.0s =&gt; =&gt; transferring context: 2B 0.0s =&gt; [dbmanager_server 1/9] FROM docker.io/library/ubuntu:latest 0.0s =&gt; [dbmanager_server internal] load build context 0.0s =&gt; =&gt; transferring context: 28B 0.0s =&gt; CACHED [dbmanager_server 2/9] RUN apt update 0.0s =&gt; CACHED [dbmanager_server 3/9] RUN apt-get install -y python3 python3-pip 0.0s =&gt; CACHED [dbmanager_server 4/9] RUN apt-get install -y pkg-config 0.0s =&gt; CACHED [dbmanager_server 5/9] RUN apt-get install -y default-libmysqlclient-dev 0.0s =&gt; CACHED [dbmanager_server 6/9] RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com 0.0s =&gt; CACHED [dbmanager_server 7/9] RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com 0.0s =&gt; CACHED [dbmanager_server 8/9] COPY app.py /opt/app.py 0.0s =&gt; CACHED [dbmanager_server 9/9] WORKDIR /opt/ 0.0s =&gt; [dbmanager_server] exporting to image 0.0s =&gt; =&gt; exporting layers 0.0s =&gt; =&gt; writing image sha256:8cea6473ccddbca8135c6c55eab4151d8414a019820618b97c02d468d2487062 0.0s =&gt; =&gt; naming to docker.io/library/dbmanager 0.0s[+] Running 2/2 ✔ Container mysql_server Created 0.1s ✔ Container dbmanager_server Created 0.1sAttaching to dbmanager_server, mysql_servermysql_server | 2024-01-27 14:30:00+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.mysql_server | 2024-01-27 14:30:00+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;mysql_server | 2024-01-27 14:30:00+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.mysql_server | &#x27;/var/lib/mysql/mysql.sock&#x27; -&gt; &#x27;/var/run/mysqld/mysqld.sock&#x27;mysql_server | 2024-01-27T14:30:00.772229Z 0 [System] [MY-015015] [Server] MySQL Server - start.mysql_server | 2024-01-27T14:30:01.134172Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 1mysql_server | 2024-01-27T14:30:01.143974Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.mysql_server | 2024-01-27T14:30:01.392854Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.mysql_server | 2024-01-27T14:30:01.675451Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.mysql_server | 2024-01-27T14:30:01.676409Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.mysql_server | 2024-01-27T14:30:01.679979Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location &#x27;/var/run/mysqld&#x27; in the path is accessible to all OS users. Consider choosing a different directory.mysql_server | 2024-01-27T14:30:01.716925Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: &#x27;8.3.0&#x27; socket: &#x27;/var/run/mysqld/mysqld.sock&#x27; port: 3306 MySQL Community Server - GPL.mysql_server | 2024-01-27T14:30:01.716968Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060, socket: /var/run/mysqld/mysqlx.sockdbmanager_server | MySQL version:dbmanager_server | (&#x27;8.3.0&#x27;,)dbmanager_server exited with code 0 最后可以停掉这个多容器 12345678root@ubuntu-server:~/dockerProject/docker_dbmanager# docker compose down[+] Running 3/3 ✔ Container dbmanager_server Removed 0.0s ✔ Container mysql_server Removed 1.4s ✔ Network docker_dbmanager_default Removed 0.2sroot@ubuntu-server:~/dockerProject/docker_dbmanager# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESroot@ubuntu-server:~/dockerProject/docker_dbmanager# Docker Image 相关命令速查 docker search [镜像名称] 查找镜像信息 docker pull [镜像名称] 拉取镜像 docker image ls docker images 查看镜像列表 docker rmi [镜像名称/镜像ID] 删除镜像 docker save -o [输出文件名] [镜像名称/镜像ID] 将镜像保存为文件，便于传输镜像 docker save --output [输出文件名] [镜像名称/镜像ID] docker save [镜像名称/镜像ID] &gt; [输出文件名] docker load -i [镜像文件] 将文件加载为镜像 Image docker load --input [镜像文件] docker load &lt; [镜像文件] docker build . -t [构建的镜像名称] 自定义镜像 默认找当前目录下 Dockerfile docker build -f [Dockerfile文件名] -t [构建的镜像名称] [Dockerfile所在目录] Docker Container 相关命令速查 docker run --pull [missing/never/always] missing 每次运行时候如果没有镜像就拉去 如果有就不拉取 默认也就是 missing 模式 never 每次运行的时候都不去拉取镜像 always 每次运行的时候都去拉取一次镜像 -i 以交互的方式运行 -t 输出到控制台 -it 经常这样用 -rm 容器停止以后直接删除 -v [主机路径]:[容器内部路径] 做目录映射的，MySQL 常用避免容器删除后数据清空了 -p [主机端口]:[容器端口] 端口映射，通过主机的端口来访问容器端口的服务 -e(--env) [环境变量] 配置环境变量，如 MySQL 的登录名、端口、密码等 --env-file [环境变量定义文件] 配置环境变量定义文件 --network [加入的网络名称] --network-alias [容器在网络中的别名] 网络与别名 --name [容器名称] [镜像名称] [命令] 容器启动后的命令 docker ps 查看本地运行的容器 docker ps -a 查看本地所有的容器 docker stop [容器ID] 停止一个正在运行的容器 docker start [容器ID] 启动一个已经停止了的容器 docker restart [容器ID] 重启一个容器 docker kill [容器ID] docker rm [容器ID] 删除容器 docker attach [容器ID] 重新在控制台显示容器输出的内容 有时候以-d 运行的容器 后续内容不会打印 docker history [容器名称] 查看执行该容器的历史命令 docker exec -d [容器名称/容器ID] [要执行的命令] 对某个容器执行一条命令，但看不见后续内容 docker exec -it [容器名称/容器ID] [要执行的命令(常用bash进入交互)] docker export -o [导出的容器文件名称] [容器ID] 导出容器 docker import [要导入的容器文件] 导入容器 docker cp [源文件] [目标文件] 在主机与容器之间复制文件 更新: 2024-02-01 02:30:01原文: https://www.yuque.com/zacharyblock/cx2om6/oxlyrpyvo0ylgtio","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/tags/Docker/"}]},{"title":"Python - 单元测试","slug":"Python测试/单元测试","date":"2024-01-19T06:54:00.000Z","updated":"2024-01-19T06:54:00.000Z","comments":true,"path":"blog/4042161217/","permalink":"https://blockzachary.github.io/blog/4042161217/","excerpt":"","text":"单元测试基础知识单元测试概念 单元测试是一个自动化的测试 用于验证代码的正确性 在独立环境中快速执行 unittest 模块 测试文件以test_开头 测试文件中的类以Test开头 类中的测试方法以test_开头 测试类需要继承unittest.TestCase 创建目录结构 123456class Calculator: def add(self, *args): result = 0 for arg in args: result += arg return result 123456789101112131415import unittestfrom myProject.basic_knowledge.calculator import Calculatorclass TestCalculator(unittest.TestCase): def test_add(self): # Setup cal = Calculator() excepted_result = 10 # Action actual_result = cal.add(5, 5) # Assert self.assertEqual(excepted_result, actual_result) 批量测试 安装nose模块和coverage模块 运行方法 运行单个测试文件 python3 -m unittest -v myTest.basic_knowledge.test_calculator 运行所有测试文件 nosetests -v myTest/* 统计测试覆盖率 nosetests --with-coverage --cover-erase -v myTest/* 断言 assert assertEqual() assertTrue() assertFalse() assertRaises() 支持上下文管理器 12345678class Downloads: def get_downloads(self, url: str): if url and url == &quot;https://www.baidu.com&quot;: return True elif url: return False else: raise Exception(&quot;url is empty&quot;) 12345678910111213141516171819202122232425262728import unittestfrom myProject.assert_func.downloads import Downloadsclass TestDownloads(unittest.TestCase): def test_get_downloads_true(self): # Setup down = Downloads() url = &quot;https://www.baidu.com&quot; excepted_result = True # Action actual_result = down.get_downloads(url) # Assert self.assertEqual(excepted_result, actual_result) def test_get_downloads_false(self): # Setup down = Downloads() url = &quot;www.google.com&quot; excepted_result = False # Action actual_result = down.get_downloads(url) # Assert self.assertEqual(excepted_result, actual_result) 12345678910111213141516171819202122(venv) ➜ pythonUnitTest nosetests --with-coverage --cover-erase -v myTest/*test_get_downloads_false (myTest.assert_func.test_downloads.TestDownloads) ... oktest_get_downloads_true (myTest.assert_func.test_downloads.TestDownloads) ... oktest_add (myTest.basic_knowledge.test_calculator.TestCalculator) ... oktest_add2 (myTest.basic_knowledge.test_calculator.TestCalculator) ... okName Stmts Miss Cover-------------------------------------------------------------myProject/__init__.py 0 0 100%myProject/assert_func/__init__.py 0 0 100%myProject/assert_func/downloads.py 7 1 86%myProject/basic_knowledge/__init__.py 0 0 100%myProject/basic_knowledge/calculator.py 6 0 100%myTest/__init__.py 0 0 100%myTest/assert_func/__init__.py 0 0 100%myTest/basic_knowledge/__init__.py 0 0 100%-------------------------------------------------------------TOTAL 13 1 92%----------------------------------------------------------------------Ran 4 tests in 0.002sOK 修改了 test_downloads.py 后 123456789101112131415161718192021222324252627282930313233343536import unittestfrom myProject.assert_func.downloads import Downloadsclass TestDownloads(unittest.TestCase): def test_get_downloads_true(self): # Setup down = Downloads() url = &quot;https://www.baidu.com&quot; excepted_result = True # Action actual_result = down.get_downloads(url) # Assert self.assertEqual(excepted_result, actual_result) def test_get_downloads_false(self): # Setup down = Downloads() url = &quot;www.google.com&quot; # Action actual_result = down.get_downloads(url) # Assert self.assertFalse(actual_result) def test_get_downloads_exception(self): # Setup down = Downloads() url = &quot;&quot; # Action and Assert with self.assertRaises(Exception): down.get_downloads(url) 1234567891011121314151617181920212223(venv) ➜ pythonUnitTest nosetests --with-coverage --cover-erase -v myTest/*test_get_downloads_exception (myTest.assert_func.test_downloads.TestDownloads) ... oktest_get_downloads_false (myTest.assert_func.test_downloads.TestDownloads) ... oktest_get_downloads_true (myTest.assert_func.test_downloads.TestDownloads) ... oktest_add (myTest.basic_knowledge.test_calculator.TestCalculator) ... oktest_add2 (myTest.basic_knowledge.test_calculator.TestCalculator) ... okName Stmts Miss Cover-------------------------------------------------------------myProject/__init__.py 0 0 100%myProject/assert_func/__init__.py 0 0 100%myProject/assert_func/downloads.py 7 0 100%myProject/basic_knowledge/__init__.py 0 0 100%myProject/basic_knowledge/calculator.py 6 0 100%myTest/__init__.py 0 0 100%myTest/assert_func/__init__.py 0 0 100%myTest/basic_knowledge/__init__.py 0 0 100%-------------------------------------------------------------TOTAL 13 0 100%----------------------------------------------------------------------Ran 5 tests in 0.002sOK Test Fixtures在执行测试方法之前或者之后的内容称为 Test Fixtures 比如说需要给每个测试方法写一个数据库连接，断开 会很麻烦和造成较大开销 模块级别的 Fixtures setUpModule() tearDownModule() 1234567891011121314151617181920212223242526class BankAccount: def __init__(self, balance: float): self.balance = balance @property def balance(self): return self.__balance @balance.setter def balance(self, value: float): if value &lt; 0: raise ValueError(&quot;Balance cannot be negative&quot;) self.__balance = value def deposit(self, amount: float): if amount &lt;= 0: raise ValueError(&quot;Amount must be positive&quot;) self.balance += amount def withdraw(self, amount: float): if amount &lt;= 0: raise ValueError(&quot;Amount must be positive&quot;) if amount &gt; self.balance: raise ValueError(&quot;Insufficient funds&quot;) self.balance -= amount 12345678910111213141516171819202122import unittestfrom myProject.fixtures.bank_account import BankAccountdef setUpModule(): print(&quot;calling setup module&quot;)def tearDownModule(): print(&quot;calling teardown module&quot;)class TestBankAccount(unittest.TestCase): def test_deposit(self): account = BankAccount(100) account.deposit(50) self.assertEqual(150, account.balance) def test_withdraw(self): account = BankAccount(100) account.withdraw(50) self.assertEqual(50, account.balance) 12345678910(venv) ➜ pythonUnitTest python3 -m unittest -v myTest.fixtures.test_bank_accountcalling setup moduletest_deposit (myTest.fixtures.test_bank_account.TestBankAccount) ... oktest_withdraw (myTest.fixtures.test_bank_account.TestBankAccount) ... okcalling teardown module----------------------------------------------------------------------Ran 2 tests in 0.000sOK 类级别的 Fixtures setUpClass(cls) tearDownClass(cls) 1234567@classmethoddef setUpClass(cls) -&gt; None: print(&quot;calling setup class&quot;)@classmethoddef tearDownClass(cls) -&gt; None: print(&quot;calling teardown class&quot;) 123456789101112(venv) ➜ pythonUnitTest python3 -m unittest -v myTest.fixtures.test_bank_accountcalling setup modulecalling setup classtest_deposit (myTest.fixtures.test_bank_account.TestBankAccount) ... oktest_withdraw (myTest.fixtures.test_bank_account.TestBankAccount) ... okcalling teardown classcalling teardown module----------------------------------------------------------------------Ran 2 tests in 0.000sOK 方法级别的 Fixtures setUp() tearDown() 123456789101112131415161718192021222324252627282930313233343536import unittestfrom myProject.fixtures.bank_account import BankAccountdef setUpModule(): print(&quot;calling setup module&quot;)def tearDownModule(): print(&quot;calling teardown module&quot;)class TestBankAccount(unittest.TestCase): @classmethod def setUpClass(cls) -&gt; None: print(&quot;calling setup class&quot;) @classmethod def tearDownClass(cls) -&gt; None: print(&quot;calling teardown class&quot;) def setUp(self) -&gt; None: self.account = BankAccount(100) print(&quot;calling setup&quot;) def tearDown(self) -&gt; None: self.account = None print(&quot;calling teardown&quot;) def test_deposit(self): self.account.deposit(50) self.assertEqual(150, self.account.balance) def test_withdraw(self): self.account.withdraw(50) self.assertEqual(50, self.account.balance) 12345678910111213141516(venv) ➜ pythonUnitTest python3 -m unittest -v myTest.fixtures.test_bank_accountcalling setup modulecalling setup classtest_deposit (myTest.fixtures.test_bank_account.TestBankAccount) ... calling setupcalling teardownoktest_withdraw (myTest.fixtures.test_bank_account.TestBankAccount) ... calling setupcalling teardownokcalling teardown classcalling teardown module----------------------------------------------------------------------Ran 2 tests in 0.000sOK Mockmock 即模拟函数、方法、类的功能，在运行测试代码的时候，有哪些不是真的想要调用的代码块或方法，可以使用 mock 进行模拟调用 unittest.mock模块提供了Mock 和MagicMock两个类 Mock用于模拟指定的方法或属性 MagicMock是 Mock 的子类，用于模拟Magic方法 1234class Student: def __init__(self, id, name): self.id = id self.name = name 12345678910111213141516from myProject.mock_test.Student import Studentdef find_by_stu_id(stuid: int) -&gt; Student: passdef save_stu(stu: Student): passdef s(stid: int, stuname: str): stu = find_by_stu_id(stid) if stu is not None: stu.name = stuname save_stu(stu) 现在要测试上面alter_stu_name方法中的代码逻辑，但不调用其他方法包括：find_by_stu_id、 save_stu 1234567891011121314151617181920212223242526272829303132import unittestfrom unittest.mock import Mockfrom myProject.mock_test import student_serviceclass TestStudentService(unittest.TestCase): def test_alter_stu_name_with_student(self): # Setup student_service.find_by_stu_id = Mock() student = Mock(id=1, name=&quot;Zachary&quot;) student_service.find_by_stu_id.return_value = student student_service.save_stu = Mock() # Action student_service.alter_stu_name(1, &quot;Zach&quot;) # Assert self.assertEqual(&quot;Zach&quot;, student.name) student_service.save_stu.assert_called() def test_alter_stu_name_without_student(self): # Setup student_service.find_by_stu_id = Mock() student_service.find_by_stu_id.return_value = None student_service.save_stu = Mock() # Action student_service.alter_stu_name(1, &quot;Zach&quot;) # Assert student_service.save_stu.assert_not_called() patch帮助我们使用 Mock 替换测试代码块中的某些方法、类的调用 patch 可以替换的目标 目标必须是可以 import 的 是在调用的地方替换，原先的定义不进行替换 patch 装饰器123456789101112131415161718192021import unittestfrom unittest.mock import patch, Mockfrom myProject.mock_test import student_serviceclass TestStudentService(unittest.TestCase): @patch(&quot;myProject.mock_test.student_service.save_stu&quot;) @patch(&quot;myProject.mock_test.student_service.find_by_stu_id&quot;) def test_alter_stu_name_with_student_decorator(self, mock_find_by_stu_id, mock_save_stu): # Setup student = Mock(id=1, name=&quot;Zachary&quot;) mock_find_by_stu_id.return_value = student # Action student_service.alter_stu_name(1, &quot;Zach&quot;) # Assert self.assertEqual(&quot;Zach&quot;, student.name) mock_save_stu.assert_called() 上下文管理器1234567891011121314151617181920import unittestfrom unittest.mock import patch, Mockfrom myProject.mock_test import student_serviceclass TestStudentService(unittest.TestCase): @patch(&quot;myProject.mock_test.student_service.find_by_stu_id&quot;) def test_alter_stu_name_with_student_context_manager(self, mock_find_by_stu_id): # Setup student = Mock(id=1, name=&quot;Zachary&quot;) mock_find_by_stu_id.return_value = student with patch(&quot;myProject.mock_test.student_service.save_stu&quot;) as mock_save_stu: # Action student_service.alter_stu_name(1, &quot;Zach&quot;) # Assert self.assertEqual(&quot;Zach&quot;, student.name) mock_save_stu.assert_called() 手动调用12345678910111213141516171819202122import unittestfrom unittest.mock import patch, Mockfrom myProject.mock_test import student_serviceclass TestStudentService(unittest.TestCase): @patch(&quot;myProject.mock_test.student_service.find_by_stu_id&quot;) def test_alter_stu_name_with_student_manual(self, mock_find_by_stu_id): # Setup student = Mock(id=1, name=&quot;Zachary&quot;) mock_find_by_stu_id.return_value = student patcher = patch(&quot;myProject.mock_test.student_service.save_stu&quot;) patcher.start() # Action student_service.alter_stu_name(1, &quot;Zach&quot;) # Assert self.assertEqual(&quot;Zach&quot;, student.name) patcher.stop() 测试实例123456789101112131415161718import os.pathfrom urllib.request import Request, urlopenclass ProductService: def download_img(self, url: str): site_url = Request(url, headers=&#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0&#x27;&#125;) with urlopen(site_url) as response: image_date = response.read() if not image_date: raise Exception(&quot;Error: No image data from url: &quot; + url) filename = os.path.basename(url) with open(filename, &#x27;wb&#x27;) as f: f.write(image_date) return f&quot;Downloaded &#123;filename&#125;&quot; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import unittestfrom unittest.mock import patch, MagicMockfrom myProject.test_example.product_service import ProductServiceclass TestProductService(unittest.TestCase): def setUp(self) -&gt; None: self.service = ProductService() def tearDown(self) -&gt; None: self.service = None @patch(&#x27;myProject.test_example.product_service.urlopen&#x27;) @patch(&#x27;myProject.test_example.product_service.Request.__new__&#x27;) def test_download_img_with_exception(self, mock_request, mock_urlopen): # Setup url = &quot;https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png&quot; return_mock_urlopen = MagicMock() response_mock = MagicMock() mock_urlopen.return_value = return_mock_urlopen return_mock_urlopen.__enter__.return_value = response_mock response_mock.read.return_value = None with self.assertRaises(Exception): self.service.download_img(url) @patch(&#x27;builtins.open&#x27;) @patch(&#x27;os.path.basename&#x27;) @patch(&#x27;myProject.test_example.product_service.urlopen&#x27;) @patch(&#x27;myProject.test_example.product_service.Request.__new__&#x27;) def test_download_img_with_success(self, mock_request, mock_urlopen, mock_basename, mock_open): # Setup url = &quot;https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png&quot; return_mock_urlopen = MagicMock() response_mock = MagicMock() mock_urlopen.return_value = return_mock_urlopen return_mock_urlopen.__enter__.return_value = response_mock response_mock.read.return_value = &quot;value&quot; mock_basename.return_value = &quot;filename&quot; excepted_result = f&quot;Downloaded &#123;mock_basename.return_value&#125;&quot; # Action result = self.service.download_img(url) # Assert self.assertEqual(excepted_result, result) 测试覆盖率统计的是在单元测试中有多少代码行被执行了 覆盖率 &#x3D; 执行的代码行&#x2F;总代码行 统计测试覆盖率 python -m coverage run -m unittest 1234567891011121314(venv) ➜ pythonUnitTest python -m coverage run -m unittest.....calling setup modulecalling setup classcalling setupcalling teardown.calling setupcalling teardown.calling teardown classcalling teardown module.......----------------------------------------------------------------------Ran 14 tests in 0.009sOK 查看覆盖率报告 python -m coverage report 123456789101112131415161718192021222324252627282930(venv) ➜ pythonUnitTest python -m coverage reportName Stmts Miss Cover-----------------------------------------------------------------myProject/__init__.py 0 0 100%myProject/assert_func/__init__.py 0 0 100%myProject/assert_func/downloads.py 7 0 100%myProject/basic_knowledge/__init__.py 0 0 100%myProject/basic_knowledge/calculator.py 6 0 100%myProject/fixtures/__init__.py 0 0 100%myProject/fixtures/bank_account.py 20 4 80%myProject/mock_test/Student.py 4 2 50%myProject/mock_test/__init__.py 0 0 100%myProject/mock_test/student_service.py 10 2 80%myProject/test_example/__init__.py 0 0 100%myProject/test_example/product_service.py 13 0 100%myTest/__init__.py 0 0 100%myTest/assert_func/__init__.py 0 0 100%myTest/assert_func/test_downloads.py 19 0 100%myTest/basic_knowledge/__init__.py 0 0 100%myTest/basic_knowledge/test_calculator.py 13 0 100%myTest/fixtures/__init__.py 0 0 100%myTest/fixtures/test_bank_account.py 25 0 100%myTest/mock_test/__init__.py 0 0 100%myTest/mock_test/test_student_service.py 18 0 100%myTest/patch_test/__init__.py 0 0 100%myTest/patch_test/test_student_service.py 26 0 100%myTest/test_example/__init__.py 0 0 100%myTest/test_example/test_product_service.py 32 0 100%-----------------------------------------------------------------TOTAL 193 8 96% 生成 web 格式的报告 python -m coverage html 12(venv) ➜ pythonUnitTest python -m coverage htmlWrote HTML report to htmlcov/index.html 可以点击查看具体哪里没有测试到 PyTest基于 Python 的第三方测试框架 安装pip install pytest 运行 在项目路径下使用 pytest命令 自动查找所有test_*.py或者*_test.py的测试文件 自动查找所有test_开头的文件，Test开头的类中test_开头的方法 1234567891011121314(venv) ➜ pythonUnitTest pytest====================================================== test session starts =======================================================platform darwin -- Python 3.7.7, pytest-7.4.4, pluggy-1.2.0rootdir: /Users/zachary/Documents/PythonCode/pythonUnitTestcollected 14 itemsmyTest/assert_func/test_downloads.py ... [ 21%]myTest/basic_knowledge/test_calculator.py .. [ 35%]myTest/fixtures/test_bank_account.py .. [ 50%]myTest/mock_test/test_student_service.py .. [ 64%]myTest/patch_test/test_student_service.py ... [ 85%]myTest/test_example/test_product_service.py .. [100%]======================================================= 14 passed in 0.14s ======================================================= 使用 pytest -v获得更多详细信息 1234567891011121314151617181920212223(venv) ➜ pythonUnitTest pytest -v====================================================== test session starts =======================================================platform darwin -- Python 3.7.7, pytest-7.4.4, pluggy-1.2.0 -- /Users/zachary/Documents/PythonCode/pythonUnitTest/venv/bin/pythoncachedir: .pytest_cacherootdir: /Users/zachary/Documents/PythonCode/pythonUnitTestcollected 14 itemsmyTest/assert_func/test_downloads.py::TestDownloads::test_get_downloads_exception PASSED [ 7%]myTest/assert_func/test_downloads.py::TestDownloads::test_get_downloads_false PASSED [ 14%]myTest/assert_func/test_downloads.py::TestDownloads::test_get_downloads_true PASSED [ 21%]myTest/basic_knowledge/test_calculator.py::TestCalculator::test_add PASSED [ 28%]myTest/basic_knowledge/test_calculator.py::TestCalculator::test_add2 PASSED [ 35%]myTest/fixtures/test_bank_account.py::TestBankAccount::test_deposit PASSED [ 42%]myTest/fixtures/test_bank_account.py::TestBankAccount::test_withdraw PASSED [ 50%]myTest/mock_test/test_student_service.py::TestStudentService::test_alter_stu_name_with_student PASSED [ 57%]myTest/mock_test/test_student_service.py::TestStudentService::test_alter_stu_name_without_student PASSED [ 64%]myTest/patch_test/test_student_service.py::TestStudentService::test_alter_stu_name_with_student_context_manager PASSED [ 71%]myTest/patch_test/test_student_service.py::TestStudentService::test_alter_stu_name_with_student_decorator PASSED [ 78%]myTest/patch_test/test_student_service.py::TestStudentService::test_alter_stu_name_with_student_manual PASSED [ 85%]myTest/test_example/test_product_service.py::TestProductService::test_download_img_with_exception PASSED [ 92%]myTest/test_example/test_product_service.py::TestProductService::test_download_img_with_success PASSED [100%]======================================================= 14 passed in 0.14s ======================================================= 使用 pytest 指定文件路径 对单独某个文件进行测试 1234567891011(venv) ➜ pythonUnitTest pytest -v myTest/test_example/test_product_service.py====================================================== test session starts =======================================================platform darwin -- Python 3.7.7, pytest-7.4.4, pluggy-1.2.0 -- /Users/zachary/Documents/PythonCode/pythonUnitTest/venv/bin/pythoncachedir: .pytest_cacherootdir: /Users/zachary/Documents/PythonCode/pythonUnitTestcollected 2 itemsmyTest/test_example/test_product_service.py::TestProductService::test_download_img_with_exception PASSED [ 50%]myTest/test_example/test_product_service.py::TestProductService::test_download_img_with_success PASSED [100%]======================================================= 2 passed in 0.05s ======================================================== 使用 pytest -s输出调试信息，比如 print 等的打印信息 使用 pytest -x在遇到错误测试的时候 会立即停止 跳过指定测试内容 @pytest.mark.skip @pytest.mark.skipif 1234567891011121314151617181920212223242526272829303132import sysimport unittestimport pytestfrom myProject.mock_test.Student import Studentdef skip_condition_macos(): return sys.platform.casefold() == &#x27;darwin&#x27;.casefold()def skip_condition_linux(): return sys.platform.casefold() == &#x27;linux&#x27;.casefold()class TestStudent(unittest.TestCase): def setUp(self) -&gt; None: self.student = Student(1, &quot;Zach&quot;) def tearDown(self) -&gt; None: self.student = None @pytest.mark.skip(reason=&quot;testing case expired&quot;) def test_alter_stu_name(self): self.student.name = &quot;Zachary&quot; self.assertEqual(&quot;Zachary&quot;, self.student.name) @pytest.mark.skipif(condition=skip_condition_macos(), reason=&quot;currently platform not supported&quot;) def test_alter_stu_id(self): self.student.id = 2 self.assertEqual(2, self.student.id) 1234567891011(venv) ➜ pythonUnitTest pytest -v myTest/pytest/test_student.py====================================================== test session starts =======================================================platform darwin -- Python 3.7.7, pytest-7.4.4, pluggy-1.2.0 -- /Users/zachary/Documents/PythonCode/pythonUnitTest/venv/bin/pythoncachedir: .pytest_cacherootdir: /Users/zachary/Documents/PythonCode/pythonUnitTestcollected 2 itemsmyTest/pytest/test_student.py::TestStudent::test_alter_stu_id SKIPPED (currently platform not supported) [ 50%]myTest/pytest/test_student.py::TestStudent::test_alter_stu_name SKIPPED (testing case expired) [100%]======================================================= 2 skipped in 0.01s ======================================================= Fixtures 通过@pytest.fixture定义 123456789101112131415class Student: def __init__(self, id, name): self.id = id self.name = name def alter_name(self, name: str) -&gt; bool: if 3 &lt; len(name) &lt; 8: self.name = name return True return False def is_valid_name(self) -&gt; bool: if self.name: return 3 &lt; len(self.name) &lt; 8 return False 12345678910111213141516171819202122import pytestfrom myProject.pytest_fixture.Student import Studentclass TestStudent: @pytest.fixture def valid_student(self): student = Student(1, &quot;Zach&quot;) # 使用yield的好处是：yield前后分别可以执行不同内容，在测试结果前后执行 yield student def test_alter_stu_name_false(self, valid_student): # Setup new_name = &quot;ZacharyBlock&quot; expected_result = False # Action actual_result = valid_student.alter_name(new_name) # Assert assert actual_result == expected_result 使用 pytest.fixture实现一个fixture引用另一个fixture 12345678910111213141516171819202122232425import pytestfrom myProject.pytest_fixture.Student import Studentclass TestStudent: @pytest.fixture def valid_student(self): student = Student(1, &quot;Zach&quot;) yield student @pytest.fixture def invalid_student(self, valid_student): valid_student.name = &quot;ZacharyBlock&quot; yield valid_student def test_valid_name_false(self, invalid_student): # Setup expected_result = False # Action actual_result = invalid_student.is_valid_name() # Assert assert actual_result == expected_result 使用 pytest.fixture实现引用多个fixture 12345678910111213141516171819202122232425262728import pytestfrom myProject.pytest_fixture.Student import Studentclass TestStudent: @pytest.fixture def valid_student(self): student = Student(1, &quot;Zach&quot;) yield student @pytest.fixture def invalid_student(self): student = Student(1, &quot;ZacharyBlock&quot;) yield student def test_valid_student(self, valid_student, invalid_student): # Setup expected_result_valid = True expected_result_invalid = False # Action actual_result_valid = valid_student.is_valid_name() actual_result_invalid = invalid_student.is_valid_name() # Assert assert expected_result_valid == actual_result_valid \\ and expected_result_invalid == actual_result_invalid conftest.pyconftest.py使得复用pytest.fixture成为可能 首先在 myProj 文件夹下创建一个 pytest_conftest&#x2F;student.py 12345678class Student: def __init__(self, id, name, gender): self.id = id self.name = name self.gender = gender def vaild_gender(self) -&gt; bool: return self.gender and self.gender.casefold() in [&quot;male&quot;, &quot;female&quot;] 接着在，myTest 下创建一个 pytest_conftest&#x2F;male_student_fixture.py 123456789import pytestfrom myProject.pytest_conftest.student import Student@pytest.fixturedef male_student_fixture(): student = Student(1, &quot;Zachary&quot;, &quot;male&quot;) yield student 为了使得该male_student_fixture可以得到多个模块的复用 需要在myTest文件目录下创建一个conftest.py文件 1from myTest.pytest_conftest.male_student_fixture import male_student_fixture 在这之后 任何需要使用male_student_fixture的模块，可以直接使用 12345678910class TestStudentGender: def test_valid_gender_true(self, male_student_fixture): # Setup expected_result = True # Action actual_result = male_student_fixture.vaild_gender() # Assert assert expected_result == actual_result 需要使用命令行运行 不知道为什么 pycharm 直接运行会有问题 12345678910(venv) ➜ pythonUnitTest pytest -v myTest/pytest_conftest/test_student_gender.py====================================================== test session starts =======================================================platform darwin -- Python 3.7.7, pytest-7.4.4, pluggy-1.2.0 -- /Users/zachary/Documents/PythonCode/pythonUnitTest/venv/bin/pythoncachedir: .pytest_cacherootdir: /Users/zachary/Documents/PythonCode/pythonUnitTestcollected 1 itemmyTest/pytest_conftest/test_student_gender.py::TestStudentGender::test_valid_gender_true PASSED [100%]======================================================= 1 passed in 0.01s ======================================================== 测试用例—参数化 使用parameterized实现 pip install parameterized 实现一个判断数字是否为奇数的例子 123class Judge: def is_odd(self, num: int) -&gt; bool: return num % 2 != 0 12345678910111213141516from parameterized import parameterizedfrom myProject.pytest_parameterized.judge import Judgeclass TestJudge: @parameterized.expand([[1, True], [2, False], [3, True]]) def test_is_odd(self, num, expected_result): # Setup judge = Judge() # Action actual_result = judge.is_odd(num) # Assert assert expected_result == actual_result 使用pytest实现 12345678910111213141516import pytestfrom myProject.pytest_parameterized.judge import Judgeclass TestJudge: @pytest.mark.parametrize(&quot;num,expected_result&quot;, [(1, True), (2, False), (3, True)]) def test_is_odd(self, num, expected_result): # Setup judge = Judge() # Action actual_result = judge.is_odd(num) # Assert assert expected_result == actual_result 更新: 2024-01-23 06:38:01原文: https://www.yuque.com/zacharyblock/cx2om6/dzbxl6wz2ns1pgpi","categories":[{"name":"Python 测试","slug":"Python-测试","permalink":"https://blockzachary.github.io/categories/Python-%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"unittest","slug":"unittest","permalink":"https://blockzachary.github.io/tags/unittest/"},{"name":"PyTest","slug":"PyTest","permalink":"https://blockzachary.github.io/tags/PyTest/"}]},{"title":"SQLAlchemy","slug":"PythonMySQL/SQLAlchemy","date":"2024-01-16T03:28:00.000Z","updated":"2024-01-16T03:28:00.000Z","comments":true,"path":"blog/2691588494/","permalink":"https://blockzachary.github.io/blog/2691588494/","excerpt":"","text":"SQLAlchemy一个使用 Python 编写的 SQL 的 ORM（Object-orient-map）工具包，支持 MySQL、SQL Server、sqlite、Oracle 安装pip install sqlalchemy 若使用的是 MySQL，需要安装pip install mysqlclient https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb 连接连接 sqlite123from sqlalchemy import create_engineengine = create_engine(&#x27;sqlite:///test.db&#x27;, echo=True)connection = engine.connect() 连接 MySQL123from sqlalchemy import create_engineengine = create_engine(&#x27;mysql://user:pwd@localhost/tsetdb&#x27;, echo=True)connection = engine.connect() echo：是用于显示数据库执行的操作 先创建一个数据库中的表 1234567create table user( id int not null primary key auto_increment, name varchar(20), age int, gender char(1))engine=innodb default charset=utf8; 往里面插入一些数据然后： 123456789101112import sqlalchemyengine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;)conn = engine.connect()query = sqlalchemy.text(&quot;select * from user&quot;)result = conn.execute(query)for row in result: print(row)conn.close()engine.dispose() 创建表12345678910111213141516import sqlalchemyengine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)meta_data = sqlalchemy.MetaData()students = sqlalchemy.Table( &#x27;students&#x27;, meta_data, sqlalchemy.Column(&#x27;id&#x27;, sqlalchemy.Integer, primary_key=True), sqlalchemy.Column(&#x27;name&#x27;, sqlalchemy.String(64), unique=True, nullable=False), sqlalchemy.Column(&#x27;age&#x27;, sqlalchemy.Integer, nullable=False), sqlalchemy.Column(&#x27;gender&#x27;, sqlalchemy.String(8), nullable=False), sqlalchemy.Column(&#x27;birthday&#x27;, sqlalchemy.Date, nullable=False),)meta_data.create_all(engine) metaData，用于创建映射表的元数据，为了复用 所以提前使用 sqlalchemy 的 MetaDate()声明一个变量 插入数据 普通 SQL 的插入 INSERT INTO table_name values() 一次插入一条数据conn.execute(table_name.insert().values()) 1234567891011121314151617181920student_insert = students.insert()insert_value1 = student_insert.values( name=&#x27;zachary&#x27;, age=18, gender=&#x27;male&#x27;, birthday=&#x27;2000-01-01&#x27;,)insert_value2 = student_insert.values( name=&#x27;curry&#x27;, age=36, gender=&#x27;male&#x27;, birthday=&#x27;1980-03-01&#x27;,)with engine.connect() as conn: conn.execute(insert_value1) res = conn.execute(insert_value2) print(f&quot;插入的values2的主键为：&#123;res.inserted_primary_key&#125;&quot;) conn.commit() 一次插入多条数据conn.execute(table_name.insert(), student_list) 123456789student_list = [ &#123;&quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 18, &quot;gender&quot;: &quot;male&quot;, &quot;birthday&quot;: &quot;2000-01-01&quot;&#125;, &#123;&quot;name&quot;: &quot;sandy&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;, &quot;birthday&quot;: &quot;1990-05-04&quot;&#125;, &#123;&quot;name&quot;: &quot;lucy&quot;, &quot;age&quot;: 35, &quot;gender&quot;: &quot;female&quot;, &quot;birthday&quot;: &quot;2002-08-13&quot;&#125;,]student_insert = students.insert()with engine.connect() as conn: conn.execute(student_insert, student_list) conn.commit() 查询数据查询所有记录 普通 SQL 的查询 SELECT * FROM table_name 函数查询 table_name.select() 12345678910111213141516171819with engine.connect() as conn: query = students.select() # 方法一 result = conn.execute(query) for row in result: print(row[0],end=&quot; &quot;) print(row.name) # 方法二 result = conn.execute(query) for row in result: print(row) # 方法三 result = conn.execute(query) result_set = result.fetchall() print(result_set) for i in result_set: print(i) 查询一条记录12345with engine.connect() as conn: query = students.select() result = conn.execute(query) result_raw = result.fetchone() print(result_raw) 条件查询 普通 SQL 的条件查询 SELECT * FROM table_name WHERE 条件 函数条件查询 table_name.select().where(条件) 1234567891011121314with engine.connect() as conn: # 单条件查询 query = students.select().where(students.c.gender == &#x27;male&#x27;) result = conn.execute(query) result_raw = result.fetchall() for item in result_raw: print(item) # 多条件查询 query = students.select().where(students.c.gender == &#x27;male&#x27;).where(students.c.age &gt; 20).where(students.c.birthday &lt; &#x27;2000-01-01&#x27;) result = conn.execute(query) result_raw = result.fetchall() for item in result_raw: print(item) 更复杂的条件查询 引入and_、or_( from sqlalchemy.sql import and_, or_ ) 12345678910111213141516from sqlalchemy.sql import and_, or_with engine.connect() as conn: # 复杂条件查询 query = students.select().where( or_( students.c.id &gt; 3, and_( students.c.gender == &#x27;male&#x27;, students.c.age &gt; 30 ) ) ) result = conn.execute(query) result_set = result.fetchall() for row in result_set: print(row) 更新数据 普通 SQL 的更新数据 UPDATE table_name SET col1=value1, col2=value2 WHERE 条件 函数更新数据 更新所有数据 table_name.update().values() 更新部分数据 table_name.update().where(条件).values() update(table_name).where(条件).values() 123456789with engine.connect() as conn: update = students.update().where(students.c.id == 1).values( name=&#x27;zacharyBlock&#x27;, age=18, gender=&#x27;male&#x27;, birthday=&#x27;2000-01-01&#x27;, ) conn.execute(update) conn.commit() 删除数据 普通 SQL 的删除数据 DELETE FROM table_name WHERE 条件 函数删除数据 删除所有数据 table_name.delete() 删除部分数据 table_name.delete().where(条件) 1234with engine.connect() as conn: delete = students.delete().where(students.c.id == 5) conn.execute(delete) conn.commit() 关联表定义这里举例一个简单的一对多关联表 删掉之前的 students 表重新建立一个 12345678910111213141516171819202122import sqlalchemyengine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)meta_data = sqlalchemy.MetaData()students = sqlalchemy.Table( &#x27;students&#x27;, meta_data, sqlalchemy.Column(&#x27;id&#x27;, sqlalchemy.Integer, primary_key=True), sqlalchemy.Column(&#x27;name&#x27;, sqlalchemy.String(64), unique=True, nullable=False), sqlalchemy.Column(&#x27;age&#x27;, sqlalchemy.Integer, nullable=False), sqlalchemy.Column(&#x27;gender&#x27;, sqlalchemy.String(8), nullable=False), sqlalchemy.Column(&#x27;class_id&#x27;, sqlalchemy.Integer, sqlalchemy.ForeignKey(&#x27;classes.id&#x27;), nullable=False),)classes = sqlalchemy.Table( &#x27;classes&#x27;, meta_data, sqlalchemy.Column(&#x27;id&#x27;, sqlalchemy.Integer, primary_key=True), sqlalchemy.Column(&#x27;name&#x27;, sqlalchemy.String(64), unique=True, nullable=False),)meta_data.create_all(engine) 插入一些数据 12345678910111213141516# insert datawith engine.connect() as conn: conn.execute(classes.insert(), [ &#123;&quot;name&quot;: &quot;Python&quot;&#125;, &#123;&quot;name&quot;: &quot;Java&quot;&#125;, &#123;&quot;name&quot;: &quot;Go&quot;&#125;, ]) conn.execute(students.insert(), [ &#123;&quot;name&quot;: &quot;zachary&quot;, &quot;age&quot;: 18, &quot;gender&quot;: &quot;male&quot;, &quot;class_id&quot;: 1&#125;, &#123;&quot;name&quot;: &quot;curry&quot;, &quot;age&quot;: 36, &quot;gender&quot;: &quot;male&quot;, &quot;class_id&quot;: 1&#125;, &#123;&quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 18, &quot;gender&quot;: &quot;male&quot;, &quot;class_id&quot;: 2&#125;, &#123;&quot;name&quot;: &quot;sandy&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;, &quot;class_id&quot;: 2&#125;, &#123;&quot;name&quot;: &quot;lucy&quot;, &quot;age&quot;: 35, &quot;gender&quot;: &quot;female&quot;, &quot;class_id&quot;: 3&#125;, ]) conn.commit() 查询 查询 Python 班级的所有学生的信息及班级信息 123456with engine.connect() as conn: join = students.join(classes, students.c.class_id == classes.c.id) query = sqlalchemy.select(join).where(classes.c.name == &quot;Python&quot;) result = conn.execute(query) for row in result: print(row) 查询 Python 班级的所有学生的信息 1234567with engine.connect() as conn: join = students.join(classes, students.c.class_id == classes.c.id) # query = sqlalchemy.select(students).select_from(join).where(classes.c.name == &#x27;Python&#x27;) query = students.select().select_from(join).where(classes.c.name == &#x27;Python&#x27;) result = conn.execute(query) for row in result: print(row) 查找 curry 所在的班级 123456with engine.connect() as conn: join = students.join(classes, students.c.class_id == classes.c.id) # query = sqlalchemy.select(classes).select_from(join).where(students.c.name == &#x27;curry&#x27;) query = classes.select().select_from(join).where(students.c.name == &#x27;curry&#x27;) result = conn.execute(query) print(result.fetchall()) 映射类(这块如果讲的话 暂时不要带上 join)在 Python 中定义一个类，其中的属性对应着数据表中的字段，通过类对象进行操作从而达到操作数据表的目的 定义 映射类基类 通过使用from sqlalchemy.ext.declarative import declarative_base的 Base = declarative_base() 还是得先删除掉原先创建的 students 表 1234567891011121314151617import sqlalchemyfrom sqlalchemy.ext.declarative import declarative_baseengine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()class Student(Base): __tablename__ = &#x27;students&#x27; id = sqlalchemy.Column(sqlalchemy.Integer, primary_key=True) name = sqlalchemy.Column(sqlalchemy.String(64), unique=True, nullable=False) age = sqlalchemy.Column(sqlalchemy.Integer, nullable=False) gender = sqlalchemy.Column(sqlalchemy.String(8), nullable=False)# 若没有创建表 使用Base的metadata创建表Base.metadata.create_all(engine) 插入 通过session添加记录，代替了之前的 connection 添加一条数据 session.add(obj) 123456789from sqlalchemy.orm import sessionmaker# 给Session绑定engineSession = sessionmaker(bind=engine)session = Session()student = Student(name=&#x27;Tony&#x27;, age=18, gender=&#x27;male&#x27;)session.add(student)session.commit() 添加多条数据 session.add_all(list) 123456789101112# 给Session绑定engineSession = sessionmaker(bind=engine)session = Session()# 添加多条记录student_list = [ Student(name=&#x27;stack&#x27;, age=36, gender=&#x27;male&#x27;), Student(name=&#x27;jeff&#x27;, age=29, gender=&#x27;male&#x27;), Student(name=&#x27;Monica&#x27;, age=18, gender=&#x27;female&#x27;),]session.add_all(student_list)session.commit() 查询 查询所有记录 session().query(cls).all() 带条件的查询 session().query(cls).filter(cls.attr == &quot;value&quot;) 多条件查询 session().query(cls).filter(and_(条件1, 条件2)) 单条记录的查询 .first() 调用多条记录中的第一条，若无记录，则返回 None .one() 结果集若为一条记录，则返回，否则抛出异常 .scalar() 与 one()相似，区别在于 当结果集是 None 时，不抛出异常，返回 None 1234567891011121314151617181920212223242526272829# 若没有创建表 使用Base的metadata创建表Base.metadata.create_all(engine)# 给Session绑定engineSession = sessionmaker(bind=engine)session = Session()# 查找所有学生信息students = session.query(Student).all()for student in students: print( f&#x27;id:&#123;student.id&#125;, name:&#123;student.name&#125;, age:&#123;student.age&#125;, gender:&#123;student.gender&#125;&#x27;)# 查找学生ID大于2 且 为女性的学生信息students = session.query(Student).filter(and_(Student.id &gt; 2, Student.gender == &#x27;female&#x27;))for student in students: print(student)# 查询学生ID大于3的第一条记录student = session.query(Student).filter(Student.id &gt; 3).first()print(student)# 使用one()获取结果集为1条数据的记录，否则会抛出异常student = session.query(Student).filter(Student.id == 3).one()print(student)# 使用scalar()获取的结果集为1条记录，若为空则返回None，若为多条记录抛出异常student = session.query(Student).filter(Student.id == 9).scalar()print(student) 更新 更新数据 使用obj.attr=&quot;value&quot;，依据one()等 查询到某条数据后，直接通过对象属性的方式直接赋值 session().query(cls).filter(cls.id == &quot;value&quot;).update(&#123;cls.attr == &quot;value&quot; &#125;) 12345678910111213141516# 给Session绑定engineSession = sessionmaker(bind=engine)session = Session()# 学生id为4 的年龄+1student = session.query(Student).filter(Student.id == 4).one()student.age += 1session.commit()student = session.query(Student).filter(Student.id == 4).update(&#123;Student.age: 18&#125;)print(student)session.commit()# 所有人年龄+1students = session.query(Student).update(&#123;Student.age: Student.age + 1&#125;)session.commit() Mapped 映射由 SQLAlchemy2.0 版本提供的新映射方式 Mapped、mapped_column 1234567891011121314151617181920212223242526import sqlalchemyfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import sessionmaker, Mapped, mapped_columnengine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()class Student(Base): __tablename__ = &#x27;students&#x27; id: Mapped[int] = mapped_column(primary_key=True) name: Mapped[str] = mapped_column(sqlalchemy.String(64), unique=True, nullable=False) age: Mapped[int] = mapped_column(nullable=False) gender: Mapped[str] = mapped_column(sqlalchemy.String(8), nullable=False) def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;, age:&#123;self.age&#125;, gender:&#123;self.gender&#125;&quot;Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)session = Session()students = session.query(Student).all()for student in students: print(student) Annotated使 Mapped 更加便捷和得以复用 123456789101112131415161718192021222324252627282930313233343536# -*- coding:utf-8 -*-# Author: Zacharyimport sqlalchemyfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import sessionmaker, Mapped, mapped_columnfrom typing_extensions import Annotatedengine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()int_pk = Annotated[int, mapped_column(primary_key=True)]str_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]int_age = Annotated[int, mapped_column(nullable=False)]str_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]class Student(Base): __tablename__ = &#x27;students&#x27; id: Mapped[int_pk] name: Mapped[str_name] age: Mapped[int_age] gender: Mapped[str_gender] def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;, age:&#123;self.age&#125;, gender:&#123;self.gender&#125;&quot;Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)session = Session()students = session.query(Student).all()for student in students: print(student) 使用 sql 的内置函数 12345678910111213141516171819202122232425262728import datetimeimport sqlalchemyfrom sqlalchemy import funcfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import sessionmaker, Mapped, mapped_columnfrom typing_extensions import Annotatedengine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()int_pk = Annotated[int, mapped_column(primary_key=True)]str_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]int_age = Annotated[int, mapped_column(nullable=False)]str_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]timestamp_now = Annotated[datetime.datetime, mapped_column(nullable=False, server_default=func.now())]class Student(Base): __tablename__ = &#x27;students&#x27; id: Mapped[int_pk] name: Mapped[str_name] age: Mapped[int_age] gender: Mapped[str_gender] create_time: Mapped[timestamp_now] def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;, age:&#123;self.age&#125;, gender:&#123;self.gender&#125;, create_time:&#123;self.create_time&#125;&quot; ORM 关联表一对多 ForeignKey定义外键 relationship创建关系字段 lazy=False使得在查询关系字段的时候自动执行，提高查询效率（讲的时候可以试试给 T 和 F 运行效果看看） backref=&quot;关系字段名&quot; 给关系字段对应的类 指定关联关系字段 实现双向关联，虽然便捷 但是不推荐，因为很难直接从另一个类中看出有这个关系字段 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465engine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()int_pk = Annotated[int, mapped_column(primary_key=True)]str_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]int_age = Annotated[int, mapped_column(nullable=False)]str_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]class_id_fk = Annotated[int, mapped_column(sqlalchemy.ForeignKey(&#x27;classes.id&#x27;), nullable=False)]timestamp_now = Annotated[datetime.datetime, mapped_column(nullable=False, server_default=func.now())]class Class(Base): __tablename__ = &#x27;classes&#x27; id: Mapped[int_pk] name: Mapped[str_name] create_time: Mapped[timestamp_now] def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;, create_time:&#123;self.create_time&#125;&quot;class Student(Base): __tablename__ = &#x27;students&#x27; id: Mapped[int_pk] name: Mapped[str_name] age: Mapped[int_age] gender: Mapped[str_gender] class_id: Mapped[class_id_fk] create_time: Mapped[timestamp_now] # 创建一个关系字段，这并不是一个数据库字段 classes: Mapped[Class] = relationship(lazy=False, backref=&quot;students&quot;) def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;, age:&#123;self.age&#125;, gender:&#123;self.gender&#125;, class_id:&#123;self.class_id&#125;, create_time:&#123;self.create_time&#125;&quot;Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)session = Session()# 插入操作# 班级对象class_python = Class(name=&quot;Python&quot;)# 学生对象 插入的时候没有使用class_id, 直接插入了一个classes关系对象student = Student(name=&quot;zachary&quot;, age=18, gender=&quot;male&quot;, classes=class_python)# 在添加数据的时候发现Class表中 还没有python班级，依据关系字段，会自动执行insert语句，因此不需要给class表插入数据session.add(student)session.commit()# 查询操作student = session.query(Student).filter(Student.gender == &quot;female&quot;).first()print(student)# 如果是lazy=True 则会再查询一次，否则一次就查询出结果print(student.classes)# 通过backref实现双向关联classes = session.query(Class).filter(Class.name == &quot;Python&quot;).one()print(classes)print(classes.students) - `back_populates=&quot;关联的关系字段名&quot;` 建议使用该方法进行关联关系的双向映射 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import datetimefrom typing import Listimport sqlalchemyfrom sqlalchemy import funcfrom sqlalchemy.orm import declarative_base, mapped_column, Mapped, sessionmaker, relationshipfrom typing_extensions import Annotatedengine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()int_pk = Annotated[int, mapped_column(primary_key=True)]str_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]int_age = Annotated[int, mapped_column(nullable=False)]str_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]class_id_fk = Annotated[int, mapped_column(sqlalchemy.ForeignKey(&#x27;classes.id&#x27;), nullable=False)]timestamp_now = Annotated[datetime.datetime, mapped_column(nullable=False, server_default=func.now())]class Class(Base): __tablename__ = &#x27;classes&#x27; id: Mapped[int_pk] name: Mapped[str_name] create_time: Mapped[timestamp_now] # 创建一个关系字段 students: Mapped[List[&quot;Student&quot;]] = relationship(lazy=False, back_populates=&quot;classes&quot;) def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;, create_time:&#123;self.create_time&#125;&quot;class Student(Base): __tablename__ = &#x27;students&#x27; id: Mapped[int_pk] name: Mapped[str_name] age: Mapped[int_age] gender: Mapped[str_gender] class_id: Mapped[class_id_fk] create_time: Mapped[timestamp_now] # 创建一个关系字段，这并不是一个数据库字段 classes: Mapped[Class] = relationship(lazy=False, back_populates=&quot;students&quot;) def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;, age:&#123;self.age&#125;, gender:&#123;self.gender&#125;, class_id:&#123;self.class_id&#125;, create_time:&#123;self.create_time&#125;&quot;Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)session = Session()# 通过back_populates实现双向关联student = session.query(Student).filter(Student.gender == &quot;female&quot;).first()print(student)print(student.classes)classes = session.query(Class).filter(Class.name == &quot;Python&quot;).one()print(classes)print(classes.students) 多对多 在用户登录注册的业务中，用户可以分为很多角色，同时用户可能拥有多重角色身份，这就需要使用多对多的关联 在这样的多对多关系中，通常需要一张中间表，因此在实现的时候首先需要定义这张中间表，同时这张中间表不是使用 class 进行的定义，而是使用方法定义的 12345678engine = create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()relation_table = Table( &#x27;user_role&#x27;, Base.Metadata, Column(&#x27;user_id&#x27;, ForeignKey(&#x27;users.id&#x27;), primary_key=True), Column(&#x27;role_id&#x27;, ForeignKey(&#x27;roles.id&#x27;), primary_key=True)) 创建 role 表 12345678910111213141516171819202122232425import sqlalchemyfrom sqlalchemy import Table, create_engine, Column, ForeignKeyfrom sqlalchemy.orm import declarative_base, mapped_column, Mappedfrom typing_extensions import Annotatedengine = create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()int_pk = Annotated[int, mapped_column(primary_key=True)]str_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]relation_table = Table( &#x27;user_role&#x27;, Base.Metadata, Column(&#x27;user_id&#x27;, ForeignKey(&#x27;users.id&#x27;), primary_key=True), Column(&#x27;role_id&#x27;, ForeignKey(&#x27;roles.id&#x27;), primary_key=True))class Role(Base): __tablename__ = &#x27;roles&#x27; id: Mapped[int_pk] name: Mapped[str_name] def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;&quot; 之后创建 user 表，需要创建单向关联字段 使用 relationship()中的secondary=&quot;中间表&quot; 12345678910111213141516171819202122232425262728293031323334353637383940414243from typing import Listimport sqlalchemyfrom sqlalchemy import Table, create_engine, Column, ForeignKeyfrom sqlalchemy.orm import declarative_base, mapped_column, Mapped, relationshipfrom typing_extensions import Annotatedengine = create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()int_pk = Annotated[int, mapped_column(primary_key=True)]str_unique_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]str_pwd = Annotated[str, mapped_column(sqlalchemy.String(64), nullable=False)]relation_table = Table( &#x27;user_role&#x27;, Base.Metadata, Column(&#x27;user_id&#x27;, ForeignKey(&#x27;users.id&#x27;), primary_key=True), Column(&#x27;role_id&#x27;, ForeignKey(&#x27;roles.id&#x27;), primary_key=True))class Role(Base): __tablename__ = &#x27;roles&#x27; id: Mapped[int_pk] role_name: Mapped[str_unique_name] def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;&quot;class User(Base): __tablename__ = &#x27;users&#x27; id: Mapped[int_pk] account: Mapped[str_unique_name] password: Mapped[str_pwd] roles: Mapped[List[&quot;Role&quot;]] = relationship(lazy=False, secondary=relation_table) def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;&quot;Base.Metadata.create_all(engine)Session = sessionmaker(bind=engine) 尝试插入一些数据 12345678910111213141516171819# 添加数据session = Session()role_1 = Role(role_name=&quot;admin&quot;)role_2 = Role(role_name=&quot;user&quot;)role_3 = Role(role_name=&quot;guest&quot;)adminUser = User(account=&quot;Curry&quot;, password=&quot;1234&quot;)adminUser.roles.add(role_1)adminUser.roles.add(role_2)normalUser = User(account=&quot;Jordan&quot;, password=&quot;1234&quot;)normalUser.roles.add(role_2)guestUser = User(account=&quot;Harden&quot;, password=&quot;1234&quot;)guestUser.roles.add(role_3)session.add_all([adminUser, normalUser, guestUser])session.commit() 查询一下数据 1234user_data = session.query(User).all()for item in user_data: print(item) print(item.roles) 至此 单向的关联关系是没问题的，照例实现一下从 role 关联至 user 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# -*- coding:utf-8 -*-# Author: Zacharyfrom typing import Setimport sqlalchemyfrom sqlalchemy import Table, create_engine, Column, ForeignKeyfrom sqlalchemy.orm import declarative_base, mapped_column, Mapped, relationship, sessionmakerfrom typing_extensions import Annotatedengine = create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()int_pk = Annotated[int, mapped_column(primary_key=True)]str_unique_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]str_pwd = Annotated[str, mapped_column(sqlalchemy.String(64), nullable=False)]relation_table = Table( &#x27;user_role&#x27;, Base.metadata, Column(&#x27;user_id&#x27;, ForeignKey(&#x27;users.id&#x27;), primary_key=True), Column(&#x27;role_id&#x27;, ForeignKey(&#x27;roles.id&#x27;), primary_key=True))class Role(Base): __tablename__ = &#x27;roles&#x27; id: Mapped[int_pk] role_name: Mapped[str_unique_name] users: Mapped[Set[&quot;User&quot;]] = relationship(lazy=False, secondary=relation_table, back_populates=&quot;roles&quot;) def __repr__(self): return f&quot;id:&#123;self.id&#125;, role_name:&#123;self.role_name&#125;&quot;class User(Base): __tablename__ = &#x27;users&#x27; id: Mapped[int_pk] account: Mapped[str_unique_name] password: Mapped[str_pwd] roles: Mapped[Set[&quot;Role&quot;]] = relationship(lazy=False, secondary=relation_table, back_populates=&quot;users&quot;) def __repr__(self): return f&quot;id:&#123;self.id&#125;, account:&#123;self.account&#125;, password:&#123;self.password&#125;&quot;Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)# 添加数据session = Session()user_data = session.query(User).all()for item in user_data: print(item) print(item.roles)role_data = session.query(Role).all()for item in role_data: print(item) print(item.users) 一对一 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# -*- coding:utf-8 -*-# Author: Zacharyimport datetimeimport sqlalchemyfrom sqlalchemy import ForeignKeyfrom sqlalchemy.orm import declarative_base, Mapped, mapped_column, relationship, sessionmakerfrom typing_extensions import Annotatedengine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()int_pk = Annotated[int, mapped_column(primary_key=True)]str_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=False, nullable=False)]int_age = Annotated[int, mapped_column(sqlalchemy.SmallInteger, nullable=False)]str_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]date_exp_license = Annotated[ datetime.datetime, mapped_column(sqlalchemy.Date, default=datetime.datetime.now() + datetime.timedelta(days=365))]class Driver(Base): __tablename__ = &#x27;drivers&#x27; id: Mapped[int_pk] name: Mapped[str_name] age: Mapped[int_age] gender: Mapped[str_gender] license_id: Mapped[str] = mapped_column(ForeignKey(&#x27;licenses.id&#x27;), nullable=False) license = relationship(&quot;License&quot;, lazy=False, back_populates=&quot;driver&quot;) def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;, age:&#123;self.age&#125;, gender:&#123;self.gender&#125;, license_id:&#123;self.license_id&#125;&quot;class License(Base): __tablename__ = &#x27;licenses&#x27; id: Mapped[int_pk] l_class: Mapped[str_name] expiration_date: Mapped[date_exp_license] driver = relationship(&quot;Driver&quot;, lazy=False, back_populates=&quot;license&quot;) def __repr__(self): return f&quot;id:&#123;self.id&#125;, l_class:&#123;self.l_class&#125;, expiration_date:&#123;self.expiration_date&#125;&quot;Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)session = Session() 尝试插入数据 12345678910license_1 = License(l_class=&quot;A&quot;)license_2 = License(l_class=&quot;B&quot;)license_3 = License(l_class=&quot;A&quot;)driver_1 = Driver(name=&quot;Tom&quot;, age=18, gender=&quot;male&quot;, license=license_1)driver_2 = Driver(name=&quot;Jerry&quot;, age=20, gender=&quot;female&quot;, license=license_2)driver_3 = Driver(name=&quot;Jack&quot;, age=22, gender=&quot;male&quot;, license=license_3)session.add_all([driver_1, driver_2, driver_3])session.commit() 查询数据 12345678910license_1 = session.query(License).filter(License.l_class == &quot;A&quot;).all()for item in license_1: print(item) print(item.driver)driver = session.query(Driver).all()for item in driver: print(item) print(item.license) print(&quot;=============================&quot;) 更新数据 12345678910# driver id为3 的license_id 清空session.query(Driver).filter(Driver.id == 3).update(&#123;Driver.license_id: None&#125;)session.commit()# 重新赋给driver id=3的license_idlicense_item = session.query(License).filter(License.id == 3).first()driver = session.query(Driver).filter(Driver.id == 3).first()if license_item and driver: driver.license = license_item session.commit() ORM 操作查询这里仍旧以一对多为例，沿用之前的学生 班级表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import datetimefrom typing import Listimport sqlalchemyfrom sqlalchemy import funcfrom sqlalchemy.orm import declarative_base, mapped_column, Mapped, sessionmaker, relationshipfrom typing_extensions import Annotatedengine = sqlalchemy.create_engine(&#x27;mysql://root:980226@localhost:3306/testSql?charset=utf8&#x27;, echo=True)Base = declarative_base()int_pk = Annotated[int, mapped_column(primary_key=True)]str_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]int_age = Annotated[int, mapped_column(nullable=False)]str_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]class_id_fk = Annotated[int, mapped_column(sqlalchemy.ForeignKey(&#x27;classes.id&#x27;), nullable=False)]timestamp_now = Annotated[datetime.datetime, mapped_column(nullable=False, server_default=func.now())]class Class(Base): __tablename__ = &#x27;classes&#x27; id: Mapped[int_pk] name: Mapped[str_name] create_time: Mapped[timestamp_now] # 创建一个关系字段 students: Mapped[List[&quot;Student&quot;]] = relationship(back_populates=&quot;classes&quot;) def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;, create_time:&#123;self.create_time&#125;&quot;class Student(Base): __tablename__ = &#x27;students&#x27; id: Mapped[int_pk] name: Mapped[str_name] age: Mapped[int_age] gender: Mapped[str_gender] class_id: Mapped[class_id_fk] create_time: Mapped[timestamp_now] # 创建一个关系字段，这并不是一个数据库字段 classes: Mapped[Class] = relationship(back_populates=&quot;students&quot;) def __repr__(self): return f&quot;id:&#123;self.id&#125;, name:&#123;self.name&#125;, age:&#123;self.age&#125;, gender:&#123;self.gender&#125;, class_id:&#123;self.class_id&#125;, create_time:&#123;self.create_time&#125;&quot;Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)session = Session() 查询的一些实例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# 查询所有学生信息，以姓名排序query = select(Student).order_by(Student.name)result = session.execute(query)for item in result: print(item)# 查询一个表中的某几个字段 id namequery = select(Student.id, Student.name).select_from(Student)execute_query(query)# 使用join函数做联合查询 默认是inner joinquery = select(Student,Class).join(Student.classes)execute_query(query)query = select(Class, Student).join(Student.classes)execute_query(query)# 查询多个表中的某几个字段 stu.name cls.namequery = select(Student.name, Class.name).join_from(Student, Class)execute_query(query)# 使用outer join函数做联合查询query = select(Student, Class).outerjoin(Class.students)execute_query(query)query = select(Student, Class).select_from(outerjoin(Class, Student))execute_query(query)query = select(Student, Class).outerjoin(Student.classes)execute_query(query)query = select(Student, Class).select_from(outerjoin(Student, Class))execute_query(query)# 使用join函数实现outer joinquery = select(Student, Class).join(Student.classes, isouter=True)execute_query(query)query = select(Class, Student).join(Student.classes, isouter=True)execute_query(query)# where 条件查询query = select(Student).where(Student.age &gt; 18, Student.gender == &#x27;male&#x27;)execute_query(query)query = select(Student).where(and_(Student.age &gt; 18, Student.gender == &#x27;male&#x27;))execute_query(query)obj_stu = session.get(Student, 1) # 可以看看这个源码query = select(Student).where(Student.name == obj_stu.name)execute_query(query)query = select(Student).where(Student.age != obj_stu.age)execute_query(query)query = select(Class).where(Class.students.contains(obj_stu))execute_query(query) 插入 insert()函数插入 12345678910111213141516171819# 使用insert()实现插入# 给classes插入数据cls_1 = &#123;&quot;name&quot;: &quot;Golang&quot;&#125;cls_2 = &#123;&quot;name&quot;: &quot;C++&quot;&#125;cls_list = [cls_1, cls_2]session.execute(insert(Class).values(cls_list))session.commit()# 给students插入数据student_1 = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;gender&quot;: &quot;male&quot;, &quot;class_id&quot;: select(Class.id).where(Class.name == &quot;Golang&quot;)&#125;student_2 = &#123;&quot;name&quot;: &quot;Rose&quot;, &quot;age&quot;: 20, &quot;gender&quot;: &quot;female&quot;, &quot;class_id&quot;: select(Class.id).where(Class.name == &quot;C++&quot;)&#125;student_list = [student_1, student_2]session.execute(insert(Student).values(student_list))session.commit() 更新 update()函数更新 12345678910# 使用update()实现更新# id为3的学生想转到Golang班 id为4的学生想转到C++班update_1 = &#123;&quot;id&quot;: 3, &quot;class_id&quot;: session.execute(select(Class).where(Class.name == &quot;Golang&quot;)).scalar_one().id&#125;update_2 = &#123;&quot;id&quot;: 4, &quot;class_id&quot;: session.execute(select(Class).where(Class.name == &quot;C++&quot;)).scalar_one().id&#125;update_list = [update_1, update_2]session.execute(update(Student), update_list)session.commit() 删除 delete()函数删除 12345# 使用 delete() 实现删除# 删除id在8, 9, 10 的学生session.execute(delete(Student).where(Student.id.in_([8, 9, 10])))session.commit() Session 与事务 Session 默认启用事务 123456with Session(engine) as session: # 事务的开始 ... session.commit()# 在session.commit()之前发生任何异常，都会rollback# 若无异常，提交后会关闭session 自动提交事务 12345678910with Session(engine) as session: with session.begin(): ... # 到这块无异常，正常自动提交# 自动关闭sessionwith Session(engine) as session, session.begin(): ... # 到这块无异常，正常自动提交# 自动关闭session 更新: 2024-02-21 20:01:12原文: https://www.yuque.com/zacharyblock/cx2om6/uigosxw6s0n5b7k8","categories":[{"name":"Python MySQL","slug":"Python-MySQL","permalink":"https://blockzachary.github.io/categories/Python-MySQL/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"MySQL","slug":"MySQL","permalink":"https://blockzachary.github.io/tags/MySQL/"},{"name":"SQLAlchemy","slug":"SQLAlchemy","permalink":"https://blockzachary.github.io/tags/SQLAlchemy/"}]},{"title":"Python - 异步IO","slug":"Python进阶/异步IO","date":"2023-01-14T02:50:00.000Z","updated":"2023-01-14T02:50:00.000Z","comments":true,"path":"blog/2601309225/","permalink":"https://blockzachary.github.io/blog/2601309225/","excerpt":"","text":"异步 IO协程类似于小学时候的一个计算任务，协程就类似于同时做多件家务，烧开水的同时 启动了洗衣机 之后拖地 而不是烧开水一直等，然后拖地，然后洗衣机等着 asyncio 模块该模块通过一个线程去执行并发任务 async 需要创建一个协程的时候，可以使用 async 关键字将一个函数声明为协程 协程的协有协助之意，协程就是通过一个线程去执行并发，一个任务就是一个协程，也可以是多个任务通过一个协程调用多次来实现 协程的核心是通过事件循环实现的 12async def func(): pass asyncio.run() 启动一个协程 1234567async def multi(num1: int, num2: int): res = num1 * num2 print(f&#x27;&#123;num1&#125; * &#123;num2&#125; = &#123;res&#125;&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(multi(3,7)) await 协程中调用另外一个协程 1234567891011async def multi(num1: int, num2: int): res = num1 * num2 print(f&#x27;&#123;num1&#125; * &#123;num2&#125; = &#123;res&#125;&#x27;)async def multi_api(): await multi(1, 2)if __name__ == &#x27;__main__&#x27;: asyncio.run(multi_api()) 创建任务 asyncio.create_task 先来一个没有实现并发的调用，由时间上的统计来看，是一个串行的实现 1234567891011121314151617181920212223242526272829async def process(name: str, num1: int) -&gt; None: print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;)async def process_api(): start = time.perf_counter() await process(&#x27;task1&#x27;, 1) await process(&#x27;task2&#x27;, 2) await process(&#x27;task3&#x27;, 3) print(f&#x27;finished in &#123;time.perf_counter() - start:.2f&#125; seconds&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api())# task1 started# task1 processing# task1 finished# task2 started# task2 processing# task2 finished# task3 started# task3 processing# task3 finished# finished in 6.01 seconds - 通过`asyncio.create_task`实现并发 * create_task返回task对象 * 先不用await * 再加上await 可以看出时间上运行速度的差距 12345678910111213141516171819202122async def process(name: str, num1: int) -&gt; None: print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;)async def process_api(): start = time.perf_counter() task_1 = asyncio.create_task(process(&#x27;task1&#x27;, 1)) task_2 = asyncio.create_task(process(&#x27;task2&#x27;, 2)) task_3 = asyncio.create_task(process(&#x27;task3&#x27;, 3)) # await task_1 # await task_2 # await task_3 print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) 取消任务 Task.done()用于判断任务是否完成 Task.cancel()用于取消一个未完成的任务 12345678910111213141516171819202122232425async def process(name: str, num1: int) -&gt; None: print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;)async def process_api(): start = time.perf_counter() task_1 = asyncio.create_task(process(&#x27;task1&#x27;, 1)) task_2 = asyncio.create_task(process(&#x27;task2&#x27;, 2)) task_3 = asyncio.create_task(process(&#x27;task3&#x27;, 3)) await task_1 await task_2 if not task_3.done(): task_3.cancel() else: await task_3 print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) 超时取消任务 asyncio.wait_for(Task, timeout=time) 用于设定多久未完成任务，取消任务 12345678910111213141516171819202122async def process(name: str, num1: int) -&gt; None: print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;)async def process_api(): start = time.perf_counter() task_1 = asyncio.create_task(process(&#x27;task1&#x27;, 3)) try: await asyncio.wait_for(task_1, 1) except asyncio.TimeoutError: print(&#x27;task1 timeout&#x27;) else: await task_1 print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) asyncio.shield(Task)给任务加盾，即使超时了也不会停止任务 123456789101112131415161718192021async def process(name: str, num1: int) -&gt; None: print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;)async def process_api(): start = time.perf_counter() task_1 = asyncio.create_task(process(&#x27;task1&#x27;, 3)) try: await asyncio.wait_for(asyncio.shield(task_1), 1) except asyncio.TimeoutError: print(&#x27;task1 timeout&#x27;) await task_1 print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) 等待多个任务 asyncio.gather(Task1, Task2,...)可以直接并行多个任务等待结束 123456789101112131415161718192021async def process(name: str, num1: int): print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;) return f&quot;&#123;name&#125; finished&quot;async def process_api(): start = time.perf_counter() task_1 = process(&#x27;task_1&#x27;, 1) task_2 = process(&#x27;task_2&#x27;, 2) task_3 = process(&#x27;task_3&#x27;, 3) result = await asyncio.gather(task_1, task_2, task_3) print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;) print(result)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) 协程异常 return_exceptions=True 在等待多个任务时，若有异常任务会导致整体主线程的中断，可以使用该参数保持其他任务的正常运行 123456789101112131415161718192021222324252627async def process(name: str, num1: int): print(f&#x27;&#123;name&#125; started&#x27;) await asyncio.sleep(1) print(f&#x27;&#123;name&#125; processing&#x27;) await asyncio.sleep(num1 - 1) print(f&#x27;&#123;name&#125; finished&#x27;) return f&quot;&#123;name&#125; finished&quot;async def exception_process(): raise Exception(&#x27;error&#x27;)async def process_api(): start = time.perf_counter() task_1 = process(&#x27;task_1&#x27;, 1) task_2 = process(&#x27;task_2&#x27;, 2) task_error = exception_process() result = await asyncio.gather(task_1, task_2, task_error, return_exceptions=True) print(f&#x27;finished in &#123;time.perf_counter() - start:.10f&#125; seconds&#x27;) print(result)if __name__ == &#x27;__main__&#x27;: asyncio.run(process_api()) 更新: 2024-05-16 13:20:45原文: https://www.yuque.com/zacharyblock/cx2om6/oau1f4oo9g509hgz","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"https://blockzachary.github.io/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 并发","slug":"Python进阶/并发","date":"2023-01-11T23:13:00.000Z","updated":"2023-01-11T23:13:00.000Z","comments":true,"path":"blog/2636183998/","permalink":"https://blockzachary.github.io/blog/2636183998/","excerpt":"","text":"并发线程进程与线程 一个进程是操作系统中运行的一个任务 进程拥有独立的 CPU 和内存资源 多进程是支持并发的 一个线程是一个进程下运行的一个任务 线程之间共享进程的 CPU 和内存资源 创建线程 使用threading模块中的Thread类创建线程 start()方法：启动线程 join()方法： 等待线程结束 123456789101112131415def task(): for i in range(5): print(i)thread_1 = Thread(target=task)thread_2 = Thread(target=task)thread_1.start()thread_2.start()thread_1.join()print(&quot;thread_1 end&quot;)thread_2.join()print(“thread_2 end”) - 带参数的方法调用使用`args`传入参数 123456789def task(num: int): for i in range(num): print(i)thread_1 = Thread(target=task, args = (5,))thread_2 = Thread(target=task, args = (10,))thread_1.start()thread_2.start() 通过继承Thread类来创建线程类 setName()方法可以给线程设置名字 1234567891011121314151617class MyThread(Thread): def __init__(self, name:str, num: int): super().__init__() self.setName(name) self.num = num def run(self) -&gt; None: for i in range(self.num): print(f&quot;&#123;self.getName()&#125;: &#123;i&#125;&quot;) time.sleep(1)thread_1 = MyThread(&quot;A&quot;, 5)thread_2 = MyThread(&quot;B&quot;, 10)thread_1.start()thread_2.start() 守护线程 当主线程结束时，守护线程自动结束 主线程中有非守护线程时，会等待非守护线程执行完才结束 守护线程一般用于日志等 非关键线程 123456789101112131415161718192021222324# 实现方法1def task(num: int): for i in range(num): print(i)thread_1 = Thread(target=task,args=(5,), daemon=True)thread_1.start()# 实现方法2class MyThread(Thread): def __init__(self, name:str, num: int): super().__init__() self.setName(name) self.setDaemon(True) self.num = num def run(self) -&gt; None: for i in range(self.num): print(f&quot;&#123;self.getName()&#125;: &#123;i&#125;&quot;) time.sleep(1)thread_2 = MyThread(&quot;A&quot;, 5)thread_2.start() 线程安全队列queue 模块中 Queue 类提供了线程安全队列 queue.put(item, block=True) block 为 True 当 queue 满了的时候线程会等待，直到有空间 put block 为 False 当 queue 满了的时候会抛出异常 queue.put(item, timeout=5) timeout 当 queue 满了的时候等待 timeout 时长，若还是满着抛出异常，若空闲了则 put queue.get(block=True) queue.get(timeout=5) queue.qsize() queue.empty() queue.full() 通过一个生产者、消费者模型进行演示 123456789101112131415161718192021222324252627282930313233343536373839class Producer(Thread): def __init__(self, name:str, num: int, queue: Queue): super().__init__() self.setName(name) self.num = num self.queue = queue def run(self) -&gt; None: for i in range(self.num): item = f&quot;&#123;self.getName()&#125;: &#123;i&#125;&quot; queue.put(item, block=True)class Consumer(Thread): def __init__(self, name: str, queue: Queue): super().__init__() self.setName(name) self.queue = queue self.setDaemon(True) def run(self) -&gt; None: while True: item = self.queue.get(block=True) print(f&quot;&#123;self.getName()&#125;-&gt;&#123;item&#125;\\n&quot;, end=&quot;&quot;)queue = Queue(3)threads = []threads.append(Producer(&quot;P1&quot;, 5, queue))threads.append(Producer(&quot;P2&quot;, 5, queue))threads.append(Producer(&quot;P3&quot;, 5, queue))threads.append(Consumer(&quot;C1&quot;, queue))threads.append(Consumer(&quot;C1&quot;, queue))for thread in threads: thread.start() 线程锁多个线程同一时刻访问同一资源时，会出现竞争的现象，容易造成数据的丢失、覆盖等问题 12345678910111213def task(name: str): print(f&quot;&#123;name&#125;: 1\\n&quot;, end=&quot;&quot;) print(f&quot;&#123;name&#125;: 2\\n&quot;, end=&quot;&quot;) print(f&quot;&#123;name&#125;: 3\\n&quot;, end=&quot;&quot;)thread_1 = Thread(target=task, args=(&quot;A&quot;,))thread_2 = Thread(target=task, args=(&quot;B&quot;,))thread_3 = Thread(target=task, args=(&quot;C&quot;,))threads = [thread_1, thread_2, thread_3]for thread in threads: thread.start() 可以使用锁来解决这一问题 Lock lock.acquire()获取锁，当一个锁对象中的锁被获取了，另一个需要获取的需要等待 lock.release()释放锁 12345678910111213141516171819lock = Lock()def task(name: str): global lock lock.acquire() print(f&quot;&#123;name&#125;: 1\\n&quot;, end=&quot;&quot;) print(f&quot;&#123;name&#125;: 2\\n&quot;, end=&quot;&quot;) print(f&quot;&#123;name&#125;: 3\\n&quot;, end=&quot;&quot;) lock.release()thread_1 = Thread(target=task, args=(&quot;A&quot;,))thread_2 = Thread(target=task, args=(&quot;B&quot;,))thread_3 = Thread(target=task, args=(&quot;C&quot;,))threads = [thread_1, thread_2, thread_3]for thread in threads: thread.start() Condition acquire() release() wait() 等待锁的释放 notify_all() 通知其他等待锁的线程 自己实现一个线程安全队列 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465class MySafeQueue(): def __init__(self, size: int): self.__queue = [] self.size = size self.__lock = Condition() def put(self, item): self.__lock.acquire() while len(self.__queue) &gt;= self.size: self.__lock.wait() self.__queue.append(item) self.__lock.notify_all() self.__lock.release() def get(self): self.__lock.acquire() while len(self.__queue) == 0: self.__lock.wait() item = self.__queue.pop(0) self.__lock.notify_all() self.__lock.release() return itemclass Producer(Thread): def __init__(self, name: str, num: int, queue: MySafeQueue): super().__init__() self.setName(name) self.num = num self.queue = queue def run(self) -&gt; None: for i in range(self.num): item = f&quot;&#123;self.getName()&#125;: &#123;i&#125;&quot; queue.put(item)class Consumer(Thread): def __init__(self, name: str, queue: MySafeQueue): super().__init__() self.setName(name) self.queue = queue self.setDaemon(True) def run(self) -&gt; None: while True: item = self.queue.get() print(f&quot;&#123;self.getName()&#125;-&gt;&#123;item&#125;\\n&quot;, end=&quot;&quot;)queue = MySafeQueue(3)threads = []threads.append(Producer(&quot;P1&quot;, 5, queue))threads.append(Producer(&quot;P2&quot;, 5, queue))threads.append(Producer(&quot;P3&quot;, 5, queue))threads.append(Consumer(&quot;C1&quot;, queue))threads.append(Consumer(&quot;C1&quot;, queue))for thread in threads: thread.start() 锁支持上下文管理器，因此可以改成 123456789101112131415161718192021class MySafeQueue(): def __init__(self, size: int): self.__queue = [] self.size = size self.__lock = Condition() def put(self, item): with self.__lock: while len(self.__queue) &gt;= self.size: self.__lock.wait() self.__queue.append(item) self.__lock.notify_all() def get(self): with self.__lock: while len(self.__queue) == 0: self.__lock.wait() item = self.__queue.pop(0) self.__lock.notify_all() return item 线程池 线程的创建和销毁昂贵 频繁操作（创建与销毁）造成性能低 线程池的出现使得便于对 Python 的线程进行管理、提高性能 ThreadPoolExecutor submit()告诉线程池执行者，启动一个任务，返回值为 future 对象，包含执行结果或者异常 result() exception() map()执行多个任务 shutdown()关闭线程池 12345678910111213141516def task(name: str): print(f&#x27;&#123;name&#125; started&#x27;) time.sleep(1) print(f&#x27;&#123;name&#125; processed&#x27;) return f&quot;&#123;name&#125; finished&quot;with ThreadPoolExecutor() as executor: result_1 = executor.submit(task, &#x27;task1&#x27;) result_2 = executor.submit(task, &#x27;task2&#x27;) print(result_1.result()) print(result_2.result())with ThreadPoolExecutor() as executor: result_1 = executor.map(task, [&#x27;task3&#x27;, &#x27;task4&#x27;]) print(list(result_1)) 多进程 multiprocessing模块用于提供多进程的实现 multiprocessing.Process用于创建进程 start()用于启动进程 join()用于等待进程结束 12345678910111213141516171819202122232425262728def task(name: str, num: int): print(f&#x27;&#123;name&#125;:&#123;num&#125;-&gt;start process\\n&#x27;, end=&quot;&quot;) res = 0 for i in range(num): res += i print(f&#x27;&#123;name&#125;:&#123;num&#125;-&gt;end process, result:&#123;res&#125;\\n&#x27;, end=&quot;&quot;)def process_1(): task_process = multiprocessing.Process(target=task, args=(&quot;task1&quot;, 10)) task_process.start() task_process.join() print(&quot;process_1 end&quot;)def process_2(): task_process_args = [(&quot;task2&quot;, 10), (&quot;task3&quot;, 10), (&quot;task4&quot;, 10)] task_processes = [multiprocessing.Process(target=task, args=arg) for arg in task_process_args] for task_process in task_processes: task_process.start() for task_process in task_processes: task_process.join() print(&quot;process_2 end&quot;)if __name__ == &#x27;__main__&#x27;: process_1() process_2() 可以使用ps -ef | grep python来查看是否有这么多进程 进程池 进程的创建与销毁同样是昂贵的 频繁地操作（创建与销毁）对性能影响很大 ProcessPoolExecutor submit()告诉进程池执行者，启动一个任务，返回值为 future 对象，包含执行结果或者异常 result() exception() map()执行多个进程 shutdown()关闭进程池 1234567891011def task(name: str): print(f&#x27;&#123;name&#125; started&#x27;) time.sleep(1) print(f&#x27;&#123;name&#125; processed&#x27;) return f&quot;&#123;name&#125; finished&quot;if __name__ == &#x27;__main__&#x27;: with ProcessPoolExecutor() as executor: result_1 = executor.map(task, [&#x27;task3&#x27;, &#x27;task4&#x27;]) print(list(result_1)) 更新: 2024-05-16 13:18:58原文: https://www.yuque.com/zacharyblock/cx2om6/man8qrk3tugq2v5t","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"https://blockzachary.github.io/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 正则表达式","slug":"Python进阶/正则表达式","date":"2023-01-11T22:39:00.000Z","updated":"2023-01-11T22:39:00.000Z","comments":true,"path":"blog/3023538148/","permalink":"https://blockzachary.github.io/blog/3023538148/","excerpt":"","text":"正则表达式 正则是用于进行字符串内容的验证、匹配或者搜索 是一个相对独立的表达方式 需要引入re模块 import re 常用的几种 re 方法 re.search() 1234pattern = r&quot;\\d&#123;4&#125;&quot;text = &quot;I was born in 1998&quot;result = re.search(pattern, text)print(result) re.match() 1234pattern = r&quot;\\d&#123;4&#125;&quot;text = &quot;1998 year, I was born&quot;result = re.match(pattern, text)print(result) re.fullmatch() 1234pattern = r&quot;\\d&#123;4&#125;&quot;text = &quot;1998&quot;result = re.fullmatch(pattern, text)print(result) re.findall() 1234pattern = r&quot;\\d&#123;4&#125;&quot;text = &quot;1998 2 22, I was born. My sister was born in 2006&quot;result = re.findall(pattern, text)print(result) re.finditer() 12345pattern = r&quot;\\d&#123;4&#125;&quot;text = &quot;1998 2 22, I was born. My sister was born in 2006&quot;result = re.finditer(pattern, text)for res in result: print(res) re.compile() 可以直接生成一个 re 对象，直接调用相应方法对字符串进行校验 12341998 2 22, I was born. My sister was born in 2006pattern_str = r&quot;\\d&#123;4&#125;&quot;pattern_obj = re.compile(pattern_str)print(pattern_obj.search(&quot;I was born in 1998&quot;))print(pattern_obj.findall(&quot;1998 2 22, I was born. My sister was born in 2006&quot;)) 更新: 2024-01-11 23:12:10原文: https://www.yuque.com/zacharyblock/cx2om6/qegza164lpgh11hq","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"https://blockzachary.github.io/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - dataclass-数据类","slug":"Python进阶/dataclass-数据类","date":"2023-01-10T19:49:00.000Z","updated":"2023-01-10T19:49:00.000Z","comments":true,"path":"blog/267352415/","permalink":"https://blockzachary.github.io/blog/267352415/","excerpt":"","text":"dataclass-数据类在通常我们设计一个类时，需要初始化一些属性，如： 1234class Car: def __init__(self, origin, auto): self.origin = origin self.auto = auto 当有了 dataclass 后就可以使用装饰器@dataclass来实现 1234567891011@dataclassclass Car: origin: str auto: boolporsche = Car(&quot;Germany&quot;, True)print(porsche)benz = Car(&quot;Germany&quot;, True)print(benz)# eq方法也给我们提供了print(porsche == benz) dataclass 给属性提供缺省值 1234567@dataclassclass Car: origin: str auto: bool = Trueporsche = Car(&quot;Germany&quot;)print(porsche) 创建一个不可变对象 1234567@dataclass(frozen=True)class Car: origin: str auto: boolporsche = Car(&quot;Germany&quot;, True)porsche.auto = False # 报错 field()定制属性，可以看一下 field 的源代码 1234567891011@dataclass(frozen=True)class Car: origin: str auto: bool = True age: int = field(default=5, init=False, repr=False) def __post_init__(self): self.auto = self.age &lt; 5porsche = Car(&quot;Germany&quot;, False)print(porsche) 排序，order=True默认按照第一个属性进行排序， 12345678910@dataclass(order=True)class Car: origin: str auto: boolporsche = Car(&quot;Germany&quot;, True)benz = Car(&quot;Germany&quot;, False)cars = [porsche, benz]sorted(cars)print(cars) 当想依照另一个属性进行排序时，有两种方法 在类中创建一个不参与 init 与 repr 的变量，并放到第一个参数位置 123456789101112131415@dataclass(order=True)class Car: sortIndex: int = field(init=False, repr=False) origin: str age: int auto: bool = True def __post_init__(self): self.sortIndex = self.ageporsche = Car(&quot;Germany&quot;, 4, True)benz = Car(&quot;Germany&quot;, 5, False)cars = [porsche, benz]cars = sorted(cars)print(cars) - 另一个方法就是直接使用`sort()`方法中的`key=operator.attrgetter(&#39;属性名&#39;)`来实现按照哪一个属性进行排序`建议使用这个` 1234567891011@dataclass()class Car: origin: str age: int auto: bool = Trueporsche = Car(&quot;Germany&quot;, 4, True)benz = Car(&quot;Germany&quot;, 5, False)cars = [porsche, benz]cars.sort(key=operator.attrgetter(&#x27;age&#x27;))print(cars) 更新: 2024-01-10 21:24:23原文: https://www.yuque.com/zacharyblock/cx2om6/ehmlkmargqm4bti5","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"https://blockzachary.github.io/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - metaclass-元类","slug":"Python进阶/metaclass-元类","date":"2023-01-09T21:20:00.000Z","updated":"2023-01-09T21:20:00.000Z","comments":true,"path":"blog/1848519379/","permalink":"https://blockzachary.github.io/blog/1848519379/","excerpt":"","text":"metaclass-元类 metaclass 就是一个用来创建其他 class 的类 type 类就是所有 class 默认的 metaclass 可以在定义类时，声明 metaclass 1234567891011class Car(type): @staticmethod def __new__(mcs, *args): class_ = super().__new__(mcs, *args) class_.auto = True return class_class Porsche(object, metaclass=Car): passprint(Porsche.auto) 依据传入的关键字参数，对属性进行扩展 1234567891011121314class Car(type): @staticmethod def __new__(mcs, *args， **kwargs): class_ = super().__new__(mcs, *args) if kwargs: for key, value in kwargs.items(): setattr(class_, key, value) return class_class Porsche(object, metaclass=Car, auto = True, origin = &quot;Germany&quot;): passprint(Porsche.auto)print(Porsche.origin) 在元类中获取使用了元类的类的属性 12345678910111213141516171819202122232425262728293031323334353637383940414243class PropUtil: def __init__(self,attr): self._attr = f&quot;_&#123;attr&#125;&quot; # 避免递归调用 def get(self,obj): if not hasattr(obj, self._attr): return None return getattr(obj, self._attr) def set(self,obj,value): setattr(obj,self._attr, value)class Car(type): @staticmethod def __new__(mcs, *args， **kwargs): class_ = super().__new__(mcs, *args) for attr in class_.attrs: prop = PropUtil(attr) pObj = property(fget=prop.get, fset=prop.set) setattr(class_, attr, pObj) return class_class Porsche(object, metaclass=Car): attrs = [&quot;origin&quot;, &quot;auto&quot;]panamera = Porsche()print(panamera.auto)panamera.auto = Trueprint(panamera.auto)# 使用装饰器实现def car(cls): return Car(cls.__name__, cls.__bases__, dict(cls.__dict__))@carclass Benz: attrs = [&quot;origin&quot;, &quot;auto&quot;]benz = Benz()print(benz.auto)print(benz.origin)benz.auto = Falseprint(benz.auto) 更新: 2024-01-10 00:47:48原文: https://www.yuque.com/zacharyblock/cx2om6/ed59q8lf72v6ibfn","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"https://blockzachary.github.io/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - type类","slug":"Python进阶/type类","date":"2023-01-09T20:27:00.000Z","updated":"2023-01-09T20:27:00.000Z","comments":true,"path":"blog/2733526461/","permalink":"https://blockzachary.github.io/blog/2733526461/","excerpt":"","text":"type 类 任何 class 在内存中 就是一个 type()类的对象 123456class Person: def hello(self): print(&quot;hello world!&quot;)print(type(Person))print(isinstance(Person,type)) 这种一般是在写源码时还不知道需求，不知道需要具体创建什么样的类，从而在运行时动态创建类出来 可以使用 type()来创建其他 class -&gt; type(class_name, parents, class_dict) 可以使用 type()来动态创建 class 123456789101112class_content = &quot;&quot;&quot;def hello(self): print(&quot;hello myclass...&quot;)&quot;&quot;&quot;class_dict = &#123;&#125;exec(class_content, globals(), class_dict)type(&quot;myClass&quot;, (object,), class_dict)mc = myClass()mc.hello() 更新: 2024-01-09 21:20:07原文: https://www.yuque.com/zacharyblock/cx2om6/qvpca56gofn7sipm","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"https://blockzachary.github.io/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 装饰器","slug":"Python进阶/装饰器","date":"2023-01-08T12:45:00.000Z","updated":"2023-01-08T12:45:00.000Z","comments":true,"path":"blog/2025075349/","permalink":"https://blockzachary.github.io/blog/2025075349/","excerpt":"","text":"装饰器装饰器 decorator在不改变原有函数代码，且保持原函数调用方法不变的情况下，给原函数增加新的功能（或者给类增加属性和方法） 装饰器定义与原型 核心思想 用一个函数（或者类）去装饰一个旧函数（或者类），造出一个新函数（或者新类） 语法规则 在原有的函数上加上@符号，装饰器会把下面的函数当做参数传递到装饰器中，@符又被称为语法糖 应用场景 引入日志，函数执行时间的统计，执行函数前的准备工作，执行函数后的处理工作，权限校验，缓存等场景中 123456789101112131415161718192021222324252627282930313233# 装饰器的原型，利用闭包实现def outer(f): def inner(): print(&#x27;这是inner函数的语句1&#x27;) f() print(&#x27;这是inner函数的语句2&#x27;) return innerdef demo(): print(&#x27;这是demo函数的语句&#x27;)obj = outer(demo)obj()# 这是inner函数的语句1# 这是demo函数的语句# 这是inner函数的语句2print()# 改为装饰器的定义# 此处等同于 demo2=outer(demo2)@outerdef demo2(): print(&#x27;这是使用装饰器的demo&#x27;)demo2()# 这是inner函数的语句1# 这是将要使用装饰器的demo# 这是inner函数的语句2 统计函数执行时间12345678910111213141516171819202122232425import timedef cal_time(f): def inner(): time1 = time.perf_counter() f() time2 = time.perf_counter() elapsed = time2 - time1 print(f&#x27;函数运行了&#123;elapsed&#125;s&#x27;) return elapsed return inner@cal_timedef func(): for i in range(5): time.sleep(0.1) print(&#x27;func运行结束&#x27;)func()# func运行结束# 函数运行了0.5152184049999999s @wraps1234567891011121314151617181920import timedef cal_time(f): @wraps(f) def inner(): time1 = time.perf_counter() f() time2 = time.perf_counter() print(f&#x27;函数运行了&#123;time2 - time1&#125;s&#x27;) return inner@cal_timedef func(): for i in range(5): time.sleep(0.1) print(&#x27;func运行结束&#x27;)print(func)print(func.__name__) 装饰器的嵌套1234567891011121314151617181920212223242526272829303132# 装饰器的嵌套def outer1(func): def inner1(): print(&#x27;装饰器1————1&#x27;) func() print(&#x27;装饰器1————2&#x27;) return inner1def outer2(func): def inner2(): print(&#x27;装饰器2————3&#x27;) func() print(&#x27;装饰器2————4&#x27;) return inner2@outer2@outer1def demo(): print(&#x27;这是demo函数————5&#x27;)demo()# 装饰器2————3# 装饰器1————1# 这是demo函数————5# 装饰器1————2# 装饰器2————4 装饰带有参数的函数12345678910111213141516def outer(func): def inner(name): print(&#x27;关于谁最美丽这件事&#x27;) func(name) return inner@outerdef love(name): print(f&#x27;&#123;name&#125;女士最美丽&#x27;)love(&#x27;duandaun&#x27;)# 关于谁最美丽这件事# duandaun女士最美丽 12345678910111213141516171819202122import timedef cal_time(f): def inner(li): t1 = time.perf_counter() f(li) t2 = time.perf_counter() print(f&#x27;函数&#123;f&#125;执行了&#123;t2-t1&#125;s&#x27;) return inner@cal_timedef sort_fun(li): for i in range(len(li)-1): for j in range(len(li)-1-i): if li[j] &gt; li[j+1]: li[j],li[j+1] = li[j+1],li[j] return lili = [5,4,3,2,1]sort_fun(li)print(li) 装饰带有多参数的函数1234567891011121314151617181920def outer(func): def inner(who, name, *args, **kwargs): print(f&#x27;&#123;name&#125;回来啦&#x27;) func(who, name, *args, **kwargs) return inner@outerdef date(who, name, *args, **kwargs): print(f&#x27;&#123;who&#125;今天和&#123;name&#125;出门约会啦&#x27;) print(f&#x27;我们吃了&#123;args[0]&#125;&#x27;) print(f&#x27;还一起看了电影&#123;kwargs&#125;&#x27;)date(&#x27;huanghuang&#x27;, &#x27;duandaun&#x27;, &#x27;烤肉&#x27;, movie=&#x27;笨小孩&#x27;)# duandaun回来啦# huanghuang今天和duandaun出门约会啦# 我们吃了烤肉# 还一起看了电影&#123;&#x27;movie&#x27;: &#x27;笨小孩&#x27;&#125; 带有参数的装饰器123456789101112131415161718192021222324252627# 如果你的装饰器需要有参数，那么给当前的装饰器套一个壳，用于接收装饰器的参数def extend_m(var): def outer(func): def inner1(name): print(f&#x27;今天和&#123;name&#125;一起吃烤肉&#x27;) func(name) def inner2(name): print(f&#x27;今天和&#123;name&#125;一起吃火锅&#x27;) func(name) if var == &#x27;烤肉&#x27;: return inner1 else: return inner2 return outer@extend_m(&#x27;烤肉&#x27;)def date(name): print(f&#x27;和&#123;name&#125;约会啦，很开心!&#x27;)date(&#x27;duanduan&#x27;)# 今天和duanduan一起吃烤肉# 和duanduan约会啦，很开心! 类装饰器修饰函数12345678910111213141516171819202122232425262728293031323334353637383940414243# 类装饰器装饰函数class Outer(): # 魔术方法：当把该类的对象当做函数调用时，自动触发obj() def __call__(self, func): self.func = func return self.inner def inner(self, who): print(f&#x27;和&#123;who&#125;一起看电影啦&#x27;) self.func(who) print(&#x27;约会吃烤肉啦哇&#x27;)# 注意这里应该是Outer()# Outer() ===&gt; obj, @obj ===&gt;obj(date) , call （date）===&gt; inner()@Outer()def date(who): print(f&#x27;今天和&#123;who&#125;约会啦&#x27;)date(&#x27;duanduan&#x27;)# 和duanduan一起看电影啦# 今天和duanduan约会啦# 约会吃烤肉啦哇class Outer: def __init__(self,func): self.func = func def __call__(self,*args, **kwargs): print(&quot;今天出门啦&quot;) result = self.func(*args, **kwargs) print(&quot;今天结束啦&quot;) return result@Outerdef date(who): print(f&quot;今天和&#123;who&#125;出门约会啦&quot;) print(&quot;出门看电影、吃烤肉啦&quot;) return successprint(date(&quot;duanduan&quot;)) 带有参数的类装饰器1234567891011121314151617181920class Outer: def __init__(self, name): self.name = name def __call__(self,func): def inner(*args, **kwargs): print(&quot;今天出门啦&quot;) print(f&quot;和&#123;self.name&#125;出门约会啦&quot;) result = func(*args, **kwargs) print(&quot;今天结束啦&quot;) return result return inner@Outer(&quot;duanduan&quot;)def date(place:str): print(f&quot;今天去&#123;place&#125;&quot;) print(&quot;出门看电影、吃烤肉啦&quot;) return successprint(date(&quot;北京&quot;)) 用类方法装饰函数1234567891011121314151617class Outer(): def newinner(func): Outer.func = func # 把传递进来的函数定义为类方法 return Outer.inner # 同时返回一个新的类方法 def inner(who): print(f&#x27;和&#123;who&#125;一起看电影啦&#x27;) Outer.func(who) print(f&#x27;约会吃烤肉啦哇&#x27;)@Outer.newinner # Outer.newinner(date) ===&gt; Outer.innerdef date(who): print(f&#x27;今天和&#123;who&#125;约会啦&#x27;)date(&#x27;duanduan&#x27;) 使用函数装饰器装饰类123456789101112131415161718192021def extend_c(cls): def func2(): print(&#x27;在装饰器中扩展的新方法func2&#x27;) cls.func2 = func2 # 将刚才定义的方法赋值给类 cls.name = &#x27;在装饰器中追加的新属性&#x27; # 返回时，把追加类新成员的类返回 return cls@extend_c # extend_c(Demo) ===&gt; cls ===&gt; Democlass Demo(): # 定义一个类方法 def func(): print(&#x27;Demo类中的func方法&#x27;)Demo.func() # Demo类中的func方法Demo.func2() # 在装饰器中扩展的新方法func2print(Demo.name) # 在装饰器中追加的新属性 使用类装饰器装饰类123456789101112131415161718192021222324252627class Extend_c(): def __call__(self, cls): self.cls = cls return self.newfunc def newfunc(self): self.cls.name = &#x27;在类装饰器中追加的新属性&#x27; self.cls.func2 = self.func2 # 返回 return self.cls() def func2(self): print(&#x27;在类装饰器中追加的新方法 func2&#x27;)@Extend_c() # Extend_c() ===&gt; obj ===&gt; @obj(Demo) ===&gt; __call__(Demo) ===&gt; newfunc()class Demo(): # 定义一个普通的方法 def func(self): print(&#x27;Demo类中的一个普通的方法&#x27;)obj = Demo()obj.func() # Demo类中的一个普通的方法obj.func2() # 在类装饰器中追加的新方法 func2print(obj.name) # 在类装饰器中追加的新属性print(obj) # &lt;__main__.Demo object at 0x10e77ddd0&gt; 更新: 2024-05-16 12:24:07原文: https://www.yuque.com/zacharyblock/cx2om6/fas3gy4akb8thh3c","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"https://blockzachary.github.io/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 上下文管理器","slug":"Python进阶/上下文管理器","date":"2023-01-08T12:44:00.000Z","updated":"2023-01-08T12:44:00.000Z","comments":true,"path":"blog/4030205442/","permalink":"https://blockzachary.github.io/blog/4030205442/","excerpt":"","text":"上下文管理器什么是上下文管理器 context manager 是一个对象 定义了运行时的上下文 使用with语句来执行 格式： 1234with context as ct: # 对上下文对象ct的使用# 上下文对象已经被清除 文件的读写 12345678# 不用上下文管理器fileObj = open(&quot;file.txt&quot;,&quot;w&quot;)fileObj.write(&quot;This is my file&quot;)fileObj.close()# 使用上下文管理器with open(&quot;file.txt&quot;,&quot;w&quot;) as fileObj: fileObj.write(&quot;This is my file&quot;) 使用with语句，会在代码块结束时，自动帮我们关闭文件，无需手动触发 close()方法 在with语句，开始前会触发__enter__(self) 在with语句结束后会触发__exit__(self, exc_type, exc_val, exc_tb) as后面的对象 实际是在调用完__enter__后获取到的返回值 使用上下文管理器实现一个耗时计算函数 123456789101112131415161718192021222324252627# 不使用上下文管理nums = [i for i in range(10000)]random.shuffle(nums)start = time.perf_counter()sorted(nums)end = time.perf_counter()elapsed = end - startprint(elapsed)# 使用上下文管理# 创建一个Timer 上下文管理类class Timer: def __init__(self): self.elapsed = 0 def __enter__(self): self.start = time.perf_counter() return self def __exit__(self, exc_type, exc_val, exc_tb): self.end = time.perf_counter() self.elapsed = self.end - self.startwith Timer() as timer: sorted(nums)print(timer.elapsed) 应用场景： 文件的开-关 加锁-释放 启动-停止 更新: 2024-01-09 02:16:57原文: https://www.yuque.com/zacharyblock/cx2om6/ofmfwtiq1h6wysmp","categories":[{"name":"Python进阶","slug":"Python进阶","permalink":"https://blockzachary.github.io/categories/Python%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"PyMySQL","slug":"PythonMySQL/PyMySQL","date":"2022-12-31T17:53:00.000Z","updated":"2022-12-31T17:53:00.000Z","comments":true,"path":"blog/2532370537/","permalink":"https://blockzachary.github.io/blog/2532370537/","excerpt":"","text":"PyMySQLPython 操作 MySQL使用 pymysql 进行 python 与 mysql 的操作 123456789101112131415161718192021# -*- coding:utf-8 -*-# Author: Zacharyimport pymysqlconn = pymysql.connect(user=&#x27;root&#x27;, password=&#x27;980226&#x27;, host=&#x27;localhost&#x27;, database=&#x27;tlxy&#x27;, charset=&#x27;utf8mb4&#x27;, cursorclass=pymysql.cursors.DictCursor)try: cursor = conn.cursor() sql = &#x27;select * from users&#x27; cursor.execute(sql) conn.commit() data = cursor.fetchall()except: conn.rollback()finally: conn.close()print(data) Web 版的在线留言板1.flask 框架实现 web 的基本搭建安装 flask 框架 pip3 install flask&#x3D;1.1.1 使用 flask 框架实现 web 的基本搭建由于使用的是 flask 1.1.1 的版本所以会报错一个东西 只需要在命令行中键入 pip3 install itsdangerous&#x3D;&#x3D;2.0.1 新建一个 flask 代码 12345678910111213# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flaskapp = Flask(__name__)@app.route(&quot;/&quot;)def hello(): return &quot;Hello, World!&quot;if __name__ == &#x27;__main__&#x27;: app.run(debug=False,host=&#x27;127.0.0.1&#x27;,port=&#x27;8080&#x27;) 运行代码后 在浏览器中输入相应的 ip 及端口号 修改一下代码变成这样子 1234567891011121314151617# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flaskapp = Flask(__name__)@app.route(&quot;/&quot;)def hello(): return &quot;Hello, World!&quot;@app.route(&quot;/love&quot;)def love(): return &quot;love duandaun&quot;if __name__ == &#x27;__main__&#x27;: app.run(debug=False,host=&#x27;127.0.0.1&#x27;,port=&#x27;8080&#x27;) 2.留言板数据库的设计与创建 留言板的数据需要包括 id nickname 昵称 info 留言信息 date 留言时间 123456CREATE TABLE lyb( id int unsigned not null auto_increment primary key, nickname varchar(6) not null, info text not null, date datetime not null)engine=Innodb default charset=utf8mb4; 添加测试数据 12345678910111213141516171819202122mysql&gt; INSERT INTO lyb values(null,&#x27;duan&#x27;,&#x27;我要吃火锅!&#x27;,&#x27;2022-04-25 21:26:55&#x27;);Query OK, 1 row affected (0.01 sec)mysql&gt; select * from lyb;+----+----------+------------------+---------------------+| id | nickname | info | date |+----+----------+------------------+---------------------+| 1 | duan | 我要吃火锅! | 2022-04-25 21:26:55 |+----+----------+------------------+---------------------+1 row in set (0.00 sec)mysql&gt; INSERT INTO lyb values(null,&#x27;huang&#x27;,&#x27;走！我带你去&#x27;,&#x27;2022-04-25 21:30:10&#x27;);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from lyb;+----+----------+--------------------+---------------------+| id | nickname | info | date |+----+----------+--------------------+---------------------+| 1 | duan | 我要吃火锅! | 2022-04-25 21:26:55 || 2 | huang | 走！我带你去 | 2022-04-25 21:30:10 |+----+----------+--------------------+---------------------+2 rows in set (0.00 sec) 封装 MySQL 连接，进行测试 12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flaskimport pymysqlapp = Flask(__name__)# 留言板列表@app.route(&quot;/&quot;)def hello(): # 1.获取所有的留言板数据 # 2.把数据分配到模板中（Html页面渲染） data = model(&#x27;select * from lyb&#x27;) print(data) return &quot;Hello, World!&quot;# 封装MySQL操作方法def model(sql): conn = pymysql.connect(user=&#x27;root&#x27;, password=&#x27;980226&#x27;, host=&#x27;localhost&#x27;, database=&#x27;tlxy&#x27;, charset=&#x27;utf8mb4&#x27;, cursorclass=pymysql.cursors.DictCursor) try: cursor = conn.cursor() row = cursor.execute(sql) conn.commit() # 返回结果，如果有数据则返回，没有数据则返回影响的行数 data = cursor.fetchall() if data: return data else: return row except: conn.rollback() finally: conn.close()if __name__ == &#x27;__main__&#x27;: app.run(debug=False,host=&#x27;127.0.0.1&#x27;,port=&#x27;8080&#x27;) 运行代码之后，可以看到网页的”Hello, World!”，还能在控制端看到 3.web 留言板列表显示 使用 flask 中的 render_template 渲染模板 首先在当前项目路径下创建一个 Python package 名称为 templates 紧接着 在这个 package 下创建一个 index.html 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;留言板列表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 style=&quot;color: orangered&quot;&gt;Hello World&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; 使用 Python 的 render 测试一下 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding:utf-8 -*-# Author: Zacharyfrom flask import Flask,render_templateimport pymysqlapp = Flask(__name__)# 留言板列表@app.route(&quot;/&quot;)def hello(): # 1.获取所有的留言板数据 # 2.把数据分配到模板中（Html页面渲染） data = model(&#x27;select * from lyb&#x27;) return render_template(&#x27;index.html&#x27;,data=data)# 封装MySQL操作方法def model(sql): conn = pymysql.connect(user=&#x27;root&#x27;, password=&#x27;980226&#x27;, host=&#x27;localhost&#x27;, database=&#x27;tlxy&#x27;, charset=&#x27;utf8mb4&#x27;, cursorclass=pymysql.cursors.DictCursor) try: cursor = conn.cursor() row = cursor.execute(sql) conn.commit() # 返回结果，如果有数据则返回，没有数据则返回影响的行数 data = cursor.fetchall() if data: return data else: return row except: conn.rollback() finally: conn.close()if __name__ == &#x27;__main__&#x27;: app.run(debug=False,host=&#x27;127.0.0.1&#x27;,port=&#x27;8080&#x27;) 运行之后会出现错误 安装一下这个 cryptography 库 pip3 install cryptography 之后再运行代码 举例 显示表格 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;留言板列表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;h1 style=&quot;color: orangered&quot;&gt;Hello World&lt;/h1&gt; &lt;table border=&quot;1&quot; width=&quot;800&quot;&gt; &lt;tr&gt; &lt;th&gt;ID编号&lt;/th&gt; &lt;th&gt;昵称&lt;/th&gt; &lt;th&gt;留言信息&lt;/th&gt; &lt;th&gt;留言时间&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;我想吃火锅&lt;/td&gt; &lt;td&gt;2022-04-26 12:12:00&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;/body&gt;&lt;/html&gt; html 中加入循环 显示数据库的数据 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;留言板列表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;h1 style=&quot;color: darkred&quot;&gt;Hello World&lt;/h1&gt; &lt;table border=&quot;1&quot; width=&quot;800&quot;&gt; &lt;tr&gt; &lt;th&gt;ID编号&lt;/th&gt; &lt;th&gt;昵称&lt;/th&gt; &lt;th&gt;留言信息&lt;/th&gt; &lt;th&gt;留言时间&lt;/th&gt; &lt;/tr&gt; &#123;% for i in data %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; i.id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.nickname &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.info &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.date &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/table&gt; &lt;/center&gt; &lt;/body&gt;&lt;/html&gt; 4.web 留言板的添加表单 首先创建一个新的 html –&gt; add.html 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;添加留言&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;table&gt; &lt;form action=&quot;/insert&quot; method=&quot;post&quot;&gt; &lt;tr&gt; &lt;td&gt;昵称：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;nickname&quot; /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;留言信息：&lt;/td&gt; &lt;td&gt; &lt;textarea name=&quot;info&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;请留下你的信息 &lt;/textarea &gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th colspan=&quot;2&quot;&gt; &lt;button&gt;添加&lt;/button&gt; &lt;/th&gt; &lt;/tr&gt; &lt;/form&gt; &lt;/table&gt; &lt;/center&gt; &lt;/body&gt;&lt;/html&gt; 接着在代码中添加视图 1234# 定义视图 显示留言添加的页面@app.route(&quot;/add&quot;)def add(): return render_template(&#x27;add.html&#x27;) 修改 index.html，添加一个发布按钮 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;留言板列表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;h1 style=&quot;color: darkred&quot;&gt;留言列表&lt;/h1&gt; &lt;h3&gt;&lt;a href=&quot;/add&quot;&gt;发布留言&lt;/a&gt;&lt;/h3&gt; &lt;table border=&quot;1&quot; width=&quot;800&quot;&gt; &lt;tr&gt; &lt;th&gt;ID编号&lt;/th&gt; &lt;th&gt;昵称&lt;/th&gt; &lt;th&gt;留言信息&lt;/th&gt; &lt;th&gt;留言时间&lt;/th&gt; &lt;/tr&gt; &#123;% for i in data %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; i.id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.nickname &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.info &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.date &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/table&gt; &lt;/center&gt; &lt;/body&gt;&lt;/html&gt; 添加一个视图函数，实现填写完表单提交之后的跳转 1234567891011# 定义视图函数，接收表单数据，完成数据的入库@app.route(&#x27;/insert&#x27;,methods=[&#x27;POST&#x27;])def insert(): # 1.接收表单数据 data = request.form.to_dict() print(data) # 2.把数据添加到数据库 # 3.成功后页面跳转回到留言列表中 return &#x27;接收表单数据，成功！&#x27; 5.web 留言板的留言入库定义视图，提供一个添加留言的链接 12345678910111213141516171819202122232425# 定义视图 显示留言添加的页面@app.route(&quot;/add&quot;)def add(): return render_template(&#x27;add.html&#x27;)# 定义视图函数，接收表单数据，完成数据的入库@app.route(&#x27;/insert&#x27;,methods=[&#x27;POST&#x27;])def insert(): # 1.接收表单数据 data = request.form.to_dict() # 2.处理数据 加入时间 data[&#x27;date&#x27;] = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;) # 3.把数据添加到数据库 sql = f&quot;insert into lyb values(null ,&#x27;&#123;data[&#x27;nickname&#x27;]&#125;&#x27;,&#x27;&#123;data[&#x27;info&#x27;]&#125;&#x27;,&#x27;&#123;data[&#x27;date&#x27;]&#125;&#x27;)&quot; res = model(sql) # 4.成功后页面跳转回到留言列表中 if res: # 跳转到列表页 return &#x27;&lt;script&gt;alert(&quot;留言成功&quot;);location.href=&quot;/&quot;&lt;/script&gt;&#x27; else: # 跳转到添加页 return &#x27;&lt;script&gt;alert(&quot;留言发布失败&quot;);location.href=&quot;/add/&quot;&lt;/script&gt;&#x27; add.html 修改为 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;添加留言&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;table&gt; &lt;form action=&quot;/insert&quot; method=&quot;post&quot;&gt; &lt;tr&gt; &lt;td&gt;昵称：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;nickname&quot; /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;留言信息：&lt;/td&gt; &lt;td&gt; &lt;textarea name=&quot;info&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;请留下你的信息&lt;/textarea &gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th colspan=&quot;2&quot;&gt; &lt;button&gt;添加&lt;/button&gt; &lt;/th&gt; &lt;/tr&gt; &lt;/form&gt; &lt;/table&gt; &lt;/center&gt; &lt;/body&gt;&lt;/html&gt; index.html 修改为 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;留言板列表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;h1 style=&quot;color: darkred&quot;&gt;留言列表&lt;/h1&gt; &lt;h3&gt;&lt;a href=&quot;/add&quot;&gt;发布留言&lt;/a&gt;&lt;/h3&gt; &lt;table border=&quot;1&quot; width=&quot;800&quot;&gt; &lt;tr&gt; &lt;th&gt;ID编号&lt;/th&gt; &lt;th&gt;昵称&lt;/th&gt; &lt;th&gt;留言信息&lt;/th&gt; &lt;th&gt;留言时间&lt;/th&gt; &lt;/tr&gt; &#123;% for i in data %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; i.id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.nickname &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.info &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.date &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/table&gt; &lt;/center&gt; &lt;/body&gt;&lt;/html&gt; 6.web 留言板的删除添加一个删除操作 12345678910111213141516# 定义视图函数，接收id，完成数据删除@app.route(&#x27;/delete&#x27;)def delete(): # 1.接收id id = request.args.get(&#x27;id&#x27;) # 2.准备sql语句 sql = f&#x27;delete from lyb where id = &#123;id&#125;&#x27; # 3.执行sql语句 res = model(sql) # 4.判断结果跳转 if res: # 跳转到列表页 return &#x27;&lt;script&gt;alert(&quot;留言删除成功&quot;);location.href=&quot;/&quot;&lt;/script&gt;&#x27; else: # 删除失败 return &#x27;&lt;script&gt;alert(&quot;留言删除失败&quot;);location.href=&quot;/&quot;&lt;/script&gt;&#x27; 再修改一下 index.html 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;留言板列表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;h1 style=&quot;color: darkred&quot;&gt;留言列表&lt;/h1&gt; &lt;h3&gt;&lt;a href=&quot;/add&quot;&gt;发布留言&lt;/a&gt;&lt;/h3&gt; &lt;table border=&quot;1&quot; width=&quot;800&quot;&gt; &lt;tr&gt; &lt;th&gt;ID编号&lt;/th&gt; &lt;th&gt;昵称&lt;/th&gt; &lt;th&gt;留言信息&lt;/th&gt; &lt;th&gt;留言时间&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &#123;% for i in data %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; i.id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.nickname &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.info &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.date &#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/delete?id=&#123;&#123; i.id &#125;&#125;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/table&gt; &lt;/center&gt; &lt;/body&gt;&lt;/html&gt; 更新: 2024-01-23 06:41:07原文: https://www.yuque.com/zacharyblock/cx2om6/gbi35gelzgfknekv","categories":[{"name":"Python MySQL","slug":"Python-MySQL","permalink":"https://blockzachary.github.io/categories/Python-MySQL/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"MySQL","slug":"MySQL","permalink":"https://blockzachary.github.io/tags/MySQL/"}]},{"title":"DML 与 DQL","slug":"MySQL/DML与DQL","date":"2022-12-31T17:52:00.000Z","updated":"2022-12-31T17:52:00.000Z","comments":true,"path":"blog/2739483575/","permalink":"https://blockzachary.github.io/blog/2739483575/","excerpt":"","text":"DML 与 DQLDML 操作-数据的增删改添加数据格式 insert into 表名[(字段列表)] values(值列表); 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071-- 标准添加（指定所有字段，给定所有的值）mysql&gt; insert into users(id,name,age,gender) values(4,&#x27;duan&#x27;,23,&#x27;女&#x27;);Query OK, 1 row affected (0.01 sec)mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 |+----+--------+------+--------+4 rows in set (0.00 sec)-- 指定部分字段添加值mysql&gt; insert into users(name,age) values(&#x27;zach&#x27;,23);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 || 5 | zach | 23 | NULL |+----+--------+------+--------+5 rows in set (0.00 sec)-- 不指定字段值添加mysql&gt; insert into users values(null,&#x27;user&#x27;,18,&#x27;男&#x27;);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 || 5 | zach | 23 | NULL || 6 | user | 18 | 男 |+----+--------+------+--------+6 rows in set (0.00 sec)-- 批量添加值mysql&gt; insert into users values -&gt; (null,&#x27;stu1&#x27;,16,&#x27;女&#x27;), -&gt; (null,&#x27;stu2&#x27;,16,&#x27;男&#x27;), -&gt; (null,&#x27;stu3&#x27;,16,&#x27;女&#x27;);Query OK, 3 rows affected (0.01 sec)Records: 3 Duplicates: 0 Warnings: 0mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 || 5 | zach | 23 | NULL || 6 | user | 18 | 男 || 7 | stu1 | 16 | 女 || 8 | stu2 | 16 | 男 || 9 | stu3 | 16 | 女 |+----+--------+------+--------+9 rows in set (0.00 sec) 修改数据格式 update 表名 set 字段 1&#x3D;值 1，字段 2&#x3D;值 2 (where 条件); 不加条件默认修改所有的 1234567891011121314151617181920212223242526272829303132333435363738394041-- 将id为6的age修改为25，gender改为女mysql&gt; update users set age=25,gender=&#x27;女&#x27; where id=6;Query OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 || 5 | zach | 23 | NULL || 6 | user | 25 | 女 || 7 | stu1 | 16 | 女 || 8 | stu2 | 16 | 男 || 9 | stu3 | 16 | 女 |+----+--------+------+--------+9 rows in set (0.00 sec)-- 将id为7,8,9的数据年龄+1mysql&gt; update users set age=age+1 where id=7 or id=8 or id=9;Query OK, 3 rows affected (0.00 sec)Rows matched: 3 Changed: 3 Warnings: 0mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 || 5 | zach | 23 | NULL || 6 | user | 25 | 女 || 7 | stu1 | 17 | 女 || 8 | stu2 | 17 | 男 || 9 | stu3 | 17 | 女 |+----+--------+------+--------+9 rows in set (0.00 sec) 删除数据格式 delete from 表名 (where 条件); 不写条件就会删除表中所有数据 12345678910111213141516171819202122232425262728293031323334-- 删除users表中gender为空的数据mysql&gt; delete from users where gender is NULL;Query OK, 1 row affected (0.00 sec)mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 || 6 | user | 25 | 女 || 7 | stu1 | 17 | 女 || 8 | stu2 | 17 | 男 || 9 | stu3 | 17 | 女 |+----+--------+------+--------+8 rows in set (0.00 sec)-- 删除users表中年龄在15到20之间的数据mysql&gt; delete from users where age between 15 and 20;Query OK, 3 rows affected (0.01 sec)mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 || 6 | user | 25 | 女 |+----+--------+------+--------+5 rows in set (0.00 sec) DQL-MySQL 数据查询 SQL语法格式： select 字段列表|* from 表名**[where 条件]**[group by 分组字段 [having 分组条件]]**[order by 排序字段 排序规则]**[limit 分页参数] 基础查询12345678910111213141516171819202122232425-- 查询表中所有的列 所有数据mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 || 6 | user | 25 | 女 |+----+--------+------+--------+5 rows in set (0.00 sec)-- 查询表中的指定字段mysql&gt; select name,age from users;+--------+------+| name | age |+--------+------+| 段段 | 24 || 黄黄 | 23 || 图图 | 1 || duan | 23 || user | 25 |+--------+------+5 rows in set (0.00 sec) where 条件查询 可以在 where 子句中指定任何条件 可以使用 and or 等指定多个条件 where 条件也可以应用在 update 和 delete 语句的后面 where 子句类似程序语言中 if 条件，根据 MySQL 表中的字段值来进行数据的过滤 1234567891011121314151617181920212223242526272829303132333435363738394041-- 查询users表中 age&gt;20的数据mysql&gt; select * from users where age &gt; 20;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 4 | duan | 23 | 女 || 6 | user | 25 | 女 |+----+--------+------+--------+4 rows in set (0.00 sec)-- 查询users表中，name是段段的数据mysql&gt; select * from users where name = &#x27;段段&#x27;;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 |+----+--------+------+--------+1 row in set (0.00 sec)-- 查询在users表中 年龄在22-24的数据mysql&gt; select * from users where age between 22 and 24;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 4 | duan | 23 | 女 |+----+--------+------+--------+3 rows in set (0.00 sec)-- 查询在users表中 年龄在22-24的女生数据mysql&gt; select * from users where gender = &#x27;女&#x27; and age between 22 and 24;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 4 | duan | 23 | 女 |+----+--------+------+--------+2 rows in set (0.01 sec) and 和 or 使用注意举个例子 123456789-- 查询在users表中 年龄为22或23的女生信息mysql&gt; select * from users where gender = &#x27;女&#x27; and age = 22 or age =23;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 2 | 黄黄 | 23 | 男 || 4 | duan | 23 | 女 |+----+--------+------+--------+2 rows in set (0.00 sec) 可以看出 实际查询结果并不符合要求，这时的结果是：查询年龄为 22 的人，或者年龄为 23 的女生 and 与 or 同时存在时，sql 语句执行的顺序是 and &gt; or 解决办法：实用小括号 1234567mysql&gt; select * from users where gender = &#x27;女&#x27; and (age = 22 or age =23);+----+------+------+--------+| id | name | age | gender |+----+------+------+--------+| 4 | duan | 23 | 女 |+----+------+------+--------+1 row in set (0.00 sec) like 子句可以使用 like 语句进行某个字段的模糊搜索 like 可以等价于 &#x3D; 可以使用 % 进行模糊匹配，**%可以代表任意字符** 可以使用 _ 表示一个任意字符 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455-- 查询姓名是duan的数据mysql&gt; select * from users where name like &#x27;duan&#x27;;+----+------+------+--------+| id | name | age | gender |+----+------+------+--------+| 4 | duan | 23 | 女 |+----+------+------+--------+1 row in set (0.00 sec)-- 查询姓名中 包含n字符的数据mysql&gt; select * from users where name like &#x27;%n%&#x27;;+----+------+------+--------+| id | name | age | gender |+----+------+------+--------+| 4 | duan | 23 | 女 |+----+------+------+--------+1 row in set (0.00 sec)-- 查询姓名中姓段的数据mysql&gt; select * from users where name like &#x27;段%&#x27;;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 |+----+--------+------+--------+1 row in set (0.00 sec)-- 查询姓名中最后一个字为黄的mysql&gt; select * from users where name like &#x27;%黄&#x27;;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 2 | 黄黄 | 23 | 男 |+----+--------+------+--------+1 row in set (0.00 sec)-- 查询姓名中 第二个字符为 n 的mysql&gt; select * from users where name like &#x27;_u%&#x27;;+----+------+------+--------+| id | name | age | gender |+----+------+------+--------+| 4 | duan | 23 | 女 |+----+------+------+--------+1 row in set (0.00 sec)-- 查询姓名是 两个字符的数据mysql&gt; select * from users where name like &#x27;__&#x27;;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 |+----+--------+------+--------+3 rows in set (0.00 sec) 注意：where 子句中的 like 的_或者% 进行模糊搜索时，效率不高 尽可能不去使用_或% 如果需要使用，也尽可能不要把通配符放在开头处 MySQL 中的聚合函数（统计函数） max() min() count() sum() avg() 1234567891011121314151617181920212223242526272829303132333435-- 计算users表中 最大年龄，最小年龄，年龄和，平均年龄mysql&gt; select max(age),min(age),sum(age),avg(age) from users;+----------+----------+----------+----------+| max(age) | min(age) | sum(age) | avg(age) |+----------+----------+----------+----------+| 25 | 1 | 96 | 19.2000 |+----------+----------+----------+----------+1 row in set (0.01 sec)-- 美化字段名mysql&gt; select max(age) as max_age , min(age) min_age,sum(age) as sum_age,avg(age) avg_age from users;+---------+---------+---------+---------+| max_age | min_age | sum_age | avg_age |+---------+---------+---------+---------+| 25 | 1 | 96 | 19.2000 |+---------+---------+---------+---------+1 row in set (0.00 sec)-- 统计users表中数据量mysql&gt; select count(*) from users;+----------+| count(*) |+----------+| 5 |+----------+1 row in set (0.05 sec)mysql&gt; select count(id) from users;+-----------+| count(id) |+-----------+| 5 |+-----------+1 row in set (0.00 sec) 两个统计的区别 count(*) 按照表中所有的列进行数据统计，只要其中一列上有数据，就可以计算 count(id) 是按照指定的 id 字段进行统计，也可以使用别的字段进行统计，但是注意，如果指定的列上出现了 NULL 值，那么为 NULL 的这个数据不会被统计 1234567891011121314151617181920212223mysql&gt; update users set age = NULL where id = 6;Query OK, 1 row affected (0.01 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 || 6 | user | NULL | 女 |+----+--------+------+--------+5 rows in set (0.00 sec)mysql&gt; select count(age) from users;+------------+| count(age) |+------------+| 4 |+------------+1 row in set (0.01 sec) Group BY 分组group by 语句根据一个或者多个列对结果集进行分组 一般情况下，用于数据的统计或计算，配合聚合函数使用 12345678910111213141516171819202122232425262728293031323334353637mysql&gt; update users set age = 28 where id = 6;Query OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 || 4 | duan | 23 | 女 || 6 | user | 28 | 女 |+----+--------+------+--------+5 rows in set (0.00 sec)-- 统计 users 表中 男生女生人数 使用分组统计mysql&gt; select gender,count(*) from users group by gender;+--------+----------+| gender | count(*) |+--------+----------+| 女 | 4 || 男 | 1 |+--------+----------+2 rows in set (0.00 sec)-- 分别统计每个班级的男女生人数mysql&gt; select class_id,gender,count(*) from users group by class_id,gender;+----------+--------+----------+| class_id | gender | count(*) |+----------+--------+----------+| 1 | 女 | 1 || 1 | 男 | 1 || 2 | 女 | 2 || 2 | 男 | 1 |+----------+--------+----------+4 rows in set (0.00 sec) 注意啦！一般在使用 group by 语句的时候，除了聚合函数，其他在 select 后面出现的字段列都需要出现在 group by 后面 having 的用法 在分组聚合计算之后，对结果再一次进行过滤，类似于 where where 过滤的是行数据，having 过滤的是分组数据 12345678-- 统计班级人数，并且找出班级超过2人的班级mysql&gt; select class_id,count(*) from users group by class_id having count(*)&gt;2;+----------+----------+| class_id | count(*) |+----------+----------+| 2 | 3 |+----------+----------+1 row in set (0.00 sec) order by 排序在 MySQL 中使用 select 的语句查询的数据结果是根据数据在底层文件的结构来排序的 首先不要依赖默认的排序，另外在需要排序时，要使用 order by 对返回的结果进行排序 asc 升序 desc 降序 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051-- 按照年龄对结果进行排序 从大到小mysql&gt; select * from users order by age desc;+----+--------+------+--------+----------+| id | name | age | gender | class_id |+----+--------+------+--------+----------+| 6 | user | 28 | 男 | 2 || 1 | 段段 | 24 | 女 | 1 || 2 | 黄黄 | 23 | 男 | 1 || 4 | duan | 23 | 女 | 2 || 3 | 图图 | 1 | 女 | 2 |+----+--------+------+--------+----------+5 rows in set (0.01 sec)-- 按照年龄对结果进行排序 从小到大mysql&gt; select * from users order by age;+----+--------+------+--------+----------+| id | name | age | gender | class_id |+----+--------+------+--------+----------+| 3 | 图图 | 1 | 女 | 2 || 2 | 黄黄 | 23 | 男 | 1 || 4 | duan | 23 | 女 | 2 || 1 | 段段 | 24 | 女 | 1 || 6 | user | 28 | 男 | 2 |+----+--------+------+--------+----------+5 rows in set (0.00 sec)-- 多个字段的排序，先按照age字段从小到大排序，age相同的情况下，按照id排序 从小到大mysql&gt; select * from users order by age,id;+----+--------+------+--------+----------+| id | name | age | gender | class_id |+----+--------+------+--------+----------+| 3 | 图图 | 1 | 女 | 2 || 2 | 黄黄 | 23 | 男 | 1 || 4 | duan | 23 | 女 | 2 || 1 | 段段 | 24 | 女 | 1 || 6 | user | 28 | 男 | 2 |+----+--------+------+--------+----------+5 rows in set (0.00 sec)-- 多个字段的排序，按照age从小到大排序，在age相同的情况下 按照id从大到小排序mysql&gt; select * from users order by age,id desc;+----+--------+------+--------+----------+| id | name | age | gender | class_id |+----+--------+------+--------+----------+| 3 | 图图 | 1 | 女 | 2 || 4 | duan | 23 | 女 | 2 || 2 | 黄黄 | 23 | 男 | 1 || 1 | 段段 | 24 | 女 | 1 || 6 | user | 28 | 男 | 2 |+----+--------+------+--------+----------+5 rows in set (0.00 sec) limit 数据分页 limit n 提取 n 条数据 limit m,n 跳过 m 条数据 提取 n 条数据 123456789101112131415161718192021222324252627282930313233343536373839-- 查询users表中的前三条数据mysql&gt; select * from users limit 3;+----+--------+------+--------+----------+| id | name | age | gender | class_id |+----+--------+------+--------+----------+| 1 | 段段 | 24 | 女 | 1 || 2 | 黄黄 | 23 | 男 | 1 || 3 | 图图 | 1 | 女 | 2 |+----+--------+------+--------+----------+3 rows in set (0.00 sec)-- 查询users表中跳过前两条，取三条数据mysql&gt; select * from users limit 2,3;+----+--------+------+--------+----------+| id | name | age | gender | class_id |+----+--------+------+--------+----------+| 3 | 图图 | 1 | 女 | 2 || 4 | duan | 23 | 女 | 2 || 6 | user | 28 | 男 | 2 |+----+--------+------+--------+----------+3 rows in set (0.00 sec)-- limit的应用，-- 每页显示10条数据limit 0,10limit 10,10limit 20,10limit 30,10-- 提取 users表中年龄最大的三个用户数据mysql&gt; select * from users order by age desc limit 3;+----+--------+------+--------+----------+| id | name | age | gender | class_id |+----+--------+------+--------+----------+| 6 | user | 28 | 男 | 2 || 1 | 段段 | 24 | 女 | 1 || 2 | 黄黄 | 23 | 男 | 1 |+----+--------+------+--------+----------+3 rows in set (0.00 sec) 课后练习题 class_id 为 2 的男女生人数 获取每个 class 平均年龄，并按照平均年龄从大到小排序 统计每个班级的人数 按照从大到小排序 获取班级人数最多的，班级 id 信息 123456789101112131415161718192021222324252627282930313233343536373839-- 1mysql&gt; select class_id,gender,count(*) from users where class_id = 2 group by gender;+----------+--------+----------+| class_id | gender | count(*) |+----------+--------+----------+| 2 | 女 | 2 || 2 | 男 | 1 |+----------+--------+----------+2 rows in set (0.00 sec)-- 2mysql&gt; select class_id,avg(age) from users group by class_id order by avg(age) desc;+----------+----------+| class_id | avg(age) |+----------+----------+| 1 | 23.5000 || 2 | 17.3333 |+----------+----------+2 rows in set (0.00 sec)-- 3mysql&gt; select class_id,count(*) from users group by class_id order by count(*) desc;+----------+----------+| class_id | count(*) |+----------+----------+| 2 | 3 || 1 | 2 |+----------+----------+2 rows in set (0.00 sec)-- 4mysql&gt; select class_id,count(*) from users group by class_id order by count(*) desc limit 1;+----------+----------+| class_id | count(*) |+----------+----------+| 2 | 3 |+----------+----------+1 row in set (0.00 sec) MySQL 数据库导入导出和授权 (CCL)数据的导出1.数据库的导出语法格式： mysqldump -u root -p 数据库名 &gt; 要保存的路径&#x2F;tlxy.sql 123zachary@MacBook-Pro ~ % mysqldump -u root -p tlxy &gt; /Users/zachary/Desktop/tlxy.sqlEnter password:zachary@MacBook-Pro ~ % 2.数据表的导出语法格式： mysqldump -u root -p 数据库名 数据表名 &gt; 要保存的路径&#x2F;tlxy.sql 123zachary@MacBook-Pro ~ % mysqldump -u root -p tlxy users &gt; /Users/zachary/Desktop/tlxy.sqlEnter password:zachary@MacBook-Pro ~ % 数据的导入1.数据库的导入将导出的数据库的所有的表，导入到本地的一个数据库内 语法格式： mysql -u root -p 新数据库 &lt; 要导入的数据库路径 2.数据表的导入将导出的一张数据包，导入到某个已存在的数据库中 mysql -u root -p 数据库 &lt; 要导入的数据表 权限管理mysql 中的 root 用户是数据库中权限最高的用户，千万不要用在项目中 可以给不同的用户，或者项目，创建不同的 MySQL 用户，并适当的授权，完成数据库的相关操作 这样就一定程度上保证了数据库的安全 查看数据库中所有的用户 12345678910111213141516mysql&gt; use mysqlReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; select host,user from user;+-----------+------------------+| host | user |+-----------+------------------+| % | zachary || localhost | mysql.infoschema || localhost | mysql.session || localhost | mysql.sys || localhost | root |+-----------+------------------+5 rows in set (0.00 sec) 创建用户的语法格式： grant 授权的操作 on 授权的库.授权的表 to 账户@登录地址 identified by ‘密码’ 12345678-- 在mysql中 创建一个 zachary 用户， 授权可以对tlxy这个库的所有表进行添加和查询的权限grant select,insert on tlxy.* to zachary@&#x27;%&#x27; identified by &#x27;123456&#x27;;-- 给duan授权对tlxy这个库的所有表的所有权限grant all on tlxy.* to duan@&#x27;%&#x27; identified by &#x27;123456&#x27;;-- 删除用户drop user &#x27;zachary&#x27;@&#x27;%&#x27;; 更新: 2024-01-23 06:39:32原文: https://www.yuque.com/zacharyblock/cx2om6/lidc7icq01wycq94","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://blockzachary.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://blockzachary.github.io/tags/MySQL/"}]},{"title":"数据库基础","slug":"MySQL/数据库基础","date":"2022-12-31T17:51:00.000Z","updated":"2022-12-31T17:51:00.000Z","comments":true,"path":"blog/3942895021/","permalink":"https://blockzachary.github.io/blog/3942895021/","excerpt":"","text":"数据库基础MySQL 数据库基本介绍 数据库的分类 磁盘管理型 内存管理型 什么是数据库 数据库(Database)是按照数据结构来组织、存储和管理数据的一个仓库 专业的数据库是专门对数据进行创建、访问、管理和搜索等操作，比起我们自己用文件读写的方式对数据进行管理更加方便、快速、安全 数据库的作用 对数据进行持久化的保存 方便数据的存储和查询，速度快、安全、方便 可以处理并发访问 更加安全的权限管理访问机制 常见的数据库 关系型数据库 MySQL Oracle PostgreSQL SqlServer 非关系型数据库 Redis 内存数据库 MongoDB 文档数据库 关于数据库的概念 数据库 Databases 数据表 Tables 数据字段 行 row 列 column Windows 下安装 MySQL 在 MySQL 官网下载 zip 安装包（Windows x86，64bit）ZIP Archive 下载完成后解压，将其放到想要安装的目录下面 例如：D:\\MySQL5.7\\mysql-5.7.17-winx64 新建一个 my.ini 配置文件，内容如下： 1234567891011[mysql]default-character-set=utf8[mysqld]port = 3306basedir=D:\\MySQL5.7\\mysql-5.7.17-winx64datadir=D:\\MySQL5.7\\mysql-5.7.17-winx64\\datamax_connections=200character-set-server=utf8default-storage-engine=INNODBexplicit_defaults_for_timestamp=true 在安装路径下新建一个空的 data 文件夹 以管理员身份运行 cmd，进入安装目录下的 bin 目录，执行 mysqld –initialize-insecure –user&#x3D;mysql 命令。 依然在管理员窗口 cmd 下运行 mysqld install 继续执行命令 net start mysql 启动 MySQL 服务 修改环境变量，在环境变量中添加 D:\\MySQL5.7\\mysql-5.7.17-winx64\\bin 在普通的 cmd 窗口下 进入 bin 目录 执行 mysql -u root -p 命令 默认没有密码 Mac 下安装 MySQL下载安装 MySQLbrew install &#109;&#121;&#115;&#x71;&#x6c;&#64;&#53;&#x2e;&#x37; 启动 MySQLsudo mysql.server start 关闭 MySQLsudo mysql.server stop 登录 MySQLmysql -u root -p 认识和操作一下 MySQL 的基本命令查看数据库在登录 MySQL 之后，使用命令 show databases; 查看当前所有数据库 123456789101112131415mysql&gt; show databases;+--------------------+| Database |+--------------------+| db4 || django_bbs || djangoblog || information_schema || mysql || Mysql_Pro || performance_schema || students || sys |+--------------------+9 rows in set (0.02 sec) 选择数据库当想要选择使用某个数据库的时候使用 use XXX; 命令 12345mysql&gt; use mysql;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changed 查看表在进入一个数据库之后，可以先使用 show tables; 命令查看一下当前数据库下面所有的表 1234567891011121314151617181920212223242526272829303132333435363738394041mysql&gt; show tables;+------------------------------------------------------+| Tables_in_mysql |+------------------------------------------------------+| columns_priv || component || db || default_roles || engine_cost || func || general_log || global_grants || gtid_executed || help_category || help_keyword || help_relation || help_topic || innodb_index_stats || innodb_table_stats || password_history || plugin || procs_priv || proxies_priv || replication_asynchronous_connection_failover || replication_asynchronous_connection_failover_managed || role_edges || server_cost || servers || slave_master_info || slave_relay_log_info || slave_worker_info || slow_log || tables_priv || time_zone || time_zone_leap_second || time_zone_name || time_zone_transition || time_zone_transition_type || user |+------------------------------------------------------+35 rows in set (0.00 sec) 查看表数据想要查询表中的数据，使用 select * from XXX; 命令 1234567891011mysql&gt; select * from user| Host | User | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | Create_tablespace_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections | plugin | authentication_string | password_expired | password_last_changed | password_lifetime | account_locked | Create_role_priv | Drop_role_priv | Password_reuse_history | Password_reuse_time | Password_require_current | User_attributes || % | zachary | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | | NULL | NULL | NULL | 0 | 0 | 0 | 0 | caching_sha2_password | $A$005$B?&lt;M[emkFiH6r2qdU1jhF3ONtn8Pjzx.2mGkUGv24EjzSFpo6J6qZzZm9 | N | 2021-07-01 21:15:28 | NULL | N | N | N | NULL | NULL | NULL | NULL || localhost | mysql.infoschema | Y | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | | NULL | NULL | NULL | 0 | 0 | 0 | 0 | caching_sha2_password | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | N | 2021-02-16 20:09:44 | NULL | Y | N | N | NULL | NULL | NULL | NULL || localhost | mysql.session | N | N | N | N | N | N | N | Y | N | N | N | N | N | N | N | Y | N | N | N | N | N | N | N | N | N | N | N | N | N | | NULL | NULL | NULL | 0 | 0 | 0 | 0 | caching_sha2_password | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | N | 2021-02-16 20:09:44 | NULL | Y | N | N | NULL | NULL | NULL | NULL || localhost | mysql.sys | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | | NULL | NULL | NULL | 0 | 0 | 0 | 0 | caching_sha2_password | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | N | 2021-02-16 20:09:44 | NULL | Y | N | N | NULL | NULL | NULL | NULL || localhost | root | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | | NULL | NULL | NULL | 0 | 0 | 0 | 0 | caching_sha2_password | $A$005$[v3;mqn&#125;dytE6eHf1cnInBjCR5s.3TE1uHerOPadrzC83pYLSQCfO1y4 | N | 2021-02-16 20:13:33 | NULL | N | Y | Y | NULL | NULL | NULL | NULL |rows in set (0.00 sec) 表数据精确查看但是这样数据太多又很乱，我们可以只选择其中一部分字段 select host,user from user; 1234567891011mysql&gt; select host,user from user;+-----------+------------------+| host | user |+-----------+------------------+| % | zachary || localhost | mysql.infoschema || localhost | mysql.session || localhost | mysql.sys || localhost | root |+-----------+------------------+5 rows in set (0.00 sec) 创建自己的数据库使用以下格式创建自己的数据库结构 create database 库名 default charset&#x3D;utf8; 例如创建一个名为 tlxy 的数据库 12mysql&gt; create database tlxy default charset=utf8;Query OK, 1 row affected, 1 warning (0.00 sec) 这是查看一下数据库，就会发现新增了一个数据库 12345678910111213141516mysql&gt; show databases;+--------------------+| Database |+--------------------+| db4 || django_bbs || djangoblog || information_schema || mysql || Mysql_Pro || performance_schema || students || sys || tlxy |+--------------------+10 rows in set (0.00 sec) 创建自己的数据表首先进入自己创建的数据库 use XXX; 12mysql&gt; use tlxy;Database changed 然后使用以下格式创建自己想要的表结构 create table 表名(字段名 类型 字段约束，字段名 类型 字段约束，字段名 类型 字段约束，)engine&#x3D;&#x3D;innodb default charset&#x3D;utf8; 例如创建一个 user 表 123456create table user( name varchar(20), age int, gender char(1))engine=innodb default charset=utf8;Query OK, 0 rows affected, 1 warning (0.02 sec) 查看一下是否创建成功 1234567mysql&gt; show tables;+----------------+| Tables_in_tlxy |+----------------+| user |+----------------+1 row in set (0.00 sec) 显示表的字段结构可以使用 desc XXX; 查看表的字段结构 123456789mysql&gt; desc user;+--------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+--------+-------------+------+-----+---------+-------+| name | varchar(20) | YES | | NULL | || age | int | YES | | NULL | || gender | char(1) | YES | | NULL | |+--------+-------------+------+-----+---------+-------+3 rows in set (0.01 sec) 往表中添加数据使用以下格式对已经创建好的表进行数据添加 insert into 表名(字段 1,字段 2,…) values(v1,v2,…) 例如，插入如下信息 12mysql&gt; insert into user(name,age,gender) values(&#x27;admin&#x27;,24,&#x27;男&#x27;);Query OK, 1 row affected (0.01 sec) 查看一下表中数据 1234567mysql&gt; select * from user;+-------+------+--------+| name | age | gender |+-------+------+--------+| admin | 24 | 男 |+-------+------+--------+1 row in set (0.00 sec) 12mysql&gt; insert into user(name,age,gender) values(&#x27;duan&#x27;,24,&#x27;女&#x27;);Query OK, 1 row affected (0.00 sec) 12345678mysql&gt; select * from user;+-------+------+--------+| name | age | gender |+-------+------+--------+| admin | 24 | 男 || duan | 24 | 女 |+-------+------+--------+2 rows in set (0.00 sec) MySQL 基础操作命令使用方法： 方式一：通过在命令行敲命令来操作（有助于命令的掌握） 方式二：通过图形界面工具，如 Navicat 等（在熟练掌握后在使用） 方式三：通过编程语言执行 MySQL 命令 SQL（Structure query language）结构化查询语言 SQL 语言分为 4 个部分：DDL(定义)、DML(操作)、DQL(查询)、DCL(控制) SQL 语句中的快捷键 \\G 格式化输出（文本式，竖立显示） \\s 查看服务器端信息 \\c 结束命令输入操作 \\q 退出当前 sql 命令行模式 \\h 查看帮助 操作数据库的步骤连接、打开库、操作、关闭退出 1. 通过命令行连接 MySQLmysql -h localhost -u root -p -h 跟服务器地址 -u 为要登录的账号 -p 为密码 -P 为端口号 2. 数据库操作查看数据库 show databases; 创建数据库 create database 库名 default charset&#x3D;utf8; 删除数据库 drop database 库名; 打开数据库 use 库名; 3. 数据表操作数据库管理系统中，可以有很多个库，每个库可以有很多个数据表 查看表 show tables; 创建表 create table 表名(字段名 1 类型, 字段名 2 类型)engine&#x3D;innodb default charset&#x3D;utf8; 创建表的时候，如果表不存在就执行这一条，如果表不存在就不执行这一条命令 create table if not exists 表名(字段名 1 类型, 字段名 2 类型)engine&#x3D;innodb default charset&#x3D;utf8; 123456create table if not exists users( id int not null primary key auto_increment, name varchar(4) not null, age tinyint, gender enum(&#x27;男&#x27;,&#x27;女&#x27;))engine=innodb default charset=utf8; 删除表 drop table 表名; 表结构 desc 表名; 查看建表语句 show create table 表名; 4. 数据操作 增删改查——CRUD插入 insert into 表名(字段 1,字段 2,字段 3) values(值 1,值 2,值 3);**insert into 表名(字段 1,字段 2,字段 3) values(a 值 1,a 值 2,a 值 3), (b 值 1,b 值 2,b 值 3);**insert into 表名 values(值 1,值 2,值 3); 查询 select * from 表名;**********select 字段 1,字段 2,字段 3 from 表名;** 修改 update 表名 set 字段&#x3D;某个值 where 条件;**update 表名 set 字段 1&#x3D;值 1,字段 2&#x3D;值 2 where 条件;**update 表名 set 字段&#x3D;字段+值 where 条件; 删除 delete from 表名 where 字段&#x3D;某个值 5. 退出 MySQLexit;**********quit;** MySQL 的基本常用数据类型数据类型：整型、浮点型、字符串、日期等 1. 字符串数据类型最常用的数据类型，可以用来存储名字、地址、电话、邮编 **定长串****CHAR** 接收长度固定的字符串，其长度是在创建表的时候指定的 指定长度后，就会分配固定的存储空间用于存放数据，如 CHAR(7)不管实际插入多少字符，都会占用 7 个字符位置 **变长串****VARCHAR** VARCHAR(7) 如果实际插入 4 个字符，那么它只占 4 个字符位置，当然长度不能超过 7 个字符 数据类型 说明 CHAR 1~255 个字符的定长串。它的长度必须在创建时指定，否则 MySQL 假定为 CHAR(1) ENUM 接受最多 64K 个串组成的一个预定义集合的某个串 LONGTEXT 与 TEXT 相同，但最大长度为 4GB MEDIUMTEXT 与 TEXT 相同，但最大长度为 16K SET 接受最多 64 个串组成的一个预定义集合的零个或多个串 TEXT 最大长度为 64K 的变长文本 TINYTEXT 与 TEXT 相同，但最大长度为 255 字节 VARCHAR 长度可变，最多不超过 255 字节。如果在创建时指定为 VARCHAR(n)，则可以存储 0 到 n 个字符的变长串（其中 n≤255） 2. 数值类型 数据类型 说明 BIT 位字段，1~64 位（在 MySQL5 之前，BIT 在功能上等价于 TINYINT） BIGINT 整数值，支持 -9223372036854775808~~~~~~9223372036854775807（如果是 UNSIGNED,为 0~~18446744073709551615）的数 BOOLEAN(BOOL) 布尔标志，或者为 0 或者为 1，主要用于开关（on&#x2F;off）标志 DECIMAL(DEC) 精度可变的浮点值 DOUBLE 双精度浮点值 FLOAT 单精度浮点值 INT(INTEGER) 整数值，支持-2147483648~~~~~~2147483647（如果是 UNSIGNED，为 0~~4294967295）的数 MEDIUMINT 整数值，支持-8388608~~~~~~8388607（如果是 UNSIGNED，为 0~~16777215）的数 REAL 4 字节的浮点值 SMALLINT 整数值，支持-32768~~~~~~32767（如果是 UNSIGNED，0~~65535）的数 TINYINT 整数值，支持-128~~~~~~127（如果是 UNSIGNED，为 0~~255）的数 decimal(5,2) 表示数值总共 5 位，小数 2 位 tinyint 1 字节（8 位） int 4 字节（32 位） 3. 日期和时间类型 数据类型 说明 DATE 表示 1000-01-01~9999-12-31 的日期，格式为 YYYY-MM-DD DATETIME DATE 和 TIME 的组合 TIMESTAMP 功能和 DATETIME 相同，范围更小 TIME 格式为 HH:MM:SS YEAR 用 2 位数字表示，范围是 70（1970 年）~~~~~~69（2069 年），用 4 位数字表示，范围是 1901 年~~2155 年 练习 首先在 tlxy 数据库下创建了上面的 users 表格，相对的插入一些数据 1234567891011121314151617181920212223242526mysql&gt; insert into users(name,age,gender) values(&#x27;段段&#x27;,22, &#x27;女&#x27;),(&#x27;黄黄&#x27;,23,&#x27; 男&#x27;),(&#x27;图图&#x27;,1,&#x27;女&#x27;);Query OK, 3 rows affected (0.00 sec)mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 22 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 |+----+--------+------+--------+3 rows in set (0.00 sec)mysql&gt; update users set age=24 where name=&#x27;段段&#x27;;Query OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; select * from users;+----+--------+------+--------+| id | name | age | gender |+----+--------+------+--------+| 1 | 段段 | 24 | 女 || 2 | 黄黄 | 23 | 男 || 3 | 图图 | 1 | 女 |+----+--------+------+--------+3 rows in set (0.00 sec) MySQL 的数据类型约束和主键表的字段约束 unsigned 无符号(给数值类型使用，表示为正数，不写表示正负数都可以) 字段后面加括号，可以限制宽度 char(5)、varchar(7) 在字符后面加限制表示字符串的长度 int(4) 没有意义，默认无符号的 int 为 int(11)，有符号 int(10) int(4) 只有在设置了前导零的时候才有意义，如 int(4) unsigned zerofill not null 不能为空，在操作数据库的时候，如果输入该字段数据为空的时候就会报错 default 设置默认值 primary key 主键，不能为空 并且唯一，一般和自动递增配合使用 auto_increment 定义列为自增属性，一般用于主键，数值会自动加 1 unique 唯一索引（数据不能重复：用户名），可以增加查询速度，但是会降低插入和更新速度 MySQL 的运算符 算术运算符： +**、**-**、*****、**&#x2F;**** 、******%** 比较运算符： &#x3D;**、**＞**、**＜**、**＞&#x3D;**、**＜&#x3D;**、**!&#x3D; 数据库特有的比较： in**、**not in**、**is null**、**is not null**、**like**、**between**、**and 逻辑运算符： and**、**or**、**not like 支持特殊符号 %**、**_ ，用于模糊搜索 % ： 可以表示任意数量的任意字符 _ ： 表示任意一位字符 例如： select * from users where name like ‘_段’; 主键表中的每一行应该都有可以唯一标识自己的一列，用于记录两条不重复的记录，任意两行都不具有相同的主键值，便于后续的数据操纵和管理 要求： 一旦插入表中，不要更改 不允许 NULL 不在主键列中使用可能会被更改的值 自增整数类型 可以使用多个列作为联合主键，但联合主键并不常用，实用多列作为主键时，所有列值的组合必须是唯一的 MySQL 数据库与数据表操作 数据表结构的修改再来复习一次叭 创建一个数据库的流程1.数据库的创建12345678# 链接MySQL数据库后，进入MySQL后可以操作数据# 1. 创建库create database if not exists tlxy default charset=utf8;-- 1. 数据库 tlxy 如果不存在则创建数据库，存在则不创建-- 2. 创建 tlxy 数据库，并设置字符集为utf8-- 3. 无特殊情况都要求字符集为utf8或者utf8mb4的字符编码 2.查看数据库12# 1.查看所有数据库show databases; 3.打卡库、进入库、选择库12# use 库名use tlxy; 4.删除库删库有风险 12# 删除库 库中所有的数据都在磁盘中被删除drop database 库名 在库中操作表的流程1.创建表语法格式为 create table 表名(字段名, 类型, 【字段约束】, …) 实例 1234567891011121314151617# 创建一个 users 表create table users( -- 创建ID字段，为正整数，不允许为空 主键，自动递增 id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT, -- 创建 存储 名字的字段 为字符串类型，最大长度五个字符，不允许为空 username VARCHAR(5) NOT NULL, -- 创建 存储 密码的字段， 固定长度为32位字符，不允许为空 password CHAR(32) NOT NULL, -- 创建 年龄 字段，不允许为空， 默认值为20 age TINYINT UNSIGNED NOT NULL DEFAULT 20)engine=innodb default charset=utf8;# 查看表结构desc users;# 查看建表语句show create table users; 在这里的 password 使用的是 char(32)位字符，这是因为在数据库中 md5 的加密方式，不管密码多大加密的结果都是 32 位 创建表的原则 表名和字段名 尽可能的符合命名规范 并且最好能够见名知意 表中数据必须有唯一标识，即主键。无特殊情况，都为数字并自增即可 表中字段所对应的类型设置合理，并限制合理长度 表引擎推荐使用 innodb，无特殊情况都要求字符集为 utf8 或者 utf8mb4 的字符编码 2.修改表结构语法格式为 alter table 表名 action(更改的选项) 实例 添加字段语法： alter table 表名 add 添加的字段信息 1234567891011-- 在 users 中 追加一个 num 字段alter table users add num int not null;-- 在 指定字段后 users 中 age字段后面 添加一个 email字段alter table users add email varchar(50) after age;-- 在 指定字段后 users 中 email字段后 添加一个 phone字段alter table users add phone char(11) not null after age;-- 在 表的最前面添加一个字段alter table users add title int first; 删除字段12# 删除字段 alter table 表名 drop 被删除的字段名alter table users drop title; 修改字段语法格式 alter table 表名 change|modify 被修改的字段信息&#96;&#96;change：可以修改字段名 modify：不能修改字段名 12345# 修改表中的 num 字段 类型alter table users modify num tinyint not null default 12;# 修改表中的 num 字段 为 int 类型 并且字段名更新为numberalter table users change num mm int; 3.修改表名语法格式 alter table 原表名 rename as 新表名; 4.更改表中的自增的值12# 在常规情况下，auto_increment默认从1开始继续递增alter table users auto_increment = 1000; 5.修改表引擎12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# 推荐在定义表时候，表引擎为innodb# 可以使用建表语句来查看当前表引擎mysql&gt; show create table users\\G;*************************** 1. row *************************** Table: usersCreate Table: CREATE TABLE `users` ( `id` int NOT NULL AUTO_INCREMENT, `name` varchar(4) NOT NULL, `age` tinyint DEFAULT NULL, `gender` enum(&#x27;男&#x27;,&#x27;女&#x27;) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf81 row in set (0.00 sec)ERROR:No query specified# 直接查看当前表引擎mysql&gt; show table status from tlxy where name = &#x27;users&#x27;\\G;*************************** 1. row *************************** Name: users Engine: InnoDB Version: 10 Row_format: Dynamic Rows: 3 Avg_row_length: 5461 Data_length: 16384Max_data_length: 0 Index_length: 0 Data_free: 0 Auto_increment: 4 Create_time: 2022-04-10 16:10:12 Update_time: NULL Check_time: NULL Collation: utf8_general_ci Checksum: NULL Create_options: Comment:1 row in set (0.01 sec)ERROR:No query specified# 修改表引擎语句alter table users engine = &#x27;myisam&#x27;; 6.删除表语法格式 drop table 表名; 详解 MySQL 存储引擎客户端向服务器发送的各类增删查改的请求12345678910graph TDA[客户端] --&gt; B(处理连接)B --&gt; C(查询缓存)C --&gt; D(语法解析)D --&gt; E&#123;查询优化&#125;E --&gt; F[MyISAM]E --&gt; G[InnoDB]E --&gt; H[Memory]E --&gt; I[...]G --&gt; J(文件系统) MySQL 服务器把数据的存储和提取都封装到了一个叫存储引擎的模块里。我们知道表是由一行一行的记录组成，但这只是一个逻辑上的概念，物理上如何表示记录，怎么从表中读取数据，怎么把数据写入具体的物理存储器上，这都是存储引擎负责的事情。为了实现不同的功能，MySQL 提供了各式各样的存储引擎，不同的存储引擎管理的表具体的存储结构可能不同，采用的存取算法也可能不同。 存储引擎存储引擎以前叫做表处理器，它的功能就是接收上层传下来的指令，然后对表中的数据进行提取或写入操作。 为了管理方便，人们把 连接管理、查询缓存、语法解析、查询优化这些并不涉及在真实数据存储的功能划分为 MySQL server 的功能，把真实存储数据的功能划分为存储引擎的功能。各种不同的存储引擎向上边的 MySQL server 层提供统一的调用接口（即 存储引擎 API），包含了几十个底层函数，像“读取索引第一条内容”、“读取索引下一条内容”、“插入记录”等等。 所以在 MySQL server 完成了查询优化之后，只需要按照生成的执行计划调用底层存储引擎提供的 API，获取到数据后返回给客户端就好啦 MySQL 支持非常多种存储引擎 存储引擎 描述 ARCHIVE 用于数据存档（行被插入后不能修改） BLACKHOLE 丢弃写操作，读操作会返回空内容 CSV 在存储数据时，以逗号分隔各个数据项 FEDERATED 用来访问远程表 InnoDB 具备外键支持功能的事务存储引擎 MEMORY 置于内存的表 MERGE 用来管理多个 MyISAM 表构成的表集合 MyISAM 主要的非事务处理存储引擎 NDB MySQL 集群专用存储引擎 MyISAM 和 InnoDB 表引擎的区别1)事务支持MyISAM 不支持事务操作，而 InnoDB 支持 事务：访问并更新数据库中数据的执行单元，事务操作中，要么都执行要么都不执行 举个例子，黄黄给段段转钱，执行的语句是 黄黄扣钱，然后段段增加钱；那么如果发生了服务器断电的事件，因为有事务这一特性不会造成，黄黄扣钱之后，段段也没有增加钱这样的情况。 2)存储结构MyISAM：每个 MyISAM 在磁盘上存储成三个文件 .frm 文件 存储表结构 .MYD 文件 存储数据 .MYI 文件 存储索引 InnoDB：主要分为两种文件进行存储 .frm 存储表结构 .ibd 存储数据和索引（也可能是多个.ibd 文件，或者是独立的表空间文件） 3)表锁差异MyISAM：只支持表级锁，用户在操作 MyISAM 表时，select、update，delete，insert 语句都会给表自动加锁，如果加锁以后的表满足 insert 并发的情况下，可以在表的尾部插入新的数据。 InnoDB：支持事务和行级锁，是 InnoDB 的最大特色，行锁大幅度提高了多用户并发操作的性能，但是 InnoDB 的行锁，只是在 WHERE 的主键是有效的，而非主键的 WHERE 都会锁全表的。 4)表主键MyISAM：允许没有任何索引和主键的表存在，索引都是保存行的地址 InnoDB：如果没有设定主键或者非空唯一索引，就会自动生成一个 6 字节的主键（用户不可见），数据是主索引的一部分，附加索引保存的是主索引的值。InnoDB 的主键范围更大，最大是 MyISAM 的 2 倍。 5)表的具体行数MyISAM：保存有表的总行数，如果 select count() from table;会直接取出改值 InnoDB：没有保存表的总行数(只能遍历)，如果使用 select count() from table;就会遍历整个表，消耗相当大，但是在加了 where 条件之后，MyISAM 和 InnoDB 处理的方式是一样的 6)CURD 操作MyISAM：如果执行大量的 SELECT，MyISAM 是更好地选择 InnoDB：如果你的数据执行大量的 INSERT 或 UPDATE，出于性能方面考虑，应该使用 InnoDB 表。DELETE 从性能上 InnoDB 更优，但 DELETE FROM table 时，InnoDB 不会重新建立表，而是一行一行删除，在 InnoDB 上如果要清空保存有大量数据的表，最好使用 truncate table 这个命令 7)外键MyISAM：不支持 InnoDB：支持 8)查询效率推荐使用 InnoDB 9)MyISAM 和 InnoDB 两者的应用场景 MyISAM 管理非事务表，它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的 SELECT 查询，推荐使用 MyISAM InnoDB 用于事务处理应用程序，具有众多特性，包括 ACID 事务支持。如果应用中需要执行大量的 INSERT 或者 UPDATE 操作，则应该使用 InnoDB 这样可以提高多用户并发操作的性能，现在默认使用 InnoDB 了解字符集中 utf8 和 utf8mb4 的区别正常的 utf8 使用的是 1~4 字节的表示方式 但是在 MySQL 中，设计者设计了两个概念 utf8，即 utf8mb3：使用的是阉割版 utf8，只使用了 1~3 个字节表示字符 utf8mb4：就是上面正宗的 utf8，使用 1~4 个字节表示 当需要使用到类似于 emoji 等表情，就需要使用 utf8mb4 字符集的查看使用命令 show character set;或者 show charset; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647mysql&gt; show character set;+----------+---------------------------------+---------------------+--------+| Charset | Description | Default collation | Maxlen |+----------+---------------------------------+---------------------+--------+| armscii8 | ARMSCII-8 Armenian | armscii8_general_ci | 1 || ascii | US ASCII | ascii_general_ci | 1 || big5 | Big5 Traditional Chinese | big5_chinese_ci | 2 || binary | Binary pseudo charset | binary | 1 || cp1250 | Windows Central European | cp1250_general_ci | 1 || cp1251 | Windows Cyrillic | cp1251_general_ci | 1 || cp1256 | Windows Arabic | cp1256_general_ci | 1 || cp1257 | Windows Baltic | cp1257_general_ci | 1 || cp850 | DOS West European | cp850_general_ci | 1 || cp852 | DOS Central European | cp852_general_ci | 1 || cp866 | DOS Russian | cp866_general_ci | 1 || cp932 | SJIS for Windows Japanese | cp932_japanese_ci | 2 || dec8 | DEC West European | dec8_swedish_ci | 1 || eucjpms | UJIS for Windows Japanese | eucjpms_japanese_ci | 3 || euckr | EUC-KR Korean | euckr_korean_ci | 2 || gb18030 | China National Standard GB18030 | gb18030_chinese_ci | 4 || gb2312 | GB2312 Simplified Chinese | gb2312_chinese_ci | 2 || gbk | GBK Simplified Chinese | gbk_chinese_ci | 2 || geostd8 | GEOSTD8 Georgian | geostd8_general_ci | 1 || greek | ISO 8859-7 Greek | greek_general_ci | 1 || hebrew | ISO 8859-8 Hebrew | hebrew_general_ci | 1 || hp8 | HP West European | hp8_english_ci | 1 || keybcs2 | DOS Kamenicky Czech-Slovak | keybcs2_general_ci | 1 || koi8r | KOI8-R Relcom Russian | koi8r_general_ci | 1 || koi8u | KOI8-U Ukrainian | koi8u_general_ci | 1 || latin1 | cp1252 West European | latin1_swedish_ci | 1 || latin2 | ISO 8859-2 Central European | latin2_general_ci | 1 || latin5 | ISO 8859-9 Turkish | latin5_turkish_ci | 1 || latin7 | ISO 8859-13 Baltic | latin7_general_ci | 1 || macce | Mac Central European | macce_general_ci | 1 || macroman | Mac West European | macroman_general_ci | 1 || sjis | Shift-JIS Japanese | sjis_japanese_ci | 2 || swe7 | 7bit Swedish | swe7_swedish_ci | 1 || tis620 | TIS620 Thai | tis620_thai_ci | 1 || ucs2 | UCS-2 Unicode | ucs2_general_ci | 2 || ujis | EUC-JP Japanese | ujis_japanese_ci | 3 || utf16 | UTF-16 Unicode | utf16_general_ci | 4 || utf16le | UTF-16LE Unicode | utf16le_general_ci | 4 || utf32 | UTF-32 Unicode | utf32_general_ci | 4 || utf8 | UTF-8 Unicode | utf8_general_ci | 3 || utf8mb4 | UTF-8 Unicode | utf8mb4_0900_ai_ci | 4 |+----------+---------------------------------+---------------------+--------+41 rows in set (0.01 sec) 更新: 2024-01-23 06:40:42原文: https://www.yuque.com/zacharyblock/cx2om6/ovcglbg23nxq6bkh","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://blockzachary.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://blockzachary.github.io/tags/MySQL/"}]},{"title":"Python - ATM 项目","slug":"Python面向对象/ATM项目","date":"2022-12-31T17:46:00.000Z","updated":"2022-12-31T17:46:00.000Z","comments":true,"path":"blog/984112988/","permalink":"https://blockzachary.github.io/blog/984112988/","excerpt":"","text":"ATM 项目ATM 系统项目说明文档运用基础阶段所学的 Python 知识，来模拟出银行的 ATM 系统。 要求：使用面向对象编程来完成这个项目 ATM 系统的主要功能： 注册：用户名，手机号，身份证号（18 位），密码（两次确认，长度 6 位） 查询：账号必须存在，密码（3 次机会，不对就锁卡） 取款：账号必须存在，密码（3 次机会，不对就锁卡），取款金额不能大于存款 存款：账号必须存在，存款金额不能低于 0 元 转账：您的账户，转款账户都必须存在，密码（3 次机会，不对就锁卡），转账金额不能超过余额 锁卡：账号必须存在，可以使用密码冻结，还可以使用身份证号冻结 解卡：账号必须存在，只能使用身份证号进行解锁 补卡：使用身份证进行补卡，每个身份证只能有一张卡，之前的卡作废 改密：原密码进行改密，也可以使用身份证进行改密 退出：保存数据 项目分析根据需求进行分析，思考如何对项目进行设计和架构 思考问题一：如何使用面向对象编程思想来完成当前的项目功能和项目演示中，有几个对象？ 银行卡对象: Card 存储银行卡信息 卡号: cardid 密码: password 余额: money 是否锁卡: islock 用户对象: Person 存储用户信息 用户名: name 身份证号: userid 手机号: phone 卡号: card 控制器对象: Controller 具体的操作控制类控制器对象中主要就是去实现 ATM 这个系统中的操作 在上面定义的呐十个方法 注册：register 查询：query 取款：get_money 存款：add_money 转账：save_money 锁卡：lock 解卡：unlock 补卡：new_card 改密：change_pwd 退出：save 视图对象：Views 显示操作界面欢迎界面，操作界面 思考问题二：如何存储数据肯定是用文件进行存储 卡号：用户 &#x3D;&#x3D;&#x3D;&gt; user_dict &#x3D;&#x3D;&#x3D;&gt; user.txt 身份证：卡号 &#x3D;&#x3D;&#x3D;&gt; user_id_dict &#x3D;&#x3D;&#x3D;&gt; userid.txt 项目基本结构搭建ATM项目说明文档 项目基本功能当前的 ATM 系统模拟实现银行 ATM 机的操作系统功能 注册：register 查询：query 取款：get_money 存款：add_money 转账：save_money 锁卡：lock 解卡：unlock 补卡：new_card 改密：change_pwd 退出：save 项目基本结构123456789101112├── ATM/ # 项目目录│ ├── README.md # 项目文档│ ├── databases/ # 数据存储目录│ │ ├── user.txt # 卡号│ │ └── userid.txt # 身份证│ ├── main.py # 程序单入口文件│ └── packages/ # 包│ ├── __init__.py│ ├── cardclass.py # 银行卡类│ ├── controllerclass.py # 操作控制类│ ├── personclass.py # 用户类│ └── viewsclass.py # 视图显示类 运行环境 系统：windows、Mac OS、Linux 版本：python3.5+ 其他：无 迭代计划 增加银行操作日志 将数据存储更改为数据库 MySQL 详细内容见代码https://github.com/BlockZachary/Python_oop&#x2F;tree&#x2F;master&#x2F;ATM 更新: 2024-01-10 22:46:43原文: https://www.yuque.com/zacharyblock/cx2om6/ozwmftr5d8430maz","categories":[{"name":"Python面向对象","slug":"Python面向对象","permalink":"https://blockzachary.github.io/categories/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"项目","slug":"项目","permalink":"https://blockzachary.github.io/tags/%E9%A1%B9%E7%9B%AE/"}]},{"title":"Python - 异常、模块、包","slug":"Python面向对象/异常、模块、包","date":"2022-12-31T17:41:00.000Z","updated":"2022-12-31T17:41:00.000Z","comments":true,"path":"blog/1817629786/","permalink":"https://blockzachary.github.io/blog/1817629786/","excerpt":"","text":"异常、模块、包异常处理什么是异常异常就是 非正常 没有达到预期目标 的非语法错误，会影响程序正常执行，Python 解释器不能正常处理的问题 异常分两种： 语法错误导致的异常 逻辑错误导致的异常 对于不可预知的异常错误，可以使用 try…except…对异常进行处理 常用的异常类继承关系 1234try: 可能发生异常错误的代码except: 如果发生了异常则进入except代码块 1234567891011121314151617181920212223242526272829303132333435363738394041# 异常例子varlist = [1,2,3]print(varlist[3])&quot;&quot;&quot;运行结果为：Traceback (most recent call last): File &quot;/Users/zachary/PycharmProjects/Python教程阶段1/code_oop/41什么是异常.py&quot;, line 6, in &lt;module&gt; print(varlist[3])IndexError: list index out of range其中：IndexError 异常类list index out of range 异常信息&quot;&quot;&quot;# 异常处理除法val = input(&quot;请输入一个数字:&quot;)try: num = int(val) res = 10 / num print(res)except ValueError as e: print(&quot;not input number value&quot;)except ZeroDivisionError as e: print(&quot;can not input 0&quot;)# 异常处理文件try: with open(&#x27;./user.txt&#x27;, &#x27;r&#x27;) as file: res = file.read() print(res)except: print(&#x27;file not exist&#x27;)print(&#x27;other program&#x27;)# file not exist# other program try_except_else_finally try 执行可能会引发错误的代码块 except 捕获异常并输出 else 如果 try 代码块没有出错就会执行 finally 无论 try 有无错误都会执行 raise 可以抛出一个异常 assert 断言，后面的表达式如果正确 什么也不做，如果表达式错误，则抛出异常 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889# 1.处理指定的异常，引发了非指定的异常，无法处理try: varlist = [1, 2, 3] print(varlist[3])except IndexError as e: print(e) # list index out of range# 2.多分支处理异常try: s = &#x27;duanduan&#x27; res = int(s)except ValueError as e: print(&#x27;ValueError&#x27;, e)except KeyError as e: print(&#x27;KeyError&#x27;, e)except IndexError as e: print(&#x27;IndexError&#x27;, e)# ValueError invalid literal for int() with base 10: &#x27;duanduan&#x27;# 3.通用异常类 Exceptiontry: s = &#x27;duanduan&#x27; res = s[10]except Exception as e: print(&#x27;Exception&#x27;, e)# Exception string index out of range# 4.多分支异常类+通用异常类try: s = &#x27;duanduan&#x27; res = int(s)except KeyError as e: print(&#x27;KeyError&#x27;, e)except IndexError as e: print(&#x27;IndexError&#x27;, e)except Exception as e: print(&#x27;Exception&#x27;, e)# Exception invalid literal for int() with base 10: &#x27;duanduan&#x27;# 5.try except elsetry: s = &#x27;duandaun&#x27; res = str(s)except KeyError as e: print(&#x27;KeyError&#x27;, e)except IndexError as e: print(&#x27;IndexError&#x27;, e)except Exception as e: print(&#x27;Exception&#x27;, e)else: print(&#x27;try中没有错误&#x27;)# try中没有错误# 6.try except else finallytry: s = &#x27;duandaun&#x27; res = str(s)except KeyError as e: print(&#x27;KeyError&#x27;, e)except IndexError as e: print(&#x27;IndexError&#x27;, e)except Exception as e: print(&#x27;Exception&#x27;, e)else: print(&#x27;try中没有错误&#x27;)finally: print(&#x27;代码执行完毕，这句肯定输出&#x27;)# try中没有错误# 代码执行完毕，这句肯定输出# 7. 主动抛出异常 raisetry: raise Exception()except Exception as e: print(&#x27;Exception&#x27;, e)# Exception# 8. assert 断言 后面的表达式正确什么耶不做 错误的话 抛出异常try: assert 1 == 2except AssertionError as e: print(&#x27;AssertionError&#x27;, e)# AssertionError 自定义异常类123class InvalidInputArgument(Exception): def __init__(self,*args): super().__init__(args) 当异常出现时，对异常信息写入日志 123456789101112131415161718192021222324252627&quot;&quot;&quot;在出现异常后，对异常进行处理，并且把异常信息写入日志日志的基本格式： 日期时间 异常的级别 异常信息：引发的异常类，异常的信息，文件及行号&quot;&quot;&quot;import tracebackimport loggingclass Myexception(): def __init__(self): # logging 基本配置 logging.basicConfig( filename=&#x27;./error.log&#x27;, # 日志存储的文件目录 format=&#x27;%(asctime)s %(levelname)s \\n %(message)s&#x27;, datefmt=&#x27;%Y-%m-%d %H:%M:%S&#x27; ) # 写入日志 logging.error(traceback.format_exc())try: res = int(&#x27;duanduan&#x27;)except: Myexception() 模块与包定义的一个 python 文件，后缀名为.py 这个文件被称为模块 模块中通常会定义一些相似的类，函数等代码内容，提供给别的程序引入后使用 系统模块 系统模块就是一个 python 的程序脚本，专门提供给我们自己的程序使用。 它们是安装好 python 环境的时候，就已经存在的，需要的时候可以使用 import 导入到程序中使用 import logging, json, math, time 自定义模块 就是自己创建的一个 python 脚本，定义一些类或方法，供别的脚本导入后使用 自定义模块的使用12345678910111213141516171819# 使用方式之一import Exceptiontry: res = int(&#x27;duanduan&#x27;)except: Exception.MyException() Exception.output() print(Exception.var)# 使用方式之二from Exception import *try: res = int(&#x27;duanduan&#x27;)except: MyException() output() print(var) 自定义包和使用包可以理解为是一个文件夹，里面包含了多个 python 文件 包的结构 12345678└── package_fa ├── __init__.py # 包的标志性文件（可以有内容，也可以没有） ├── a.py # a模块（文件） ├── b.py # b模块（文件） └── package_son ├── __init__.py ├── c.py └── d.py 实际上，**init.py 可以实现一个功能在导入包的时候，想要使用from package_fa import *的时候需要在 package_fa下的**init.py下写入：**all &#x3D; [‘module1’,’module2’,…]这里的module1，2 指的就是在 package_fa下的模块名称** 来做一个测试叭，首先在当前项目文件夹下创建一个类似上述的目录结构 之后编写代码进行测试 12345678910111213141516171819202122232425# 使用1：导入指定的包中的模块from package_fa import aa.funca() # funca# 使用2：从指定包的指定模块导入指定的内容from package_fa.b import funcbfuncb() # funcb# 使用3：从指定包的子包中导入模块from package_fa.package_son import cc.funcc() # funcc# 使用4：从指定包的子包的指定模块导入指定内容from package_fa.package_son.d import funcdfuncd() # funcd# 使用5: 需要在package_fa 中的__init__.py写入模块列表# 格式为: __init__.py ===&gt; __all__ = [&#x27;a&#x27;,&#x27;b&#x27;]from package_fa import *a.funca() 可以讲一下：name &#x3D; main, 导入方式的分类绝对导入 会使用[搜索路径]去查找和导入指定的包或模块 import module import package import package.module from module import content from package import module from package.module import content 相对导入from .package&#x2F;module import module&#x2F;content from ..package&#x2F;module import module&#x2F;content . 表示当前目录 .. 表示上一级目录 123456789101112def funcc(): print(&#x27;funcc&#x27;)# 假设在c.py中需要d.py 可以使用相对导入，但是不要直接运行c.pyfrom .d import funcdfuncd()# 假设想要在c中使用上一级的afrom .. import aa.funca() 123from package_fa.package_son import c# funcd# funca 单入口程序单入口程序指的是整个程序都是经过一个主程序文件在运行，其他程序都封装成了包或模块 1234567891011ATM└── main.py # 当前程序的主入口文件，单入口文件，唯一直接运行的文件├── package/ # 主要程序模块包 ├── __init__.py # 包的初始化文件 ├── View.py # 视图函数模块 ├── Controller.py # 控制器模块 ├── Card.py # 银行卡模块 └── User.py # 用户模块└── databases/ # 数据存储文件夹 ├── user.txt └── user_id_card.txt Python 中的第三方库的管理 pip第三方库的管理网站https://pypi.org/ pip 的使用 查看 pip 版本 pip -V 安装 pip install -i &lt;仓库镜像的地址&gt; 包名(库名) pip3 install -i [http://mirrors.aliyun.com/pypi/simple/](http://mirrors.aliyun.com/pypi/simple/) --trusted-host mirrors.aliyun.com mysqlclient==2.1.1 常用镜像地址 阿里云 http://mirrors.aliyun.com/pypi/simple/ 豆瓣 http://pypi.douban.com/simple/ 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/ 华中科技大学 http://pypi.hustunique.com/ 安装指定版本的包 pip install &lt;package&gt;==&lt;版本&gt; 查看已经安装的 package pip list 检查 package 是否已经过期 pip list outdated 卸载 package pip uninstall &lt;包名&gt; 查看 package 的依赖 pip show &lt;包名&gt; Python 中的虚拟环境 venv虚拟环境就是在当前的系统环境中，去配置另外一个 python 的运行环境，是可以创建多个不同的虚拟环境 python 的虚拟环境相互独立，互不影响 虚拟环境中可以在没有权限的情况下安装库（Linux 系统中可能会出现的问题） 不同的应用可以使用不同的库或者不同的版本 虚拟环境中的库升级也不影响其他环境 虚拟环境可以作为一个项目的专有环境，在需要部署的时候，可以一键导出项目所需要的包 如何创建一个虚拟环境 使用 pycharm 创建 自己安装独立的虚拟环境 安装虚拟环境工具 pip install virtualenv 创建虚拟环境 python3 -m venv &lt;虚拟环境名称&gt; 激活虚拟环境 source &lt;虚拟环境名称&gt;/bin/activate 退出虚拟环境 deactivate 导出当前环境项目包 pip freeze &gt; ./requirements.txt 通过 requirement 安装依赖包 pip install -r requirement.txt 更新: 2024-01-27 22:21:03原文: https://www.yuque.com/zacharyblock/cx2om6/ql4zdyscp3ffck91","categories":[{"name":"Python面向对象","slug":"Python面向对象","permalink":"https://blockzachary.github.io/categories/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 面向对象高阶","slug":"Python面向对象/面向对象高阶","date":"2022-12-31T17:31:00.000Z","updated":"2022-12-31T17:31:00.000Z","comments":true,"path":"blog/3938337518/","permalink":"https://blockzachary.github.io/blog/3938337518/","excerpt":"","text":"面向对象高阶内置成员 获取当前类\\对象的所属成员，返回一个字典包含类或对象的成员 类名.dict 对象名.dict 获取类的文档信息，就是定义类后对类的一个说明 类名.doc 对象名.doc 获取类名称，结果返回字符串 类名.name 获取类所在的文件名称，如果是当前文件就会返回main 类名.module 获取当前类的父类或者父类列表列表 类名.base 类名.bases 获取类的继承关系 类名.mro 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class A(): passclass B(): passclass Demo(A, B): &quot;&quot;&quot; 这是类的说明文档 &quot;&quot;&quot; name = None age = None def func(self): print(&#x27;这是一个方法&#x27;)res = Demo.__dict__print( res) # &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: &#x27;\\n 这是类的说明文档\\n &#x27;, &#x27;name&#x27;: None, &#x27;age&#x27;: None, &#x27;func&#x27;: &lt;function Demo.func at 0x10076b560&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Demo&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Demo&#x27; objects&gt;&#125;d = Demo()res = d.__dict__print(res) # &#123;&#125;res = Demo.__doc__print(res)## 这是类的说明文档#res = d.__doc__print(res)## 这是类的说明文档#res = Demo.__name__print(res) # Demores = Demo.__module__print(res) # __main__res = Demo.__base__print(res) # &lt;class &#x27;__main__.A&#x27;&gt;res = Demo.__bases__print(res) # (&lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;)print(Demo.mro()) # [&lt;class &#x27;__main__.Demo&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]print(Demo.__mro__) # (&lt;class &#x27;__main__.Demo&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;) 方法的分类对象方法在类中定义的方法，含有 self 参数 含有 self 的方法，只能使用对象进行调用 该方法会把调用的对象传递进来 12345678910# 对象方法class Demo(): def fun(self): print(self) print(&#x27;this is func&#x27;)d = Demo()d.fun()# &lt;__main__.Demo object at 0x10cc92150&gt;# this is object method 类方法在类中定义的方法，使用了装饰器@classmethod 进行装饰的类 方法中有 cls 这个形参，不需要实例化对象就可以直接用类调用的方法 会把调用这个方法的类传递进来 1234567891011# 类方法class Cdemo(): @classmethod def fun(cls): print(cls) print(&#x27;this is class method&#x27;)Cdemo.fun()# &lt;class &#x27;__main__.Cdemo&#x27;&gt;# this is class method 绑定类方法绑定类方法就是在类中，不带有形参 self 的一个方法 调用的时候直接使用类调用，无法使用对象调用 不会传递任何参数进来 12345678# 绑定类方法class Bdemo(): def func(): print(&#x27;this is bind class func&#x27;)Bdemo.func()# this is bind class func 静态方法在类中定义的方法，使用了装饰器@staticmethod 进行装饰的类 类中，不带有形参 self 的一个方法,也没有其他参数 可以使用类或者对象直接调用 不会传递任何参数 静态方法只是定义在类范围内的一个函数而已 12345678910# 静态方法class Sdemo(): @staticmethod def func(): print(&#x27;this is a static method&#x27;)s = Sdemo()s.func() # this is a static methodSdemo.func() # this is a static method 常用函数 检测一个类是否为另一个类的子类 issubclass(son,fa) 检测一个对象是否是一个类的实例化 isinstance(obj,cls) 检测一个类&#x2F;对象是否具有一个成员属性 hasattr(obj&#x2F;cls,attr) 获取类&#x2F;对象成员的值 getattr(obj&#x2F;cls,attr) 设置类&#x2F;对象成员的值 setattr(obj&#x2F;cls,attr,value) 删除类&#x2F;对象的成员属性 delattr(obj&#x2F;cls,attr) dir() 获取当前对象所可以访问的成员列表 123456789101112131415161718192021222324252627282930313233343536373839404142class A(): def hello(self): print(&#x27;hello&#x27;)class B(A): passclass C(A): passclass D(B, C): name = None def get_hello(self): print(&#x27;hello&#x27;)print(issubclass(D, B)) # Trued = D()print(isinstance(d, D)) # Trueprint(isinstance(d, B)) # Trueprint(hasattr(d, &#x27;hello&#x27;)) # Trueprint(hasattr(d, &#x27;get_hello&#x27;)) # Trueprint(hasattr(d, &#x27;name&#x27;)) # Trueres = getattr(d, &#x27;name&#x27;)print(res) # Nonesetattr(d, &#x27;name&#x27;, &#x27;zachary&#x27;)print(d.name) # zacharydelattr(d,&#x27;name&#x27;)print(d.name) # Noneres = dir(d)print(res) 魔术方法魔术方法就是不需要手动调用就可以自动执行的方法 init 初始化方法 触发机制：当实例化对象之后就会立即触发的方法 作用：为当前创建的对象完成一些初始化的操作，比如：成员属性的赋值，方法的调用，打开或创建一些资源 参数：一个 self，接受当前对象，其他参数根据需求进行定义即可 返回值：无 注意事项：无 new 构造方法构造一个对象的过程是： 1234person = Person(&quot;Jack&quot;)实际上做了两件事情1. person = object.__new__(Person, &quot;Jack&quot;)2. person.__init__(&quot;Jack&quot;) 触发机制：实例化对象时自动触发（在init之前触发） 作用：管理控制对象创建的过程 参数：一个 cls 接受当前类，其他参数根据初始化方法的参数进行决定 返回值：必须返回 object.new(cls)进行对象的创建，如果没有返回值，则实例化的对象的结果为 None 注意事项： new方法的参数和init方法的参数要保持一致，除了第一个参数 必须返回 object.new(cls)进行对象的创建，如果没有返回值，则实例化对象的结果为 None 通常情况下，定义了new，就不用再定义init方法了 应用场景：设计模式中的单例设计模式 1234567891011121314151617181920class Square(int): def __new__(cls,value:int): return super().__new__(cls,value**2)num = Square(2)print(num)print(type(num))print(isinstance(num, int))class Student: def __new__(cls,name,gender): obj = super().__new__(cls) obj.name = name obj.gender = gender return objstudent = Student(&quot;zachary&quot;,&quot;male&quot;)print(student.name)print(student.gender) del 析构方法 触发机制：当该类对象被销毁时，自动触发 作用：关闭或释放对象创建时打开或创建的一些资源 参数：一个 self，接受当前对象 返回值：无 注意事项：无 call 触发机制：把对象当做函数直接调用时自动触发 作用：一般用于归纳类或对象的操作步骤，方便调用 参数：一个 self 接收当前对象，其他参数根据调用需求确定 返回值：可有可无 1234567891011121314151617181920212223242526272829303132class Person(): # 构造方法 def __new__(cls, *args, **kwargs): print(&#x27;触发了构造方法&#x27;) print(args) return object.__new__(cls) # 必须要有这一句才能返回object对象,才能触发init # 初始化方法 def __init__(self, name, age, gender): print(&#x27;触发了初始化方法&#x27;) self.name = name self.age = age self.gender = gender def __call__(self, *args, **kwargs): print(&#x27;你把对象当成了函数进行调用&#x27;) # 析构方法 def __del__(self): print(&#x27;触发了析构方法&#x27;)# 实例化对象duanduan = Person(&#x27;duandaun&#x27;, 23, &#x27;female&#x27;)duanduan()# 触发了构造方法# (&#x27;duandaun&#x27;, 23, &#x27;female&#x27;)# 触发了初始化方法# 你把对象当成了函数进行调用# 触发了析构方法 len可以代替对象使用 len 函数，并返回一个指定的整型 触发机制：当使用 len 函数去检测当前对象的时候自动触发 作用：可以使用 len 函数检测当前对象中某个数据的信息 参数：一个 self 接收当前对象 返回值：必须有，并且必须是一个整数 注意事项：len 要获取什么属性的值，就在返回值中返回那个属性的长度即可 str可以代替对象进行 str 或者 print 的字符串信息返回 触发机制：当使用 str 或者 print 函数对对象进行操作时自动触发 作用：代码对象进行字符串的返回，可以自定义打印的信息；该描述面向用户 参数：一个 self，接受当前对象 返回值：必须有，而且必须是字符串类型的值 repr 触发机制：在使用 repr 方法对当前对象进行转换时自动触发，某种情况 print 也可以触发 作用：可以设置 repr 函数操作对象的结果；该描述的主要目标是机器或者开发者 参数：一个 self 接受当前对象 返回值：必须有，而且必须是字符串类型的值 注意：正常情况下，如果没有str这个魔术方法，repr方法就会代替str魔术方法，可以使用 print 进行触发 bool 触发机制：当使用 bool 函数转换当前对象时，自动触发 作用：可以代替对象进行布尔类型的转换，可以转换任何数据 参数：一个 self 接收对象 返回值：必须是一个布尔类型的返回值，如果没有实现bool方法，会去掉用len的结果求解 bool 值 eq 触发机制：当使用==比较两个对象的内容是否相同的时候 作用：对比两个对象是否相等的逻辑 参数：一个 self 接收对象，other 接收另一个对象 返回值：必须有 Bool 类型 hash 触发机制：使用hash()方法 或者 将该对象加入到 set、dict 等需要调用 hash()方法的时候会调用 作用：根据对象生成 hash 值的逻辑 参数：一个 self 接收对象 返回值：hash 值 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class Demo(): listurl = [] def __len__(self): return len(self.listurl) def __str__(self): return &#x27;这是当前脚本中的一个对象&#x27; def __repr__(self): return &#x27;这是一个对象&#x27;obj = Demo()res = len(obj)print(res) # 0# 使用__str__print(obj) # 这是当前脚本中的一个对象res = str(obj)print(res) # 这是当前脚本中的一个对象# 注释掉__str__, 只使用__repr__print(obj) # 这是一个对象# 不用注释掉__str__, 使用__repr__res = repr(obj)print(res) # 这是一个对象# 使用bool without __bool__res = bool(obj)print(res) # False 因为listurl是空的，若listurl有值，则为Trueclass MyDate(): def __init__(self,year,month,day): self.year = year self.month = month self.day = day def __eq__(self,other): if not isinstance(other,MyDate): return False return self.year == other.year and self.month == other.month and self.day == other.day def __hash__(self): print(&quot;__hash__被调用了&quot;) return hash(self.year + self.month * 41 + self.day * 41)# eqmydate1 = MyDate(2023,1,4)mydate2 = MyDate(2023,1,4)mydate3 = mydate1print(mydate1 is mydate2)print(mydate1 is mydate3)print(mydate1 == mydate2)print(mydate1 == mydate3)# hashtest_set = set()test_set.add(mydate1)print(hash(mydate2)) str 与 reprstr 和 repr 函数都能够把其他类型的数据转化为字符串类型 str 函数会把对象 转为 更适合人类阅读的形式 repr 函数会把对象 转为 更适合解释器读取的形式 如果数据对象并没有明显的区别的话，str 和 repr 结果是一样的 成员相关魔术方法 getattribute(self, item) 触发机制：当访问对象成员时，自动触发，无论当前成员是否存在，也无论当前成员是否有值 作用：可以在获取对象成员时，对数据进行一些处理 返回值：可有可无，返回的值就是访问的结果 注意事项： 在当前的魔术方法中，禁止使用 对象.成员 的方式进行成员访问，会触发递归 如果想要在当前魔术方法中访问对象的成员必须使用 object 来进行访问 格式： object.getattribute(self, item) getattr 触发机制：当访问对象中不存在的成员时，自动触发 作用：防止访问不存在的成员时报错，也可以为不存在的成员进行赋值操作 参数：一个 self 接收当前对象，一个 item 接收当前访问的成员名称 返回值：可有可无 注意事项： 如果有getattribute存在，就会无法使用getattr，会直接调用到getattribute 也要注意，不要在当前的方法中再次去访问这个不存在的成员，会触发递归操作 setattr 触发机制：当给对象的成员进行赋值操作时会自动触发（包括添加、修改） 作用：可以限制或管理对象成员的添加和修改操作 参数：1.self 接收当前对象 2.设置的成员名 3.设置的成员值 返回值：无 注意事项： 在当前的魔术方法中禁止给当前对象的成员直接进行赋值操作，会触发递归操作， 如果想要给当前对象的成员进行赋值，需要借助 object 格式：object.setattr(self,key,value) 该方法中如果没有给对象成员进行赋值，那么对象成员赋值失败 delattr 触发机制：当删除对象成员时自动触发 作用：可以去限制对象成员的删除，还可以删除不存在成员时的报错 参数：1.self 接收当前对象 2.item 删除的成员名称 返回值：无 注意事项： 在当前魔术方法中禁止直接删除对象的成员，会触发递归操作 如果想要删除当前对象的成员，那么需要借助 object 格式：object.delattr(self,item) 访问一个成员的顺序 调用 getattribute魔术方法 调用数据描述符 调用当前对象的成员属性 调用当前类的成员 调用非数据描述符 调用父类的成员 调用getattr魔术方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class Person(): name = &#x27;名字&#x27; age = &#x27;年龄&#x27; gender = &#x27;性别&#x27; def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def say(self): print(&#x27;聊一聊，倾诉一下&#x27;) def sing(self): print(&#x27;庄先生，高歌一曲&#x27;) # 获取成员对象时候 自动触发 def __getattribute__(self, item): try: # 在方法中只能使用object获取属性值 res = object.__getattribute__(self, item) return res[0] + &#x27;*&#x27; + res[-1] except: return False def __getattr__(self, item): print(item) return False def __setattr__(self, key, value): object.__setattr__(self, key, value) def __delattr__(self, item): object.__delattr__(self, item)duan = Person(&#x27;duanduan&#x27;, 23, &#x27;female&#x27;)print(duan.name) # d*nprint(duan.salary) # False# 把 __getattribute__ 注释掉print(duan.name) # duanduanprint(duan.salary)# salary# False# 把 __getattribute__ 注释掉duan.salary = 10000print(duan.salary) # 10000# 把 __getattribute__ 注释掉del duan.salaryprint(duan.salary) # salarydel duan.nameprint(duan.name)# False# 名字 描述符与 property当一个类中，包含了三个魔术方法（get,set,delete）之一，或者全部，那么这个类就被称为描述符类 基本语法描述符的作用： 描述符的作用就是对一个类中的某个成员进行一个详细的管理操作（获取、赋值、删除） 描述符就是代理了一个类中的成员的操作，描述符属于类，只能定义为类的属性 一个类中的成员的值是另一个描述符类的对象() 那么当对这个类中的成员进行操作时，可以理解为就是对另一个对象的操作 使用格式：把当前的描述符类赋值给一个需要代理的类中的成员属性 1234567891011121314151617181920212223242526class PersonName(): __name = &#x27;duanduan&#x27; def __get__(self, instance, owner): # print(self,instance,owner) return self.__name def __set__(self, instance, value): # print(self,instance,value) self.__name = value def __delete__(self, instance): del self.__nameclass Person(): # 把类中的成员属性交给描述符来实现 name = PersonName()duan = Person()print(duan.name) # duanduanduan.name = &#x27;duanxiaozhu&#x27;print(duan.name) # duanxiaozhudel duan.nameprint(duan.name) # duanduan 实际上真正的用法应该是下面这个例子，还需要额外使用一个 __set_name__(self, owner, name)方法 给属性赋值 1234567891011121314151617class PersonName: def __set_name__(self, owner, name): self.__property_name = name def __set__(self, instance, value): # 做一些校验 if not isinstance(value, str): raise Exception(f&quot;&#123;self.__property_name&#125; is not a str type&quot;) if len(value) == 0: raise Exception(f&quot;&#123;self.__property_name&#125; is empty&quot;) instance.__dict__[self.__property_name] = value def __get__(self, instance, owner): if self.__property_name in instance.__dict__: return instance.__dict__[self.__property_name] return None 应用案例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&#x27;&#x27;&#x27;定义一个学生类，需要记录，学员的id、名字、分数解决方法： 1. 在__init__方法中检测当前分数范围的合法性 但是这个方法只能在初始化的时候有效，之后修改的话就无效了 2. 定义一个__setattr__的魔术方法进行检测 检测给分数进行赋值的时候的一个合法性假如 学员的分数不止一个时怎么办，比如 语文分数、数学分数、英语分数 甚至类中的代码比较多的情况解决方法： 3. 可以使用描述符来代理我们分数这个属性&#x27;&#x27;&#x27;# 定义一个学生类，需要记录，学员的id、名字、分数# 解决方法：1. 2.class Student(): def __init__(self,id,name,score): self.id = id self.name = name if score &gt;= 0 and score &lt;=100: self.score = score else: print(&#x27;当前分数出错啦&#x27;) def returnShe(self): info = f&#x27;&#x27;&#x27; 学号：&#123;self.id&#125; 姓名：&#123;self.name&#125; 分数：&#123;self.score&#125; &#x27;&#x27;&#x27; print(info) def __setattr__(self, key, value): # 检测是否是给score进行赋值操作 if key == &#x27;score&#x27;: if value &gt;= 0 and value &lt;= 100: object.__setattr__(self,key,value) else: print(&#x27;当前分数出错啦&#x27;) else: object.__setattr__(self,key,value)duan = Student(2022,&#x27;duanduan&#x27;,100)duan.returnShe()duan.score = 1000duan.returnShe()#解决方法： 3. 使用描述符来代理我们分数这个属性# 定义描述符类class Score(): def __set__(self, instance, value): if value &gt;= 0 and value &lt;= 100: self.__score = value else: print(&#x27;当前分数出错啦&#x27;) def __get__(self, instance, owner): return self.__score def __delete__(self, instance): passclass Student(): score = Score() def __init__(self,id,name,score): self.id = id self.name = name self.score = score def returnShe(self): info = f&#x27;&#x27;&#x27; 学号：&#123;self.id&#125; 姓名：&#123;self.name&#125; 分数：&#123;self.score&#125; &#x27;&#x27;&#x27; print(info)duan = Student(2022,&#x27;duanduan&#x27;,100)duan.returnShe()duan.score = 1000duan.returnShe() 三种定义方式 数据描述符(完整) 同时具备三个魔术方法的类就是 数据描述符 非数据描述符 （不完整） 没有同时具备三个魔术方法的类就是 非数据描述符类 第一种123456789101112# 格式一 通过定义描述符类来实现class ScoreManage(): def __get__(self, instance, owner): pass def __set__(self, instance, value): pass def __delete__(self, instance): passclass Student(): score = ScoreManage() 第二种1234567891011121314151617181920212223242526# 格式二 使用property函数来实现class Studebnt(): def getscore(self): print(&#x27;getscore&#x27;) def setscore(self, value): print(&#x27;setscore&#x27;, value) def deletescore(self): print(&#x27;deletescore&#x27;) # 在property函数中指代对应的三个方法,并且参数要按顺序对应上 # 1.__get__ 2.__set__ 3.__delete__ score = property(getscore, setscore, deletescore)xs = Studebnt()print(xs.score)# getscore# None 因为上面的getscore没有返回值xs.score = 100 # setscore 100print(xs.score)# getscore# None 因为上面的getscore没有返回值del xs.score # deletescore 第三种1234567891011121314151617181920212223242526272829# 格式三 使用装饰器 @property 语法来实现class Student(): __score = None @property def score(self): print(&#x27;get&#x27;) return self.__score @score.setter def score(self, value): print(&#x27;set&#x27;) self.__score = value @score.deleter def score(self): print(&#x27;delete&#x27;) del self.__scorexs = Student()print(xs.score)# get# Nonexs.score = 100 # setprint(xs.score)# get# 100del xs.score # delete 设计模式设计模式是前人为了完成某个功能或需求，根据经验和总结，对实现的代码步骤和代码设计进行了总结和归纳。成为了实现某种需求的经典模式 设计模式并不是固定的，而是一种面向对象编程的设计 单例(单态)设计模式在当前脚本中，同一个类只能创建出一个对象去使用，这种情况就称为单例(单态) 数据库连接对象 共享对象 Python 中的单例模式设计思路， 1、需要有一个方法，可以去控制当前对象的创建 构造方法 new 2、需要有一个标识来存储和表示是否有对象 创建一个属性，进行存储，默认值为 None 3、在创建对象的方法中去检测和判断是否有对象？ 如果没有对象，则创建对象，并且把对象存储起来 如果存储的是对象，则直接返回对象，就不需要创建新的对象了 这个代码很重要1234567891011121314151617class Demo(): # 2.定义私有属性存储对象，默认值为None __obj = None # 1.定义构造方法 def __new__(cls, *args, **kwargs): # 3.在创建对象的过程中,判断是否有对象 if not cls.__obj: cls.__obj = object.__new__(cls) return cls.__obja = Demo()b = Demo()print(a) # &lt;__main__.Demo object at 0x10344e1d0&gt;print(b) # &lt;__main__.Demo object at 0x10344e1d0&gt; 使用装饰器来实现的话 1234567891011121314151617181920def singleton(cls): _obj = &#123;&#125; def inner(*args, **kwargs): if cls in _obj: return _obj[cls] obj = cls(*args, **kwargs) _obj[cls] = obj return obj return inner@singletonclass Demo: passa = Demo()b = Demo()print(a is b) 装饰器模式-2 1234567891011121314151617def singleton(cls): def inner(): if hasattr(cls,&quot;__obj&quot;): return getattr(cls,&quot;__obj&quot;) obj = cls() setattr(cls,&quot;__obj&quot;,obj) return obj return inner@singletonclass Demo: passa = Demo()b = Demo()print(a is b) 装饰器模式-3，使用元类来设计 12345678910111213141516class SingletonMeta(type): def __call__(cls, *args, **kwargs): if hasattr(cls,&quot;__obj&quot;): return getattr(cls,&quot;__obj&quot;) obj = super().__call__(*args, **kwargs) setattr(cls,&quot;__obj&quot;,obj) return objclass Demo(metaclasss=SingletonMeta): passa = Demo()b = Demo()print(a is b) mixin 混合设计模式继承需要一个必要的前提，继承应该是一个‘is-a’的关系 例如：苹果可以去继承水果，因为苹果是一个水果 Minin 表示混合 Minin 必须是表示一种功能，而不是一个对象 Minin 的功能必须单一，如果有多个功能，那就多定义 Minin 类 Python 中的 Minin 是通过多继承实现的 Minin 这个类通常不单独使用,而是混合到其他类中,去增加功能 Minin 类不依赖子类的实现,即便子类没有继承这个 Minin,子类也能正常运行,就是可能会缺少了一些功能 使用 Minin 混合类的好处 在不对类的内容修改的前提下，扩展了类的功能 Minin 混合类为了提高代码的重用性，使得代码结构更加简单清晰 可以根据开发需求任意调整功能（创建新的 Minin 类） 避免设计多层次的复杂继承关系 解决方案使用的还是多继承，但是给飞行器这个类的名称定义成为一个 Minin 混合类 这样的一个 Minin 混合类，功能单一、并且不会单独使用：只有一个飞行器的功能，在继承的时候不会单一继承这一个，作为一个扩展的功能 123456789101112131415161718192021222324252627282930# 解决方案使用的还是多继承，但是给飞行器这个类的名称定义成为一个 Minin 混合类# 这样的一个Minin混合类，功能单一、并且不会单独使用：只有一个飞行器的功能，在继承的时候不会单一继承这一个，作为一个扩展的功能# 交通工具类class vehicle(): def huo(self): print(&#x27;运输货物&#x27;) def ren(self): print(&#x27;搭载乘客&#x27;)# 飞行器类class flyingMixin(): def fly(self): print(&#x27;可以起飞啦&#x27;)# 定义汽车类class cart(vehicle): pass# 定义飞机类class airplane(vehicle,flyingMixin): pass# 定义直升机class helicopter(airplane,flyingMixin): pass 实现一个具体的列子 1234567891011121314class ItemMixin: def __getitem__(self, key): return self.__dict__[key] def __setitem__(self, key, value): self.__dict__[key] = valueclass Car(ItemMixin): def __init__(self, origin, auto): self.origin = origin self.auto = autocar = Car(&quot;Germany&quot;, True)print(car[&quot;origin&quot;]) 练习：把一个对象转换成 dict 和 json 格式，使用 mixin 设计模式 12345678910111213141516171819202122232425262728293031323334353637class DictMixin: def to_dict(self): return self.__dictConvert(self.__dict__) def __dictConvert(self, dicAttrs: dict): resDict = &#123;&#125; for key, value in dicAttrs.items(): resDict[key] = self.__valueConvert(value) return resDict def __valueConvert(self, value): if isinstance(value, DictMixin): return value.to_dict() elif isinstance(value, dict): return self.__dictConvert(value) elif isinstance(value, list): return [self.__valueConvert(i) fot i in list] elif hasattr(value,&#x27;__dict__): return self.__dictConvert(value) else: return valueclass JSONMixin: def to_json(self): return json.dumps(self.to_dict())class Car(DictMixin, JSONMixin): def __init__(self, origin, auto): self.origin = origin self.auto = autocar = Car(&quot;Germany&quot;,True)print(car.to_dict())print(car.to_json()) 抽象类 抽象类是一个特殊的类 抽象类不能用，不能直接实例化成为一个对象 抽象类中包含了抽象方法，抽象方法就是没有实现的代码的方法 抽象类需要子类继承，并重写父类的抽象方法，才可以使用 如果要定义一个抽象类，需要继承metaclass=abc.ABCMeta类 或者 ABC 如果要定义一个抽象方法，需要使用装饰器进行装饰@abc.abstractmethod 抽象类不能直接实例化 想要实现一个抽象类，需要定义一个子类去继承抽象类，然后实现抽象类中的抽象方法 1234567891011121314151617181920212223242526272829303132333435363738import abcclass AbsCls(metaclass=abc.ABCMeta): @abc.abstractmethod def absmethod(self): pass def othermethod(self): print(&#x27;这是一个实现了的方法&#x27;)class sonclass(AbsCls): def absmethod(self): print(&#x27;son实现了抽象类的抽象方法&#x27;)class daughterclass(AbsCls): def absmethod(self): print(&#x27;daughter实现了抽象类的抽象方法&#x27;)def method_call(abscls: AbsCls): abscls.absmethod()obj = sonclass()obj.absmethod()obj.othermethod()# 实现了抽象类的抽象方法# 这是一个实现了的方法son = sonclass()daughter = daughterclass()method_call(son)method_call(daughter) 枚举基本用法作用：代码中的数值，不便于阅读和查错 123class Student: def __init__(self): self.gender = 1 # male 1 female 0 定义枚举类：通过继承 enum.Enum实现一个枚举类 可以通过字符串 用[]获取到对应的枚举类型 可通过整数类型转换 用()获取到对应的枚举类型 枚举类本身是可以迭代的（比如 下拉列表，需要获取全部选项） 123456789101112131415161718192021222324252627282930from enum import Enumclass Gender(Enum): MALE = 1 FEMALE = 2class Student: def __init__(self): self.gender = Gender.MALEprint(Gender.MALE.name)print(Gender.MALE.value)# 可以通过字符串 用[]获取到对应的枚举类型gender_str = &quot;MALE&quot;student = Student()student.gender = Gender[gender_str]print(student.gender)# 也可通过整数类型转换 用()获取到对应的枚举类型gender_int = 2student.gender = Gender(gender_int)print(student.gender)# 遍历枚举成员for gender in Gender: print(gender) 枚举成员的别名 枚举类中的多个成员具有同一个 value 时，只有一个能成为主要成员，其余是别名 可以通过__members__获取枚举类的所有成员 唯一枚举装饰器 @enum.unique（为了避免 不允许重复 value 的情况下出错，比如有时候复制粘贴会写出两个相同 value 的枚举 然后忘记修改的情况，可以使用唯一枚举装饰器进行处理） 12345678910111213141516171819202122class ResStatus(Enum): SUCCESS = 1 OK = 1 FAIL = 2 NO = 2for rs in ResStatus: print(rs.name)#获取枚举类所有成员print(ResStatus.__members__)print(ResStatus.SUCCESS == ResStatus.OK)print(ResStatus.SUCCESS is ResStatus.OK)@num.uniqueclass Status(Enum): SUCCESS = 1 OK = 1 FAIL = 2 NO = 2 枚举的扩展 __str__ 12345678910class ResStatus(Enum): SUCCESS = 1 OK = 1 FAIL = 2 NO = 2 def __str__(self): print(f&quot;&#123;self.name&#125;(&#123;self.value&#125;)&quot;)print(ResStatus.OK) __eq__ 12345678910111213141516171819class ResStatus(Enum): SUCCESS = 1 OK = 1 FAIL = 2 NO = 2 def __eq__(self,other): if isinstance(other,int): return self.value == other if isinstance(other,str): return self.name == other.upper() if isinstance(other,ResStatus): return self is other return Falseprint(ResStatus.OK == 1) __lt__ 需要使用@total_ordering 123456789101112131415161718@total_orderingclass OrderOfProcess(Enum): START = 1 PROCESSING = 2 TEST = 3 END = 4 def __lt__(self): if isinstance(other,int): return self.value &lt; other if isinstance(other,OrderOfProcess): return self.value &lt; other.value return Falseprint(OrderOfProcess.PROCESSING &lt; 2)print(OrderOfProcess.END &lt; OrderOfProcess.TEST) auto() 按顺序给枚举成员赋值 123class ResStatus(Enum): SUCCESS = auto() FAIL = auto() 更新: 2024-01-11 22:37:47原文: https://www.yuque.com/zacharyblock/cx2om6/yke47fm8vxrh2w6g","categories":[{"name":"Python面向对象","slug":"Python面向对象","permalink":"https://blockzachary.github.io/categories/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 面向对象基础","slug":"Python面向对象/面向对象基础","date":"2022-12-31T17:29:00.000Z","updated":"2022-12-31T17:29:00.000Z","comments":true,"path":"blog/138858063/","permalink":"https://blockzachary.github.io/blog/138858063/","excerpt":"","text":"面向对象基础课程介绍 面向对象基础 面向对象高阶 异常 模块与包 项目（ATM&#x2F;Library） 面向对象是什么面向对象编程 ——（Object Oriented Programming，简称 OOP），是一种以对象为中心的程序设计思想 面向过程编程 ——（Procedure Oriented Programming，简称 POP），是一种以过程为中心的程序设计思想 面向对象的总结和类与对象面向过程面向过程的核心是过程，过程就是只解决问题的步骤 优缺点 优点：将负责的问题流程化，进而实现简单化 缺点：扩展性差（更新、维护、迭代） 总结：再去完成一些简单的程序时，可以使用面向过程去解决，但是如果有复杂的程序或任务，而且需要不断的进行迭代和维护，那么肯定是优先选择面向对象的编程思想 面向对象面向对象的核心是对象，是一个特征和功能的综合体 优缺点 优点：可扩展性高 缺点：变成复杂度相对面向过程高一些，指的是在计算机在执行面向对象的程序时的性能表现 面向对象中的一些名称(术语) 类：类是对象的一个抽象的概念 对象：对象是类创建的一个实例 类和对象的关系就是：模具和铸件 类是由对象总结而来的，总结的这个过程叫做抽象 对象是由类具体实施出来的，这个过程叫做实例化 面向对象-基本实现如果需要实例一个对象，那么需要先抽象一个类 类名的书写规范：使用驼峰命名法 大驼峰：MyCar、XiaoMi 小驼峰：myCar、xiaoMi 例如需要创建一个汽车对象，先要创建一个汽车类 使用 class 定义一个类 一个类中有属性和方法 属性：就是特征，即变量，类中称为属性；分为类属性和实例属性 方法：就是功能，即函数，在类中称为方法；分为类方法和实例方法 类中的属性一般定义在方法前面 12345678910111213141516171819class Cart(): # 属性 color = &#x27;白色&#x27; brand = &#x27;Audi&#x27; pailiang = 2.4 # 方法 def lahuo(self): print(f&#x27;&#123;self.color&#125;的&#123;self.brand&#125;能拉货&#x27;) def doufeng(self): print(f&#x27;排量&#123;self.pailiang&#125;能兜风&#x27;)mycar = Cart()print(mycar, type(mycar)) # &lt;__main__.Cart object at 0x100b338d0&gt; &lt;class &#x27;__main__.Cart&#x27;&gt;print(mycar.brand) # Audimycar.lahuo() # 白色的Audi能拉货mycar.doufeng() # 排量2.4能兜风 对象成员的操作什么是对象的成员？ 一个对象通过实例化之后，在类中定义的属性和方法，可以使用实例化的对象进行操作 类中定义的属性就是成员属性，类中定义的方法就是成员方法 对象的成员操作： 在类的外部，使用对象操作成员 通过对象访问类中的属性 先访问对象自己的属性 若对象自己没有这个属性，就去访问对象的类的属性 修改对象访问的类的属性 实际上修改的并不是对象的类的属性 而是创建了一个对象自己的属性并赋值 给对象添加属性 这是给对象创建了自己的属性 不是对象的类的属性 删除属性 只能删除对象属性，不能删除对象访问的类属性 在类的外部 通过对象，访问类中的方法 访问对象的方法 先访问对象自己的方法 若对象自己没有这个方法，则访问对象的类的方法 修改对象的方法 实际上修改的并不是对象的类方法 而是创建了一个对象的方法并调用 给对象添加方法 这创建的是对象的新方法，并没有给对象的类创建方法 删除对象的方法 同样只能删除对象的方法，对象的类的方法无法删除 总结：一个类定义类成员属性和成员方法，那么通过这个类实例化的对象，也具备这些方法和属性嘛？ 实际上，在创建对象的时候，并不会把类中的属性和方法也复制一份给对象，实际上是在对象中引用类的方法，所以不同对象调用同一个属性或方法，是相通的。 因此在访问对象的属性时，会先去寻找对象自己的属性，如果没有去找类的属性和方法 而如果给对象的属性或方法进行修改或者添加的时候，等于给对象创建了一个自己的属性和方法，并不调用类的，而且删除的时候也只能删除对象本身的添加或修改的那个属性和方法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778class Cart(): # 属性 color = &#x27;白色&#x27; brand = &#x27;Audi&#x27; pailiang = 2.4 # 方法 def lahuo(self): print(f&#x27;&#123;self.color&#125;的&#123;self.brand&#125;能拉货&#x27;) def doufeng(self): print(f&#x27;排量&#123;self.pailiang&#125;能兜风&#x27;)a = Cart()b = Cart()print(a) # &lt;__main__.Cart object at 0x104e27250&gt;print(b) # &lt;__main__.Cart object at 0x104e31450&gt;# 通过对象访问类中的属性res = a.colorprint(res) # 白色res = b.colorprint(res) # 白色# 修改对象的属性a.color = &#x27;黑色&#x27;print(a.color) # 黑色print(b.color) # 白色# 给对象添加属性a.name = &#x27;A6L&#x27;print(a.name) # A6Ltry: print(b.name) # b不存在except: print(&#x27;b不存在&#x27;)# 删除属性，只能删除对象属性，不能删除对象访问的类属性try: del a.name print(&#x27;成功&#x27;) # 成功except: print(&#x27;不成功&#x27;)try: del a.brand # 不能删除对象的类属性except: print(&#x27;不能删除对象的类属性&#x27;)# 访问对象的方法a.doufeng() # 排量2.4能兜风# 修改对象的方法def newfunc(): print(&#x27;这是一个新的方法&#x27;)a.doufeng = newfunca.doufeng() # 这是一个新的方法# 给对象添加方法a.xiuche = newfunca.xiuche() # 这是一个新的方法# 删除对象的方法try: del a.brand # 不能删除类方法 print(&#x27;可以删除类方法&#x27;)except: print(&#x27;不能删除类方法&#x27;)try: del a.xiuche # 可以删除对象的方法 print(&#x27;可以删除对象的方法&#x27;)except: print(&#x27;不能删除对象的方法&#x27;) 类成员的操作 访问类成员属性、方法 使用类名.类属性进行访问 使用 getattr()方法 使用类名.类方法(类名)进行访问 修改类成员属性、方法 使用类名.类属性&#x3D;新值进行修改 使用 setattr()方法 使用类名.类方法&#x3D;新方法()进行修改 修改后的类成员属性、方法就会彻底更新，创建一个新的对象调用类属性、方法，属性、方法会更新 添加类成员属性、方法 使用类名.新类属性&#x3D;新值进行新增 使用 setattr()方法 使用类名.新类方法&#x3D;新方法()进行新增 新增的类属性、类方法，可以被创建的对象访问到 删除类成员属性、方法 使用 del 类名.类属性删除类成员属性 使用 delattr()方法 使用 del 类名.类方法删除类成员方法 删除之后再使用对象访问类属性、方法会访问不到 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071class Cart(): # 属性 color = &#x27;白色&#x27; brand = &#x27;Audi&#x27; pailiang = 2.4 # 方法 def lahuo(self): print(f&#x27;&#123;self.color&#125;的&#123;self.brand&#125;能拉货&#x27;) def doufeng(self): print(f&#x27;排量&#123;self.pailiang&#125;能兜风&#x27;)# 访问类成员属性print(Cart.brand) # Audi# 修改类成员属性Cart.brand = &#x27;宝马&#x27;print(Cart.brand) # 宝马opp = Cart()print(opp.brand) # 宝马# 添加类成员属性Cart.name = &#x27;A7&#x27;print(Cart.name) # A7opp = Cart()print(opp.name) # A7# 删除类成员属性del Cart.brandtry: opp = Cart() print(opp.brand) # opp没有brandexcept: print(&#x27;opp没有brand&#x27;)# 访问类成员方法Cart.doufeng(Cart) # 排量2.4能兜风# 修改类成员方法def newm(self): print(&#x27;这是一个新的方法&#x27;)Cart.doufeng = newmCart.doufeng(Cart) # 这是一个新的方法opp = Cart()opp.doufeng() # 这是一个新的方法# 添加类成员方法Cart.xinfangfa = newmCart.xinfangfa(Cart) # 这是一个新的方法opp = Cart()opp.xinfangfa() # 这是一个新的方法# 删除类成员方法del Cart.doufengtry: Cart.doufeng() # 类的成员对象已删除 print(&#x27;类的成员对象&#x27;)except: print(&#x27;类的成员对象已删除&#x27;)opp = Cart()try: opp.doufeng() # 对象没有doufeng print(&#x27;对象还有doufeng&#x27;)except: print(&#x27;对象没有doufeng&#x27;) 类与对象的总结 一个类可以实例化出多个对象，每个对象在内存中都独立存在 当通过类实例化对象时，并不会把类中的成员复制一份给对象，而去给对象了一个引用 访问对象成员的时候，如果对象自己没有这个成员，对象会向实例化它的类去查找 对象成员的添加和修改，都只会影响当前对象自己，不会影响类和其他对象 删除对象的成员时，必须是该对象自己具备的成员才可以 对类的成员操作，会影响通过这个类创建的对象，包括之前创建的 self 详解 self 在方法中只是一个形参，并不是关键字 self 在方法中代表的是当前这个对象自身 self 在方法中代表对象可以去操作成员，可以使用 self 在类的内部访问成员 只要是对象能完成的事情，self 都可以 在类中定义的方法，都需要有一个形参 self， 这样的方法称为非绑定类方法 可以使用对象和类去访问 否则，类中的方法没有形参 self，对象将无法调用这个方法，但是可以使用类去调用 这样的方法称为绑定类方法 只能使用类去访问 12345678910111213141516class Person(): name = &#x27;xiaoduan&#x27; age = 23 # 非绑定类方法 def introduce(self): print(f&#x27;i am &#123;self.name&#125; &#123;self.age&#125; years old&#x27;) # 绑定类方法 def func(): print(&#x27;这是一个绑定类方法&#x27;)duan = Person()duan.introduce() # i am xiaoduan 23 years oldPerson.func() # 这是一个绑定类方法 初始化方法_魔术方法魔术方法： 魔术方法也和普通方法一样都是类中定义的成员方法 就是不需要去手动调用的，会在某种情况下自动触发（自动执行） 特殊点：多数的魔术方法 前后都有两个连续的下划线 魔术方法不是我们自己定义的，是系统定义好的，我们使用 init 初始化方法 通过类实例化对象之后，自动触发的一个方法 作用：可以在对象实例化之后完成对象的初始化（属性的赋值，方法的调用） 应用场景：文件的打开，数据的获取 12345678910111213141516171819202122232425class Person(): name = &#x27;xiaoduan&#x27; age = 23 def __init__(self): print(&#x27;这是一个初始化方法&#x27;) self.introduce() def introduce(self): print(f&#x27;i am &#123;self.name&#125; &#123;self.age&#125; years old&#x27;)class Person2(): name = None age = None def __init__(self, name, age): self.name = name self.age = age print(f&#x27;i am &#123;self.name&#125; &#123;self.age&#125; years old&#x27;)duan = Person() # 这是一个初始化方法# i am xiaoduan 23 years oldhuang = Person2(&#x27;huang&#x27;, 24) # i am huang 24 years old 析构方法 del 析构方法 当前类实例化的对象被销毁时，自动触发 作用：可以在析构方法中完成一些特殊任务，关闭一些打开的资源，比如在初始化方法中打开的文件，可以在析构方法中关闭 注意：对象被销毁时，触发了这个方法，而不是这个方法销毁了对象 对象在哪些情况会被销毁： 当程序执行完毕，内存中所有的资源都会被销毁 使用 del 删除对象 对象不再被引用时，会自动销毁 123456789101112131415161718192021class writeLog(): # 成员属性 # 文件的路径 fileurl = &#x27;./&#x27; # 文件的名称 filename = &#x27;2022-3-9&#x27; def __init__(self): print(&#x27;写入日志初始化方法&#x27;) self.fileobj = open(self.fileurl+self.filename,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) def log(self,s): print(f&#x27;日志内容为：&#123;s&#125;&#x27;) self.fileobj.write(s) def __del__(self): print(&#x27;析构方法触发&#x27;) self.fileobj.close()obj = writeLog()obj.log(&#x27;今天温度适宜出行&#x27;) 日志类的封装 日志类 class Mylog 功能：能够随时写入一个日志信息 分析 日志文件在什么地方？ 默认在当前目录 日志文件名是什么？ 当前日期 2022-03-11.log 日志的格式是什么样的？ 2022-03-11 12:12:12 错误信息 属性：成员属性的作用就是存储信息，供成员方法来使用 fileurl 日志文件的地址 filename 日志文件的名称 fileobj 打开的文件对象 方法：具体完成的一个功能的过程 init() &#x3D;&#x3D;&gt; 初始化方法，完成对象的初始化，并打开文件 wlog() &#x3D;&#x3D;&gt; 负责接受用户给的日志信息，并写入到日志文件中 del() &#x3D;&#x3D;&gt; 析构方法，在对象被销毁时，关闭打开的文件 12345678910111213141516171819202122import timeclass Mylog(): fileurl = &#x27;./&#x27; filename = str(time.strftime(&#x27;%Y-%m-%d&#x27;)) + &#x27;.log&#x27; fileobj = None def __init__(self): # 打开文件 self.fileobj = open(self.fileurl+self.filename,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) def wlog(self,s): date = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;) msg = date+&#x27; &#x27;+s+&#x27;\\n&#x27; self.fileobj.write(msg) def __del__(self): # 关闭打开的文件 self.fileobj.close()log = Mylog()log.wlog(&#x27;变量赋值错误&#x27;) 面向对象的三大特性：封装、继承、多态封装封装就是使用特殊的语法,对成员属性和成员方法进行包装，达到保护和隐藏的目的 但是封装是为了限制一些访问和操作，但是不能全部都限制（不能不让使用） 被封装的成员只是限制了访问权限，并不是不让访问 通常情况下，被封装的成员主要是供内部使用 封装的级别 公有的 public 就是类中普通的成员属性 受保护的 protected 在类中的成员属性前 加一个 _ 受保护的成员 私有的 private 在类中的成员属性前 加两个 __ 私有的成员 封装的级别 公有的 public 受保护的 protected 私有的 private 在类的内部 OK OK OK 在类的外部 OK NO(Python 可以) NO 实际上私有是这么实现的 对于成员属性 &#x3D;&#x3D;&#x3D;&gt; _类名成员属性 进行了改写 12345678910111213141516171819202122232425262728293031323334353637383940class Resume(): # 成员属性 name = None _age = None __gender = None def __init__(self, name, age, gender): self.name = name self._age = age self.__gender = gender # 成员方法 def introduce(self): print(f&#x27;This is &#123;self.name&#125;&#x27;) print(self.__gender) def _experience(self): print(f&#x27;I am &#123;self._age&#125; years old&#x27;) def __superior(self): print(f&#x27;I am a &#123;self.__gender&#125;&#x27;)# 实例化对象duanduan = Resume(&#x27;duanduan&#x27;, 23, &#x27;female&#x27;)# 查看对象的所有属性print(duanduan.__dict__)try: print(duanduan.name) print(duanduan._age) # print(duanduan.__gender) # 在类的外部不能操作私有成员except: print(&#x27;NO&#x27;)duanduan._experience() # I am 23 years old# duanduan.__superior() # 在类的外部不能操作私有成员duanduan.introduce()# This is duanduan# female 继承单继承什么是继承？ 在面向对象中，一个类去继承父类，这个类就拥有了父类的所有成员(除了私有成员) 概念 被其他类继承的类，这个类称为父类 也叫做基类 或者 超类 继承其他类的类，这个类称为子类 也叫做派生类 子类可以有自己独立的成员，也可以没有 在不指定继承的父类时，所有类都继承自 object 类（系统提供） 子类继承了父类之后，就拥有了父类中所有的成员包括魔术方法（除了私有成员） 子类继承父类后，重新定义了父类中的方法，这种情况称为对父类方法的重写 在子类中可以直接调用父类中定义的方法super().父类方法名() 子类继承父类后，定义了父类中没有的方法，这种情况称为对父类的扩展 一个父类可以被多个子类继承 子类调用父类方法时，如果该方法有参数要求，也需要传递参数 继承的意义 提高代码的重用性，建立新的类与类的关系，方便其他逻辑的操作 继承语法格式 12345class 父类(): passclass 子类(父类): pass 1234567891011121314151617181920212223242526272829303132333435363738class maoke(): # 属性 maose = &#x27;猫纹&#x27; sex = &#x27;m&#x27; # 方法 def pao(self): print(&#x27;走猫步&#x27;) def pa(self): print(&#x27;能上树&#x27;)# 定义猫类 继承 猫科class mao(maoke): def zhua(self): print(&#x27;喜欢抓老鼠&#x27;) def pa(self): super().pa() print(&#x27;可以上树很快&#x27;)class bao(maoke): passh = mao()print(h.__dict__) # &#123;&#125;print(h.maose) # 猫纹h.zhua() # 喜欢抓老鼠h.pa()# 能上树# 可以上树很快b = bao()b.pa() # 能上树 多继承 单继承 一个类只能继承一个父类 多继承 一个类可以去继承多个父类 多继承语法格式 12345678class 父亲(): passclass 母亲(): passclass 子类(父亲,母亲): pass 如果在多继承的时候使用了super()，这个时候继承的方法优先是是第一个父类的，若第一个父类没有，寻找下一个父类 同时，在多继承时，若想指定某个父类的方法，使用父类.方法名(self) 123456789101112131415161718192021222324252627282930313233# 父亲类class F(): def eat(self): print(&#x27;魁梧、强壮&#x27;) def hello(self): print(&quot;F hello&quot;)# 母亲类class M(): def eat(self): print(&#x27;温文、尔雅&#x27;) def hello(self): print(&quot;M hello&quot;)# 子类class C(F, M): def eat(self): super().eat() # 魁梧、强壮 print(&#x27;挑食、闹腾&#x27;) def hello(self): # 指定使用父类的hello方法 F.hello(self) print(&quot;C hello&quot;)c = C()c.eat() # 挑食、闹腾c.hello() 菱形继承（钻石继承）123AB C D 可以使用 mro 方法获取 MRO 列表，就是类的继承关系 使用 super 去调用父级的方法时，实际上是在用 super 调用 MRO 列表中的上一级中的方法 使用 super 去访问父级的属性时，实际上是在用 super 访问 MRO 列表中的上一级中的属性 super()本身调用父级方法时，传递的 self 对象，就是这个方法中的那个 self 对象自己 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 人类class Human(): num = 1 def eat(self): print(self.num) print(&#x27;最最年长&#x27;)# 父亲类class F(Human): num = 2 def eat(self): super().eat() print(super().num) print(&#x27;魁梧、强壮&#x27;)# 母亲类class M(Human): num = 3 def eat(self): super().eat() # print(super().num) print(&#x27;温文、尔雅&#x27;)# 子类class C(F,M): num = 4 def eat(self): super().eat() # 魁梧、强壮 print(super().num) # 2 print(&#x27;挑食、闹腾&#x27;)c = C()c.eat()# 4# 最最年长# 温文、尔雅# 3# 魁梧、强壮# 2# 挑食、闹腾print(C.mro()) #[&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.F&#x27;&gt;, &lt;class &#x27;__main__.M&#x27;&gt;, &lt;class &#x27;__main__.Human&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;] 继承关系检测在实现继承的语法之后，程序会自动生成一个继承的列表(MRO（Method Realtion Order) 方法关系列表 MRO 列表生成原则： 子类永远在父类前 同一等级的类，按照子类中的继承顺序摆放 先子类，后父类的顺序原则，最终的类是系统提供的 object 类 [&lt;class ‘**main**.C’&gt;, &lt;class ‘**main**.F’&gt;, &lt;class ‘**main**.M’&gt;, &lt;class ‘**main**.Human’&gt;, &lt;class ‘object’&gt;] super()在调用的时候，并不是查找父类，而是去 MRO 列表上找上一个类 super()方法在调用时，会自动把当前 self 传入到上一级的类的方法中 类关系检测 issubclass() issubclass() 是一个类是否是另一个类的子类 1234567# 沿用之前的类print( C.mro()) # [&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.F&#x27;&gt;, &lt;class &#x27;__main__.M&#x27;&gt;, &lt;class &#x27;__main__.Human&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]print(issubclass(C, (F, M))) # Trueprint(issubclass(F, M)) # Falseprint(issubclass(C, Human)) # True 多态对于同一个方法，由于调用的对象不同，产生了不同形态的结果 1234567891011121314151617181920212223242526272829class Computer(): def usb(self, obj): obj.start()class Mouse(): def start(self): print(&#x27;鼠标启动成功&#x27;)class KeyBoard(): def start(self): print(&#x27;键盘启动成功&#x27;)class Udisk(): def start(self): print(&#x27;U盘启动了&#x27;)c = Computer()m = Mouse()k = KeyBoard()u = Udisk()c.usb(m) # 鼠标启动成功c.usb(k) # 键盘启动成功c.usb(u) # U盘启动了 多态——继承版12345678910111213141516171819202122232425262728class USB(): # 在USB类中定义一个规范的接口方法，但是不实现任何功能 def start(self): passclass Mouse(USB): def start(self): print(&#x27;鼠标启动成功&#x27;)class KeyBoard(USB): def start(self): print(&#x27;键盘启动成功&#x27;)class Udisk(USB): def start(self): print(&#x27;U盘启动了&#x27;)m = Mouse()k = KeyBoard()u = Udisk()m.start() # 鼠标启动成功k.start() # 键盘启动成功u.start() # U盘启动了 更新: 2024-01-23 06:42:42原文: https://www.yuque.com/zacharyblock/cx2om6/vak1xgsu38h6xhbv","categories":[{"name":"Python面向对象","slug":"Python面向对象","permalink":"https://blockzachary.github.io/categories/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 内置模块","slug":"Python基础/内置模块","date":"2022-12-31T17:28:00.000Z","updated":"2022-12-31T17:28:00.000Z","comments":true,"path":"blog/2123167896/","permalink":"https://blockzachary.github.io/blog/2123167896/","excerpt":"","text":"内置模块系统内置模块就是安装 Python 解释器之后，系统给提供的模块，在需要的时候可以导入使用 序列化模块序列化模块指的是可以把 Python 中的数据，以文本或二进制的方式进行转换，并且还能反序列化为原来的数据 为什么需要序列化：一般来说数据在程序与网络中进行传输和存储时，需要以更加方便的形式进行存储和传输，因此需要对数据进行序列化 文本序列化模块 json 二进制序列化模块 pickle pickle 序列化 pickle 模块提供的函数 dumps() 序列化，返回一个序列化后的结果，可以把一个 Python 的任意对象序列化成为一个二进制 loads() 反序列化，返回一个反序列化后的 Python 对象，可以把一个序列化后的二进制数据反序列化为 Python 对象 dump(var,fp) 序列化，把一个数据对象进行序列化并写入到文件中 参数 1 var 需要序列化的数据对象 参数 2 fp 写入的文件对象 load(fp) 反序列化，在一个文件中读取序列化的数据，并且完成一个反序列化 fp 带读取的文件对象 1234567891011121314151617181920212223242526272829303132333435363738import picklevar = &#x27;I miss you&#x27;res1 = pickle.dumps(var)print(res1, type(res1)) # b&#x27;\\x80\\x03X\\n\\x00\\x00\\x00I miss youq\\x00.&#x27; &lt;class &#x27;bytes&#x27;&gt;var = [1, 2, 3, 4]res2 = pickle.dumps(var)print(res2) # b&#x27;\\x80\\x03]q\\x00(K\\x01K\\x02K\\x03K\\x04e.&#x27;res1 = pickle.loads(res1)res2 = pickle.loads(res2)print(res1) # I miss youprint(res2) # [1, 2, 3, 4]# 把一个Python数据进行序列化后写入文件# 使用普通的dumps方法完成var = &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;res = pickle.dumps(var)with open(&#x27;./data.txt&#x27;, &#x27;wb&#x27;) as fp: fp.write(res)# 读取一个反序列化的二进制文件读取处理，并完成反序列化# 使用普通的loads方法完成with open(&#x27;./data.txt&#x27;, &#x27;rb&#x27;) as fp: res = fp.read() res = pickle.loads(res) print(res) # &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;# 把一个Python数据进行序列化后写入文件# 使用dump方法完成var = &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;with open(&#x27;./data2.txt&#x27;, &#x27;wb&#x27;) as fp: pickle.dump(var, fp)# 使用load方法读取with open(&#x27;./data2.txt&#x27;, &#x27;rb&#x27;) as fp: newdict = pickle.load(fp)print(newdict) # &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125; json 序列化JSON(JavaScript Object Notation) 是一个轻量级数据交换格式 JSON 在 JavaScript 中是一个对象的表示方法，和 Python 中的字典的定义规则和语法都很像 在互联网中是一种通用的数据交换、数据传输、数据定义的一种数据格式 Python 中提供 json 模块，可以把一些符合转换的 python 数据对象，转换为 json 格式的数据 json.dumps() 将一个 Python 数据序列化为 json 格式 json.loads() 将一个序列化后的 json 对象反序列化为 Python 格式 json.dump() 将一个 Python 数据序列化为 json 格式并写入文件 json.load() 将一个 json 序列化后的文件反序列化回 Python 的格式 123456789101112131415161718192021222324import jsonvardict = &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;print(vardict, type(vardict)) # &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125; &lt;class &#x27;dict&#x27;&gt;# json序列化res = json.dumps(vardict)print(res, type(res)) # &#123;&quot;name&quot;: &quot;duanduan&quot;, &quot;age&quot;: 24, &quot;boyfriend&quot;: &quot;huanghuang&quot;&#125; &lt;class &#x27;str&#x27;&gt;# json反序列化res = json.loads(res)print(res, type(res)) # &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;# 使用json写文件vardict = [&#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;]with open(&#x27;./data3.json&#x27;, &#x27;w&#x27;) as fp: json.dump(vardict, fp)with open(&#x27;./data3.json&#x27;, &#x27;r&#x27;) as fp: newdict = json.load(fp)print( newdict) # [&#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;duanduan&#x27;, &#x27;age&#x27;: 24, &#x27;boyfriend&#x27;: &#x27;huanghuang&#x27;&#125;] 数学模块-math math 模块下的一些函数 math.ceil() 向上取整 内置函数中的 round() 是四舍五入 math.floor() 向下取整 math.pow() 计算数值的 n 次方，结果是浮点 math.sqrt() 开平方运算，结果是浮点 math.fabs() 计算绝对值，结果是浮点 math.modf() 把一个数值拆分成小数和整数组成的元组 math.copysign() 将第二个参数的正负号，赋值给第一个参数 math.fsum() 对一个容器类型数据进行求和，结果是浮点数 1234567891011121314151617181920212223242526import mathr1 = math.ceil(2.25)r2 = round(2.25)print(r1, r2) # 3 2r1 = math.floor(2.25)print(r1, r2) # 2 2res = math.pow(2, 3)print(res) # 8.0res = math.sqrt(16)print(res) # 4.0res = math.fabs(-3.14)print(res) # 3.14res = math.modf(3.14)print(res) # (0.14000000000000012, 3.0)res = math.copysign(3.14, -9.9)print(res) # -3.14res = math.fsum([1.14, 2.35, 3.46, 4, 5])print(res) # 15.95 随机模块-random导入 random 模块之后 random.random() 返回 0-1（左闭右开） 之间的随机小数 random.randrange(开始值,结束值[,步进值]) 随机获取指定范围内的整数 random.randint() 随机产生指定范围内的随机整数 random.uniform() 随机产生指定范围内的随机小数 random.choice() 随机获取容器类型中的值 random.shuffle() 随机打乱一个容器的值，无返回值 123456789101112131415161718192021222324import randomres = random.random()print(res)res = random.randrange(5)print(res)res = random.randrange(5,10)print(res)res = random.randrange(5,10,2)print(res)res = random.randint(2,8)print(res)res = random.uniform(3,9)print(res)varlist = [1,2,3,4,5,6,7]res = random.choice(varlist)print(res)random.shuffle(varlist)print(varlist) 系统接口模块-os os.getcwd() 返回当前文件工作目录&#x2F;路径 os.chdir() 修改当前工作目录，类似于 linux 的 cd 命令 os.listdir() 查看指定目录下所有文件 类似于 ls 命令，不指定目录时候，即当前目录下的 os.mkdir(path,mode&#x3D;0o777,dir_fd&#x3D;None) 在指定位置创建一个文件夹，只能一个，若不指定位置，则在当前目录下创建一个文件夹 path:为所要创建的文件夹名称，默认在当前工作目录下，但也可以先使用 os.chdir()，修改工作目录，可以是直接在 name 处写入要新建文件夹的位置路径带上新建文件夹名称 mode&#x3D;0o777:这个是一个系统权限，分别代表着文件所有人（user）、文件所属组（group）、其他人（other），所有数字加起来就是 777，参数必须带上 0o 但是这里有问题，无法真的给到权限 777，因为 python 无法传讲一个比自己这个进程权限还要高的文件 可以使用 linux 命令 sudo chmod -R 777 文件名 os.makedirs(name,mode) name：所要创建的文件路径 这次可以递归创建啦，就算存在没有的文件夹，也可以迭代创建好 mode：同样是权限 os.rmdir() 删除空文件夹，不能递归调用，否则报错 os.removedirs() 递归删除空文件夹，若叶子目录被删除掉，会尝试删除父目录，若父目录也是空的目录，则会删除，直到该目录不是空的 但是！！ 因为 mac 系统下创建一个文件夹后会在该目录下创建一个.DS_Store 隐藏文件，因此这个文件夹不再是空文件夹了 os.remove() 删除文件 os.rename() 修改文件或文件夹的名字 os.rename(‘.&#x2F;a’,’.&#x2F;AAA’) os.system() 可以执行系统命令比如 linux 下的 ls cd 命令等等 12345678910111213141516171819import osres = os.getcwd()print(res) # /Users/zachary/PycharmProjects/Python教程阶段1/codeos.chdir(&#x27;/Users/zachary&#x27;)res = os.getcwd()print(res) # /Users/zacharyres = os.listdir()print(res)res = os.listdir(path=&#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code&#x27;)print(res)os.mkdir(path=&#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code/newdir&#x27;,mode=0o777)os.makedirs(&#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code/newdir/a/b/c&#x27;)os.system(&#x27;ls&#x27;) 关于系统中的权限 -rw-r–r– 1 zachary staff 120 2 28 21:24 data3.txt drwxr-xr-x 5 zachary staff 160 2 28 15:22 file 第一位 d 代表这个是一个文件夹&#x2F;目录，如果是-代表是一个文件 前三位代表文件所有人（user） 中间三位代表文件所属组（group） 最后三位代表其他人（other） 其中 r w x 代表不同的操作权限 r 表示可读 &#x3D;&#x3D;&#x3D;&#x3D; 4 w 表示可写 &#x3D;&#x3D;&#x3D;&#x3D; 2 x 表示可执行 &#x3D;&#x3D;&#x3D; 1 系统接口模块-os.path os.path 是系统模块中的路径 os.path.abspath() 该方法可以把一个相对路径转换成一个绝对路径 os.path.basename() 返回路径中的最后一个部分 os.path.dirname() 获取路径中的路径部分 返回路径中最后一个部分之前的部分 os.path.join() 链接多个路径、组成一个新的路径 os.path.split() 将一个路径拆分成主体和最后两个部分，以元组返回 os.path.splitext() 将一个路径拆分成主体和后缀两部分，后缀为文件后缀 os.path.getsize() 将返回路径所在文件的文件大小，返回值为字节 os.path.isdir() 检测文件夹是否存在 os.path.isfile() 检测文件是否存在 os.path.exists() 检测文件或者路径是否存在 os.path.samefile() 检测两个文件路径是否指向同一个目标位置(两个路径必须真实) 123456789101112131415161718192021222324252627282930313233343536import osres = os.path.abspath(&#x27;./&#x27;)print(res) # /Users/zachary/PycharmProjects/Python教程阶段1/coderes = os.path.basename(&#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code&#x27;)print(res) # coderes = os.path.dirname(&#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code&#x27;)print(res) # /Users/zachary/PycharmProjects/Python教程阶段1res = os.path.join(&#x27;./newdir/a/&#x27;, &#x27;2.jpg&#x27;)print(res) # ./newdir/a/2.jpgres = os.path.split(&#x27;./newdir/a/b/c&#x27;)print(res) # (&#x27;./newdir/a/b&#x27;, &#x27;c&#x27;)res = os.path.splitext(&#x27;./newdir/a/2.jpg&#x27;)print(res) # (&#x27;./newdir/a/2&#x27;, &#x27;.jpg&#x27;)res = os.path.getsize(&#x27;./83系统接口模块-os.py&#x27;)print(res) # 534res = os.path.isdir(&#x27;./newdir/a/b/c&#x27;)print(res) # Trueres = os.path.isfile(&#x27;./83系统接口模块-os.py&#x27;)print(res) # Trueres = os.path.exists(&#x27;./newdir/a/b/c&#x27;)print(res) # Truea = &#x27;./newdir/a/b/c&#x27;b = &#x27;./newdir/a/../a/b/c&#x27;res = os.path.samefile(a, b)print(res) # True 高级文件操作模块-shutil shutil.copy(A,B) 将路径 A 下的文件 copy 到路径 B 下的文件，在 B 下可以重命名 shutil.copy2(A,B) 与 copy 方法相似，但是会将原文件的信息(操作时间和权限等)一并复制 shutil.copyfile(A,B) 功能类似上述方法，但是 过程是打开文件 A，读取 A 中内容，并且写入到新的文件 B 中 shutil.copytree(A,B) 将整个 A 的目录结构和文件，拷贝到 B 去，B 必须不存在 shutil.rmtree() 删除整个文件夹 shutil.move(A,B) 将整个 A 移动到 B 去 shutil.make_archive(A,B,C) A: 创建的压缩文件名称 B: 指定压缩格式（zip、tar） C: 要压缩的文件或者文件夹路径 例子: shutil.make_archive(‘a’,’zip’,’.&#x2F;‘) 123456shutil.copy(&#x27;./data3.json&#x27;,&#x27;./newdir/a/data3_copy.json&#x27;)shutil.copy2(&#x27;./data3.json&#x27;,&#x27;./newdir/a/b/data3_same.json&#x27;)res = shutil.copyfile(&#x27;./data3.json&#x27;,&#x27;./newdir/a/b/data3_same.json&#x27;)print(res) 压缩模块-zipfile zipfile.ZipFile(路径包名，模式，压缩或打包) 压缩的使用格式 zipfile.ZipFile(‘data.zip’,’w’,zipfile.ZIP_DEFLATED) 解压缩的使用格式 zipfile.ZipFile(‘data.zip’,’r’) 123456789101112131415161718import osimport zipfile# 压缩文件with zipfile.ZipFile(&#x27;data.zip&#x27;,&#x27;w&#x27;,zipfile.ZIP_DEFLATED) as myzip: myzip.write(&#x27;data.txt&#x27;) myzip.write(&#x27;data2.txt&#x27;) myzip.write(&#x27;data3.json&#x27;)# 解压缩文件with zipfile.ZipFile(&#x27;data.zip&#x27;,&#x27;r&#x27;) as myzip: myzip.extractall(&#x27;./&#x27;)# 压缩文件夹下全部文件with zipfile.ZipFile(&#x27;data.zip&#x27;,&#x27;w&#x27;,zipfile.ZIP_DEFLATED) as myzip: arr = os.listdir(&#x27;./&#x27;) for i in arr: myzip.write(i) 时间模块-time time.time() 时间戳，返回从 1970 年 1 月 1 日至此时此刻的秒数,可以加参数给定时间戳，返回对应时间 time.ctime() 返回系统时间，字符串,可以加参数给定时间戳，返回对应时间 time.localtime() 返回系统时间，元组,可以加参数给定时间戳，返回对应时间 time.strftime() 格式化输出时间 time.sleep(s) 可以暂停当前线程的执行 time.perf_counter() 计算一个程序的执行时间 1234567891011121314151617181920212223242526272829303132import timeres = time.time()print(res) # 1646289842.415093res = time.ctime()print(res) # Thu Mar 3 14:46:59 2022res = time.localtime()print( res) # time.struct_time(tm_year=2022, tm_mon=3, tm_mday=3, tm_hour=14, tm_min=49, tm_sec=29, tm_wday=3, tm_yday=62, tm_isdst=0)t = 1640000009.7300968res = time.ctime(t)print(res) # Mon Dec 20 19:33:29 2021res = time.localtime(t)print( res) # time.struct_time(tm_year=2021, tm_mon=12, tm_mday=20, tm_hour=19, tm_min=33, tm_sec=29, tm_wday=0, tm_yday=354, tm_isdst=0)res = time.strftime(&#x27;%Y-%m-%d %H:%M:%S %w&#x27;)print(res) # 2022-03-03 15:02:04 4print(&#x27;start&#x27;)time.sleep(5)print(&#x27;over&#x27;)count = 0start = time.perf_counter()for i in range(10000000): count += 1end = time.perf_counter()print(end - start) # 0.9241935030000006 日历模块-calendar123456789101112131415161718192021222324252627282930import calendar# 返回指定年月的数据 月份的第一天是周几，和月份的总天数def calendar_my(year,month): res = calendar.monthrange(year, month) print(res) # (1,31) week = res[0] + 1 days = res[1] print(&#x27;一\\t二\\t三\\t四\\t五\\t六\\t日&#x27;) d = 1 count = 0 while count &lt; week - 1: print(&#x27;\\t&#x27;, end=&#x27;&#x27;) count += 1 while d &lt;= days: for i in range(1, 8): if d &gt; days: print(&#x27;\\t&#x27;, end=&#x27;&#x27;) else: print(d, end=&#x27;\\t&#x27;) count += 1 d += 1 if count % 7 == 0: print(&#x27;&#x27;)calendar_my(2022,3) 更新: 2023-12-31 17:28:38原文: https://www.yuque.com/zacharyblock/cx2om6/zo1eq941xoagbnig","categories":[{"name":"Python基础","slug":"Python基础","permalink":"https://blockzachary.github.io/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 文件","slug":"Python基础/文件","date":"2022-12-31T17:27:00.000Z","updated":"2022-12-31T17:27:00.000Z","comments":true,"path":"blog/256934058/","permalink":"https://blockzachary.github.io/blog/256934058/","excerpt":"","text":"文件基础操作-文件写入、文件打开的模式详解针对磁盘中的文件的读写。文件 I&#x2F;O I-input O-output 文件操作步骤 1.打开文件 2.读写文件 3.关闭文件 写入文件的操作 1.打开文件 open() 2.写入内容 write() 3.关闭文件 close() 读取文件的操作 1.打开文件 open() 2.读取内容 read() 3.关闭文件 close() open()打开文件格式：open(文件的路径，打开的方式，[字符集]) 参数 文件路径： 路径 url 统一资源定位符 相对路径：相当于给别人指路的时候，在那条街对面 针对文件的相对路径表示，从当前目录开始计算 1.txt &#x3D;&#x3D;&#x3D;&gt; 没有具体指明的话与.&#x2F;1.txt 是一个位置 .&#x2F;1.txt &#x3D;&#x3D;&#x3D;&gt; .&#x2F;代表当前目录中的 1.txt ..&#x2F;1.txt &#x3D;&#x3D;&#x3D;&gt; ..&#x2F;代表当前目录中的上一级目录下的 1.txt 绝对路径：类似于地址，具体到某个省市区街道小区门牌号 windows: c:&#x2F;users&#x2F;appdata&#x2F;1.txt linux: &#x2F;user&#x2F;home&#x2F;1.txt 打开方式： 基础模式： w r x a w w 模式 write 写入 文件如果不存在，则创建这个文件 文件如果存在，则打开这个文件，并清空里面的东西 文件打开后，文件的指针在文件的最前面 r r 模式 read 读取 文件如果不存在，则报错 文件如果存在，则打开文件 文件指针在文件的最前面 x x 模式 xor 异或模式 文件如果不存在，则创建这个文件 文件如果存在，则报错（防止覆盖） 文件指针在文件的最前面 a a 模式 append 追加模式 文件如果不存在，则创建文件 文件如果存在，则打开文件 文件指针在文件的最后 扩展模式： b b b 模式 bytes 二进制 + +模式 plus 增强模式（可读可写） 文件操作模式的组合 w,r,a,x wb,rb,ab,xb w+,r+,a+,x+ wb+,rb+,ab+,xb+ 可选参数：字符集 encoding 设置文件的字符集 如果是一个二进制的文件，不需要设置字符集 encoding&#x3D;’utf-8’ 12345fp = open(&#x27;./1.txt&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;)print(fp,type(fp)) # &lt;_io.TextIOWrapper name=&#x27;./1.txt&#x27; mode=&#x27;w&#x27; encoding=&#x27;utf-8&#x27;&gt; &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;fp.write(&quot;Hello Python file&quot;)fp.close() 结果会在当前目录下出现一个 1.txt 的文件，内容就是有一行 Hello Python file 打开模式的演示操作1234# 写入文件操作fp = open(&#x27;./1.txt&#x27;,&#x27;a&#x27;,encoding=&#x27;utf-8&#x27;)fp.write(&#x27;\\n你好&#x27;)fp.close() 文件操作的高级写法 12with open(文件路径，打开方式) as 变量: 变量.操作 1234with open(&#x27;./1.txt&#x27;,&#x27;r+&#x27;) as fp: res = fp.read() print(res) fp.write(res) 设置指针的位置 seek(0) 设置在最开始的位置 文件操作的相关函数write() 写入文件格式：文件对象.write(内容) write() 写入文件 内容必须是字符串类型 writeline() 写入文件 内容是一个容器,容器中的数据类型也必须是字符串 1234varlist = [&#x27;hello&#x27;,&#x27;this&#x27;,&#x27;is&#x27;,&#x27;content&#x27;]with open(&#x27;./file/1.txt&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.writelines(varlist) read() 读取文件 read() 格式：文件对象.read() 从当前指针位置读取到最后 格式：文件对象.read(读取的字节数) 可以读取指定长度的字符 readline() 读取一行 格式：文件对象.readline() 一次读取一行 格式：文件对象.readline(读取的字节数) 可以读取一行指定的字符个数 readlines() 读取多行后，保存成一个列表返回 1234567891011121314151617with open(&#x27;./file/2.txt&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as fp: res1 = fp.read() fp.seek(3) res2 = fp.read()print(res1) # newmessageprint(res2) # messagewith open(&#x27;./file/3.txt&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as fp: res = fp.readline() print(res) # Pycharm是一款开发Python常用 res = fp.readline(3) print(res) # 并且十with open(&#x27;./file/3.txt&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as fp: res = fp.readlines() print(res) # [&#x27;Pycharm是一款开发Python常用\\n&#x27;, &#x27;并且十分便捷的集成开发环境\\n&#x27;] seek() 文件指针 可以使用文件指针 seek 设置指针位置 seek(0)：在开头位置 seek(0,2)：在末尾位置 seek(num)：在 num 位置 truncate() 截断文件内容 按照所需要的数据，截断文件的内容 close() 关闭文件格式：文件对象.close() 关闭打开的文件 访问文件夹 获取当前路径 os.getcwd() 改变当前路径 os.chdir() 创建新文件夹 os.mkdir() 修改文件夹名称 os.rename() 删除文件夹 os.rmdir() 遍历文件夹 os.walk() 练习题-注册和登录功能 注册功能 需要用户名和密码以及确认密码 注册时如果用户名已经存在，则不能再次注册 登录功能 需要使用已经注册的用户信息登录 密码输入错误 3 次后，锁定账户信息（不能再使用该账户进行操作） 注册功能123456789101112131415161718192021222324252627282930313233343536373839userlist = []pwdlist = []with open(&#x27;./user.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.seek(0) res = fp.readlines() for i in res: r = i.strip() # 去掉了左右两侧的多余空格和换行 arr = r.split(&#x27;:&#x27;) userlist.append(arr[0]) pwdlist.append(arr[1])def register(): # 输入用户名 flag = True while flag: username = input(&#x27;欢迎注册，请输入要注册的用户名：&#x27;) if username in userlist: print(&#x27;用户已存在，请登录或重新输入用户名&#x27;) else: # 输入密码 while True: pwd = input(&#x27;请设置用户名密码：&#x27;) if len(pwd) &gt;= 3: repwd = input(&#x27;请确认密码：&#x27;) if pwd == repwd: print(&#x27;注册成功&#x27;) flag = False print(username, pwd, repwd) # 打开文件写入数据 with open(&#x27;./user.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(f&#x27;&#123;username&#125;:&#123;pwd&#125;\\n&#x27;) break else: print(&#x27;两次密码不一致，请重新输入&#x27;) else: print(&#x27;密码长度过短，请重新输入&#x27;)register() 登录功能1234567891011121314151617181920212223242526272829303132333435363738394041blacklist = []with open(&#x27;./black.txt&#x27;, &#x27;a+&#x27;, encoding=&#x27;utf-8&#x27;) as fp: fp.seek(0) result = fp.readlines() for i in result: r = i.strip() # 去掉了左右两侧的多余空格和换行 blacklist.append(r)def login(): flag = True while flag: username = input(&#x27;欢迎登录，请输入要登录的用户名：&#x27;) if username in blacklist: print(&#x27;您的账号已被锁定请联系管理员&#x27;) flag = False elif username in userlist: i = userlist.index(username) count = 3 while count: pwd = input(&#x27;请输入密码：&#x27;) if pwd == pwdlist[i]: print(&#x27;登录成功！&#x27;) flag = False break else: count -= 1 if count == 2: print(&#x27;密码输入错误，还有2次重新输入机会&#x27;) elif count == 1: print(&#x27;粗心大意咯，只剩1次输入密码的机会啦&#x27;) else: print(&#x27;登录失败啦，账号被你锁定啦&#x27;) with open(&#x27;./black.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(f&#x27;&#123;username&#125;\\n&#x27;) flag = False break else: print(&#x27;用户名输入错误，请重新输入&#x27;)login() 登录与注册功能的合并1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889def register(): # 输入用户名 flag = True while flag: username = input(&#x27;欢迎注册，请输入要注册的用户名：&#x27;) if username in userlist: print(&#x27;用户已存在，请登录或重新输入用户名&#x27;) else: # 输入密码 while True: pwd = input(&#x27;请设置用户名密码：&#x27;) if len(pwd) &gt;= 3: repwd = input(&#x27;请确认密码：&#x27;) if pwd == repwd: print(&#x27;注册成功&#x27;) flag = False print(username, pwd, repwd) # 打开文件写入数据 with open(&#x27;./user.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(f&#x27;&#123;username&#125;:&#123;pwd&#125;\\n&#x27;) break else: print(&#x27;两次密码不一致，请重新输入&#x27;) else: print(&#x27;密码长度过短，请重新输入&#x27;)def login(): flag = True while flag: username = input(&#x27;欢迎登录，请输入要登录的用户名：&#x27;) if username in blacklist: print(&#x27;您的账号已被锁定请联系管理员&#x27;) flag = False elif username in userlist: i = userlist.index(username) count = 3 while count: pwd = input(&#x27;请输入密码：&#x27;) if pwd == pwdlist[i]: print(&#x27;登录成功！&#x27;) flag = False break else: count -= 1 if count == 2: print(&#x27;密码输入错误，还有2次重新输入机会&#x27;) elif count == 1: print(&#x27;粗心大意咯，只剩1次输入密码的机会啦&#x27;) else: print(&#x27;登录失败啦，账号被你锁定啦&#x27;) with open(&#x27;./black.txt&#x27;,&#x27;a+&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(f&#x27;&#123;username&#125;\\n&#x27;) flag = False break else: print(&#x27;用户名输入错误，请重新输入&#x27;)if __name__ == &#x27;__main__&#x27;: while True: userlist = [] pwdlist = [] blacklist = [] with open(&#x27;./user.txt&#x27;, &#x27;a+&#x27;, encoding=&#x27;utf-8&#x27;) as fp: fp.seek(0) res = fp.readlines() for i in res: r = i.strip() # 去掉了左右两侧的多余空格和换行 arr = r.split(&#x27;:&#x27;) userlist.append(arr[0]) pwdlist.append(arr[1]) with open(&#x27;./black.txt&#x27;, &#x27;a+&#x27;, encoding=&#x27;utf-8&#x27;) as fp: fp.seek(0) result = fp.readlines() for i in result: r = i.strip() # 去掉了左右两侧的多余空格和换行 blacklist.append(r) choice = input(&#x27;欢迎来到我的网站，请输入你的要进行的功能\\n1.注册\\n2.登录\\n3.退出\\n&#x27;) if choice == &#x27;1&#x27;: register() elif choice == &#x27;2&#x27;: login() else: break 更新: 2024-01-03 23:56:04原文: https://www.yuque.com/zacharyblock/cx2om6/gbqyc0puv2x9dims","categories":[{"name":"Python基础","slug":"Python基础","permalink":"https://blockzachary.github.io/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 函数","slug":"Python基础/函数","date":"2022-12-31T17:25:00.000Z","updated":"2022-12-31T17:25:00.000Z","comments":true,"path":"blog/2855414916/","permalink":"https://blockzachary.github.io/blog/2855414916/","excerpt":"","text":"函数认识函数模块化编程指的是把程序进行封装（函数封装、面向对象、文件） 函数 函数是具有特定功能的代码块 function 函数就是把代码进行封装、以提高代码的重用性、提高开发效率、降低了后期的维护成本 函数的定义和使用 123456# 定义函数def 函数名(参数列表): 具体功能代码# 函数的调用函数名() 函数封装并不会执行，只是把函数定义了而已 如果想使用定义的函数，就用语法来进行函数调用 函数定义后，不调用不执行 不能在函数定义前调用函数 函数的调用不受次数影响 函数的命名要遵守命名规范 函数的参数 函数在定义时，可以在参数列表的位置定义 形式参数（形参） 如果函数有形参，那么在调用的时候必须传递参数 实际参数（实参） 实参将数值传递给形参的过程，就是变量的赋值操作 函数定义了几个参数，调用的时候就要按指定顺序进行参数的传递 普通参数、默认参数 即位置参数，也叫顺序参数，也是必须传递的参数 12345def cook(food:str): print(f&quot;今晚吃&#123;food&#125;&quot;)cook(&quot;noodle&quot;) # 今晚吃noodle 在有多个参数的时候，靠后的称为默认参数，默认参数可以指定默认值，在调用的时候可以不传实参 默认参数只能靠后 12345def cook(food, dirnk=&quot;wine&quot;, snack=&quot;chips&quot;): print(f&quot;今晚吃&#123;food&#125;，今晚喝&#123;dirnk&#125;，饭后甜点是&#123;snack&#125;&quot;)cook(&quot;rice&quot; ) # 今晚吃rice，今晚喝wine，饭后甜点是chips 收集参数定义一个形参，专门收集多余的实参，或者说是不确定需要接受多少个实参的情况下，使用一个实参来接收,这个形参用*args args 接收的参数以元组的形式存储 这个变量不一定非得是 args，可以是 num 等等，但是记得是一个星号 123456789101112131415161718def calc(x=&#x27;+&#x27;, *args): print(type(args)) # &lt;class &#x27;tuple&#x27;&gt; res = 0 if x == &#x27;+&#x27;: for i in args: res += i print(f&quot;&#123;args&#125;求和得&#123;res&#125;&quot;) elif x == &#x27;-&#x27;: res = 2 * args[0] for i in args: res -= i print(f&quot;&#123;args&#125;求差得&#123;res&#125;&quot;) else: print(&quot;符号错误&quot;)calc(&quot;+&quot;, 200, 100, 300) # (200, 100, 300)求和得600calc(&quot;-&quot;, 200, 100, 300) # (200, 100, 300)求差得-200 命名关键字参数 命名关键字参数，定义在收集参数后面 关键字参数必须通过形参的名字来传递 123456def cook(food, *other, time): print(f&quot;we are going to eat &#123;food&#125; and &#123;other&#125; at &#123;time&#125;&quot;)cook(&quot;rice&quot;, &quot;wine&quot;, &quot;snack&quot;, time=&quot;dinner&quot;) # we are going to eat rice and (&#x27;wine&#x27;, &#x27;snack&#x27;) at dinnercook(&quot;rice&quot;, &quot;wine&quot;, &quot;snack&quot;, &quot;dinner&quot;) # TypeError: cook() missing 1 required keyword-only argument: &#x27;time&#x27; 关键词收集参数 普通收集参数*args 会把接收到的参数收集成为 元组 关键词收集参数**kwargs 会将接收到的关键字参数收集成为 字典 123456def cook(food, *other, time, **kwargs): print(f&quot;we are going to eat &#123;food&#125; and &#123;other&#125; at &#123;time&#125; with &#123;kwargs&#125;&quot;)cook(&quot;rice&quot;, &quot;wine&quot;, &quot;snack&quot;, time=&quot;dinner&quot;, data=&#x27;2.2&#x27;, year=&#x27;2022&#x27;)# we are going to eat rice and (&#x27;wine&#x27;, &#x27;snack&#x27;) at dinner with &#123;&#x27;data&#x27;: &#x27;2.2&#x27;, &#x27;year&#x27;: &#x27;2022&#x27;&#125; 形参声明的位置 普通参数、默认参数、收集参数、关键字参数、关键字收集参数 函数的返回值一个函数除了可以完成一定功能外，还可以按需要返回一定内容 函数中使用 return 关键字来指定返回数据，可以返回任何类型的数据 函数的返回值，会把数据返回到调用的位置 123456789def calc_plus(*args): res = 0 for i in args: res += i return resresult = calc_plus(123, 234, 345, 456)print(f&quot;所有数值计算结果是：&#123;result&#125;&quot;) 函数中可以使用 return 返回数据或任意内容 return 意味着函数的结束，return 之后的代码不再执行 函数的返回值可以有，可以没有，当没有返回值的时候，返回的是 None 变量的作用域作用域就是当前起作用、可用的范围区域 变量的有效范围 全局变量：在函数内外都可以使用的变量 局部变量：在函数内部可以使用的变量 在函数内部可以获取函数外部的变量(即全局变量)中的不可变数据类型，仅能访问，不能修改 123456789101112num = 10def func(): print(num)func() # 10num = 10def func(): num += 20 print(num)func() # UnboundLocalError: local variable &#x27;num&#x27; referenced before assignment 在函数内部可以对全局变量的可变数据类型(列表、字典)，进行修改和访问 1234567891011varl = [1, 2, 3]def func(): print(varl) # [1, 2, 3] varl.append(4) print(varl) # [1, 2, 3, 4] varl[2] = &#x27;a&#x27; print(varl) # [1, 2, &#x27;a&#x27;, 4]func() # 30print(varl) # [1, 2, &#x27;a&#x27;, 4] 在函数内部定义的变量，只能在函数内部使用，可获取，可修改，函数外部无法访问 123456def func(): res = 20 res += 10 print(res)func() # 30print(res) # NameError: name &#x27;res&#x27; is not defined 在函数内部使用global声明的变量，可将其改为全局变量 1234567def func(): global res res = 20 res += 10 print(res)func() # 30print(res) # 30 在函数外部定义的变量，想要在函数内部修改，可以在函数内部将其声明为全局变量 123456num = 10def func(): global num num += 20 print(num)func() # 30 两个函数 globals()：获取全局数据 123456789def outer(): print(&quot;This is a outer function...&quot;) def inner(): print(&quot;This is a inner function...&quot;) inner()outer()print(globals())# &#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x108786550&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code/30变量的作用域.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;outer&#x27;: &lt;function outer at 0x1087f9710&gt;&#125; - `locals()`：获取局部数据 局部函数：在函数内部定义的函数，称为局部函数 全局函数：相对于局部函数的外部函数 123456789def outer(): print(&quot;This is a outer function...&quot;) def inner(): print(&quot;This is a inner function...&quot;) inner()outer()# This is a outer function...# This is a inner function... 关于函数的文档 以上述的 globals()为例 12345678910&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;,&#x27;__doc__&#x27;: None,&#x27;__package__&#x27;: None,&#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x108786550&gt;,&#x27;__spec__&#x27;: None,&#x27;__annotations__&#x27;: &#123;&#125;,&#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;,&#x27;__file__&#x27;: &#x27;/Users/zachary/PycharmProjects/Python教程阶段1/code/30变量的作用域.py&#x27;,&#x27;__cached__&#x27;: None, &#x27;outer&#x27;: &lt;function outer at 0x1087f9710&gt;&#125; main：当前脚本如果作为主程序，那么值是main，如果是当做一个模块，在另外一个脚本中引用去使用模块的名字。 doc：当前脚本的文档说明 在当前脚本当中的第一个三引号’’’’’’注释的就是当前脚本的说明文档 nonlocal 关键字 在内函数中，使用上一层函数中的局部变量，可以在内函数中，使用 nonlocal 声明一下变量，即可以在内函数中使用外函数的局部变量 123456789101112131415def outer(): num = 10 print(&quot;This is a outer function...&quot;) def inner(): nonlocal num num += 10 print(&quot;This is a inner function...&quot;) print(num) inner()outer()# This is a outer function...# This is a inner function...# 20 函数封装的练习题12345678910111213141516171819# 封装九九乘法表def jiujiu(n=0): &#x27;&#x27;&#x27; 打印九九乘法表 :param n: 控制打印输出顺序，n默认为0时，正向输出；否则，逆向输出 :return: 无返回值 &#x27;&#x27;&#x27; if n == 0: r = range(1,10) else: r = range(9,0,-1) for i in r: for j in range(1,i+1): print(f&quot;&#123;j&#125;×&#123;i&#125;=&#123;i*j&#125;\\t&quot;,end=&quot;&quot;) print() print()jiujiu()jiujiu(-1) 练习二 123456789101112131415161718192021# 封装打印矩形def juxing(n=0, x=10, y=10): &#x27;&#x27;&#x27; :param n: 当n为默认值0时候。打印实心矩形，否则打印空心的矩形 :param x: 控制矩形行数 :param y: 控制矩形列数 :return: 无返回值 &#x27;&#x27;&#x27; for i in range(x): if i == 0 or i == x - 1: print(&quot;# &quot; * y) else: if n == 0: print(&quot;# &quot; * y) else: print(&quot;# &quot; + &quot; &quot; * (y - 2) + &quot;#&quot;) print()juxing(x=9, y=16)juxing(n=-1,x=10,y=10) 递归函数递归函数就是定义了一个函数，这个函数内部自己调用函数本身 递归函数内必须要有结束条件，否则会一直调用直至栈溢出 递归函数会一层一层进入，再一层一层返回 123456789def jiecheng(n): print(n) if n == 0: return jiecheng(n-1) print(n)jiecheng(5) 实现阶乘123456789# 实现阶乘def jiecheng(n): if n == 1: return 1 return int(n) * jiecheng(n-1)res = jiecheng(10)print(res)** 实现斐波那契数列12345678910111213141516def fibo(n): if n == 1: return 0 elif n == 2: return 1 else: return fibo(n - 1) + fibo(n - 2)print(fibo(5)) # 3res = 0for i in range(5): res += fibo(i + 1)print(res) # 7 回调函数如果一个函数中要求传递的参数是一个函数，并且在函数中使用了传递进来的函数，那么这个被调用的函数就是回调函数 123456789101112# 带有回调函数的函数def func(f): print(&quot;func这是调用了回调函数的函数&quot;) f()# 回调函数def cal(): print(&quot;cal这是一个回调函数&quot;)func(cal)# func这是调用了回调函数的函数# cal这是一个回调函数 再来一个例子 1234def fun(x,y,f): print(f(x,y))fun(2,3,pow) # 8 闭包函数如果在一个函数中，返回了一个函数。并且这个函数是内函数，该内函数使用了外函数中的局部变量（这意味着需要使用 nonlocal），这就是闭包函数 保护了外函数中的局部变量，既可以使用，也不会被破坏 可以使用closure魔术方法查看是否闭包函数 1234567891011121314151617181920def person(): money = 0 # 函数中定义了一个局部变量 # 工作 在外函数中定义内函数 def work(): nonlocal money money += 100 print(money) # 在外函数中返回了内函数，这个内函数就是闭包函数 return workres = person() # 这里的res 就等同于workres() # 100res() # 200res() # 300print(res.__closure__) # (&lt;cell at 0x1058d0250: int object at 0x1058afdd0&gt;,)print(person.__closure__) # None 匿名函数——lambda 表达式匿名函数即，可以不使用 def 定义，并且这个函数也没有名字 在 Python 中使用 lambda 表达式来定义匿名函数 lambda 仅仅是一个表达式，不是一个代码块 lambda 表达式也有形参，并且不能访问除了自己的形参以外的任何变量（包括全局变量） 功能相对单一，不能写太复杂的形式 lambda [参数列表]:返回值 12res = lambda x, y: x + yprint(res(4, 4)) # 8 同样的，lambda 表达式也可以用于封装带有分支结构的函数，很便捷 123456789101112def func(gender): if gender == &#x27;male&#x27;: return &#x27;男性&#x27; else: return &#x27;女性&#x27;res = func(&quot;female&quot;)print(res)# 以下代码等同于上述代码res = lambda gender:&#x27;男性&#x27; if gender==&#x27;male&#x27; else &#x27;女性&#x27;print(res(&quot;female&quot;)) 迭代器迭代器是 Python 中的特色功能，用于访问元素的一种方式 迭代器是一个可以记住访问遍历的位置的对象 从集合的第一个元素开始访问，直到集合中的所有元素被访问完毕 迭代器只能从前往后一个一个遍历的，不能后退 迭代器是一个能被next()函数调用，并不断返回下一个值的对象称为迭代器(Iterator)对象 Iter()函数 功能：把可迭代对象，转为一个迭代器对象 参数：可迭代的对象(str、list、tuple、dict、set、range…) 返回值：迭代器对象 注意：迭代器对象一定是可迭代对象，但是可迭代对象不一定是迭代器对象 通过使用next()方法获取迭代器内部数据 1234567891011121314player = [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;]res = iter(player)# 使用next()函数获取数据p = next(res)print(p) # Curryp = next(res)print(p) # Kobep = next(res)print(p) # Jamesp = next(res)print(p) # Irvingp = next(res)print(p) # StopIteration 超出了可迭代范围 通过使用 list()方法直接取出迭代器中的所有数据 123456player = [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;]res = iter(player)# 使用list()取值li = list(res)print(li) # [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;] 通过 for 循环进行数据的遍历 123456player = [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;]res = iter(player)# 使用for循环进行遍历for i in res: print(i) 迭代器有一个特点，无论是使用上述三种方法哪一种取，取过一次数据后，数据就丢失去了,想要再次使用就不行了 1234567891011121314player = [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;]res = iter(player)# 使用for循环进行遍历for i in res: print(i)#第二次打印就失效了for i in res: print(i)# Curry# Kobe# James# Irving 判断一个对象是否是可迭代的或者是否迭代器对象，需要使用 from collections.abc import Iterable，Iterator 当需要判断一个对象类型的时候,可以使用 type() 当需要判断一个对象是否某一类型的时候可以使用 isinstance() 1234567891011121314from collections.abc import Iterable, Iterators = &quot;abdef&quot;r1 = isinstance(s, int)r2 = isinstance(s, str)print(r1, r2) # False Trueplayer = [&#x27;Curry&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Irving&#x27;]i = iter(player)r1 = isinstance(s, Iterator) # 字符串不是迭代器r2 = isinstance(s, Iterable) # 字符串是可迭代对象r3 = isinstance(i, Iterator) # 迭代器对象是迭代器r4 = isinstance(i, Iterable) # 迭代器对象是可迭代对象print(r1, r2, r3, r4) # False True True True 生成器yield 关键字使用了yield关键字的函数——生成器函数 1234567891011121314151617181920def output(): print(&quot;res 1&quot;) yield 1 print(&quot;res 2&quot;) yield 2 print(&quot;res 3&quot;) yield 3#生成器对象o = output()res = next(o)print(res)res = next(o)print(res)res = next(o)print(res)#可以使用for遍历for res in o: print(res) 可以将该函数理解为一个 可迭代对象 yield关键字使用在 生成器函数中 yield 和函数中的 return 相似 共同点：都会返回结果 不同点： return 会返回结果，并结束当前函数的调用，后面的代码不再执行 yield 会返回结果，并记住当前代码的执行位置，下一次调用的时候会从上一次离开的位置继续向下执行 调用函数后结果是一个生成器，需要使用收集迭代器的方法进行数据收集 12345678910111213141516171819202122232425262728293031323334353637# return在函数中def hello(): print(&#x27;Hello sen1&#x27;) return 1 print(&#x27;Hello sen2&#x27;) return 2res = hello() # Hello sen1print(res) # 1res = hello() # Hello sen1print(res) # 1# yield在函数中def hello_y(): print(&#x27;Hello sen1&#x27;) yield 1 print(&#x27;Hello sen2&#x27;) yield 2res = hello_y()print(res)temp = next(res) # Hello sen1print(temp) # 1temp = next(res) # Hello sen2print(temp) # 2# 也可以使用list类似函数收集起来 或者用 forres = hello_y()print(list(res)) # [1, 2]res = hello_y()for i in res: print(i)# Hello sen1# 1# Hello sen2# 2 yield from 在生成器中 yield 另一个生成器的内容 123456789101112def yield_func(num: int): for i in range(num): yield square(i+1)def call_yield_func(): yield from yield_func(3) yield from yield_func(5)for item in call_yield_func(): print(item) 生成器 send 相当于使用 next，并将数据送回给生成器(有种协程的感觉) 1234567891011121314151617def yield_send_func(): number = yield &quot;welcome a square function&quot; while True: number = yield square(number) if number is None: breakgenerator = yield_send_func()print(next(generator))for i in range(1,11): if i == 10: try: generator.send(None) except StopIteration: break print(generator.send(i)) yield from 结合 send 1234567891011121314151617181920212223242526272829303132333435363738def yield_square_func(): number = yield &quot;welcome a square function&quot; while True: number = yield square(number) if number is None: breakdef yield_cube_func(): number = yield &quot;welcome a cube function&quot; while True: number = yield number ** 3 if number is None: breakdef choose_func(): item = yield &quot;please choose 1 for square or 2 for cube&quot; while True: if item == 1: yield from yield_square_func() elif item == 2: yield from yield_cube_func() else: breakgenerator = choose_func()print(next(generator))print(generator.send(int(input())))for i in range(1, 11): if i == 10: try: generator.send(None) except StopIteration: break else: print(generator.send(i)) 练习题使用生成器改写斐波那契数列 1234567891011121314def fibo(x): a, b = 0, 1 yield a for i in range(x - 1): yield b a, b = b, a + bi = int(input(&quot;请输入一个整数：&quot;))res = fibo(i)for i in res: print(i,end=&#x27;,&#x27;)# 请输入一个整数：8# 0,1,1,2,3,5,8,13, 内置函数内置函数就是在系统安装完 Python 解释器时，由解释器提供好的函数 range 函数range 函数功能：能够生成一个指定的数字序列 参数：[start,stop,(step)] start：开始的值，默认为 0 stop：结束的值，对于[start,stop)是一个左闭右开区间，stop 选不到的 step：默认为 1，负数为倒着步进 返回值：可迭代对象，数字序列 123456789101112131415161718192021from collections.abc import Iterablefrom collections.abc import Iteratorres = range(10)print(res) # range(0, 10)print(isinstance(res, Iterable)) # True 可迭代对象print(isinstance(res,Iterator)) # False 不是迭代器，故不能使用next直接访问# 输出# 转化为listprint(list(res))# 使用forfor i in res: print(i)it = iter(res)print(next(it)) # 0for i in it: print(i) # 1 2 3 4 5 6 7 8 9 zip()函数zip()函数功能：可以接收多个可迭代对象，然后把每个可迭代对象中第 i 个元素组合在一起，形成一个新的迭代器（元组），当输入的可迭代对象中，最短的一个被耗尽时，迭代器将停止迭代。 参数：*iterables，任意个的可迭代对象 返回值：返回一个元组的迭代器 既然使用 zip 生成的结果是一个迭代器，那么获取数据的时候就可以使用 next、for、list 等方法获取，依旧是使用一次 少一次 12345678910111213141516171819202122232425var1 = &quot;1234&quot;var2 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]var3 = (&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;)res = zip(var1, var2, var3)print(res, type(res))# 获取数据的方法1print(next(res)) # (&#x27;1&#x27;, &#x27;a&#x27;, &#x27;A&#x27;)print(next(res)) # (&#x27;2&#x27;, &#x27;b&#x27;, &#x27;B&#x27;)# 获取数据的方法2res = zip(var1, var2, var3)for i in res: print(i)&quot;&quot;&quot;(&#x27;1&#x27;, &#x27;a&#x27;, &#x27;A&#x27;)(&#x27;2&#x27;, &#x27;b&#x27;, &#x27;B&#x27;)(&#x27;3&#x27;, &#x27;c&#x27;, &#x27;C&#x27;)(&#x27;4&#x27;, &#x27;d&#x27;, &#x27;D&#x27;)&quot;&quot;&quot;# 获取数据的方法3res = zip(var1, var2, var3)print(list(res)) # [(&#x27;1&#x27;, &#x27;a&#x27;, &#x27;A&#x27;), (&#x27;2&#x27;, &#x27;b&#x27;, &#x27;B&#x27;), (&#x27;3&#x27;, &#x27;c&#x27;, &#x27;C&#x27;), (&#x27;4&#x27;, &#x27;d&#x27;, &#x27;D&#x27;)] 可以使用 zip(*zip)执行一个反向操作 1234567# zip与*zipx = [1, 2, 3]y = [4, 5, 6]zipped = zip(x, y)print(list(zipped)) # [(1, 4), (2, 5), (3, 6)]x2, y2 = zip(*zip(x, y))print(x2, y2) # (1, 2, 3) (4, 5, 6) 其他内置函数数据类型转换相关内置函数 int() 将其他数据类型转为整型 float() 转为浮点类型 bool() 转为布尔类型 complex() 转为复数 str() 转为字符串类型 list() 转为列表类型 tuple() 转为元组类型 dict() 转为字典类型 set() 转为集合类型 变量相关函数 id() 获取当前数据的 ID 标识 type() 获取当前数据的类型字符串 print() 数据的打印 input() 获取输入的数据 isinstance() 检测是否为指定的数据类型 数学相关函数 abs() 返回一个数的绝对值，如果是复数，返回模 sum() 从左向右对一个 iterable 对象中的项求和并返回，开始值不允许为字符串 max() 获取最大值 min() 获取最小值 pow() 次幂运算 round() 四舍五入 12345678910111213print(abs(-99.99)) # 99.99print(sum([1, 2, 3])) # 6print(max(9, 90, 999)) # 999print(min(9, 90, -99)) # -99print(pow(2, 3)) # 8r = 3.1415926print(round(r)) # 3print(round(r, 4)) # 3.1416 进制相关函数及字符集进制转换 bin() 将数值类型转换为二进制 int() 将二进制转换为整型 oct() 将数值类型转换为八进制 hex() 将数值类型转为十六进制 1234567891011print(bin(123)) # 0b1111011print(int(0b1111011)) # 123print(oct(123)) # 0o173print(int(0o173)) # 123print(hex(123)) # 0x7bprint(int(0x7b)) # 123 Ascii 码是 基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，共计 128 个字符 常用的包括：GB2312-80、GBK、GBK18030、Unicode（UTF-8） ascii 字符转换 A-Z：65-90 a-z：97-122 0-9：48-57 将字符转为 ASCII：ord() 将 ASCII 转为字符：chr() 12345a = ord(&#x27;a&#x27;)print(a) # 97c = chr(97)print(c) # a 高阶函数——sorted() sorted(iterable,[reverse,key]) 运行原理：把可迭代数据里面的元素，一个一个取出来，放到 key 这个函数中进行处理，并按照函数中 return 的结果进行排序，返回一个新的列表 功能：排序 参数： iterable 可迭代的数据（容器类型数据，range 数据序列，迭代器） reverse 可选，是否反转，默认为 False，不反转，True 反转 key 可选，函数，可以是自定义函数，也可以是内置函数 1234567891011121314151617181920arr = [3, 7, 1, -9, 20, 10]print(sorted(arr)) # [-9, 1, 3, 7, 10, 20]print(sorted(arr, reverse=True)) # [20, 10, 7, 3, 1, -9]print(sorted(arr, key=abs)) # [1, 3, 7, -9, 10, 20]# 自定义函数def func(num): return num % 2arr = [3, 2, 4, 6, 5, 7, 9]res = sorted(arr, key=func)print(res) # [2, 4, 6, 3, 5, 7, 9]# 优化版res = sorted(arr, key=lambda x: x % 2)print(res) 高阶函数——map() *map(func, __iterables) 功能：对传入的可迭代数据中的每个元素进行处理，返回一个新的迭代器 参数： func 函数：自定义函数|内置函数 iterables：可迭代的数据 返回值：迭代器 1234567891011121314151617181920212223242526272829303132333435363738394041# 实现一个将 [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;] 转换为===&gt; [1,2,3,4] 的功能# 方法一arrlist = [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]newlist = []for i in arrlist: newlist.append(int(i))print(newlist) # [1, 2, 3, 4]# 方法二res = map(int, arrlist) # 这里的res是一个可迭代对象print(list(res)) # [1, 2, 3, 4]# 实现一个将 [1,2,3,4] 转换为===&gt; [1,4,9,16] 的功能# 方法一arrlist = [1, 2, 3, 4]newlist = []for i in arrlist: newlist.append(i ** 2)print(newlist) # [1, 4, 9, 16]# 方法二def power(num): return num ** 2arrlist = [1, 2, 3, 4]res = map(power, arrlist)print(list(res)) # [1, 4, 9, 16]# 方法三 优化版arrlist = [1, 2, 3, 4]res = map(lambda x: x ** 2, arrlist)print(list(res)) # [1, 4, 9, 16]# 实现 [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;] ===&gt; [65,66,67,68]arrlist = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]res = map(lambda x: ord(x.upper()), arrlist)print(list(res)) # [65, 66, 67, 68] 高阶函数——reduce() reduce(function, sequence[, initial]) 使用需要导入 from functools import reduce 功能：每一次从 sequence 即一个 iterable 拿出两个元素，放入到 func 函数中进行处理，得出一个计算结果，然后把这个计算结果和 iterable 中的第三个元素，继续放到 func 函数中国进行运算，以此类推，直到所有元素都参与了运算 参数 function 函数：内置函数|自定义函数 sequence：是一个 iterable，可迭代数据 返回值：最终的运算处理结果 1234567891011121314151617181920212223242526272829303132333435363738394041from functools import reduce# 实现一个对数组内的数字进行求和的功能numlist = [1, 2, 3, 4, 5]res = reduce(lambda x, y: x + y, numlist)print(res) # 15# 实现这样一个功能，给了数组[5,2,1,1] ===&gt; 5211# 方法一numlist = [5, 2, 1, 1]num = &#x27;&#x27;for i in numlist: num += str(i)res = int(num)print(res, type(res)) # 5211 &lt;class &#x27;int&#x27;&gt;# 方法二def func(x, y): return x * 10 + yres = reduce(func, numlist)print(res, type(res)) # 5211 &lt;class &#x27;int&#x27;&gt;# 方法三res = reduce(lambda x, y: x * 10 + y, numlist)print(res, type(res)) # 5211 &lt;class &#x27;int&#x27;&gt;# 把字符串&#x27;456&#x27; ===&gt; 456, 不能使用intnum = &#x27;456&#x27;strdict = &#123;&#x27;0&#x27;: 0, &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 4, &#x27;5&#x27;: 5, &#x27;6&#x27;: 6, &#x27;7&#x27;: 7, &#x27;8&#x27;: 8, &#x27;9&#x27;: 9&#125;res1 = map(lambda x: strdict[x], num)res2 = reduce(lambda x, y: x * 10 + y, res1)print(res2) # 456# 简化版本num = &#x27;456&#x27;strdict = &#123;&#x27;0&#x27;: 0, &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 4, &#x27;5&#x27;: 5, &#x27;6&#x27;: 6, &#x27;7&#x27;: 7, &#x27;8&#x27;: 8, &#x27;9&#x27;: 9&#125;print(reduce(lambda x, y: x * 10 + y, map(lambda x: strdict[x], num))) # 456 高阶函数——filter() filter(func,iterable) 功能：过滤数据，将 iterable 中的每个元素拿到 fun 函数中进行处理，如果函数返回 True 则保留这个数据，返回 False 则，丢弃这个数据 参数 func 函数：自定义函数|内置函数 iterable：可迭代的数据 返回值：保留下来的迭代器数据 1234# 实现 保留所有偶数，丢弃所有奇数的功能numlist = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]res = filter(lambda x: True if x % 2 == 0 else False, numlist)print(list(res)) 更新: 2024-01-16 03:26:11原文: https://www.yuque.com/zacharyblock/cx2om6/iygqmxqyo52f37yc","categories":[{"name":"Python基础","slug":"Python基础","permalink":"https://blockzachary.github.io/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 容器","slug":"Python基础/容器","date":"2022-12-31T17:24:00.000Z","updated":"2022-12-31T17:24:00.000Z","comments":true,"path":"blog/1411293093/","permalink":"https://blockzachary.github.io/blog/1411293093/","excerpt":"","text":"容器字符串 回顾字符串的定义方式 了解转义字符 字符串相关的运算 字符串相关函数 字符串格式化的方法 详解字符串-转义字符字符串的定义方式 单引号’’ 双引号定义字符串”” 三引号定义字符串’’’’’’或者”””””” 字符串定义时，引号可以互相嵌套 转义字符一个普通的字符出现在转义符\\后面时候，实现了另一种意义 \\ 转义符，续行符。 作为转义符时，在\\后面出现的字符可能会实现另外一种意义 作为续行符时，在行尾使用了\\后，可以继续换行书写内容 \\n 代表换行 \\r \\r 代表光标的位置，从\\r 出现的位置作为光标的起点 \\t 水平制表符 \\b 退格符 \\ 就是打出一个单独的\\ r 在字符串前＋ r 可以取消转义符的效果，原文字输出 123456789101112131415161718192021222324252627282930# \\ 作为续行符var = &quot;123&quot; \\ &quot;456&quot; \\ &quot;789&quot;print(var) # 123456789 打印结果仍旧是一行# \\ 作为转义符var = &quot;你要多耐心一点，美好的事物通常来的都慢一些&quot;print(var) # 你要多耐心一点，美好的事物通常来的都慢一些var = &quot;你要多耐心一点，\\n美好的事物通常来的都慢一些&quot;print(var)# 你要多耐心一点，# 美好的事物通常来的都慢一些var = &quot;你要多耐心一点，\\r美好的事物通常来的都慢一些&quot;print(var) # 美好的事物通常来的都慢一些var = &quot;你要多耐心一点，\\t美好的事物通常来的都慢一些&quot;print(var) # 你要多耐心一点， 美好的事物通常来的都慢一些var = &quot;你要多耐心一点，\\b美好的事物通常来的都慢一些&quot;print(var) # 你要多耐心一点美好的事物通常来的都慢一些var = &quot;abcde\\\\nabcde&quot;print(var) # abcde\\nabcdevar = r&quot;abcde\\nabcde&quot;print(var) # abcde\\nabcde 字符串相关操作 字符串 +操作： 加法在字符串之间起到拼接作用 字符串 *操作：乘法与字符串使用，会重复指定倍数的字符串 字符串 []切片操作：只能使用[]下标的方式访问，但是不能修改 123456789101112131415# 加法在字符串之间起到拼接作用vara = &quot;你要稍微等一等,&quot;varb = &quot;美好的事物都来得慢一些&quot;res = vara + varbprint(res) # 你要稍微等一等,美好的事物都来得慢一些# 乘法操作var = &quot;虎年大吉，&quot; * 3print(var) # 虎年大吉，虎年大吉，虎年大吉，# 切片操作print(res[4:7]) # 等一等print(res[8:10]) # 美好print(res[::2]) # 你稍等等美的物来慢些print(res[::-1]) # 些一慢得来都物事的好美,等一等微稍要你 字符串格式化format() 格式化字符串 f 方法 123456789101112131415161718192021222324252627282930313233343536373839# 普通方式name = &quot;duanduan&quot;money = 10sen = &quot;今天&#123;&#125;花了&#123;&#125;块钱💰&quot;.format(name, money)print(sen) # 今天duanduan花了10块钱💰# 通过索引的方法sen = &quot;今天&#123;1&#125;花了&#123;2&#125;块钱💰&quot;.format(None, name, money)print(sen)# 关键字传参sen = &quot;今天&#123;who&#125;花了&#123;how&#125;块钱💰&quot;.format(who=name, how=money)print(sen)# 容器类型数据传参d = &quot;duanduan:&#123;&#125;,huanghuang:&#123;&#125;,tutu:&#123;&#125;&quot;.format(&quot;小猪&quot;, &quot;大猪&quot;, &quot;小懒猪&quot;)print(d) # duanduan:小猪,huanghuang:大猪,tutu:小懒猪d = &quot;duanduan:&#123;&#125;,huanghuang:&#123;&#125;,tutu:&#123;&#125;&quot;.format([&quot;小猪&quot;], [&quot;大猪&quot;], [&quot;小懒猪&quot;])print(d) # duanduan:[&#x27;小猪&#x27;],huanghuang:[&#x27;大猪&#x27;],tutu:[&#x27;小懒猪&#x27;]d = &quot;duanduan:&#123;0[0]&#125;,huanghuang:&#123;0[1]&#125;,tutu:&#123;0[2]&#125;&quot;.format([&quot;小猪&quot;, &quot;大猪&quot;, &quot;小懒猪&quot;])print(d) # duanduan:小猪,huanghuang:大猪,tutu:小懒猪data = &#123;&quot;who&quot;: &quot;duanduan&quot;, &quot;how&quot;: &quot;10&quot;&#125;sen = &quot;今天&#123;who&#125;花了&#123;how&#125;块钱💰&quot;.format(**data)print(sen) # 今天duanduan花了10块钱💰# 新增的格式化方法 f 方法sen = f&quot;今天&#123;name&#125;花了&#123;money&#125;块钱💰&quot;print(sen) # 今天duanduan花了10块钱💰sen = f&#x27;今天&#123;data[&quot;who&quot;]&#125;花了&#123;data[&quot;how&quot;]&#125;块钱💰&#x27;print(sen) # 今天duanduan花了10块钱💰# 限定小数位数pi = 3.1415926var = f&quot;圆周率是多少：&#123;pi:.5f&#125;&quot;print(var) # 圆周率是多少：3.14159 英文字符与字符检测相关函数 大小写转换 str.capitalize() 返回原字符串的副本，首个字符大写，其余为小写 str.title() 返回原字符串的副本，每一个英文单词的首个字符大写，其余为小写 str.upper() 将字符串中的英文全部转化为大写 str.lower() 将字符串中的英文全部转化为小写 str.swapcase() 将字符串中的英文大小写互换 字符检测 str.isupper() 检查字符串是否都是大写 str.islower() 检查字符串是否都是小写 str.istitle() 检查字符串是否符合 title str.isalnum() 检测当前字符串是否由字符(中文、英文、数字)组成。 str.isalpha() 检测当前字符串是否由字符(中文、英文)组成，不包含数字。 str.isdigit() 检测当前字符串是否纯数字 str.isspace() 检测当前字符串是否纯空格 str.startswith() 检测当前字符串是否由指定字符开头，可以指定开始和结束的位置 str.endswith() 检测当前字符串是否由指定字符结尾，可以指定开始和结束的位置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 大小写转换sen = &quot;duanDuan is a liTTle pig&quot;print(sen.capitalize()) # Duanduan is a little pigprint(sen.title()) # Duanduan Is A Little Pigprint(sen.upper()) # DUANDUAN IS A LITTLE PIGprint(sen.lower()) # duanduan is a little pigprint(sen.swapcase()) # DUANdUAN IS A LIttLE PIG# 字符检测up = &quot;DUANDUAN&quot;lo = &quot;duanduan&quot;nu = &quot;123&quot;mix = &quot;word123&quot;print(sen.isupper()) # Falseprint(up.isupper()) # Trueprint(sen.islower()) # Falseprint(lo.islower()) # Trueprint(sen.istitle()) # Falseprint(sen.isalnum()) # Falseprint(up.isalnum()) # Trueprint(lo.isalnum()) # Trueprint(nu.isalnum()) # Trueprint(mix.isalnum()) # Trueprint(sen.isalpha()) # Falseprint(up.isalpha()) # Trueprint(lo.isalpha()) # Trueprint(nu.isalpha()) # Falseprint(mix.isalpha()) # Falseprint(sen.isdigit()) # Falseprint(up.isdigit()) # Falseprint(lo.isdigit()) # Falseprint(nu.isdigit()) # Trueprint(mix.isdigit()) # Falseprint(sen.isspace()) # Falseprint(&quot; &quot;.isspace()) # Trueprint(sen.startswith(&quot;d&quot;)) # Trueprint(sen.startswith(&quot;D&quot;)) # Falseprint(sen.startswith(&quot;n&quot;, 3)) # Trueprint(sen.startswith(&quot;n&quot;, 3, 8)) # Trueprint(sen.endswith(&quot;u&quot;)) # Falseprint(sen.endswith(&quot;g&quot;)) # Trueprint(sen.endswith(&quot;pig&quot;)) # Trueprint(sen.endswith(&quot;pig&quot;, 3, 24)) # True 字符串查找相关函数 str.find(sub[,start[,end]]) 从左向右获取指定字符在字符串中的索引位置，未找到则返回-1 str.rfind(sub[,start[,end]]) 从右向左获取指定字符在字符串中的索引位置，未找到则返回-1 str.index() 和 find 方法一样，只不过如果没有找到则报错 str.rindex() 从右往左找，如果没有找到则报错 str.count() 计算一个字符串出现的次数 1234567891011121314151617181920212223sen = &quot;duanduanispig,littlepig&quot;print(sen.find(&quot;pig&quot;)) # 10print(sen.find(&quot;pig&quot;, 14, 23)) # 20print(sen.rfind(&quot;pig&quot;)) # 20print(sen.rfind(&quot;pig&quot;, 0, 14)) # 10print(sen.index(&quot;pig&quot;)) # 10try: print(sen.index(&quot;help&quot;)) # ValueError: substring not foundexcept: print(&quot;ValueError: substring not found&quot;)print(sen.rindex(&quot;pig&quot;)) # 20try: print(sen.rindex(&quot;help&quot;)) # ValueError: substring not foundexcept: print(&quot;ValueError: substring not found&quot;)print(sen.count(&quot;duan&quot;)) # 2print(sen.count(&quot;u&quot;)) # 2print(sen.count(&quot;i&quot;)) # 4 字符串操作相关函数 str.split() 按照指定的字符进行分隔，把一个字符串分隔成一个列表，可以指定分隔的次数 str.rsplit() 按照指定的字符进行分隔，把一个字符串分隔成一个列表，同样可以指定分割的次数 str.join() 按照指定的字符 str，把容器类型中的数据连接成一个字符串 str.strip() 去除字符串左右两侧的指定字符 str.lstrip() 去除字符串左侧的指定字符 str.rstrip() 去除字符串右侧的指定字符 str.replace(new,old) 用 new 替换掉 str 中的 old,可以指定替换的次数 str.center() 给 str 的左右增加指定字符 str.ljust() 字符串按照指定位数向左对齐，右侧不够的补充指定字符 str.rjust() 同上，向右对齐 12345678910111213141516171819202122232425sen = &quot;duanduanisalittlepig&quot;print(sen.split(&quot;i&quot;)) # [&#x27;duanduan&#x27;, &#x27;sal&#x27;, &#x27;ttlep&#x27;, &#x27;g&#x27;]word = &quot;duanduan_is_a_little_piggy&quot;print(word.split(&quot;_&quot;)) # [&#x27;duanduan&#x27;, &#x27;is&#x27;, &#x27;a&#x27;, &#x27;little&#x27;, &#x27;piggy&#x27;]print(word.split(&quot;_&quot;, 2)) # [&#x27;duanduan&#x27;, &#x27;is&#x27;, &#x27;a_little_piggy&#x27;]print(word.rsplit(&quot;_&quot;)) # [&#x27;duanduan&#x27;, &#x27;is&#x27;, &#x27;a&#x27;, &#x27;little&#x27;, &#x27;piggy&#x27;]print(word.rsplit(&quot;_&quot;, 2)) # [&#x27;duanduan_is_a&#x27;, &#x27;little&#x27;, &#x27;piggy&#x27;]li = [&#x27;user&#x27;, &#x27;duan&#x27;, &#x27;pet&#x27;, &#x27;tu&#x27;]print(&quot;_&quot;.join(li)) # user_duan_pet_tuword = &quot; Hello piggy this is tutu &quot;print(word.strip()) # Hello piggy this is tutuold = &quot;新年快乐&quot;new = old.replace(&quot;快乐&quot;, &quot;大吉&quot;)print(new) # 新年大吉word = &quot;piggy&quot;print(word.center(10)) # piggyprint(word.center(10, &quot;*&quot;)) # **piggy***print(word.ljust(10, &#x27;*&#x27;)) # piggy*****print(word.rjust(10, &#x27;*&#x27;)) # *****piggy 列表详解列表就是一组有序的数据组合，列表中的数据可以被修改 列表定义与基本操作列表的定义 可以使用中括号定义 [] 可以使用 list 函数定义 在定义列表中的元素时，需要在每个元素之间使用逗号，进行分割。 列表中的元素可以是任意类型，通常存放同类型的 列表的基本操作 使用+可以对两个列表进行拼接 使用*实现列表元素的重复 使用 in 判断列表中是否存在某元素 列表的索引操作 通过下标获取指定的元素 通过下标修改元素 不能通过下标添加元素 append()：可以用于向列表中追加元素 len()：获取列表的长度 列表元素的删除 del 可以用于通过指定下标删除元素 pop()：可以使用 pop 方法出栈来删除最后一个元素 123456789101112131415161718192021varlist1 = [1, 2, 3, 4]varlist2 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]res = varlist1 + varlist2print(res) # [1, 2, 3, 4, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]res = varlist1 * 3print(res) # [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]res = 1 in varlist1print(res) # Truevarlist1.append(5)print(varlist1) # [1, 2, 3, 4, 5]print(varlist1) # [1, 2, 3, 4, 5]del varlist1[3]print(varlist1) # [1, 2, 3, 5]res = varlist1.pop()print(res) # 5print(varlist1) # [1, 2, 3] 列表切片操作列表[开始索引:结束索引:步进值] 列表[开始索引:] 从开始索引到列表的最后 列表[:结束索引] 从开始到结束索引的前一个 列表[开始索引:结束索引] 从开始索引到结束索引的前一个 列表[开始索引:结束索引:步进值] 带有步进值的从开始到结束前一个 列表[:] 列表全部数据 列表[::] 列表全部数据 列表[::-1] 列表逆序输出 使用切片的方法进行列表的数据更新和删除 从指定下标开始到指定下标结束前，替换为想要的对应的容器类型 使用 del 进行切片删除 12345678910111213141516varlist = [&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]res = varlist[2:]print(res) # [&#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]res = varlist[:2]print(res) # [&#x27;Kobe&#x27;, &#x27;James&#x27;]res = varlist[2:6]print(res) # [&#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;]res = varlist[2:6:2]print(res) # [&#x27;Curry&#x27;, &#x27;Irving&#x27;]varlist[3:6] = [&#x27;All star&#x27;]print(varlist) # [&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;All star&#x27;, &#x27;Harden&#x27;] 列表的相关函数 len() ：使用 len 方法可以计算出列表的长度 count() ：count 方法可以检测具体某个元素出现了多少次 append() ：append 方法可以在列表尾部追加元素 insert(i,x) ：在 i 索引位置，插入 x pop() ：默认出栈一个最末尾的元素,也可以指定索引进行出栈 remove() ：可以指定列表中的元素进行删除，如果元素不存在会报错 index() ：可以查找列表中元素第一次出现的索引 extend() ：可以将另一个列表扩展到原来的列表上，类似于+ clear() ：清空列表中的元素 reverse() ：逆序列表 sort() ：对列表排序，默认由小到大排序 若 reverse&#x3D;True，则按照由大到小排序 若 key&#x3D;func，则按照函数处理结果进行排序 copy() ：可以拷贝一个列表,但是如果执行修改操作，del 会对多维列表同时修改 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051varlist = [&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]print(len(varlist)) # 7print(varlist.count(&#x27;Curry&#x27;)) # 1varlist.append(&#x27;new star&#x27;)print(varlist) # [&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;new star&#x27;]varlist.insert(1, &#x27;Pony&#x27;)print(varlist) # [&#x27;Kobe&#x27;, &#x27;Pony&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;new star&#x27;]res = varlist.pop()print(res) # new starprint(varlist) # [&#x27;Kobe&#x27;, &#x27;Pony&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]varlist.remove(&#x27;Tony&#x27;)print(varlist) # [&#x27;Kobe&#x27;, &#x27;Pony&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]print(varlist.index(&#x27;Curry&#x27;)) # 3temp = [&#x27;nobody&#x27;, &#x27;somebody&#x27;]varlist.extend(temp)print(varlist) # [&#x27;Kobe&#x27;, &#x27;Pony&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;nobody&#x27;, &#x27;somebody&#x27;]varlist.clear()print(varlist) # []varlist = [&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;]varlist.reverse()print(varlist) # [&#x27;Harden&#x27;, &#x27;Thompson&#x27;, &#x27;Irving&#x27;, &#x27;Tony&#x27;, &#x27;Curry&#x27;, &#x27;James&#x27;, &#x27;Kobe&#x27;]varlist.sort()print(varlist) # [&#x27;Curry&#x27;, &#x27;Harden&#x27;, &#x27;Irving&#x27;, &#x27;James&#x27;, &#x27;Kobe&#x27;, &#x27;Thompson&#x27;, &#x27;Tony&#x27;]\\var = [6, 8, 3, 5, 9, 0, 2, 1, 4, 7]var.sort()print(var) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]var = [1, 2, 3, 4, 5]var_val = var.copy()print(id(var), id(var_val)) # 4494320416 4493079008del var[4]print(var) # [1, 2, 3, 4]print(var_val) # [1, 2, 3, 4, 5]var = [1, 2, 3, [4, 5]]var_val = var.copy()print(id(var), id(var_val)) # 4559934480 4558631712del var[3][1]print(var) # [1, 2, 3, [4]]print(var_val) # [1, 2, 3, [4]] 深拷贝与浅拷贝 浅拷贝 使用的是 copy()方法 对一维列表拷贝后，与原来的列表是不同的，单独做出修改不会影响另一列表 但是如果是多维列表，使用浅拷贝之后，对多维部分进行修改，所有的都会改变 深拷贝 使用的是 copy 模块下的 deepcopy() 深拷贝下的拷贝列表，是完全独立的 12345678910111213141516171819202122import copyvarlist = [1, 2, [3, 4, 5]]newlist = varlist.copy()print(varlist) # [1, 2, [3, 4, 5]]print(newlist) # [1, 2, [3, 4, 5]]print(id(varlist) == id(newlist)) # Falseprint(id(varlist[2]) == id(newlist[2])) # Truedel varlist[2][0]print(varlist) # [1, 2, [4, 5]]print(newlist) # [1, 2, [4, 5]]varlist = [1, 2, [3, 4, 5]]newlist = copy.deepcopy(varlist)print(varlist) # [1, 2, [3, 4, 5]]print(newlist) # [1, 2, [3, 4, 5]]print(id(varlist) == id(newlist)) # Falseprint(id(varlist[2]) == id(newlist[2])) # Falsedel varlist[2][0]print(varlist) # [1, 2, [4, 5]]print(newlist) # [1, 2, [3, 4, 5]] 列表推导式列表推导式提供了一个更简单的创建列表的方法。常见的用法是把某种操作应用于序列或者可迭代对象的每个元素上，然后使用其结果来创建列表，或者通过满足某些特定条件元素来创造子序列 常用方法 list &#x3D; [想要的处理方式 for i in 容器类型数据 条件表达式] 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# 创建0-9的平方列表# 普通方法varlist = []for i in range(10): varlist.append(i ** 2)print(varlist) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]# lambda表达式+mapvarlist = list(map(lambda x: x ** 2, range(10)))print(varlist) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]# 列表推导式varlist = [i ** 2 for i in range(10)]print(varlist) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]# 2 实现一个字符串&#x27;1234&#x27; ===&gt; [2，4，6，8]# 普通方法varstr = &#x27;1234&#x27;varlist = []for i in varstr: varlist.append(int(i) * 2)print(varlist) # [2, 4, 6, 8]# lambda+mapvarlist = list(map(lambda x: int(x) * 2, varstr))print(varlist) # [2, 4, 6, 8]# 列表推导式varlist = [int(i) * 2 for i in varstr]print(varlist) # [2, 4, 6, 8]# 3 实现0-9的偶数列表 ===&gt; [0,2,4,6,8]# 普通方法varlist = []for i in range(10): if i % 2 == 0: varlist.append(i)print(varlist) # [0, 2, 4, 6, 8]# lambda+flitervarlist = list(filter(lambda x: True if x % 2 == 0 else False, range(10)))print(varlist) # [0, 2, 4, 6, 8]# 列表推导式varlist = [i for i in range(10) if i % 2 == 0]print(varlist) # [0, 2, 4, 6, 8]# 4 实现多循环的列表推导式# 实现 [1,2,3],[3,1,4] ===&gt; 列表中的元素两两组合，要求组合元素不能重复# 普通方法varlist = []for x in [1, 2, 3]: for y in [3, 1, 4]: if x != y: varlist.append((x, y))print(varlist) # [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]# 列表推导式varlist = [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]print(varlist) # [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]# 5 实现矩阵的转换# 普通方法matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12],]newlist = []for i in range(len(matrix[0])): newlist.append([res[i] for res in matrix])print(newlist)# 列表推导式newlist = [[res[i] for res in matrix] for i in range(4)]print(newlist) 练习题使用列表推导式实现乘法表 123456789101112131415161718192021222324252627282930313233343536373839404142# 把字典中的键值对转换成 a=b的列表形式# &#123;&#x27;user&#x27;:&#x27;admin&#x27;,&#x27;age&#x27;:&#x27;20&#x27;,&#x27;phone&#x27;:&#x27;130&#x27;&#125; ===&gt; [&#x27;user=admin&#x27;,&#x27;age=20&#x27;,&#x27;phone=133&#x27;]vardict = &#123;&#x27;user&#x27;: &#x27;admin&#x27;, &#x27;age&#x27;: &#x27;20&#x27;, &#x27;phone&#x27;: &#x27;130&#x27;&#125;varlist = [i + &#x27;=&#x27; + vardict[i] for i in vardict]print(varlist) # [&#x27;user=admin&#x27;, &#x27;age=20&#x27;, &#x27;phone=130&#x27;]res = &#x27;&amp;&#x27;.join(varlist)print(res) # user=admin&amp;age=20&amp;phone=130# 把列表中的所有字符全部转为小写# [&#x27;AAAAA&#x27;,&#x27;BbbBB&#x27;,&#x27;CCCcc&#x27;] ===&gt; [&#x27;aaaaa&#x27;,&#x27;bbbbb&#x27;,&#x27;ccccc&#x27;]varlist = [&#x27;AAAAA&#x27;, &#x27;BbbBB&#x27;, &#x27;CCCcc&#x27;]newlist = [i.lower() for i in varlist]print(newlist) # [&#x27;aaaaa&#x27;, &#x27;bbbbb&#x27;, &#x27;ccccc&#x27;]# x是0-5之间的偶数，y是0-5之间的奇数，把x，y组成一个元组放进一个列表中newlist = [(x, y) for x in range(6) for y in range(6) if x % 2 == 0 if y % 2 != 0]print(newlist)# 使用列表推导式完成乘法表newlist = [f&#x27;&#123;i&#125;×&#123;j&#125;=&#123;i * j&#125;&#x27; for i in range(1, 10) for j in range(1, i + 1)]print(newlist)# 使用列表推导式完成M与N的计算 ===&gt; [2,4,6,12,15,18,28,32,36]M = [ [1, 2, 3], [4, 5, 6], [7, 8, 9],]N = [ [2, 2, 2], [3, 3, 3], [4, 4, 4],]newlist = [M[p][q] * N[p][q] for p in range(3) for q in range(3)]print(newlist) # [2, 4, 6, 12, 15, 18, 28, 32, 36] 元组详解基本定义和切片操作元组和列表一样都是一组有序的数据组合 元组中的元素一旦定义了就不能修改，因此元组是不可变数据类型 元组定义 定义空元祖，变量名&#x3D;() 或者 变量名&#x3D;tuple() 还可以使用 变量名&#x3D;(1，2，3)的方式定义有数据的元组 如果只有一个数据，数据后需要加,，如 变量名&#x3D;(1,) 特例，使用 变量&#x3D;1,2,3 这样的方式也可以定义元组 元组的相关操作由于元组是不可变的数据类型，因此只能使用索引进行访问，不能进行其他操作 元组可以和列表一样使用切片操作 tuple.count() 统计一个元素出现的次数 tuple.index() 查找一个元素的索引值 tuple[] 与列表一样的方式进行切片 使用 +、* 运算，合并组成新的元组 in 方法检测一个元素是否在元组中 123456789101112131415161718192021222324252627vartuple = 1, 2, 3print(vartuple) # (1, 2, 3)vartuple = (1,)print(vartuple) # (1,)vartuple = (1, 2, 3, 4, 5)print(len(vartuple))print(vartuple[:]) # (1, 2, 3, 4, 5)print(vartuple[::]) # (1, 2, 3, 4, 5)print(vartuple[1:3]) # (2, 3)print(vartuple[::-1]) # (5, 4, 3, 2, 1)vartuple = (&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;Kobe&#x27;)print(vartuple.count(&#x27;James&#x27;)) # 1print(vartuple.index(&#x27;Curry&#x27;)) # 2print(vartuple.index(&#x27;Kobe&#x27;)) # 0print(vartuple.index(&#x27;Kobe&#x27;, 5, 8)) # 7print( vartuple + vartuple) # (&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;Kobe&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;Kobe&#x27;)print( vartuple * 2) # (&#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;Kobe&#x27;, &#x27;Kobe&#x27;, &#x27;James&#x27;, &#x27;Curry&#x27;, &#x27;Tony&#x27;, &#x27;Irving&#x27;, &#x27;Thompson&#x27;, &#x27;Harden&#x27;, &#x27;Kobe&#x27;)res = &#x27;Irving&#x27; in vartupleprint(res) # True 元组推导式 generator元组推导式 generator 也称为生成器，返回的是一个生成器 生成器是一个特殊的迭代器，生成器可以自定义，也可以使用元组推导式定义 生成器是按照某种算法去推算下一个数据或结果，只需要往内存中存储一个生成器，节约内存消耗，提升性能 语法： (1) 里面是推导式，外面是一个() 的结果就是一个生成器 (2) 自定义生成器，含有 yidle 关键字的函数就是生成器 含有 yield 关键字的函数，返回的结果就是一个迭代器(生成器函数就是一个返回迭代器的函数) 如何使用生成器：生成器是迭代器的一种，所以可以使用操作迭代器的方法操作生成器 使用 next()函数调用 使用 list()函数或者 tuple()函数进行操作 使用 for 语句进行遍历 12345678910111213141516171819varlist = [1, 2, 3, 4, 5]newtuple = (i ** 2 for i in varlist)print(newtuple) # &lt;generator object &lt;genexpr&gt; at 0x101dd1f50&gt;# 1print(next(newtuple)) # 1print(next(newtuple)) # 4# 2newtuple = (i ** 2 for i in varlist)print(list(newtuple)) # [1, 4, 9, 16, 25]newtuple = (i ** 2 for i in varlist)print(tuple(newtuple)) # (1, 4, 9, 16, 25)# 3newtuple = (i ** 2 for i in varlist)for i in newtuple: print(i) # 1 4 9 16 25 字典详解定义和基本操作字典也是一种数据的集合，由键值对组成的数据集合，字典中的键不能重复 字典中的键必须是不可变的数据类型，常用的键主要是：字符串，整型 字典的定义 字典可以通过大括号括起来的 键:值对 进行创建 也可以使用 dict 构造器来创建 数据类型的转换：可以将其他的二级容器类型（列表、元组）转换为 dict 可以使用 zip()函数，将两个 list 组合成一个 dict 字典的操作 获取，通过索引键的方式可以获取到值 修改，索引到的话可以修改值 删除，使用 del 进行删除 添加，使用一个新的键，进行赋值，若键存在，则会覆盖 成员检测，可以使用 in 进行成员检测，但是只能检测键 长度，可以用 len()，来检测有多少个键值对 dict.keys()：可以查询所有键 dict.values()：可以查询所有值 dict.items()：获取当前字典中所有的键值对 字典的遍历：可以使用 for 字典合并：new_dict &#x3D; {**dict1, **dict2} 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152vardict = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;print(vardict, type(vardict)) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125; &lt;class &#x27;dict&#x27;&gt;vardict = dict(a=1, b=2, c=3)print(vardict) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;vardict = dict([[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2], [&#x27;c&#x27;, 3]])print(vardict) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;var1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]var2 = [1, 2, 3]print(dict(zip(var1, var2))) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;res = vardict[&#x27;a&#x27;]print(res) # 1vardict[&#x27;a&#x27;] = &#x27;A&#x27;print(vardict) # &#123;&#x27;a&#x27;: &#x27;A&#x27;, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;del vardict[&#x27;a&#x27;]print(vardict) # &#123;&#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;vardict[&#x27;d&#x27;] = 4print(vardict) # &#123;&#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;res = &#x27;d&#x27; in vardictprint(res) # Trueres = &#x27;a&#x27; in vardictprint(res) # Falseres = len(vardict)print(res) # 3res = vardict.keys()print(res) #dict_keys([&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])res = vardict.values()print(res) # dict_values([2, 3, 4])res = vardict.items()print(res) # dict_items([(&#x27;b&#x27;, 2), (&#x27;c&#x27;, 3), (&#x27;d&#x27;, 4)])# 字典的遍历for i in vardict: print(i,vardict[i]) # b 2 # c 3 # d 4for k,v in vardict.items(): print(k,v) # b 2 # c 3 # d 4 相关函数 len(dict)，来检测有多少个键值对 dict.keys()：可以查询所有键 dict.values()：可以查询所有值 dict.items()：获取当前字典中所有的键值对 iter(dict)：返回以字典的键为元素的迭代器 pop(key)：通过键的方式弹出键值对 popitem()：按照 LIFO 的方式删除键值对 get()：通过 get 函数获得对应键的值，若键不存在返回 None update()：更新字典，在原来的基础上更新 setdefault()：如果 字典的键存在 则返回对应值；如果键不存在，默认存入值为 None 的键值对，返回值为值，也可以指定传入的值 1234567891011121314151617181920212223242526272829vardict = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;res = iter(vardict)print(res) # &lt;dict_keyiterator object at 0x102977950&gt;for i in res: print(i) # a # b # cvardict.pop(&#x27;a&#x27;)print(vardict) # # &#123;&#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;vardict.popitem()print(vardict) # &#123;&#x27;b&#x27;: 2&#125;vardict = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;res = vardict.get(&#x27;a&#x27;)print(res) # 1res = vardict.get(&#x27;d&#x27;)print(res) # Nonevardict.update(a=11, b=22)print(vardict) # &#123;&#x27;a&#x27;: 11, &#x27;b&#x27;: 22, &#x27;c&#x27;: 3&#125;res = vardict.setdefault(&#x27;d&#x27;, 4)print(res) # 4print(vardict) # &#123;&#x27;a&#x27;: 11, &#x27;b&#x27;: 22, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125; 字典推导式123456789101112131415161718192021222324252627vardict = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;# 把字典中的键值对位置交换# 普通方法newdict = &#123;&#125;for k, v in vardict.items(): newdict[v] = kprint(newdict) # &#123;1: &#x27;a&#x27;, 2: &#x27;b&#x27;, 3: &#x27;c&#x27;&#125;# 使用字典推导式newdict = &#123;v: k for k, v in vardict.items()&#125;print(newdict) # &#123;1: &#x27;a&#x27;, 2: &#x27;b&#x27;, 3: &#x27;c&#x27;&#125;# 只保留值为偶数的键值对 并且键值互换# 普通方法vardict = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;newdict = &#123;&#125;for k,v in vardict.items(): if v % 2 ==0: newdict[v] = kprint(newdict) # &#123;2: &#x27;b&#x27;, 4: &#x27;d&#x27;&#125;# 列表推导式方法newdict = &#123;v:k for k,v in vardict.items() if v % 2 == 0&#125;print(newdict) # &#123;2: &#x27;b&#x27;, 4: &#x27;d&#x27;&#125; 集合详解集合的基本操作和常规确定的一组无序的数据的组合 确定的：当前集合中元素的值不能重复 由多个数据组合的复合型数据（容器类型数据） 集合中的数据没有顺序 功能：成员检测、从序列中去除重复项以及数学中的集合类计算，列如交集、并集、差集与对称差集等等 集合的定义 可以直接使用{}来定义集合，定义空集合必须用 set()方法 可以使用 set()进行集合的定义和转换 使用集合推导式完成集合的定义 注意：集合中的元素不能重复，集合中存放的数据：Number、Strings、Tuple、冰冻集合 集合的基本操作和常规函数 无序、False 和 0 只会出现一个、True 和 1 只会出现一个、元素值不会重复 成员检测：使用 in 检测是都存在某个元素 元素个数：len()检测集合元素个数 集合遍历：使用 for 方法进行遍历 追加元素：set.add()可以向集合中追加元素，（为什么不是 append，因为 append 有扩充的思想，从尾部插入，而 add 是没有顺序的） 删除元素： set.pop()可以删除集合中的元素，随机删除，并返回 set.remove()指定删除集合中的元素，无返回值,如果不存在则会报错 set.discard()指定删除集合中的元素，不存在也不会报错 清空集合：set.clear() 更新集合：set.update() 集合的拷贝：set.copy() 冰冻集合：frozenset() 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950varset = &#123;123, &#x27;abc&#x27;, True, (1, 2, 3), 0, False, 3.1415, 123&#125;print(varset) # &#123;0, True, 3.1415, &#x27;abc&#x27;, (1, 2, 3), 123&#125;res = &#x27;abc&#x27; in varsetprint(res) # Trueres = len(varset)print(res) # 6for i in varset: print(i) # 0 # True # 3.1415 # (1, 2, 3) # abc # 123varset.add(&#x27;new&#x27;)print(varset) # &#123;0, True, 3.1415, &#x27;new&#x27;, (1, 2, 3), &#x27;abc&#x27;, 123&#125;# pop是随机的删除r1 = varset.pop()r2 = varset.pop()r3 = varset.pop()r4 = varset.pop()print(r1, r2, r3, r4) # 0 True 3.1415 newprint(varset) # &#123;(1, 2, 3), &#x27;abc&#x27;, 123&#125;varset = &#123;123, &#x27;abc&#x27;, True, (1, 2, 3), 0, False, 3.1415, 123&#125;varset.remove(&#x27;abc&#x27;)print(varset) # &#123;0, True, 3.1415, (1, 2, 3), 123&#125;varset.discard(123)print(varset) # &#123;0, True, 3.1415, (1, 2, 3)&#125;varset.clear()print(varset) # set()varset = &#123;123, &#x27;abc&#x27;, True, (1, 2, 3), 0, False, 3.1415, 123&#125;varset.update(&#123;1, 2, 3, 4, 5&#125;)print(varset) # &#123;0, True, 2, 3.1415, 3, 4, 5, (1, 2, 3), 123, &#x27;abc&#x27;&#125;newset = varset.copy()print(newset) # &#123;0, True, 2, 3.1415, 3, 4, 5, (1, 2, 3), &#x27;abc&#x27;, 123&#125;# 冰冻集合v = frozenset(&#123;1, 2, 3&#125;)print(v) # frozenset(&#123;1, 2, 3&#125;) 冰冻集合 定义冰冻集合 只能使用 frozenset()函数进行冰冻集合的定义 冰冻集合一旦定义 就不能修改 冰冻集合只能做集合相关的运算：求并交补差集 本身就是一个强制类型转换的函数，可以把其他任何容器类型的数据转换为冰冻集合 冰冻集合可以遍历：使用 for 进行遍历 冰冻集合的推导式 12345678910111213vars = frozenset(&#123;1,2,3&#125;)print(vars) # frozenset(&#123;1, 2, 3&#125;)for i in vars: print(i) # 1 # 2 # 3# 冰冻集合推导式res = frozenset(&#123;i&lt;&lt;1 for i in range(6)&#125;)print(res) # frozenset(&#123;0, 2, 4, 6, 8, 10&#125;) 集合推导式12345678910111213141516171819202122232425262728# 普通推导式varset = &#123;1, 2, 3, 4&#125;newset = &#123;i &lt;&lt; 1 for i in varset&#125;print(newset) # &#123;8, 2, 4, 6&#125;# 带有条件表达式的推导式newset = &#123;i &lt;&lt; 1 for i in varset if i % 2 == 0&#125;print(newset) # &#123;8, 4&#125;# 多循环的集合推导式# 普通方法vars1 = &#123;1, 2, 3&#125;vars2 = &#123;4, 5, 6&#125;newset = set()for i in vars1: for j in vars2: print(i, j) newset.add(i + j)print(newset) # &#123;5, 6, 7, 8, 9&#125;# 列表推导式newset = &#123;i + j for i in vars1 for j in vars2&#125;print(newset) # &#123;5, 6, 7, 8, 9&#125;# 待条件表达式的多循环的集合推导式newset = &#123;i + j for i in vars1 for j in vars2 if (i + j) % 2 == 0&#125;print(newset) # &#123;8, 6&#125; 集合运算 集合的主要运算 交集 &amp; set.intersection() 有返回值，不对原集合更新；还可以对可迭代对象进行合并 set.intersection_update() 无返回值，对原集合会更新 并集 | 更推荐这种，对两种数据要求高 不能太灵活 set.union() 有返回值，不对原集合更新 ；还可以对可迭代对象进行合并 set.update() 无返回值，对调用的集合更新 差集 (去掉集合中 另一集合有的部分) set.difference() 有返回值，不对原集合更新 set.difference_update() 无返回值，对原集合更新 对称差集 (去掉各自集合中 相同的部分) ^ set.symmetric_difference() 有返回值，不对原集合更新 set.symmetric_difference_update() 无返回值，对原集合更新 检测超集和子集 set1.issuperset(set2) 返回值为 True、False，意义为 set1 是否为 set2 的超集，也可以用 &gt;= set1.issubset(set2) 检测 set1 是否为 set2 的子集，也可以使用 &lt;= 检测是否不相交 set1.isdisjoint(set2) 有返回值，不相交返回 True、相交返回 False 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051vars1 = &#123;1, 2, 3, 4, 5, 6, 7&#125;vars2 = &#123;4, 5, 6, 7, 8, 9, 10&#125;# 交集print(vars1 &amp; vars2) # &#123;4, 5, 6, 7&#125;res = vars1.intersection(vars2)print(res) # &#123;4, 5, 6, 7&#125;print(vars1) # &#123;1, 2, 3, 4, 5, 6, 7&#125;res = vars1.intersection_update(vars2)print(res) # Noneprint(vars1) # &#123;4, 5, 6, 7&#125;# 并集vars1 = &#123;1, 2, 3, 4, 5, 6, 7&#125;vars2 = &#123;4, 5, 6, 7, 8, 9, 10&#125;print(vars1 | vars2) # &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;res = vars1.union(vars2)print(res) # &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;vars1.update(vars2)print(vars1) # &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;# 差集vars1 = &#123;1, 2, 3, 4, 5, 6, 7&#125;vars2 = &#123;4, 5, 6, 7, 8, 9, 10&#125;print(vars1 - vars2) # &#123;1, 2, 3&#125;print(vars2 - vars1) # &#123;8, 9, 10&#125;res = vars1.difference(vars2)print(res) # &#123;1, 2, 3&#125;vars1.difference_update(vars2)print(vars1) # &#123;1, 2, 3&#125;# 对称差集vars1 = &#123;1, 2, 3, 4, 5, 6, 7&#125;vars2 = &#123;4, 5, 6, 7, 8, 9, 10&#125;print(vars1 ^ vars2) # &#123;1, 2, 3, 8, 9, 10&#125;res = vars1.symmetric_difference(vars2)print(res) # &#123;1, 2, 3, 8, 9, 10&#125;vars1.symmetric_difference_update(vars2)print(vars1) # &#123;1, 2, 3, 8, 9, 10&#125;vars1 = &#123;1,2,3&#125;vars2 = &#123;1,2,3,4,5,6,7&#125;res = vars2.issuperset(vars1)print(res) # Trueres = vars1.issubset(vars2)print(res) # Trueres = vars1.isdisjoint(vars2)print(res) # False 更新: 2024-01-10 22:17:18原文: https://www.yuque.com/zacharyblock/cx2om6/an7fvuvt1unusq1w","categories":[{"name":"Python基础","slug":"Python基础","permalink":"https://blockzachary.github.io/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]},{"title":"Python - 语法","slug":"Python基础/语法","date":"2022-12-31T16:54:00.000Z","updated":"2022-12-31T16:54:00.000Z","comments":true,"path":"blog/1071536995/","permalink":"https://blockzachary.github.io/blog/1071536995/","excerpt":"","text":"语法课程介绍 语法 函数 容器 文件 内置模块 Python 环境安装包括了 Python、Pycharm、typora、语雀 https://www.python.org/ https://www.jetbrains.com/pycharm/ https://typoraio.cn/ https://www.yuque.com/ 初识 Python 脚本输出语句 print1print(&quot;Hellozachary&quot;) 空格与缩进123def main(): print(&quot;Hello zachary&quot;) print(&quot;Welcome to Python&quot;) 注释Python 的注释就是用一个 # 注释的一行话，除了# 还可以用’’’ ‘’’，和””” “”” 123456789# 这是一个单行注释&#x27;&#x27;&#x27;这是一个多行注释&#x27;&#x27;&#x27;&quot;&quot;&quot;这也是一个多行注释&quot;&quot;&quot; 语句跨行使用反斜杠是语句分行编写 123for i in \\range(9): print(i) 变量（标识符：变量名、函数名、类名、模块名）用于记录可变化的数据 12num=10print(num) 变量的命名规范 变量名可以使用字母、数字、下划线， 但是不能以数字开头 要严格区分大小写 不要使用中文 不要使用关键字 关键字包括不限于： 变量定义及数据交换变量的定义方式 12345678#第一种a=10b=20print(a,b)#第二种a,b=10,20print(a,b) 交换变量的数据 1234567891011121314#普通方式交换数据a=10b=20t=aa=bb=tprint(a,b)#python独有的方法进行数据交换a=10b=20a,b=b,aprint(a,b) Python 的数据类型什么是数据类型——数据的表现形式，常用的包括有数字、字符串，在程序中我们常使用的包括： 字符串类型12345love=&#x27;Iloveyou&#x27;name=&quot;Zachary&quot;print(love)print(name) 可以使用type()查看变量的数据类型 123456#大字符串s=&#x27;&#x27;&#x27;比如这是一个很长的字符串可以换行的&#x27;&#x27;&#x27;print(s) 字符串中使用引号可以嵌套使用，单双引号可以互相嵌套，但是不可以嵌套自己 12s=&quot;I&#x27;mZachary&quot;print(s) 关于转义字符 \\t 制表符\\r 换行符\\n 回车换行符在字符串前面加一个r可以取消转义字符的效果 1234567#使用了转义字符的s=&quot;这是一段话\\n分了两行&quot;print(s)#使用r使转义字符失效s=r&quot;这是一段话\\n没有分两行&quot;print(s) 数字类型 整型 int 1234var=520print(var,type(var))var=-100print(var,type(var)) 浮点类型 float 12var=3.14print(var,type(var)) 复数类型 complex 12var=5+6jprint(var,type(var)) 布尔类型 bool(True\\False) 1234var=Trueprint(var,type(var))var=Falseprint(var,type(var)) list 列表类型列表用来表示一系列数据，例如需要记录一组数字或者其他数据，用中括号括起来[],并且数据之间使用,分隔开 12varlist=[192,200,43]print(varlist,type(varlist)) 列表中存储的数据可以是任意类型 列表中存储的每一组数据，称为元素 列表中存储的数据可以通过下标获取，列表的下标从 0 开始，倒着来最后一个是-1 12varlist=[192,200,43]print(varlist[0]) 列表中元素的值，可以是一个 list，这种叫二维列表 123varlist=[192,[&#x27;a&#x27;,&#x27;b&#x27;],43]print(varlist,type(varlist))print(varlist[1][0])#&#x27;a&#x27; tuple 元组类型元组与列表数据类型相似，使用多个数据内容时候也可以使用元组，用括号()括起来，但是区别在于 tuple 的元素不可改变 12vart=(1,2,3,&#x27;a&#x27;,&#x27;b&#x27;)print(vart,type(vart)) 注意，在定义元组时候，如果只有一个元素，需要加一个逗号, 12vart=(&#x27;abc&#x27;,)print(vart) 列表使用中括号[]定义，元组使用括号()定义 列表中的值可以被改变，元组中的值不可以 dict 字典类型字典也是用于存储一组或多组数据，使用大括号&#123;&#125;括起来，使用的是键-值对的存储方式 使用键-值对的方式进行定义，{ key:value } 键和值之间使用冒号:进行分隔，多组键-值对之间用逗号,分隔 键-必须是字符串或者数字类型，值-可以是任意类型 键-不可以重复，值-可以重复 12345678vard=&#123;&#x27;title&#x27;:&#x27;&lt;&lt;无人生还&gt;&gt;&#x27;,&#x27;author&#x27;:&#x27;阿加莎·克里斯蒂&#x27;,&#x27;price&#x27;:&#x27;39.99&#x27;&#125;print(vard,type(vard))#通过索引键名来获得对应值，类似于list的方式print(vard[&#x27;title&#x27;]) set 集合类型集合是一种用于存储无重复的数据，使用大括号&#123;&#125;或者 set()方法来定义 集合是一种无序且无重复的数据类型 使用 set 方法定义的时候，里面是字符串 当需要定义一个空集合的时候，只能使用 set 方法，因为&#123;&#125;是一个空字典 123456789vars=&#123;1,2,3,4,&#x27;a&#x27;,&#x27;b&#x27;,1,2,3&#125;print(vars,type(vars))#&#123;1,2,3,4,&#x27;a&#x27;,&#x27;b&#x27;&#125;&lt;class&#x27;set&#x27;&gt;vars=set(&quot;123&quot;)print(vars)#&#123;&#x27;1&#x27;,&#x27;3&#x27;,&#x27;2&#x27;&#125;vars=set()print(vars,type(vars))#set()&lt;class&#x27;set&#x27;&gt;vard=&#123;&#125;print(vard,type(vard))#&#123;&#125;&lt;class&#x27;dict&#x27;&gt; 可以给集合添加元素，使用 add 方法 可以删除集合中的元素，使用 discard 方法 也可以用in检查元素是否在集合中 123456vars=&#123;1,2,3,4,&#x27;a&#x27;,&#x27;b&#x27;,1,2,3&#125;vars.add(&#x27;c&#x27;)print(vars)#&#123;1,2,3,4,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;&#125;vars.discard(4)print(vars)#&#123;1,2,3,&#x27;c&#x27;,&#x27;b&#x27;,&#x27;a&#x27;&#125;print(1invars)#True 集合主要用于运算，包括交集、并集、补集，对称集合 123456a=&#123;1,2,3,7,8,9&#125;b=&#123;1,2,&#x27;a&#x27;,&#x27;b&#x27;&#125;print(a&amp;b)#交集&#123;1,2&#125;print(a-b)#差集&#123;8,9,3,7&#125;print(a|b)#并集&#123;1,2,3,7,8,9,&#x27;a&#x27;,&#x27;b&#x27;&#125;print(a^b)#对称集合&#123;3,&#x27;a&#x27;,7,8,9,&#x27;b&#x27;&#125; 基础数据类型转换数据类型总结字符串 str数字类型 整型 int 浮点 float 复数 complex 布尔 bool 列表 list元组 tuple字典 dict集合 set 可变数据类型：列表(append)、字典([‘key’])、集合(add)不可变数据类型：字符串、数字、元组 容器类型数据：字符串、列表、元组、集合、字典非容器类型数据：数字、布尔类型 数据类型转换：把一个数据类型转化为另一个类型为什么要进行数据类型转换：因为不同数据类型之间不能进行运算数据转换的类型： 自动类型转换当两个不同类型的值进行运算时，结果会向更高的精度进行计算True &#x3D;&#x3D;&#x3D;&gt; 整型 &#x3D;&#x3D;&#x3D;&gt; 浮点 &#x3D;&#x3D;&#x3D;&gt; 复数 123456#自动类型转换a=123b=Trueprint(a+b)#124print(12.5+22)#34.5print(True+3.14)#4.140000000000001 强制类型转换分别有：str()、int()、float()、bool()、list()、tuple()、dict()、set() 可以将所有类型转换为 str 字符串如果是纯数字可以转化为 int，其他类型容器不行 float 与 int 类似 bool 的强制转化，只要有非 0 值、非空值的内容、容器，结果都是 True 容器类型数据转换容器类型转换为 list 列表 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型字符串可以转换，会把字符串中的每一个字符当做一个元素集合、元组、字典都可以转换，字典会只保留键 12345678#list列表n=&#x27;123&#x27;res=list(n)print(n,type(n))#123&lt;class&#x27;str&#x27;&gt;print(res,type(res))#[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]&lt;class&#x27;list&#x27;&gt;n=&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2&#125;res=list(n)print(res)#[&#x27;a&#x27;,&#x27;b&#x27;] tuple 元组 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型字符串可以转换，会把字符串中的每一个字符当做一个元素集合、列表、字典也都可以转换，同上只保留键 set 集合 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型字符串可以转换，会把字符串中的每一个字符当做一个元素，并且是无序的列表、元组、字典也都可以转换，字典只保留键 dict 字典 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型字符串不可以转换列表转化的时候必须是嵌套的形式才可以，二级列表,并且每个元素是一个二元素的列表元组转化的时候，同列表必须是二级元组，每一个元素是一个二元素的元组集合不可以转为字典 12345678# 列表转化为字典n = [[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]]res = dict(n)print(res) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;# 元组转化为字典n = ((&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2))res = dict(n)print(res) # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125; 运算符算数运算符 加 减 乘 &#x2F; 除 % 取余（取模） &#x2F;&#x2F; 取整 ** 乘方 字符运算符 字符串与数字不能直接进行运算 字符串与字符串可以使用 + 进行拼接 字符串如果和数字使用 * 那就是重复数字次的字符串 在字符串中如果出现变量，可以使用&#123;&#125; 将变量括起来，然后再字符串前面加上f 12345l = &quot;love&quot;print(l * 3) # loveloveloves = f&quot;I &#123;l&#125; you&quot;print(s) # I love you 赋值运算符 &#x3D; 简单的赋值运算符 +&#x3D; 加法赋值运算符 -&#x3D; 减法赋值运算符 *&#x3D; 乘法赋值运算符 &#x2F;&#x3D; 除法赋值运算符 %&#x3D; 取余赋值运算符 **&#x3D; 乘方赋值运算符 &#x2F;&#x2F;&#x3D; 取整赋值运算符 123a = 12a += 12print(a) # 24 比较运算符 &#x3D;&#x3D; 比较两个值是否相等，返回 True、False !&#x3D; 比较两个值是否不相等 大于，返回 True，否则 False &lt; 小于，返回 True，否则 False &#x3D; 大于等于，返回 True，否则 False &lt;&#x3D; 小于等于，返回 True，否则 False 12b = 12print(a != b) # True 逻辑运算符 and 与 or 或 not 非 有一个贪心原则，当 and 的时候前一个是 False，后一个就不计算了，直接返回 False，当 or 的时候，如果前一个是 True 则返回 True，否则返回后一个的情况 位运算位运算是在二进制上使用的，可以使用 bin()方法将其他进制转换成二进制 &amp; 按位与运算 | 按位或运算 ^ 按位异或运算 ~ 按位取反运算 &lt;&lt; 左移运算 右移运算 其他运算符 成员运算符 in 该成员是否在该数据中not in 该成员是否不在该数据中 身份运算符 is 检测两个标识符是否引自同一个对象not is 两个标识符不是引自同一个对象 id()可以用于获取对象地址 流程控制流程控制有顺序、分支、循环等 分支结构 在分支中常使用的是 if-else 语句 1234if 条件1: code1else: code2 该分支可以嵌套，重复等等叠加使用 123456if 条件1: code1elif 条件2: code2else: code3 三元运算符 1code1 if 条件1 else code2 循环结构while 循环123456num = 1while num &lt; 10: print(num) num += 1else: print(&quot;循环结束啦&quot;) for 循环12for i in range(10): print(i) break 语句 跳出循环 continue 语句 跳出当前循环，执行下一次循环 pass 语句 什么也不做 exit()和 quit()用于结束程序的，结束的是解释器的程序 打印矩形打印出十行十列的符号 12for i in range(10): print(&quot;✨✨✨✨✨✨✨✨✨✨&quot;) 隔一行换一个颜色 12345for i in range(10): if i % 2 == 0: print(&quot;❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤&quot;) else: print(&quot;◇ ◇ ◇ ◇ ◇ ◇ ◇ ◇ ◇ ◇&quot;) 打印乘法表1234for i in range(1,10): for j in range(1,i+1): print(f&quot;&#123;j&#125;✖&#123;i&#125;=&#123;i*j&#125;&quot;,end=&quot;\\t&quot;) print() 打印斐波那契数列1234567num = 10res_list = [0, 1]for i in range(num-2): res_list.append(res_list[-1]+res_list[-2])print(res_list) 百元买百鸡一共有 100 元，买 100 只鸡公鸡&#x3D;3 元母鸡&#x3D;1 元小鸡&#x3D;&#x3D;&#x3D;0.5 元罗列出所有方案 12345678910111213141516171819202122232425# 公鸡 3# 母鸡 1# 小鸡 0.5money = 100cock_price = 3hen_price = 1chick_price = 0.5count = 0cock_max = money // cock_pricehen_max = money // hen_pricechick_max = int(money // chick_price)print(cock_max, hen_max, chick_max) # 33 100 200for cock_num in range(1, cock_max + 1): for hen_num in range(1, hen_max + 1): money_res = money - cock_num * cock_price - hen_num * hen_price if money_res &lt;=0: break else: chick_num = int(money_res // chick_price) if cock_num+hen_num+chick_num == 100: count += 1 print(f&quot;方案&#123;count&#125;————100元可以购买:&#123;cock_num&#125;只公鸡，&#123;hen_num&#125;只母鸡，&#123;chick_num&#125;只小鸡&quot;) 求 1000 以内的水仙花数打印 1000 以内所有满足水仙花的数，“水仙花数”是指一个三位数其各位数字的立方和等于该数本身，例如 153 是“水仙花数”，因为：153 &#x3D; 1^3 + 5^3 + 3^3 123456for num in range(100, 1000): a = num // 100 b = num % 100 // 10 c = num % 100 % 10 if a*a*a+b*b*b+c*c*c == num: print(num) 青蛙跳台阶问题困难：一共有 n 个台阶，一只青蛙每次只能跳一阶或是两阶，那么一共有多少种跳到顶端的方案？例如 n&#x3D;2，那么一共有两种方案，一次性跳两阶或是每次跳一阶。 动态规划：其实，就是利用，上次得到的结果，给下一次作参考，下一次就能利用上次的结果快速得到结果，依次类推 1234567891011121314151617181920# 方法一n = 10a = 1b = 2for i in range(n-2): t = a a = b b += tprint(b)# 方法二num = 10res_list = [1, 2]for i in range(num-2): res_list.append(res_list[-1]+res_list[-2])print(res_list[-1]) 更新: 2024-08-01 16:25:27原文: https://www.yuque.com/zacharyblock/cx2om6/slzd0tdgv6rm1nk1","categories":[{"name":"Python基础","slug":"Python基础","permalink":"https://blockzachary.github.io/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"}]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://blockzachary.github.io/categories/Linux/"},{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/categories/Docker/"},{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/categories/Python-Web/"},{"name":"FastAPI入门","slug":"FastAPI入门","permalink":"https://blockzachary.github.io/categories/FastAPI%E5%85%A5%E9%97%A8/"},{"name":"Python 面经","slug":"Python-面经","permalink":"https://blockzachary.github.io/categories/Python-%E9%9D%A2%E7%BB%8F/"},{"name":"Git","slug":"Git","permalink":"https://blockzachary.github.io/categories/Git/"},{"name":"Python 测试","slug":"Python-测试","permalink":"https://blockzachary.github.io/categories/Python-%E6%B5%8B%E8%AF%95/"},{"name":"Python MySQL","slug":"Python-MySQL","permalink":"https://blockzachary.github.io/categories/Python-MySQL/"},{"name":"Python进阶","slug":"Python进阶","permalink":"https://blockzachary.github.io/categories/Python%E8%BF%9B%E9%98%B6/"},{"name":"MySQL","slug":"MySQL","permalink":"https://blockzachary.github.io/categories/MySQL/"},{"name":"Python面向对象","slug":"Python面向对象","permalink":"https://blockzachary.github.io/categories/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"name":"Python基础","slug":"Python基础","permalink":"https://blockzachary.github.io/categories/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blockzachary.github.io/tags/Linux/"},{"name":"Shell","slug":"Shell","permalink":"https://blockzachary.github.io/tags/Shell/"},{"name":"Docker","slug":"Docker","permalink":"https://blockzachary.github.io/tags/Docker/"},{"name":"Python Web","slug":"Python-Web","permalink":"https://blockzachary.github.io/tags/Python-Web/"},{"name":"Django-Ninja","slug":"Django-Ninja","permalink":"https://blockzachary.github.io/tags/Django-Ninja/"},{"name":"RESTful API","slug":"RESTful-API","permalink":"https://blockzachary.github.io/tags/RESTful-API/"},{"name":"Django","slug":"Django","permalink":"https://blockzachary.github.io/tags/Django/"},{"name":"Python","slug":"Python","permalink":"https://blockzachary.github.io/tags/Python/"},{"name":"Vue3","slug":"Vue3","permalink":"https://blockzachary.github.io/tags/Vue3/"},{"name":"FastAPI","slug":"FastAPI","permalink":"https://blockzachary.github.io/tags/FastAPI/"},{"name":"实战","slug":"实战","permalink":"https://blockzachary.github.io/tags/%E5%AE%9E%E6%88%98/"},{"name":"面经","slug":"面经","permalink":"https://blockzachary.github.io/tags/%E9%9D%A2%E7%BB%8F/"},{"name":"SQLAlchemy","slug":"SQLAlchemy","permalink":"https://blockzachary.github.io/tags/SQLAlchemy/"},{"name":"项目","slug":"项目","permalink":"https://blockzachary.github.io/tags/%E9%A1%B9%E7%9B%AE/"},{"name":"Element-plus","slug":"Element-plus","permalink":"https://blockzachary.github.io/tags/Element-plus/"},{"name":"Python日志","slug":"Python日志","permalink":"https://blockzachary.github.io/tags/Python%E6%97%A5%E5%BF%97/"},{"name":"Flask","slug":"Flask","permalink":"https://blockzachary.github.io/tags/Flask/"},{"name":"Git","slug":"Git","permalink":"https://blockzachary.github.io/tags/Git/"},{"name":"unittest","slug":"unittest","permalink":"https://blockzachary.github.io/tags/unittest/"},{"name":"PyTest","slug":"PyTest","permalink":"https://blockzachary.github.io/tags/PyTest/"},{"name":"MySQL","slug":"MySQL","permalink":"https://blockzachary.github.io/tags/MySQL/"}]}