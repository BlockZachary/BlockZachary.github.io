[{"title":"Python - 虚拟环境 poetry","url":"/blog/3389786147/","content":"\n官方文档：[Poetry - Python dependency management and packaging made easy](https://python-poetry.org/)\n\nReal Python文档：[Dependency Management With Python Poetry – Real Python](https://realpython.com/dependency-management-python-poetry/)\n\n相关blog：[Python 套件管理器——Poetry 完全入門指南](https://blog.kyomind.tw/python-poetry/)、[使用 Python Poetry 进行依赖项管理（翻译）](https://muzing.top/posts/3fa905f9/)\n\n# poetry介绍\n\nPoetry 是一种用于管理 Python 项目的工具，可简化依赖项管理。您可以使用 Poetry 来指定、安装和解析依赖项，确保您使用正确的包版本。Poetry 利用 `pyproject.toml` 文件进行配置，并维护 `poetry.lock` 文件以锁定依赖项，从而在不同机器之间提供一致的环境。\n\n学习本教程之前应该对[虚拟环境](https://realpython.com/python-virtual-environments-a-primer/)、[模块和包](https://realpython.com/python-modules-packages/)以及 [pip](https://realpython.com/what-is-pip/) 有基本的了解。\n\n同时 Poetry 还可以帮助[为项目构建分发包](https://python-poetry.org/docs/cli/#build)。如果想分享自己的作品，可以使用 Poetry 在 [Python Packaging Index （PyPI）](https://pypi.org/) 上[发布](https://python-poetry.org/docs/cli/#publish)的项目。\n\n通常，您应该使用 `pipx` 等工具在系统范围内安装 Poetry。然后，您可以使用 `poetry new` 创建新项目，或使用 `poetry init` 将 Poetry 添加到现有项目。稍后，使用 `poetry add` 在项目中指定新的依赖项，并使用 `poetry install` 将列出的依赖项安装到环境中。通过了解如何有效地管理依赖关系，您可以确保您的项目是可重现和可维护的。\n\n\n\n# 安装 poetry\n\n## pip安装\n\n注意：不是在项目下的虚拟环境安装，是在本机的 Python环境下安装\n\n```shell\npip install poetry\n```\n\n## 官方推荐安装\n\nLinux, macOS, Windows (WSL)\n\n```shell\ncurl -sSL https://install.python-poetry.org | python3 -\n```\n\n如果您使用的是 macOS，那么可能会收到一个 `ssl.SSLCertVerificationError`。如果您没有安装 SSL 模块的默认**根证书（root certificates）**，则可能会发生此错误。可以通过在 Python 文件夹中运行命令脚本来安装它们：\n\n```\nopen \"/Applications/Python 3.9/Install Certificates.command\"\n```\n\n根据您按照的 Python 版本，Python 解释器的特定路径可能会有所不同。在这种情况下，需要相应地调整上述命令中的路径。\n\n运行命令后，上面的 `curl` 命令应该可以正常工作，没有任何错误。\n\nWindows (Powershell)\n\n```shell\n(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n```\n\n## 查看poetry\n\n在输出中应该会看到安装完成的消息。可以在终端中运行 `poetry --version` 以查看 `poetry` 是否正常工作。此命令将显示当前的 Poetry 版本。如果想更新 Poetry，那么可以运行 `poetry self update`。\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735300276257-3d6e2b01-f205-4235-adcf-c579b2e2ce41.png)\n\n# 初识 poetry\n\n## 创建新的poetry项目\n\n使用`poetry new [project-name]`命令，创建一个新的 Poetry 项目，后跟所需的项目名称。\n\n```shell\npoetry new poetry-dm\n```\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735300711258-6e1eddb5-c26f-4d03-9fca-bbe74621250d.png)\n\n进入创建的项目目录后查看：\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735300793183-c5dc4bd1-f9b3-4bba-a760-8a399a79b555.png)\n\n## 项目结构\n\n```shell\n.\n├── README.md            # readme 文件\n├── poetry_dm            # 项目目录\n│   └── __init__.py\n├── pyproject.toml       # toml文件\n└── tests                # 测试目录\n    └── __init__.py\n```\n\n可以发现 Poetry 将所提供名称中的破折号 （`-`） 转换为相应 `poetry_dm/` 子文件夹中的下划线 （`_`）？该工具会自动为您规范化 Python 包名称。这可确保您能够将它们作为 Python 包导入。否则，`poetry-dm` 将不是有效的标识符，因为破折号表示 Python 语法中的减号运算符。\n\n最重要的就是一个名为`pyproject.toml`的文件\n\n作者考虑了上面引用的新配置文件的几种文件格式。最终，他们决定使用 **TOML** 格式，该格式代表 [Tom's Obvious Minimal Language](https://toml.io/en/)。在他们看来，TOML 足够灵活，同时比 [YAML](https://realpython.com/python-yaml/)、[JSON、](https://realpython.com/python-json/)CFG 或 [INI](https://en.wikipedia.org/wiki/INI_file) 等其他选项具有更好的可读性和更低的复杂性。\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735301366860-754bd72d-5cfd-4664-96a0-0fe03cb72c3d.png)\n\n`pyproject.toml` 文件以 `[tool.poetry]` 子表开头，您可以在其中存储有关项目的一般信息。Poetry 定义了一些在此子表中有效的[表键](https://python-poetry.org/docs/pyproject/)。虽然其中一些是可选的，但您必须始终指定四个：\n\n1. `**name**`：将显示在 PyPI 上的分发包的名称\n2. `**version**`：包的版本，最好遵循[语义版本控制](https://semver.org/)\n3. `**description**`：软件包的简短描述\n4. `**authors**`：作者列表，格式`名称为 <email>`\n\n\n\n最后一个表，`pyproject.toml` 文件中第 12行的 `[build-system]`，定义了 Poetry 和其他构建工具可以使用的元数据。如前所述，此表不是特定于工具的，因为它没有前缀。它有两个键：\n\n1. `**requires**`：构建包所需的依赖项列表，使此键成为强制性的\n2. `**build-backend**`：用于执行构建过程的 Python 对象\n\n# 使用 poetry\n\n创建完成一个 poetry 项目之后，可以使用 poetry 提供的虚拟环境处理项目的依赖关系\n\n## 使用 poetry 的虚拟环境\n\n每个项目最好单独创建一个虚拟环境。避免混淆不同项目的不同依赖项。poetry 的核心功能之一就是虚拟环境，可以避免干扰全局 Python 的安装。\n\n上面创建完了一个 poetry 项目，名称为 `poetry-dm`但并不会立即创建虚拟环境。\n\n### 列出虚拟环境\n\n可以通过命令 `poetry env list`来列出所有连接到当前项目的虚拟环境\n\n```shell\npoetry env list\n```\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735374326873-49ea6d1b-f285-45f0-8eb9-0ffcca5887fd.png)\n\n目前输出为空，即当前项目没有连接虚拟环境。\n\n### 创建虚拟环境\n\n当在项目中使用 poetry 运行一些命令时，会创建一个虚拟环境。同时可以制定 poetry 使用哪个 Python 版本，例如\n\n```shell\npoetry env use python3\n```\n\n使用此命令，将使用与安装 poetry 相同版本的 Python，创建一个新的虚拟环境。\n\n或者，也可以是一个本地的 Python 的路径，版本需要与 toml 中指定的 Python 版本一致，否则项目会有问题\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735374719979-17a32255-019a-49c8-b390-c3c6b58620c5.png)\n\n运行完命令之后，会看到以下内容\n\n```shell\nCreating virtualenv poetry-dm-4GWts8yE-py3.10 in /Users/zachary/Library/Caches/pypoetry/virtualenvs\nUsing virtualenv: /Users/zachary/Library/Caches/pypoetry/virtualenvs/poetry-dm-4GWts8yE-py3.10\n```\n\n代表着刚才的命令创建了一个名为 `poetry-dm-4GWts8yE-py3.10`的虚拟环境\n\n虚拟环境的名称包含：项目名和 Python 版本。中间看似随机的字符是父目录的哈希值。有了中间这个唯一的字符串，Poetry 可以在系统上处理多个具有相同名称和相同 Python 版本的项目。\n\n虚拟环境位于 `/Users/zachary/Library/Caches/pypoetry/virtualenvs`\n\n不同操作系统对应的虚拟环境创建目录\n\n| 操作系统 | 路径                                             |\n| -------- | ------------------------------------------------ |\n| macOS    | ~/Library/Caches/pypoetry                        |\n| Windows  | C:\\Users\\<username>\\AppData\\Local\\pypoetry\\Cache |\n| Linux    | ~/.cache/pypoetry                                |\n\n再次运行 `poetry env list`命令，可以看到已经创建好的虚拟环境\n\n也可以使用 `poetry env info`命令查看当前项目已经激活的虚拟环境信息\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735375907597-5a469630-b51c-4d3a-8677-54a876ebed26.png)\n\n### 自定义虚拟环境位置\n\n也可能你并不想让所有的项目的虚拟环境都放在默认的缓存目录下，可以通过 poetry 命令 ，具体看 [poetry configuration](https://python-poetry.org/docs/configuration)\n\n### 在当前项目下创建虚拟环境\n\n像以往使用 pip+venv 的方法创建虚拟环境的时候，默认会在项目目录下创建一个.venv 的虚拟环境，便于直接查看当前项目使用了哪些依赖项，同时在部署项目的时候会更方便查看\n\npoetry 同样提供了这样的方法\n\n先使用 `poetry config --list`指令 查看一下配置项\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735376802898-475b766c-6e49-4ab4-8eb9-bc39e4d0774d.png)\n\n其中 `virtualenvs.in-project = null`就是修改创建虚拟环境到项目目录的参数\n\n执行：\n\n```shell\npoetry config virtualenvs.in-project true\n```\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735376957649-7ea8e47c-c252-41b8-9c7a-351fc36130ce.png)\n\n然后尝试一下在项目目录下创建虚拟环境\n\n先删除掉之前创建的虚拟环境\n\n```shell\npoetry env remove python3\n```\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735377373526-1b8758b2-7899-44f7-a08e-8afe486a84ce.png)\n\n然后重新创建虚拟环境\n\n```shell\npoetry env use python3\n```\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735377436429-113b3789-6bdf-48d6-9412-3d71f7a9e08d.png)\n\n可以看到\n\n- 虚拟环境已经创建到了项目目录下\n- 名称为 `.venv`\n\n### 启动和退出虚拟环境\n\n在项目的根目录下使用 `poetry shell`可以进入到虚拟环境\n\n```shell\npoetry shell\nSpawning shell within /Users/zachary/Desktop/poetry-dm/.venv\n➜  poetry-dm emulate bash -c '. /Users/zachary/Desktop/poetry-dm/.venv/bin/activate'\n(poetry-dm-py3.10) ➜  poetry-dm\n```\n\npoetry shell 指令会检查当前目录或上层目录是否存在 `pyproject.toml` 来确定需要启动的虚拟环境，所以如果不移动到项目的目录下，则会出现错误。\n\n退出虚拟环境，运行 `exit`\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735377701118-8c06f15d-b35b-4285-ab23-60cf272c58dc.png)\n\n## poetry 指令\n\n### 安装模块/包\n\n通过命令 `poetry add [module/package]`来安装 Python 包\n\n尝试着在上面创建的项目下安装一个 FastAPI\n\n先通过虚拟环境的 pip list 看下目前已有的包\n\n```shell\npoetry shell\nSpawning shell within /Users/zachary/Desktop/poetry-dm/.venv\n➜  poetry-dm emulate bash -c '. /Users/zachary/Desktop/poetry-dm/.venv/bin/activate'\n(poetry-dm-py3.10) ➜  poetry-dm pip list\nPackage    Version\n---------- -------\npip        24.3.1\nsetuptools 75.6.0\n(poetry-dm-py3.10) ➜  poetry-dm \n```\n\n退出虚拟环境后，在项目下运行 `poetry add fastapi`\n\n```shell\npoetry add fastapi\nUsing version ^0.115.6 for fastapi\n\nUpdating dependencies\nResolving dependencies... (16.6s)\n\nPackage operations: 10 installs, 0 updates, 0 removals\n\n  - Installing exceptiongroup (1.2.2)\n  - Installing idna (3.10)\n  - Installing sniffio (1.3.1)\n  - Installing typing-extensions (4.12.2)\n  - Installing annotated-types (0.7.0)\n  - Installing anyio (4.7.0)\n  - Installing pydantic-core (2.27.2)\n  - Installing pydantic (2.10.4)\n  - Installing starlette (0.41.3)\n  - Installing fastapi (0.115.6)\n\nWriting lock file\n```\n\n会将所有的信息全部列出来，并且清楚的告知新增的依赖项及其对应版本\n\n这时候查看一下 pyproject.toml\n\n```toml\n[tool.poetry]\nname = \"poetry-dm\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"BlockZachary <zachary26626@gmail.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\nfastapi = \"^0.115.6\"\n\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\n对应的依赖项及版本号也添加进去了，但是能看到 fastapi 的依赖项并没有包括在里面，这可以更方便地管理用户自己安装的第三方模块，同时能区分哪些是依赖项\n\n### poetry.lock\n\n此时，查看项目目录，会发现多了一个文件 `poetry.lock`\n\n```shell\n.\n├── README.md\n├── poetry.lock\n├── poetry_dm\n│   └── __init__.py\n├── pyproject.toml\n└── tests\n    └── __init__.py\n\n2 directories, 5 files\n```\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735380151055-4d3f077d-87c0-4633-8a8d-3262d8cb5f7d.png)\n\n在上一步操作中，使用 `poetry add`命令添加了 fastapi 的依赖，除了会更新 `pyproject.toml`文件，还新增了这个 `poetry.lock`文件，实际上类似于之前使用 pip 管理依赖时候的 `requirements.txt`，记录了所有依赖和版本。\n\n现在可以详细说明一下，使用了 `poetry add`命令后，做了那些事：\n\n- 更新 `pyproject.toml`\n- 依据 `pyproject.toml`更新 `poetry.lock`\n- 依据 `poetry.lock`更新虚拟环境\n\n小结：`poetry.lock`文件是依赖于 `pyproject.toml`的，但两者并不会联动，需要执行某些指令才会进行同步与更新，如： `poetry add`\n\n### 更新 poetry.lock ：poetry lock 命令 | poetry install\n\n肯定存在这样的情况，比如我们手动在 `pyproject.toml`中添加了 或者修改了依赖\n\n这时候需要进行 `poetry.lock`、`pyproject.toml`和虚拟环境 的同步与更新。\n\n需要按顺序执行以下两个指令：\n\n- `poetry lock`  更新 poetry.lock 文件\n- `poetry install`  依据 poetry.lock 文件更新虚拟环境\n\n那就来一个例子，比如当我手动在 `pyproject.toml`中添加了一个 `requests = \"^2.26.0\"`的依赖\n\n![img](https://cdn.nlark.com/yuque/0/2024/png/38881094/1735380957745-a4433990-e686-4e8f-b162-47af1a02f3a5.png)\n\n如果直接查看当前项目虚拟环境的包\n\n```shell\n➜  poetry-dm poetry show \n\nBecause poetry-dm depends on requests (^2.26.0) which doesn't match any versions, version solving failed.\n```\n\n此时需要先执行一下 `poetry lock`\n\n```shell\n➜  poetry-dm poetry lock\nUpdating dependencies\nResolving dependencies... (16.7s)\n\nWriting lock file\n```\n\n然后再执行 `poetry install`\n\n```shell\n➜  poetry-dm poetry install\nInstalling dependencies from lock file\n\nPackage operations: 4 installs, 0 updates, 0 removals\n\n  - Installing certifi (2024.12.14)\n  - Installing charset-normalizer (3.4.1)\n  - Installing urllib3 (2.3.0)\n  - Installing requests (2.32.3)\n\nInstalling the current project: poetry-dm (0.1.0)\n```\n\n这时候再使用 `poetry show`查看当前环境包\n\n```shell\n➜  poetry-dm poetry show   \nannotated-types    0.7.0      Reusable constraint types to use with typing.Annotated\nanyio              4.7.0      High level compatibility layer for multiple asynchronous event loop implementations\ncertifi            2024.12.14 Python package for providing Mozilla's CA Bundle.\ncharset-normalizer 3.4.1      The Real First Universal Charset Detector. Open, modern and actively maintained alternative to ...\nexceptiongroup     1.2.2      Backport of PEP 654 (exception groups)\nfastapi            0.115.6    FastAPI framework, high performance, easy to learn, fast to code, ready for production\nidna               3.10       Internationalized Domain Names in Applications (IDNA)\npydantic           2.10.4     Data validation using Python type hints\npydantic-core      2.27.2     Core functionality for Pydantic validation and serialization\nrequests           2.32.3     Python HTTP for Humans.\nsniffio            1.3.1      Sniff out which async library your code is running under\nstarlette          0.41.3     The little ASGI library that shines.\ntyping-extensions  4.12.2     Backported and Experimental Type Hints for Python 3.8+\nurllib3            2.3.0      HTTP library with thread-safe connection pooling, file post, and more.\n```\n\n当你在使用 `poetry lock`命令时，如果有适合当前版本的依赖项可以更新的，还会自动进行更新。如果不想该操作进行依赖更新，可以使用 `--no-update`选项\n\n如： `poetry lock --no-update`\n\n该操作，poetry 仅解析新的依赖项，保留 poetry.lock 文件中现有依赖版本不变\n\n### 查看依赖\n\n在上一步的操作中，有一个命令 `poetry show`，用于查看当前项目激活的虚拟环境的包信息；当然还有更高级的一个用法 `poetry show --tree`，使用这个命令可以更清楚直观地看到我们添加的依赖和依赖的依赖项的树状关系，如：\n\n```shell\n➜  poetry-dm poetry show --tree\nfastapi 0.115.6 FastAPI framework, high performance, easy to learn, fast to code, ready for production\n├── pydantic >=1.7.4,<1.8 || >1.8,<1.8.1 || >1.8.1,<2.0.0 || >2.0.0,<2.0.1 || >2.0.1,<2.1.0 || >2.1.0,<3.0.0\n│   ├── annotated-types >=0.6.0 \n│   ├── pydantic-core 2.27.2 \n│   │   └── typing-extensions >=4.6.0,<4.7.0 || >4.7.0 \n│   └── typing-extensions >=4.12.2 (circular dependency aborted here)\n├── starlette >=0.40.0,<0.42.0\n│   └── anyio >=3.4.0,<5 \n│       ├── exceptiongroup >=1.0.2 \n│       ├── idna >=2.8 \n│       ├── sniffio >=1.1 \n│       └── typing-extensions >=4.5 \n└── typing-extensions >=4.8.0\nrequests 2.32.3 Python HTTP for Humans.\n├── certifi >=2017.4.17\n├── charset-normalizer >=2,<4\n├── idna >=2.5,<4\n└── urllib3 >=1.21.1,<3\n```\n\n可以详细看到 各依赖间版本的需求以及树状关系\n\n当然，更贴心的还可以单独查看某个依赖的详细信息，如：\n\n```shell\n➜  poetry-dm poetry show fastapi --tree         \nfastapi 0.115.6 FastAPI framework, high performance, easy to learn, fast to code, ready for production\n├── pydantic >=1.7.4,<1.8 || >1.8,<1.8.1 || >1.8.1,<2.0.0 || >2.0.0,<2.0.1 || >2.0.1,<2.1.0 || >2.1.0,<3.0.0\n│   ├── annotated-types >=0.6.0 \n│   ├── pydantic-core 2.27.2 \n│   │   └── typing-extensions >=4.6.0,<4.7.0 || >4.7.0 \n│   └── typing-extensions >=4.12.2 (circular dependency aborted here)\n├── starlette >=0.40.0,<0.42.0\n│   └── anyio >=3.4.0,<5 \n│       ├── exceptiongroup >=1.0.2 \n│       ├── idna >=2.8 \n│       ├── sniffio >=1.1 \n│       └── typing-extensions >=4.5 \n└── typing-extensions >=4.8.0\n```\n\n### 依赖分组\n\n在开发环境下，我们会使用到 pytest、black 等依赖，进行代码的测试、格式化等。\n\n但是在生产环境或者部署的时候，并不需要这些依赖；过多依赖会导致项目过大，所以这些开发环境下需要的依赖，可以进行分组\n\npoetry 可以将这些依赖安装至 `dev-dependencies`下，方便让你建立一份不包含开发模块的安装清单\n\n比如：\n\n```shell\n➜  poetry-dm poetry add pytest black --group dev\nUsing version ^8.3.4 for pytest\nUsing version ^24.10.0 for black\n\nUpdating dependencies\nResolving dependencies... (17.8s)\n\nPackage operations: 10 installs, 0 updates, 0 removals\n\n  - Installing click (8.1.8)\n  - Installing iniconfig (2.0.0)\n  - Installing mypy-extensions (1.0.0)\n  - Installing packaging (24.2)\n  - Installing pathspec (0.12.1)\n  - Installing platformdirs (4.3.6)\n  - Installing pluggy (1.5.0)\n  - Installing tomli (2.2.1)\n  - Installing black (24.10.0)\n  - Installing pytest (8.3.4)\n\nWriting lock file\n```\n\n然后可以在更新的 `pyproject.toml`中看到变化：\n\n```toml\n[tool.poetry]\nname = \"poetry-dm\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"BlockZachary <zachary26626@gmail.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\nfastapi = \"^0.115.6\"\nrequests = \"^2.26.0\"\n\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^8.3.4\"\nblack = \"^24.10.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\npytest、black 被放在了 `[tool.poetry.group.dev.dependencies]` 下\n\n强烈建议使用 `--group dev`进行分组\n\n善用 `--group dev` 参数，明确区分开发环境，我认为非常必要。\n\n首先，这些模块常常属于「检测型」工具，相关的依赖模块着实不少！比如 `flake8` ，它依赖了 `pycodestyle` 、 `pyflakes` 、 `mccabe` 等等，还有 `black` 、 `pre-commit` ，依赖模块数量也都很可观。\n\n### 更新依赖\n\n使用 `poetry update` 指令即可：\n\n```shell\npoetry update\n```\n\n上面指令会更新全部可能可以更新的模块，也可以仅指定特定模块，比如：\n\n```shell\npoetry update requests toml\n```\n\n关于 `poetry update` 的其余参数，请参考[文件](https://python-poetry.org/docs/cli/#update)。\n\n还一件重要的事，那就是关于模块版本的升级限制规则，取决于你在 `pyproject.toml` 中的设定。\n\n### 移除依赖\n\n使用 `poetry remove`\n\n由于 poetry 提供了依赖解析功能，所以会在移除某一模块的时候，将其依赖模块一并移除，这是 pip 做不到的\n\n假设需要移除之前添加的 requests 模块，如：\n\n```shell\n➜  poetry-dm poetry remove requests\nUpdating dependencies\nResolving dependencies... (0.1s)\n\nPackage operations: 0 installs, 0 updates, 4 removals\n\n  - Removing certifi (2024.12.14)\n  - Removing charset-normalizer (3.4.1)\n  - Removing requests (2.32.3)\n  - Removing urllib3 (2.3.0)\n\nWriting lock file\n```\n\n对应的会更新 `pyproject.toml`\n\n```toml\n[tool.poetry]\nname = \"poetry-dm\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"BlockZachary <zachary26626@gmail.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\nfastapi = \"^0.115.6\"\n\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^8.3.4\"\nblack = \"^24.10.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\n同时如果再次查看 `poetry show --tree`\n\n```shell\n➜  poetry-dm poetry show --tree                 \nblack 24.10.0 The uncompromising code formatter.\n├── click >=8.0.0\n│   └── colorama * \n├── mypy-extensions >=0.4.3\n├── packaging >=22.0\n├── pathspec >=0.9.0\n├── platformdirs >=2\n├── tomli >=1.1.0\n└── typing-extensions >=4.0.1\nfastapi 0.115.6 FastAPI framework, high performance, easy to learn, fast to code, ready for production\n├── pydantic >=1.7.4,<1.8 || >1.8,<1.8.1 || >1.8.1,<2.0.0 || >2.0.0,<2.0.1 || >2.0.1,<2.1.0 || >2.1.0,<3.0.0\n│   ├── annotated-types >=0.6.0 \n│   ├── pydantic-core 2.27.2 \n│   │   └── typing-extensions >=4.6.0,<4.7.0 || >4.7.0 \n│   └── typing-extensions >=4.12.2 (circular dependency aborted here)\n├── starlette >=0.40.0,<0.42.0\n│   └── anyio >=3.4.0,<5 \n│       ├── exceptiongroup >=1.0.2 \n│       ├── idna >=2.8 \n│       ├── sniffio >=1.1 \n│       └── typing-extensions >=4.5 \n└── typing-extensions >=4.8.0\npytest 8.3.4 pytest: simple powerful testing with Python\n├── colorama *\n├── exceptiongroup >=1.0.0rc8\n├── iniconfig *\n├── packaging *\n├── pluggy >=1.5,<2\n└── tomli >=1\n```\n\n同样可以移除 dev 下的，如：\n\n```shell\n➜  poetry-dm poetry remove black   \nUpdating dependencies\nResolving dependencies... (0.1s)\n\nPackage operations: 0 installs, 0 updates, 5 removals\n\n  - Removing black (24.10.0)\n  - Removing click (8.1.8)\n  - Removing mypy-extensions (1.0.0)\n  - Removing pathspec (0.12.1)\n  - Removing platformdirs (4.3.6)\n\nWriting lock file\n[tool.poetry]\nname = \"poetry-dm\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"BlockZachary <zachary26626@gmail.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\nfastapi = \"^0.115.6\"\n\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^8.3.4\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n➜  poetry-dm poetry show --tree \nfastapi 0.115.6 FastAPI framework, high performance, easy to learn, fast to code, ready for production\n├── pydantic >=1.7.4,<1.8 || >1.8,<1.8.1 || >1.8.1,<2.0.0 || >2.0.0,<2.0.1 || >2.0.1,<2.1.0 || >2.1.0,<3.0.0\n│   ├── annotated-types >=0.6.0 \n│   ├── pydantic-core 2.27.2 \n│   │   └── typing-extensions >=4.6.0,<4.7.0 || >4.7.0 \n│   └── typing-extensions >=4.12.2 (circular dependency aborted here)\n├── starlette >=0.40.0,<0.42.0\n│   └── anyio >=3.4.0,<5 \n│       ├── exceptiongroup >=1.0.2 \n│       ├── idna >=2.8 \n│       ├── sniffio >=1.1 \n│       └── typing-extensions >=4.5 \n└── typing-extensions >=4.8.0\npytest 8.3.4 pytest: simple powerful testing with Python\n├── colorama *\n├── exceptiongroup >=1.0.0rc8\n├── iniconfig *\n├── packaging *\n├── pluggy >=1.5,<2\n└── tomli >=1\n```\n\n### 输出 poetry 虚拟环境的 requirements.txt\n\n事实上，使用了 poetry 管理依赖的话，只靠 `poetry.lock`文件足以\n\n但是，如果项目到了部署阶段或者使用的是 Docker 等部署环境，poetry 就用不了了。\n\n所以仍旧需要将 `poetry.lock`转化为 `requirements.txt`\n\n**误区**：一定会认为，既然虚拟环境已经在项目目录里，切换到虚拟环境然后使用 `pip freeze`输出一下 `requirements.txt`就可以了，NoNoNo\n\n我这么操作一下试试：\n\n```shell\n➜  poetry-dm poetry shell\nSpawning shell within /Users/zachary/Desktop/poetry-dm/.venv\n➜  poetry-dm emulate bash -c '. /Users/zachary/Desktop/poetry-dm/.venv/bin/activate'\n(poetry-dm-py3.10) ➜  poetry-dm pip freeze > requirements.txt\n(poetry-dm-py3.10) ➜  poetry-dm \n```\n\n在项目目录下的 `requirements.txt`文件是这样的\n\n```shell\nannotated-types==0.7.0\nanyio==4.7.0\nexceptiongroup==1.2.2\nfastapi==0.115.6\nidna==3.10\niniconfig==2.0.0\npackaging==24.2\npluggy==1.5.0\n# Editable install with no version control (poetry-dm==0.1.0)\n-e /Users/zachary/Desktop/poetry-dm\npydantic==2.10.4\npydantic_core==2.27.2\npytest==8.3.4\nsniffio==1.3.1\nstarlette==0.41.3\ntomli==2.2.1\ntyping_extensions==4.12.2\n```\n\n文件有点小问题\n\n通过使用 `poetry export -f 输出文件 -o 输出文件 --without-hashes`命令将虚拟环境依赖导出\n\n```shell\n➜  poetry-dm poetry export -f requirements.txt -o requirements.txt --without-hashes\nWarning: poetry-plugin-export will not be installed by default in a future version of Poetry.\nIn order to avoid a breaking change and make your automation forward-compatible, please install poetry-plugin-export explicitly. See https://python-poetry.org/docs/plugins/#using-plugins for details on how to install a plugin.\nTo disable this warning run 'poetry config warnings.export false'.\n```\n\nWarning 部分是告诉我们以后得版本需要单独安装一下导出插件，可以不管他，也可以运行他提示的命令取消这个提示\n\n然后查看一下 `requirements.txt`\n\n```shell\nannotated-types==0.7.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nanyio==4.7.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nexceptiongroup==1.2.2 ; python_version >= \"3.10\" and python_version < \"3.11\"\nfastapi==0.115.6 ; python_version >= \"3.10\" and python_version < \"4.0\"\nidna==3.10 ; python_version >= \"3.10\" and python_version < \"4.0\"\npydantic-core==2.27.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\npydantic==2.10.4 ; python_version >= \"3.10\" and python_version < \"4.0\"\nsniffio==1.3.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nstarlette==0.41.3 ; python_version >= \"3.10\" and python_version < \"4.0\"\ntyping-extensions==4.12.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\n```\n\n似乎是没啥错误的，但怎么只有 fastapi 及相应的依赖，没有我 dev 环境下的 pytest 呢\n\n因为 `poetry export` 预设只会输出 toml 中的 `[tool.poetry.dependencies]` 区块的模块，我们上面把 `pytest` 安装到 `[tool.poetry.dev-dependencies]`了\n\n使用这个命令 `poetry export -f requirements.txt -o requirements.txt --without-hashes --dev`\n\n```shell\nannotated-types==0.7.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nanyio==4.7.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ncolorama==0.4.6 ; python_version >= \"3.10\" and python_version < \"4.0\" and sys_platform == \"win32\"\nexceptiongroup==1.2.2 ; python_version >= \"3.10\" and python_version < \"3.11\"\nfastapi==0.115.6 ; python_version >= \"3.10\" and python_version < \"4.0\"\nidna==3.10 ; python_version >= \"3.10\" and python_version < \"4.0\"\niniconfig==2.0.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\npackaging==24.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\npluggy==1.5.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\npydantic-core==2.27.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\npydantic==2.10.4 ; python_version >= \"3.10\" and python_version < \"4.0\"\npytest==8.3.4 ; python_version >= \"3.10\" and python_version < \"4.0\"\nsniffio==1.3.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nstarlette==0.41.3 ; python_version >= \"3.10\" and python_version < \"4.0\"\ntomli==2.2.1 ; python_version >= \"3.10\" and python_version < \"3.11\"\ntyping-extensions==4.12.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\n```\n\n更多详细操作 可以参考我提供的官方文档或者博客内容\n\n# poetry 指令清单\n\n- poetry add\n- poetry remove\n- poetry export\n- poetry env use\n- poetry shell\n- poetry show\n- poetry init\n- poetry install\n\n# 修改 poetry 镜像源\n\n与 pip 一样可以修改安装依赖时候的镜像源，可以加快一些时候的安装速度\n\n```shell\npoetry source add tsinghua https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n附上常用镜像源\n\n- 阿里云 `http://mirrors.aliyun.com/pypi/simple/`\n- 豆瓣 `http://pypi.douban.com/simple/`\n- 清华大学 `https://pypi.tuna.tsinghua.edu.cn/simple/`\n- 中国科学技术大学 `http://pypi.mirrors.ustc.edu.cn/simple/`\n- 华中科技大学 `http://pypi.hustunique.com/`\n\n# 总结\n\npoetry总结：\n\n- **Poetry** 是一个**依赖项管理器**，可确保包版本一致并简化 Python 项目设置。\n- 您可以使用 `pipx` 或**官方安装程序**在系统范围内**安装 Poetry**，以便更好地管理环境。\n- 由于潜在的依赖项冲突，**不建议**在项目环境中**使用 pip 安装 Poetry**。\n- **基本的 Poetry CLI 命令**包括 `poetry new`、`poetry add`、`poetry install` 和 `poetry update`。\n- `poetry.lock` **文件**锁定依赖项版本，确保环境可重现。\n- 通过使用 `poetry update` 或 `poetry lock` 更新 `poetry.lock` 文件来解决**依赖关系冲突**。\n- **最佳实践**包括将 `poetry.lock` 文件提交到版本控制，并避免系统范围的软件包安装。","tags":["Python"],"categories":["Python面向对象"]},{"title":"Shell","url":"/blog/2220072441/","content":"\n# Shell\n\n# Shell 介绍\n\n## 什么是 Shell\n\n1. 一种脚本语言、命令行解释器：可以将一组命令行打包为一个文件，调用操作系统的内核去执行这些命令\n2. shell 中也支持条件判断、分支、定义函数、变量等功能\n3. shell 脚本的扩展名一般以.sh 结尾，但没有强制要求\n\n## Shell 的应用\n\nShell 可以做什么呢？\n\n1. 可以针对批量操作文件提取转换数据、生成报告\n2. 针对项目环境进行初始化\n3. 执行定时任务，巡检系统运行状态\n\n## Shell 解释器的分类\n\n通常包括\n\n- csh\n- ksh\n- bash\n- zsh\n\n# Shell 查看\n\n- 通过`cat /etc/shells`可以查看系统有哪些 shell 可以用\n- 通过`echo $SHELL`可以查看当前使用的 shell\n- 通过 `/bin/[SHELL名称]` 可以切换 shell\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723122418207-69ad9f9b-1758-44e9-b039-fb9b29a4a483.png)\n\n# Shell 变量\n\n创建一个 test.sh，并使用 VSCode 打开这个文件\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723122572299-faf00cc1-08c9-4b8a-bbf5-04d3b02cd3df.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723122579873-30a736b9-ffb6-4ff1-a8bb-96f4eb726475.png)\n\n第一行需要声明一下这个文件 使用的是哪个解释器\n\n`#!/bin/bash`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723122666472-f65c7b41-d792-418c-a166-ab567001b477.png)\n\n## 整数、字符串、数组变量\n\n变量的定义和输出\n\n整数\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723122772099-15e13871-1896-479d-8d24-9d1e64140622.png)\n\n字符串\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723122794095-7526f6cf-003b-468f-926a-0c6b036e02a0.png)\n\n数组\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723122922314-18526296-b598-43ae-9e37-cdcfe953e5ad.png)\n\n## 命令行结果转为变量\n\n打印 ls 命令返回的结果\n\n```shell\n#!/bin/bash\n\nfile=$(ls -l)\necho ${file[@]}\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723123109423-7b49aefe-5e43-4f6c-b48a-87f45ffa1918.png)\n\n## 环境变量\n\n获取外部定义的环境变量\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723123209608-a52a93b4-bc2b-4544-b815-598770e3319e.png)\n\n变量的赋值\n\n- :-\n- :=\n\n```shell\n#!/bin/bash\n\necho ${VAR1:-\"hello VAR1\"}\necho ${VAR2:=\"hello VAR2\"}\necho $VAR1\necho $VAR2\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723123381050-8ef728a3-91e2-45b3-be59-32a615cdb053.png)\n\n## 内置特殊变量\n\n特殊的一些参数\n\n- $0 代表当前脚本名称\n- $1 $2 $3 代表脚本的参数\n- $# 代表脚本的参数个数\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723123553078-eb0998a3-b72c-43a6-be23-27b9721f363b.png)\n\n# 控制流\n\n## if\n\n```shell\n#!/bin/bash\n\na=10\nb=20\n\nif [ $a -gt $b ]; then\n    echo \"$a is greater than $b\"\nelse\n    echo \"$b is greater than $a\"\nfi\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723123793041-92bd4c58-376a-42f5-a094-fa83e40af8e3.png)\n\n## for\n\n```shell\n#!/bin/bash\n\nfor num in 1 2 3 4 5; do\n    echo \"this number is : $num\"\ndone\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723123877164-c5db7048-96bc-40a4-836c-f63ca5905fda.png)\n\n循环遍历 ls 的结果\n\n```shell\n#!/bin/bash\n\nfor item in $(ls); do\n    echo \"this file name is : $item\"\ndone\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723124025694-815591e0-b876-4c99-94a5-cb9dc34997bb.png)\n\n## while\n\n每隔一秒打印一个 hello\n\n```shell\n#!/bin/bash\n\nwhile (true); do\n    echo \"hello\"\n    sleep 1\ndone\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723124157818-ce2cb2d9-b42e-4eff-bff3-b43b928a8ef5.png)\n\n输出 小于 10 的所有正整数\n\n```shell\n#!/bin/bash\n\nnum=1\n\nwhile (($num<10)); do\n    echo $num\n    let \"num++\"\ndone\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723124350735-b418246a-d4ab-41eb-8559-3cffdf534f21.png)\n\n## switch case\n\n```shell\n#!/bin/bash\n\necho \"输入1-4之间的数字：\"\necho \"您输入的数字为：\"\nread aNum\n\ncase $aNum in\n    1)  echo \"你选择了 1\";;\n    2)  echo \"你选择了 2\";;\n    3)  echo \"你选择了 3\";;\n    4)  echo \"你选择了 4\";;\n    *)  echo \"你没有输入 1 到 4 之间的数字\";;\nesac\n\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723124495038-be27470c-85a7-43f4-88a6-605a3a02f40e.png)\n\n# Shell 函数\n\n```shell\n#!/bin/bash\n\nfunction test() {\n    if [ $1 -le $2 ]; then\n        echo \"$1 is less than or equal to $2\"\n    else\n        echo \"$1 is greater than $2\"\n    fi\n}\n\ntest 1 2\ntest 3 1\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1723124718792-165b1e48-0f50-4e98-8789-335e375c1616.png)\n\n# 重定向\n\n在 linux 中 每个进程都有三个打开的默认描述符\n\n0 表示标准输入\n\n1 表示标准输出\n\n2 表示标准错误输出\n\n- > 将一个 sh 结果输出到文件中\n- > > 以追加的方式输出到文件中\n\n在 test.sh 中写入\n\n```shell\n#!/bin/bash\n\necho \"is a shell\"\n\n\n```\n\n然后命令行执行\n\n```shell\n➜  Desktop bash test.sh > file.txt\n➜  Desktop cat file.txt\nis a shell\n➜  Desktop bash test.sh >> file.txt\n➜  Desktop bash test.sh >> file.txt\n➜  Desktop cat file.txt\nis a shell\nis a shell\nis a shell\n➜  Desktop\n```\n\n写一个异常\n\n```shell\n#!/bin/bash\n\necho \"is a shell\"\na=1\nb=0\n((a/b))\n```\n\n然后输出结果\n\n```shell\n➜  Desktop bash test.sh\nis a shell\ntest.sh: line 6: ((: a/b: division by 0 (error token is \"b\")\n➜  Desktop bash test.sh 2>> error.log\nis a shell\n➜  Desktop cat error.log\ntest.sh: line 6: ((: a/b: division by 0 (error token is \"b\")\n➜  Desktop\n\n```\n\n把错误的信息输出到标准输出里面\n\n```shell\n➜  Desktop bash test.sh > file.txt 2>&1\n➜  Desktop cat file.txt\nis a shell\ntest.sh: line 6: ((: a/b: division by 0 (error token is \"b\")\n➜  Desktop\n\n```\n\n> 更新: 2024-08-08 22:02:20  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/kxmxwdhvlqkut570>\n","tags":["Linux","Shell"],"categories":["Linux"]},{"title":"拉一个 docker 的 mysql","url":"/blog/3658481920/","content":"\n# 拉一个 docker 的 mysql\n\n先创建一个文件夹\n\n如：\n\n`mkdir docker_env`\n\n然后进入这个目录\n\n`cd docker_env`\n\n在这个目录下，创建一个文件\n\n`touch docker-compose.yml`\n\n然后在这个文件里面编辑\n\n```yaml\nversion: \"3.9\"\nservices:\n  mysql:\n    image: \"mysql:8.0.27\"\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: \"123456\"\n      TZ: Asia/Shanghai # 指定时区\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - ./mysql8:/var/lib/mysql\n\n  redis:\n    image: \"redis:6.2.6-alpine3.15\"\n    restart: always\n    ports:\n      - \"6379:6379\"\n```\n\n```yaml\nversion: \"3.9\"\nservices:\n  mysql-m1:\n    image: \"mysql/mysql-server\"\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: \"123456\"\n      TZ: Asia/Shanghai # 指定时区\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - ./m1-mysql8:/var/lib/mysql\n\n  redis:\n    image: \"redis:6.2.6-alpine3.15\"\n    restart: always\n    ports:\n      - \"6379:6379\"\n```\n\n接着在这个目录下运行\n\n`docker-compose up -d `\n\ndocker 如果很慢的话 配置一下 docker 应用程序的源\n\n![](https://cdn.nlark.com/yuque/0/2022/png/1624081/1670246216548-ff0d0ceb-fd81-42e9-9cb2-a302b5e0cf47.png)\n\n```json\n{\n  \"builder\": {\n    \"gc\": {\n      \"defaultKeepStorage\": \"20GB\",\n      \"enabled\": true\n    }\n  },\n  \"experimental\": false,\n  \"features\": {\n    \"buildkit\": true\n  },\n  \"registry-mirrors\": [\"https://reg-mirror.qiniu.com/\"]\n}\n```\n\n## mysql 远程连接\n\n```yaml\n# https://www.cnblogs.com/niuben/p/11481239.html\nmysql -uroot -p\nuse mysql;\nUPDATE user SET host = '%' WHERE user ='root';\nflush privileges; #\n```\n\n> 更新: 2024-08-04 22:35:33  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/lfugkndghckigub7>\n","tags":["Docker"],"categories":["Docker"]},{"title":"Django-Ninja Takeout","url":"/blog/3297479333/","content":"\n# Django-Ninja Takeout\n\n基于 7y 大佬的项目：[Django Ninja 实战外卖项目](https://www.bilibili.com/video/BV1PX4y1i7nD/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=4eb61e12ff64fa3d03cfec0f2eb09ce7)\n\n# 项目初始化\n\n## 创建 Django 项目\n\n直接使用 PyCharm 创建一个 Django 项目\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721042160094-b6a960b2-6527-406f-abd2-40e53816d63e.png)\n\n## 创建应用\n\n这一步创建三个应用`user`、`product`、`order`\n\n### 普通创建\n\n通过脚本命令，执行`python manage.py startapp [应用名称]`来创建\n\n```powershell\n(venv) ➜  takeout python manage.py startapp user\n(venv) ➜  takeout python manage.py startapp product\n(venv) ➜  takeout python manage.py startapp order\n```\n\n### 专业版创建\n\n通过 Tools -> Run manage.py Task...打开执行脚本命令行\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721056233117-29254dcc-8173-46d7-9495-4d93e37dc947.png)\n\n可以通过带有提示的命令脚本执行 manage 下的脚本命令\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721056336651-8659dad7-ae1b-4ac6-bea2-3f0227f5957c.png)\n\n> 创建好三个应用之后，通过在项目目录下创建一个`apps`的包，将这三个应用移动至 apps 下\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721057109665-3522b747-7e98-481d-9ac3-2b3a588a85ad.png)\n\n## 注册应用\n\n在 Django 中需要把上面创建的 app 都注册进去\n\n> 在/takeout/takeout/settings.py 中修改以下内容\n\n```python\n# 解决跨域\nALLOWED_HOSTS = ['*']\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'apps.user',\n    'apps.product',\n    'apps.order',\n]\n```\n\n## 配置 Django-Ninja 依赖\n\n> 安装 Ninja&pillow\n\n`pip install django-ninja pillow`\n\n## 配置静态路由\n\n在/apps 下新建一个 api.py 文件\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom ninja import NinjaAPI\n\napp = NinjaAPI(title=\"DjangoNinja-瑞吉外卖H5\",\n               description=\"使用DjangoNinja实现《瑞吉外卖》项目\")\n\n\n@app.get(\"/index\")\ndef index(request):\n    return \"Hello Django Ninja\"\n\n```\n\n在/takeout/urls.py 加入 app 的 url\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path\n\nfrom apps.api import app\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', app.urls),\n]\n```\n\n先在`manage.py`同级目录下创建文件夹`/static`, `/media`，再去`takeout/takeout/settings.py`有的修改、没有的追加\n\n```python\nDEBUG = True\n# 配置跨域\nALLOWED_HOSTS = ['*']\n# 设置语言 -admin\nLANGUAGE_CODE = \"zh-hans\"\n# 设置时区\nTIME_ZONE = \"Asia/Shanghai\"\n# 添加static目录将前端工程一到目录下，这一步各位直接github去找static/fonrt\n# https://github.com/zy7y/takeout # 追加内容\nSTATIC_ROOT = BASE_DIR / 'static'\n\nFRONT_URL = 'front/'\nFRONT_ROOT = BASE_DIR / 'static/front'\n\nBACKEND_URL = 'backend/'\nBACKEND_ROOT = BASE_DIR / 'static/backend'\n\n# 并在takeout 目录下新建media目录 追加内容\n# 图片资源访问路径， 注意新建media这个目录\nMEDIA_URL = 'media/'\n# 图片资源存放路径\nMEDIA_ROOT =BASE_DIR / 'media'\n```\n\n添加 static 静态资源路径\n\n```python\n\"\"\"\nURL configuration for takeout project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.urls import path, re_path\nfrom django.views.static import serve\n\nfrom apps.api import app\nfrom takeout import settings\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', app.urls),\n]\n\n# 配置静态资源访问\nif settings.DEBUG:\n    # H5 页面\n    urlpatterns += static(settings.FRONT_URL, document_root=settings.FRONT_ROOT)\n    urlpatterns += static(settings.BACKEND_URL, document_root=settings.BACKEND_ROOT)\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\nelse:\n    urlpatterns += [\n        re_path(r'^static/(?P<path>.*)$', serve, {'document_root': settings.STATIC_ROOT}, name='static'),\n        re_path(r'^front/(?P<path>.*)$', serve, {'document_root': settings.FRONT_ROOT}, name='front'),\n        re_path(r'^backend/(?P<path>.*)$', serve, {'document_root': settings.BACKEND_ROOT}, name='backend'),\n        # 上传图片资源\n        re_path(r'^media/(?P<path>.*)$', serve, {'document_root': settings.MEDIA_ROOT}, name='media'),\n    ]\n\n```\n\n## 运行项目\n\n```shell\n# 生成表\npython manage.py migrate\n# 创建超级用户 密码随便你们输入\npython manage.py createsuperuser --username admin\n# 收集Django Admin文件\npython manage.py collectstatic\n# 启动服务\npython manage.py runserver\n```\n\n```shell\n(venv) ➜  takeout python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying auth.0012_alter_user_first_name_max_length... OK\n  Applying sessions.0001_initial... OK\n(venv) ➜  takeout python manage.py createsuperuser --username admin\n电子邮件地址:\nPassword: ruser   -- create a superuser\nPassword (again):\n密码长度太短。密码必须包含至少 8 个字符。\n这个密码太常见了。\n密码只包含数字。\nBypass password validation and create user anyway? [y/N]: y\nSuperuser created successfully.\n(venv) ➜  takeout python manage.py collectstatic\n\nYou have requested to collect static files at the destination\nlocation as specified in your settings:\n\n    /Users/zachary/Documents/PythonCode/takeout/static\n\nThis will overwrite existing files!\nAre you sure you want to do this?\n\nType 'yes' to continue, or 'no' to cancel: yes\n\n126 static files copied to '/Users/zachary/Documents/PythonCode/takeout/static'.\n(venv) ➜  takeout python manage.py runserver\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nJuly 16, 2024 - 00:25:44\nDjango version 5.0.7, using settings 'takeout.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721061100760-f694fbb3-2546-4fbf-b627-816c4521e736.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721061108686-5d36a4c4-56d8-4f6c-be52-bd61f9fa73fc.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721061206705-81f58a0b-e16a-43da-8b83-77dd7e572cc3.png)\n\n# 模型类\n\n## user\n\n编写用户信息表和地址的模型类\n\n```python\nfrom django.db import models\n\n\n# Create your models here.\n\nclass User(models.Model):\n    # 不定义主键默认会给一个自增长的 id\n    name = models.CharField(max_length=50, blank=True, null=True, db_comment='姓名', verbose_name='姓名')\n    phone = models.CharField(max_length=100, db_comment='手机号', verbose_name='手机号')\n    status = models.IntegerField(blank=True, null=True, db_comment='状态 0:禁用，1:正常', verbose_name='状态')\n    create_time = models.DateTimeField(db_comment='创建时间', auto_now_add=True)\n    update_time = models.DateTimeField(db_comment='更新时间', auto_now=True, verbose_name='更新时间')\n\n    def __str__(self):\n        return self.phone\n\n    class Meta:\n        # managed = False\n        # 数据库的表名\n        db_table = 'user'\n        # 数据库表备注\n        db_table_comment = '用户信息'\n        # verbose_name django admin 显示的\n        verbose_name = '用户'\n        verbose_name_plural = '用户管理'\n\n\nclass AddressBook(models.Model):\n    # 数据库层面没绑定物理关系，字段是可空的外键字段，它允许引用的 User 对象不存在，并且在关联的 User 对象被删除时，user_id 字段的值将被设置为 NULL。\n    # 数据库寸的字端其实就是user_id， user表的主键\n    user = models.ForeignKey(User, db_constraint=False, on_delete=models.SET_NULL, null=True, verbose_name=\"用户\")\n    # user_id = models.BigIntegerField(db_comment='用户id')\n    consignee = models.CharField(max_length=50, db_comment='收货人', verbose_name='收货人')\n    sex = models.IntegerField(db_comment='性别 0 女 1 男', verbose_name='性别')\n    phone = models.CharField(max_length=11, db_comment='手机号', verbose_name='手机号')\n    province_code = models.CharField(max_length=12,  blank=True, null=True,\n                                     db_comment='省级区划编号')\n    province_name = models.CharField(max_length=32,  blank=True, null=True,\n                                     db_comment='省级名称')\n    city_code = models.CharField(max_length=12,  blank=True, null=True,\n                                 db_comment='市级区划编号')\n    city_name = models.CharField(max_length=32,  blank=True, null=True,\n                                 db_comment='市级名称')\n    district_code = models.CharField(max_length=12,  blank=True, null=True,\n                                     db_comment='区级区划编号')\n    district_name = models.CharField(max_length=32,  blank=True, null=True,\n                                     db_comment='区级名称')\n    detail = models.CharField(max_length=200,  blank=True, null=True,\n                              db_comment='详细地址', verbose_name='详细地址')\n    label = models.CharField(max_length=100,  blank=True, null=True,\n                             db_comment='标签', verbose_name='标签')\n    is_default = models.IntegerField(db_comment='默认 0 否 1是', default=0, verbose_name='是否默认')\n    create_time = models.DateTimeField(db_comment='创建时间', auto_now_add=True)\n    update_time = models.DateTimeField(db_comment='更新时间', auto_now=True, verbose_name='更新时间')\n\n    def __str__(self):\n        return self.detail\n\n    class Meta:\n        # 为False Django 不管理表他的迁移、创建；实际工作中用到的多；我们需要创建表所以注释即可\n        # managed = False\n        db_table = 'address_book'\n        db_table_comment = '地址管理'\n        verbose_name = '地址'\n        verbose_name_plural = '地址管理'\n\n```\n\n## product\n\n编写菜品类\n\n```python\nfrom django.db import models\n\n\n# Create your models here.\n\nclass Category(models.Model):\n    # 套餐相关我们不做所以默认1就行了\n    type = models.IntegerField(blank=True, null=True, db_comment='类型   1 菜品分类 2 套餐分类', default=1)\n    name = models.CharField(unique=True, max_length=64, db_comment='分类名称', verbose_name='分类名称')\n    sort = models.IntegerField(db_comment='顺序', verbose_name='顺序')\n    create_time = models.DateTimeField(db_comment='创建时间', auto_now_add=True)\n    update_time = models.DateTimeField(db_comment='更新时间', auto_now=True, verbose_name='更新时间')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        # managed = False\n        db_table = 'category'\n        db_table_comment = '菜品及套餐分类'\n\n        verbose_name = '菜品分类'\n        verbose_name_plural = '菜品分类管理'\n\n\nclass Dish(models.Model):\n    name = models.CharField(unique=True, max_length=64, db_comment='菜品名称', verbose_name=\"菜品名称\")\n    # 1个分类有多个商品\n    category = models.ForeignKey(Category, db_constraint=False, on_delete=models.SET_NULL, null=True,\n                                 verbose_name=\"菜品分类\")\n    # category_id = models.BigIntegerField(db_comment='菜品分类id')\n    price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, db_comment='菜品价格',\n                                verbose_name='菜品价格')\n    code = models.CharField(max_length=64, db_comment='商品码', verbose_name='商品码')\n    image = models.ImageField(upload_to=\"product/\", verbose_name='图片', db_comment='图片')\n    # image = models.CharField(max_length=200, db_comment='图片',)\n    description = models.CharField(max_length=400, blank=True, null=True, db_comment='描述信息')\n    status = models.IntegerField(db_comment='0 停售 1 起售', verbose_name='售卖状态')\n    sort = models.IntegerField(db_comment='顺序', verbose_name='顺序')\n    create_time = models.DateTimeField(db_comment='创建时间', auto_now_add=True)\n    update_time = models.DateTimeField(db_comment='更新时间', auto_now=True, verbose_name='更新时间')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        # managed = False\n        db_table = 'dish'\n        db_table_comment = '菜品管理'\n\n        verbose_name = '菜品'\n        verbose_name_plural = '菜品管理'\n\n\nclass DishFlavor(models.Model):\n    dish = models.ForeignKey(Dish, db_constraint=False, on_delete=models.SET_NULL, null=True, db_comment='菜品',\n                             verbose_name=\"菜品\")\n    name = models.CharField(max_length=64, db_comment='口味名称', verbose_name=\"口味名称\")\n    value = models.JSONField(blank=True, null=True, db_comment='口味数据list', verbose_name=\"口味详情\")\n    create_time = models.DateTimeField(db_comment='创建时间', auto_now_add=True)\n    update_time = models.DateTimeField(db_comment='更新时间', auto_now=True, verbose_name='更新时间')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        # managed = False\n        db_table = 'dish_flavor'\n        db_table_comment = '菜品口味关系表'\n\n        verbose_name = '口味'\n        verbose_name_plural = '口味管理'\n```\n\n## order\n\n编写订单类\n\n```python\nfrom django.db import models\n\nfrom apps.product.models import Dish\nfrom apps.user.models import User, AddressBook\n\n\n# Create your models here.\n\nclass Orders(models.Model):\n    number = models.CharField(max_length=50, blank=True, null=True, db_comment='订单号')\n    status = models.IntegerField(db_comment='订单状态 1待付款，2待派送，3已派送，4已完成，5已取消', verbose_name='订单状态')\n    user = models.ForeignKey(User, db_constraint=False, null=True, on_delete=models.SET_NULL,\n                             db_comment='下单用户', verbose_name=\"用户\")\n    address_book = models.ForeignKey(AddressBook, null=True, db_constraint=False, on_delete=models.SET_NULL,\n                                     db_comment='地址id', verbose_name=\"地址\")\n    order_time = models.DateTimeField(db_comment='下单时间', verbose_name=\"下单时间\")\n    checkout_time = models.DateTimeField(db_comment='结账时间', verbose_name=\"结账时间\")\n    pay_method = models.IntegerField(db_comment='支付方式 1微信,2支付宝', default=1, verbose_name=\"支付方式\")\n    amount = models.DecimalField(max_digits=10, decimal_places=2, db_comment='实收金额', verbose_name='实收金额')\n    remark = models.CharField(max_length=100, blank=True, null=True, db_comment='备注', verbose_name='备注')\n\n    def __str__(self):\n        return self.number\n\n    class Meta:\n        db_table = 'orders'\n        db_table_comment = '订单表'\n\n        verbose_name = '订单'\n        verbose_name_plural = '订单管理'\n\n\nclass OrderDetail(models.Model):\n    order = models.ForeignKey(Orders, db_constraint=False, on_delete=models.SET_NULL, null=True,\n                              db_comment='订单id', verbose_name='订单')\n    dish = models.ForeignKey(Dish, db_constraint=False, on_delete=models.SET_NULL, blank=True, null=True,\n                             db_comment='菜品id'\n                             , verbose_name='菜品')\n    dish_flavor = models.CharField(max_length=50, blank=True, null=True, db_comment='口味', verbose_name='口味')\n    number = models.IntegerField(db_comment='数量', verbose_name='数量')\n    amount = models.DecimalField(max_digits=10, decimal_places=2, db_comment='金额', verbose_name='金额')\n\n    def __str__(self):\n        if self.order:\n            return self.order.number\n\n    class Meta:\n        # managed = False\n        db_table = 'order_detail'\n        db_table_comment = '订单明细表'\n\n        verbose_name = '订单明细'\n\n\nclass ShoppingCart(models.Model):\n    user = models.ForeignKey(User, db_constraint=False, null=True, on_delete=models.SET_NULL,\n                             db_comment='用户')\n    dish = models.ForeignKey(Dish, db_constraint=False, on_delete=models.SET_NULL, blank=True, null=True,\n                             db_comment='菜品')\n    dish_flavor = models.CharField(max_length=50, blank=True, null=True, db_comment='口味')\n    number = models.IntegerField(db_comment='数量')\n    amount = models.DecimalField(max_digits=10, decimal_places=2, db_comment='金额')\n    create_time = models.DateTimeField(blank=True, null=True, db_comment='创建时间', auto_now_add=True)\n\n    class Meta:\n        # 购物车我们不需要后台管理\n        # managed = False\n        db_table = 'shopping_cart'\n        db_table_comment = '购物车'\n```\n\n## 迁移并生成表到 SQLite\n\n执行以下迁移命令即可\n\n```shell\n(venv) ➜  takeout python manage.py makemigrations\nMigrations for 'product':\n  apps/product/migrations/0001_initial.py\n    - Create model Category\n    - Create model Dish\n    - Create model DishFlavor\nMigrations for 'user':\n  apps/user/migrations/0001_initial.py\n    - Create model User\n    - Create model AddressBook\nMigrations for 'order':\n  apps/order/migrations/0001_initial.py\n    - Create model Orders\n    - Create model OrderDetail\n    - Create model ShoppingCart\n\n(venv) ➜  takeout python manage.py migrate\nSystem check identified some issues:\n\nWARNINGS:\norder.OrderDetail.amount: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.dish: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.number: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.order: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail: (models.W046) SQLite does not support comments on tables (db_table_comment).\norder.Orders.address_book: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.amount: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.checkout_time: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.number: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.order_time: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.pay_method: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.remark: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.status: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.user: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders: (models.W046) SQLite does not support comments on tables (db_table_comment).\norder.ShoppingCart.amount: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.dish: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.number: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.user: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart: (models.W046) SQLite does not support comments on tables (db_table_comment).\nproduct.Category.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.sort: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.type: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category: (models.W046) SQLite does not support comments on tables (db_table_comment).\nproduct.Dish.code: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.description: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.image: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.price: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.sort: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.status: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish: (models.W046) SQLite does not support comments on tables (db_table_comment).\nproduct.DishFlavor.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.dish: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.value: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor: (models.W046) SQLite does not support comments on tables (db_table_comment).\nuser.AddressBook.city_code: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.city_name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.consignee: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.detail: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.district_code: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.district_name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.is_default: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.label: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.phone: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.province_code: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.province_name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.sex: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook: (models.W046) SQLite does not support comments on tables (db_table_comment).\nuser.User.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.phone: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.status: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User: (models.W046) SQLite does not support comments on tables (db_table_comment).\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, order, product, sessions, user\nRunning migrations:\n  Applying user.0001_initial... OK\n  Applying product.0001_initial... OK\n  Applying order.0001_initial... OK\n(venv) ➜  takeout\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721123192988-b230c999-ac71-48c8-97d5-a6ad612ad1b5.png)\n\n# 管理后台\n\n## User 管理\n\n### 调整 User\n\n给 status 添加一个选择列表，可以再 admin 管理后台看到\n\n```python\nfrom django.db import models\n\n\n# Create your models here.\n\n\nclass User(models.Model):\n    # 不定义主键默认会给一个自增长的 id\n    # choices 选择项字段只能在这里面选 前面数字入库，后面表示django admin展示文本\n    STATUS_CHOICES = (\n        (0, '禁用'),\n        (1, '正常')\n    )\n    name = models.CharField(\n        max_length=50, blank=True, null=True, db_comment=\"姓名\", verbose_name=\"姓名\"\n    )\n    phone = models.CharField(max_length=100, db_comment=\"手机号\", verbose_name=\"手机号\")\n    status = models.IntegerField(choices=STATUS_CHOICES,\n                                 blank=True, null=True, db_comment=\"状态 0:禁用，1:正常\", verbose_name=\"状态\"\n                                 )\n    create_time = models.DateTimeField(db_comment=\"创建时间\", auto_now_add=True)\n    update_time = models.DateTimeField(\n        db_comment=\"更新时间\", auto_now=True, verbose_name=\"更新时间\"\n    )\n\n    def __str__(self):\n        return self.phone\n\n    class Meta:\n        # managed = False\n        # 数据库的表名\n        db_table = \"user\"\n        # 数据库表备注\n        db_table_comment = \"用户信息\"\n        # verbose_name django admin 显示的\n        verbose_name = \"用户\"\n        verbose_name_plural = \"用户管理\"\n\n\nclass AddressBook(models.Model):\n    # 数据库层面没绑定物理关系，字段是可空的外键字段，它允许引用的 User 对象不存在，并且在关联的 User 对象被删除时，user_id 字段的值将被设置为 NULL。\n    # 数据库寸的字端其实就是user_id， user表的主键\n    user = models.ForeignKey(\n        User,\n        db_constraint=False,\n        on_delete=models.SET_NULL,\n        null=True,\n        verbose_name=\"用户\",\n    )\n    # user_id = models.BigIntegerField(db_comment='用户id')\n    consignee = models.CharField(max_length=50, db_comment=\"收货人\", verbose_name=\"收货人\")\n    sex = models.IntegerField(db_comment=\"性别 0 女 1 男\", verbose_name=\"性别\")\n    phone = models.CharField(max_length=11, db_comment=\"手机号\", verbose_name=\"手机号\")\n    province_code = models.CharField(\n        max_length=12, blank=True, null=True, db_comment=\"省级区划编号\"\n    )\n    province_name = models.CharField(\n        max_length=32, blank=True, null=True, db_comment=\"省级名称\"\n    )\n    city_code = models.CharField(\n        max_length=12, blank=True, null=True, db_comment=\"市级区划编号\"\n    )\n    city_name = models.CharField(\n        max_length=32, blank=True, null=True, db_comment=\"市级名称\"\n    )\n    district_code = models.CharField(\n        max_length=12, blank=True, null=True, db_comment=\"区级区划编号\"\n    )\n    district_name = models.CharField(\n        max_length=32, blank=True, null=True, db_comment=\"区级名称\"\n    )\n    detail = models.CharField(\n        max_length=200, blank=True, null=True, db_comment=\"详细地址\", verbose_name=\"详细地址\"\n    )\n    label = models.CharField(\n        max_length=100, blank=True, null=True, db_comment=\"标签\", verbose_name=\"标签\"\n    )\n    is_default = models.IntegerField(\n        db_comment=\"默认 0 否 1是\", default=0, verbose_name=\"是否默认\"\n    )\n    create_time = models.DateTimeField(db_comment=\"创建时间\", auto_now_add=True)\n    update_time = models.DateTimeField(\n        db_comment=\"更新时间\", auto_now=True, verbose_name=\"更新时间\"\n    )\n\n    def __str__(self):\n        return self.detail\n\n    class Meta:\n        # 为False Django 不管理表他的迁移、创建；实际工作中用到的多；我们需要创建表所以注释即可\n        # managed = False\n        db_table = \"address_book\"\n        db_table_comment = \"地址管理\"\n        verbose_name = \"地址\"\n        verbose_name_plural = \"地址管理\"\n\n```\n\n修改模型内容后迁移一下\n\n```shell\n(venv) ➜  takeout python manage.py makemigrations\nMigrations for 'user':\n  apps/user/migrations/0002_alter_user_status.py\n    - Alter field status on user\n(venv) ➜  takeout python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, order, product, sessions, user\nRunning migrations:\n  Applying user.0002_alter_user_status... OK\n```\n\n### 实现用户管理\n\n修改 app/user/admin.py 的内容\n\n```python\nfrom django.contrib import admin\nfrom .models import User, AddressBook\n\n\n# Register your models here.\n@admin.register(User)\nclass UserManagerAdmin(admin.ModelAdmin):\n    # 列表显示的字段\n    list_display = ('name', 'phone', 'status', 'create_time')\n    # 列表筛选\n    list_filter = ('status',)\n    # 搜索框查询\n    search_fields = ('name', 'phone')\n    search_help_text = '可输入 name, phone查询（支持模糊查询）'\n\n\n@admin.register(AddressBook)\nclass AddressManagerAdmin(admin.ModelAdmin):\n    list_display = ('consignee', 'sex', 'phone', 'province_name', 'city_name', 'detail', 'create_time')\n    list_filter = ('sex', 'province_name', 'city_name')\n    search_fields = ('consignee', 'phone')\n    search_help_text = '可输入 consignee, phone查询（支持模糊查询）'\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721123838028-bc0ad563-d458-4363-b1a8-ce82d779ab1b.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721124332842-80e115dc-8fed-4dc0-ac35-2b03c16faf4e.png)\n\n## Product 管理\n\n### 调整 Product\n\n```python\nfrom django.db import models\n\n# Create your models here.\n\n\nclass Category(models.Model):\n    TYPE = (\n        (1, '菜品分类'),\n        (2, '套餐分类')\n    )\n    # 套餐相关我们不做所以默认1就行了\n    type = models.IntegerField(\n        choices=TYPE,\n        blank=True, null=True, db_comment=\"类型   1 菜品分类 2 套餐分类\", default=1\n    )\n    name = models.CharField(\n        unique=True, max_length=64, db_comment=\"分类名称\", verbose_name=\"分类名称\"\n    )\n    sort = models.IntegerField(db_comment=\"顺序\", verbose_name=\"顺序\")\n    create_time = models.DateTimeField(db_comment=\"创建时间\", auto_now_add=True)\n    update_time = models.DateTimeField(\n        db_comment=\"更新时间\", auto_now=True, verbose_name=\"更新时间\"\n    )\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        # managed = False\n        db_table = \"category\"\n        db_table_comment = \"菜品及套餐分类\"\n\n        verbose_name = \"菜品分类\"\n        verbose_name_plural = \"菜品分类管理\"\n\n\nclass Dish(models.Model):\n    STATUS = (\n        (0, '停售'),\n        (1, '启售')\n    )\n    name = models.CharField(\n        unique=True, max_length=64, db_comment=\"菜品名称\", verbose_name=\"菜品名称\"\n    )\n    # 1个分类有多个商品\n    category = models.ForeignKey(\n        Category,\n        db_constraint=False,\n        on_delete=models.SET_NULL,\n        null=True,\n        verbose_name=\"菜品分类\",\n    )\n    # category_id = models.BigIntegerField(db_comment='菜品分类id')\n    price = models.DecimalField(\n        max_digits=10,\n        decimal_places=2,\n        db_comment=\"菜品价格\",\n        verbose_name=\"菜品价格\",\n    )\n    code = models.CharField(max_length=64, db_comment=\"商品码\", verbose_name=\"商品码\")\n    image = models.ImageField(upload_to=\"product/\", verbose_name=\"图片\", db_comment=\"图片\")\n    description = models.CharField(\n        max_length=400, blank=True, null=True, db_comment=\"描述信息\"\n    )\n    status = models.IntegerField(choices=STATUS, default=1, db_comment=\"0 停售 1 起售\", verbose_name=\"售卖状态\")\n    sort = models.IntegerField(db_comment=\"顺序\", verbose_name=\"顺序\")\n    create_time = models.DateTimeField(db_comment=\"创建时间\", auto_now_add=True)\n    update_time = models.DateTimeField(\n        db_comment=\"更新时间\", auto_now=True, verbose_name=\"更新时间\"\n    )\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        # managed = False\n        db_table = \"dish\"\n        db_table_comment = \"菜品管理\"\n\n        verbose_name = \"菜品\"\n        verbose_name_plural = \"菜品管理\"\n\n\nclass DishFlavor(models.Model):\n    dish = models.ForeignKey(\n        Dish,\n        db_constraint=False,\n        on_delete=models.SET_NULL,\n        null=True,\n        db_comment=\"菜品\",\n        verbose_name=\"菜品\",\n    )\n    name = models.CharField(max_length=64, db_comment=\"口味名称\", verbose_name=\"口味名称\")\n    value = models.JSONField(\n        blank=True, null=True, db_comment=\"口味数据list\", verbose_name=\"口味详情\"\n    )\n    create_time = models.DateTimeField(db_comment=\"创建时间\", auto_now_add=True)\n    update_time = models.DateTimeField(\n        db_comment=\"更新时间\", auto_now=True, verbose_name=\"更新时间\"\n    )\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        # managed = False\n        db_table = \"dish_flavor\"\n        db_table_comment = \"菜品口味关系表\"\n\n        verbose_name = \"口味\"\n        verbose_name_plural = \"口味管理\"\n\n```\n\n修改模型内容后迁移一下\n\n```shell\n(venv) ➜  takeout python manage.py makemigrations\nIt is impossible to change a nullable field 'price' on dish to non-nullable without providing a default. This is because the database needs something to populate existing rows.\nPlease select a fix:\n 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)\n 2) Ignore for now. Existing rows that contain NULL values will have to be handled manually, for example with a RunPython or RunSQL operation.\n 3) Quit and manually define a default value in models.py.\nSelect an option: 2\nMigrations for 'product':\n  apps/product/migrations/0002_alter_category_type_alter_dish_price_and_more.py\n    - Alter field type on category\n    - Alter field price on dish\n    - Alter field status on dish\n(venv) ➜  takeout python manage.py migrate\nSystem check identified some issues:\n\nWARNINGS:\norder.OrderDetail.amount: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.dish: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.number: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.order: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail: (models.W046) SQLite does not support comments on tables (db_table_comment).\norder.Orders.address_book: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.amount: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.checkout_time: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.number: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.order_time: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.pay_method: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.remark: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.status: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.user: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders: (models.W046) SQLite does not support comments on tables (db_table_comment).\norder.ShoppingCart.amount: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.dish: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.number: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.user: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart: (models.W046) SQLite does not support comments on tables (db_table_comment).\nproduct.Category.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.sort: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.type: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category: (models.W046) SQLite does not support comments on tables (db_table_comment).\nproduct.Dish.code: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.description: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.image: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.price: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.sort: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.status: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish: (models.W046) SQLite does not support comments on tables (db_table_comment).\nproduct.DishFlavor.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.dish: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.value: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor: (models.W046) SQLite does not support comments on tables (db_table_comment).\nuser.AddressBook.city_code: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.city_name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.consignee: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.detail: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.district_code: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.district_name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.is_default: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.label: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.phone: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.province_code: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.province_name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.sex: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook: (models.W046) SQLite does not support comments on tables (db_table_comment).\nuser.User.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.phone: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.status: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User: (models.W046) SQLite does not support comments on tables (db_table_comment).\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, order, product, sessions, user\nRunning migrations:\n  Applying product.0002_alter_category_type_alter_dish_price_and_more... OK\n(venv) ➜  takeout\n\n```\n\n### 安装 json 展示插件\n\nDjango-admin 会默认直接展示 json 内容，不直观所以引入该插件\n\n`pip install django-jsoneditor`\n\n之后还需要在 settings.py 中注册一下\n\n```python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'apps.user',\n    'apps.product',\n    'apps.order',\n    'jsoneditor',\n]\n```\n\n```shell\n(venv) ➜  takeout python manage.py collectstatic\n\nYou have requested to collect static files at the destination\nlocation as specified in your settings:\n\n    /Users/zachary/Documents/PythonCode/takeout/static\n\nThis will overwrite existing files!\nAre you sure you want to do this?\n\nType 'yes' to continue, or 'no' to cancel: yes\n\n8 static files copied to '/Users/zachary/Documents/PythonCode/takeout/static', 126 unmodified.\n(venv) ➜  takeout\n\n```\n\n### 实现菜品管理\n\n```python\nfrom django.contrib import admin\nfrom django.utils.html import format_html\nfrom jsoneditor.forms import JSONEditor\n\n\n# Register your models here.\nfrom .models import *\n\n\n@admin.register(Category)\nclass CategoryManagerAdmin(admin.ModelAdmin):\n    list_display = ('name', 'sort', 'create_time')\n\n\n# 内联模型 - 嵌套用\nclass Flavor(admin.StackedInline):\n    model = DishFlavor\n    extra = 1\n    # json字段默认展示的是文本框，这里使用对应插件展示成json\n    formfield_overrides = {\n        models.JSONField: {\"widget\": JSONEditor},\n    }\n    verbose_name_plural = \"菜品口味\"\n\n\n@admin.register(Dish)\nclass DishManagerAdmin(admin.ModelAdmin):\n    list_display = ('name', 'category', 'show_img', 'price', 'status', 'create_time')\n\n    search_fields = ('name',)\n    search_help_text = '输入菜品名称进行搜索'\n\n    list_filter = ('category', 'status')\n    # 嵌套子模型 口味， 在添加商品时直接就把口味一起加了\n    inlines = [Flavor]\n\n    # 增加一个字段\n    def show_img(self, obj):\n        \"\"\"\n\n        :param obj: obj 为 一个Dish 的实例对象\n        :return:\n        \"\"\"\n        if obj.image:\n            # obj.image.url 获取从midia的路径 /media/product/Snipaste_2023-07-12_20-31-22.png\n            return format_html('<img src=\"{}\" height=\"50\"/>'.format(obj.image.url))\n        else:\n            return ''\n\n    # 字段列表表头显示\n    show_img.short_description = '图片'\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721127243232-99539a22-0543-4274-ad56-c9e7da6471d6.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721127233312-e35f1c56-8ccf-41f3-8ed2-b60f19266e22.png)\n\n## Order 管理\n\n### 调整 Order\n\n```python\nfrom django.db import models\n\nfrom apps.product.models import Dish\nfrom apps.user.models import AddressBook, User\n\n# Create your models here.\n\n\nclass Orders(models.Model):\n    PAY_METHOD_CHOICES = (\n        (1, '微信'),\n        (2, '支付宝')\n    )\n\n    STATUS_CHOICES = (\n        (1, '待付款'),\n        (2, '待派送'),\n        (3, '已派送'),\n        (4, '已完成'),\n        (5, '已取消'),\n    )\n\n    number = models.CharField(max_length=50, blank=True, null=True, verbose_name=\"订单号\")\n    status = models.IntegerField(\n        choices=STATUS_CHOICES,\n        db_comment=\"订单状态 1待付款，2待派送，3已派送，4已完成，5已取消\", verbose_name=\"订单状态\"\n    )\n    user = models.ForeignKey(\n        User,\n        db_constraint=False,\n        null=True,\n        on_delete=models.SET_NULL,\n        db_comment=\"下单用户\",\n        verbose_name=\"用户\",\n    )\n    address_book = models.ForeignKey(\n        AddressBook,\n        null=True,\n        db_constraint=False,\n        on_delete=models.SET_NULL,\n        db_comment=\"地址id\",\n        verbose_name=\"地址\",\n    )\n    order_time = models.DateTimeField(db_comment=\"下单时间\", verbose_name=\"下单时间\")\n    checkout_time = models.DateTimeField(db_comment=\"结账时间\", verbose_name=\"结账时间\")\n    pay_method = models.IntegerField(choices=PAY_METHOD_CHOICES, db_comment=\"支付方式 1微信,2支付宝\", default=1, verbose_name=\"支付方式\"\n    )\n    amount = models.DecimalField(\n        max_digits=10, decimal_places=2, db_comment=\"实收金额\", verbose_name=\"实收金额\"\n    )\n    remark = models.CharField(\n        max_length=100, blank=True, null=True, db_comment=\"备注\", verbose_name=\"备注\"\n    )\n\n    def __str__(self):\n        return self.number\n\n    class Meta:\n        db_table = \"orders\"\n        db_table_comment = \"订单表\"\n\n        verbose_name = \"订单\"\n        verbose_name_plural = \"订单管理\"\n\n\nclass OrderDetail(models.Model):\n    order = models.ForeignKey(\n        Orders,\n        db_constraint=False,\n        on_delete=models.SET_NULL,\n        null=True,\n        db_comment=\"订单id\",\n        verbose_name=\"订单\",\n    )\n    dish = models.ForeignKey(\n        Dish,\n        db_constraint=False,\n        on_delete=models.SET_NULL,\n        blank=True,\n        null=True,\n        db_comment=\"菜品id\",\n        verbose_name=\"菜品\",\n    )\n    dish_flavor = models.CharField(\n        max_length=50, blank=True, null=True, db_comment=\"口味\", verbose_name=\"口味\"\n    )\n    number = models.IntegerField(db_comment=\"数量\", verbose_name=\"数量\")\n    amount = models.DecimalField(\n        max_digits=10, decimal_places=2, db_comment=\"金额\", verbose_name=\"金额\"\n    )\n\n    def __str__(self):\n        if self.order:\n            return self.order.number\n\n    class Meta:\n        # managed = False\n        db_table = \"order_detail\"\n        db_table_comment = \"订单明细表\"\n\n        verbose_name = \"明细\"\n        verbose_name_plural = \"订单明细\"\n\n\nclass ShoppingCart(models.Model):\n    user = models.ForeignKey(\n        User, db_constraint=False, null=True, on_delete=models.SET_NULL, db_comment=\"用户\"\n    )\n    dish = models.ForeignKey(\n        Dish,\n        db_constraint=False,\n        on_delete=models.SET_NULL,\n        blank=True,\n        null=True,\n        db_comment=\"菜品\",\n    )\n    dish_flavor = models.CharField(\n        max_length=50, blank=True, null=True, db_comment=\"口味\"\n    )\n    number = models.IntegerField(db_comment=\"数量\")\n    amount = models.DecimalField(max_digits=10, decimal_places=2, db_comment=\"金额\")\n    create_time = models.DateTimeField(\n        blank=True, null=True, db_comment=\"创建时间\", auto_now_add=True\n    )\n\n    class Meta:\n        # 购物车我们不需要后台管理\n        # managed = False\n        db_table = \"shopping_cart\"\n        db_table_comment = \"购物车\"\n```\n\n修改完迁移下模型\n\n```shell\n(venv) ➜  takeout python manage.py makemigrations\nMigrations for 'order':\n  apps/order/migrations/0002_alter_orderdetail_options_alter_orders_number_and_more.py\n    - Change Meta options on orderdetail\n    - Alter field number on orders\n    - Alter field pay_method on orders\n    - Alter field status on orders\n(venv) ➜  takeout python manage.py migrate\nSystem check identified some issues:\n\nWARNINGS:\norder.OrderDetail.amount: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.dish: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.number: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail.order: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.OrderDetail: (models.W046) SQLite does not support comments on tables (db_table_comment).\norder.Orders.address_book: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.amount: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.checkout_time: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.order_time: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.pay_method: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.remark: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.status: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders.user: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.Orders: (models.W046) SQLite does not support comments on tables (db_table_comment).\norder.ShoppingCart.amount: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.dish: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.dish_flavor: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.number: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart.user: (fields.W163) SQLite does not support comments on columns (db_comment).\norder.ShoppingCart: (models.W046) SQLite does not support comments on tables (db_table_comment).\nproduct.Category.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.sort: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.type: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Category: (models.W046) SQLite does not support comments on tables (db_table_comment).\nproduct.Dish.code: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.description: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.image: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.price: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.sort: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.status: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.Dish: (models.W046) SQLite does not support comments on tables (db_table_comment).\nproduct.DishFlavor.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.dish: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor.value: (fields.W163) SQLite does not support comments on columns (db_comment).\nproduct.DishFlavor: (models.W046) SQLite does not support comments on tables (db_table_comment).\nuser.AddressBook.city_code: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.city_name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.consignee: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.detail: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.district_code: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.district_name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.is_default: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.label: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.phone: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.province_code: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.province_name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.sex: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.AddressBook: (models.W046) SQLite does not support comments on tables (db_table_comment).\nuser.User.create_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.name: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.phone: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.status: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User.update_time: (fields.W163) SQLite does not support comments on columns (db_comment).\nuser.User: (models.W046) SQLite does not support comments on tables (db_table_comment).\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, order, product, sessions, user\nRunning migrations:\n  Applying order.0002_alter_orderdetail_options_alter_orders_number_and_more... OK\n(venv) ➜  takeout\n\n```\n\n### 实现订单管理\n\n```python\nfrom django.contrib import admin\n\n# Register your models here.\n\nfrom .models import *\n\n\n@admin.register(Orders)\nclass OrderManagerAdmin(admin.ModelAdmin):\n    list_display = ('number', 'status', 'user', 'address_book', 'amount')\n    list_filter = (\"status\", \"user\")\n    # 页面可编辑\n    list_editable = (\"status\",)\n\n\n@admin.register(OrderDetail)\nclass OrderManagerAdmin(admin.ModelAdmin):\n    list_display = (\"order\", \"dish\", \"dish_flavor\", \"number\", \"amount\", \"user\", \"address\", \"total\")\n    search_fields = (\"dish\",)\n\n    def user(self, obj):\n        if obj.order and obj.order.user:\n            return obj.order.user\n\n    user.short_description = \"用户\"\n\n    def address(self, obj):\n        if obj.order and obj.order.address_book:\n            return obj.order.address_book\n\n    address.short_description = \"收货地址\"\n\n    def total(self, obj):\n        return obj.number * obj.amount\n\n    total.short_description = \"总价\"\n\n    list_filter = (\"order\", \"order__user\")\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721129511409-d0c00dbd-0a68-44c5-b7bc-0f243f34b068.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721129518700-2523d839-4979-4199-950c-49cc5dc8d706.png)\n\n# 登录页面接口\n\n## 通用响应模型\n\n在/takeout/apps 下创建一个 schemas.py 文件\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\n\"\"\"\n通用Schema\n\"\"\"\n\nfrom typing import Generic, TypeVar, Optional\nfrom pydantic import generics\n\nT = TypeVar('T')\n\n\n# 泛型模型：T可以动态变动，运行时加载类型-swagger文档可见\nclass R(generics.GenericModel, Generic[T]):\n    code: int = 1\n    data: Optional[T]\n    msg: str = \"ok\"\n\n    @classmethod\n    def ok(cls, data: T = None) -> \"R\":\n        return cls(code=1, data=data, msg=\"ok\")\n\n    @classmethod\n    def fail(cls, msg: str = \"fail\") -> \"R\":\n        return cls(code=0, msg=msg)\n\n```\n\n## 获取验证码接口\n\n> `sendMsg` `POST`\n\n![](https://cdn.nlark.com/yuque/0/2023/png/1624081/1689472103776-6610cb40-58d8-486b-8ff1-9f423ec577ef.png)\n\n### 接口实现\n\n> `takeout/apps/user/schemas.py`定义请求模型\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom ninja import Schema, Field\n\n\nclass SendMsgSchema(Schema):\n    phone: str = Field(..., description=\"手机号\", pattern=r'^1[3456789]\\d{9}$')\n\n\nclass SendMsgResultSchema(Schema):\n    code: str = Field(..., description=\"验证码\")\n```\n\n> `takeout/apps/user/views.py`\n\n```python\nimport random\n\nfrom django.shortcuts import render\n\n# Create your views here.\n\nfrom ninja import Router\n\nfrom .models import User\nfrom .schemas import SendMsgSchema, SendMsgResultSchema\nfrom ..schemas import R\n\nrouter = Router(tags=['登录'])\n\n\n@router.post(\"/sendMsg\", summary=\"验证码\", response=R)\ndef send_msg(request, data: SendMsgSchema):\n    # 4位数，生成验证码\n    code = ''.join(random.choices('0123456789', k=4))\n    # 验证码存在session中\n    request.session[data.phone] = code\n    request.session.set_expiry(5 * 60)  # 缓存5分钟\n    # 使用了response R， 这里默认就是 R 中的 data属性\n    return R.ok(data=SendMsgResultSchema(code=code))\n\n```\n\n> 注册 router `takeout/apps/api.py`\n\n```python\nfrom ninja import NinjaAPI\n\nfrom apps.user.views import router as user_router\n\napp = NinjaAPI(title=\"DjangoNinja-瑞吉外卖H5\", description=\"使用DjangoNinja实现《瑞吉外卖》项目\")\n\napp.add_router(\"/user\", router=user_router)\n\n@app.get(\"/index\")\ndef index(request):\n    return \"Hello Django Ninja\"\n\n```\n\n### 预览\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721225107597-b1641ae7-3b00-471b-8af1-78c8a29b8f9e.png)\n\n## 登录接口\n\n如果登录的用户存在 user 表中，则直接登录，否则注册并登录\n\n### 请求参数 schemas\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom ninja import Schema, Field\n\n\nclass SendMsgSchema(Schema):\n    phone: str = Field(..., description=\"手机号\", pattern=r'^1[3456789]\\d{9}$')\n\n\nclass SendMsgResultSchema(Schema):\n    code: str = Field(..., description=\"验证码\")\n\n\nclass UserLoginSchema(SendMsgSchema, SendMsgResultSchema):\n    pass\n\n```\n\n### 接口实现\n\n```python\nimport random\n\nfrom django.shortcuts import render\n\n# Create your views here.\n\nfrom ninja import Router\n\nfrom .models import User\nfrom .schemas import SendMsgSchema, SendMsgResultSchema, UserLoginSchema\nfrom ..schemas import R\n\nrouter = Router(tags=['登录'])\n\n\n@router.post(\"/sendMsg\", summary=\"验证码\", response=R)\ndef send_msg(request, data: SendMsgSchema):\n    # 4位数，生成验证码\n    code = ''.join(random.choices('0123456789', k=4))\n    # 验证码存在session中\n    request.session[data.phone] = code\n    request.session.set_expiry(5 * 60)  # 缓存5分钟\n    # 使用了response R， 这里默认就是 R 中的 data属性\n    return R.ok(data=SendMsgResultSchema(code=code))\n\n\n@router.post(\"/login\", summary=\"登录\", response=R)\ndef user_login(request, data: UserLoginSchema):\n    # 1. 验证码存在?\n    if request.session.get(data.phone) == data.code:\n        # 2. 查不到就创建\n        user, _ = User.objects.get_or_create(phone=data.phone, status=1)\n        # 3. Java原版这里使用的是存session 为了偷懒-不改动h5 我们也不用JWT了\n        request.session['user'] = user.id\n        return R.ok(data=None)\n    return R.fail(\"验证码错误\")\n\n```\n\n## 退出登录\n\n```python\nimport random\n\nfrom django.shortcuts import render\n\n# Create your views here.\n\nfrom ninja import Router\n\nfrom .models import User\nfrom .schemas import SendMsgSchema, SendMsgResultSchema, UserLoginSchema\nfrom ..schemas import R\n\nrouter = Router(tags=['登录'])\n\n\n@router.post(\"/sendMsg\", summary=\"验证码\", response=R)\ndef send_msg(request, data: SendMsgSchema):\n    # 4位数，生成验证码\n    code = ''.join(random.choices('0123456789', k=4))\n    # 验证码存在session中\n    request.session[data.phone] = code\n    request.session.set_expiry(5 * 60)  # 缓存5分钟\n    # 使用了response R， 这里默认就是 R 中的 data属性\n    return R.ok(data=SendMsgResultSchema(code=code))\n\n\n@router.post(\"/login\", summary=\"登录\", response=R)\ndef user_login(request, data: UserLoginSchema):\n    # 1. 验证码存在?\n    if request.session.get(data.phone) == data.code:\n        # 2. 查不到就创建\n        user, _ = User.objects.get_or_create(phone=data.phone, status=1)\n        # 3. Java原版这里使用的是存session 为了偷懒-不改动h5 我们也不用JWT了\n        request.session['user'] = user.id\n        return R.ok(data=None)\n    return R.fail(\"验证码错误\")\n\n\n@router.post(\"/loginout\", summary=\"退出\", response=R)\ndef user_logout(request):\n    if request.session.get(\"user\"):\n        request.session.delete(\"user\")\n    return R.ok(data=None)\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1721225627552-b0bb3993-1525-41fe-b05e-8c720a474b9e.png)\n\n# 首页显示接口\n\n> `takeout/apps/product`目录下\n\n## Schema\n\n> `takeout/apps/product/schemas.py`\n\n```python\nimport json\nfrom typing import Optional, List\n\nfrom ninja import ModelSchema, Schema, Field\n\nfrom pydantic import validator\n\nfrom .models import Category, Dish, DishFlavor\nfrom ..order.models import ShoppingCart\n\n\nclass CategorySchema(ModelSchema):\n    class Config:\n        model = Category\n        model_fields = \"__all__\"\n\n\nclass DishFilter(Schema):\n    status: Optional[int] = Field(..., description=\"上架状态\")\n    category_id: Optional[int] = Field(..., description=\"分类ID\", alias=\"categoryId\")\n\n\nclass DishFlavorSchema(ModelSchema):\n    value: List[str]\n\n    # 处理value 是json 数组的情况 最终返回的数据是这个方法处理之后的字符串\n    @validator(\"value\")\n    def dumps_value(cls, value):\n        if value:\n            # 源版中 value 返回的是dumps之后的数组数据\n            return json.dumps(value)\n\n    class Config:\n        model = DishFlavor\n        # model_exclude = [\"dish\"]\n        model_fields = \"__all__\"\n\n\nclass DishSchema(ModelSchema):\n    flavors: List[DishFlavorSchema] = []\n\n    class Config:\n        model = Dish\n        model_fields = \"__all__\"\n\n\nclass ShoppingCartSchema(ModelSchema):\n    class Config:\n        model = ShoppingCart\n        model_fields = \"__all__\"\n\n```\n\n## 分类列表\n\n> `takeout/apps/product/views.py`\n\n```python\nimport os.path\nfrom typing import List\n\nfrom django.http import FileResponse\nfrom django.shortcuts import render\n\n# Create your views here.\n\nfrom ninja import Router, Query\n\nfrom apps.order.models import ShoppingCart\nfrom apps.product.models import Category, Dish\nfrom apps.product.schemas import CategorySchema, DishSchema, DishFilter, ShoppingCartSchema\nfrom apps.schemas import R\n\nfrom takeout.settings import BASE_DIR\n\nrouter = Router(tags=[\"商品\"])\n\n\n@router.get(\"/category/list\", summary=\"分类\", response=R)\ndef category_list(request):\n    result = Category.objects.all().order_by('-sort')\n    return R.ok(data=list(result.values()))\n\n\n@router.get(\"/dish/list\", summary=\"食品列表\", response=R)\ndef dish_list(request, data: DishFilter = Query(...)):\n    result = Dish.objects.filter(**data.dict())\n    # 将口味属性加到对象中\n    for obj in result:\n        setattr(obj, \"flavors\", obj.dishflavor_set.all())\n    return R.ok(list(result.values()))\n\n\n@router.get(\"/common/download\", summary=\"图片流\")\ndef download_img(request, name: str):\n    media_path = f\"{BASE_DIR}{name}\"\n    if os.path.exists(media_path):\n        return FileResponse(open(media_path, \"rb\"), content_type=\"image/png\")\n\n\n@router.get(\"/shoppingCart/list\", tags=[\"购物车\"], summary=\"购物车列表\", response=R)\ndef cart(request):\n    if request.session.get('user'):\n        result = ShoppingCart.objects.filter(user=request.session.get(\"user\"))\n        return R.ok(data=list(result))\n    return R.ok(data=[])\n\n```\n\n## 认证\n\n> 某些接口需要用户登录之后才能操作，`takeout/apps/auth.py`\n\n```python\nfrom ninja.errors import AuthenticationError\n\nfrom apps.user.models import User\n\n\ndef session_auth(request):\n    try:\n        user_id = request.session['user']\n        user = User.objects.get(id=user_id)\n        return user\n    except Exception as e:\n        print(e)\n        raise AuthenticationError\n\n```\n\n## 预览\n\n> H5 商品价格显示问题，修改`takeout/static/front/index.html`\n\n```html\n<!-- <div class=\"divBottom\"><span>￥</span><span>{{item.price / 100}}</span></div> -->\n<div class=\"divBottom\"><span>￥</span><span>{{item.price}}</span></div>\n```\n\n![](https://cdn.nlark.com/yuque/0/2023/gif/1624081/1689500323673-a0f0545a-ee7a-4c51-87ed-32ec95652d02.gif)\n\n# 暂时到这里\n\n> 更新: 2024-07-17 22:54:08  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/awbybg98ch6hs25g>\n","tags":["Python Web","Django-Ninja"],"categories":["Python Web"]},{"title":"Django-Ninja","url":"/blog/179197962/","content":"\n# Django-Ninja\n\n# 官方文档\n\nDjango-Ninja：[https://django-ninja.dev/](https://django-ninja.dev/)\n\n# 项目初始化\n\n## 创建虚拟环境\n\n`python3 -m venv venv`\n\n## 激活虚拟环境\n\nWindows：`venv/Script/activate`\n\nMac/Linux：`source venv/bin/activate`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720865210569-0adb05b0-1902-48b4-90d2-689380ce0d0d.png)\n\n## 安装 Django-ninja\n\n> 在安装 Django-ninja 的时候，其实还会安装 Django\n\n`pip3 install django-ninja`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720865353261-68f05330-a1bf-4b62-8f0d-cd1792e6062e.png)\n\n## 创建 ninja 应用\n\n使用`<font style=\"color:rgb(54, 70, 78);background-color:rgb(245, 245, 245);\">django-admin startproject [应用名]</font>`<font style=\"color:rgb(54, 70, 78);background-color:rgb(245, 245, 245);\">创建应用</font>\n\n<font style=\"color:rgb(54, 70, 78);background-color:rgb(245, 245, 245);\">这里创建了一个名为</font>`<font style=\"color:rgb(54, 70, 78);background-color:rgb(245, 245, 245);\">ninja_server</font>`<font style=\"color:rgb(54, 70, 78);background-color:rgb(245, 245, 245);\">的应用</font>\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720865570605-835d4f8c-15ef-4f52-8f25-6df9e35b4966.png)\n\n## 打开项目\n\n使用 PyCharm 打开创建的项目，即直接打开`ninja_server`即可，然后解释器记得选择创建的虚拟环境下的解释器\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720865956769-9fb029aa-6a35-454b-8434-fad52f7e4c43.png)\n\n## Hello World\n\n在/ninja_server 下的 urls.py 后面添加\n\n```python\n\"\"\"\nURL configuration for ninja_server project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\nfrom ninja import NinjaAPI\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n\napi = NinjaAPI()\n\n\n@api.get(\"/hello\")\ndef hello_world(request):\n    return {'hello': 'world'}\n\n\nurlpatterns += [path('api/', api.urls)]\n\n```\n\n然后启动项目\n\n- 命令行启动\n\n`python3 manage.py runserver`\n\n```shell\n(venv) ➜  ninja_server\n(venv) ➜  ninja_server python3 manage.py runserver\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\nJuly 13, 2024 - 10:26:13\nDjango version 5.0.7, using settings 'ninja_server.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\n```\n\n之后在浏览器输入`http://127.0.0.1:8000/api/hello`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720866480596-98241c95-6b1d-41ac-8479-27a18a2b9874.png)\n\n- 直接启动\n\n# 查看文档\n\n直接通过`http://127.0.0.1:8000/api/docs`可以查看官方文档\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720866561421-01edc801-81ab-43c8-ba7f-b08089cfa6a2.png)\n\n# 路由、视图、常用请求\n\n在 Django-ninja 中的路由配置，与 fastapi 类似\n\n在项目目录下面创建一个 router.py\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom django.http import HttpRequest\nfrom ninja import Router\n\nREST = Router(tags=[\"REST API\"])\n\n\n@REST.get(\"/get\")\ndef http_get(request: HttpRequest):\n    return {\"get\": \"OK\"}\n\n\n@REST.post(\"/post\")\ndef http_post(request: HttpRequest):\n    return {\"post\": \"OK\"}\n\n\n@REST.put(\"/put\")\ndef http_put(request: HttpRequest):\n    return {\"put\": \"OK\"}\n\n\n@REST.delete(\"/delete\")\ndef http_delete(request: HttpRequest):\n    return {\"delete\": \"OK\"}\n\n\n@REST.patch(\"/patch\")\ndef http_patch(request: HttpRequest):\n    return {\"patch\": \"OK\"}\n\n\n@REST.api_operation(methods=[\"GET\", \"POST\"], path=\"/multi\")\ndef http_multi(request: HttpRequest):\n    if request.method == \"GET\":\n        pass\n    elif request.method == \"POST\":\n        pass\n    else:\n        raise Exception\n```\n\n视图的第一个参数，必须是`request: HttpRequest`\n\n然后修改 urls.py\n\n```python\n\"\"\"\nURL configuration for ninja_server project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\nfrom ninja import NinjaAPI\n\nfrom router import REST\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n\napi = NinjaAPI()\n\n\n@api.get(\"/hello\")\ndef hello_world(request):\n    return {'hello': 'world'}\n\n\napi.add_router(prefix=\"v1/\", router=REST)\n\nurlpatterns += [path('api/', api.urls)]\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720951173221-eb2289fb-8346-471a-96de-2c968580d810.png)\n\n# 常见请求参数\n\n包括路径参数、查询参数、请求体\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import List\n\nfrom django.http import HttpRequest\nfrom ninja import Router, Path, Query, Schema, Field, Form, UploadedFile, File\n\n\nREQ_PARA = Router(tags=[\"Request parameter\"])\n\n\n# 路径参数\n@REQ_PARA.get(\"/path/{id}\", summary=\"路径参数\")\ndef get_path(request, id: int):\n    pass\n\n\n@REQ_PARA.get(\"/pathV2/{pk}\", summary=\"路径参数PATH\")\ndef get_path_v2(request, pk: int = Path(10, title=\"主键\", alias=\"primary_key\")):\n    return f\"{pk}\"\n\n\n# 查询参数\n@REQ_PARA.get(\"/query\", summary=\"查询参数\")\ndef get_query(request, id: int, age: int = 10):\n    return f\"{id} {age}\"\n\n\n# ... 占位符，表示必填字段\n@REQ_PARA.get(\"/queryV2\", summary=\"查询参数Query\")\ndef get_query_v2(request, name: str = Query(..., title=\"姓名\", description=\"姓名,...为必填项\")):\n    return f\"{name}\"\n\n\n# 查询参数，使用schema定义模型\nclass QueryFilter(Schema):\n    age: int = None  # 可选项\n    name: str = Field(..., description=\"必填项\")\n\n\n# 必填项\n@REQ_PARA.get(\"/queryV3\", summary=\"查询参数Query-Schema\")\ndef get_query_v3(request, data: QueryFilter = Query(...)):\n    return f\"{data}\"\n\n\n# 表单 - 用得少\n@REQ_PARA.post(\"/form\", summary=\"表单\")\ndef post_form(request, username: str = Form(...), password: str = Form(...)):\n    return f\"{username} {password}\"\n\n\n# Schema标注Form\nclass User(Schema):\n    username: str\n    password: str\n\n\n@REQ_PARA.post(\"/formV2\", summary=\"表单-Schema\")\ndef post_form2(request, data: User = Form(...)):\n    return data\n\n\n# 上传文件\n@REQ_PARA.post(\"/upload\", summary=\"上传文件\")\ndef upload(request, file: UploadedFile = File(...)):\n    data = file.read()\n    return {\n        \"name\": file.name,\n        \"len\": len(data)\n    }\n\n\n# 上传多个文件\n@REQ_PARA.post(\"/upload-multi\", summary=\"上传多个文件\")\ndef upload_multi(request, files: List[UploadedFile] = File(...)):\n    return [file.name for file in files]\n\n\nclass UserDetails(Schema):\n    name: str\n    age: int\n\n\n@REQ_PARA.post(\"/upload-user\", summary=\"表单+上传文件\")\ndef upload_user(request, details: UserDetails = Form(...), file: UploadedFile = File(...)):\n    return [details.dict(), file.name]\n\n\n@REQ_PARA.post(\"/upload-userV2\", summary=\"表单+上传文件\")\ndef upload_user2(request, details: UserDetails, file: UploadedFile = File(...)):\n    pass\n\n\n# 请求体\n@REQ_PARA.post(\"/body\", summary=\"请求体\")\ndef user_body(request, user: UserDetails):\n    pass\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720954000682-3c378e11-ce1d-4889-816d-815690cf2091.png)\n\n# 模型序列化\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import List\n\nfrom django.contrib.auth.models import Group, User\nfrom django.http import HttpRequest\nfrom ninja import Router, Path, Query, Schema, Field, Form, UploadedFile, File, ModelSchema\nfrom ninja.pagination import paginate\n\n\nclass GroupSchema(ModelSchema):\n    user: \"UserSchema\" = None\n\n    class Config:\n        model = Group  # 指定模型\n        model_fields = ['id', 'name']\n\n\nclass UserSchema(ModelSchema):\n    groups:List[GroupSchema] = []\n    class Config:\n        model = User\n        model_fields = ['id', 'username', 'first_name', 'last_name']\n        # model_fields = \"__all__\" # 所有字段\n        model_fields_optional = ['username']  # 设置字段可不传送\n\n\n# UserSchema在GroupSchema后面定义的，所以需要加这个才能正常序列化\nGroupSchema.update_forward_refs()\n\nSchemaModel = Router(tags=[\"Schema Model\"])\n\n\n# List[UserSchema] 等价 后面那个接口的生成器\n@SchemaModel.get(\"/schema\", response=List[UserSchema], summary=\"Schema model序列化\")\n@paginate\ndef list_users(request):\n    return User.objects.all()\n\n\n@SchemaModel.get(\"/groups\")\ndef list_groups(request):\n    return [GroupSchema.from_orm(obj) for obj in Group.objects.all()]\n\n\n@SchemaModel.post(\"/group\", response=GroupSchema, summary=\"add\", tags=[\"group\"])\ndef add(request, group: GroupSchema):\n    obj = Group.objects.create(**group.dict())\n    return obj\n\n```\n\n写好代码之后\n\n执行一下\n\n`python manage.py makemigrations`\n\n和\n\n`python manage.py migrate`\n\n```powershell\n(venv) ➜  ninja_server python manage.py makemigrations\nNo changes detected\n(venv) ➜  ninja_server python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying auth.0012_alter_user_first_name_max_length... OK\n  Applying sessions.0001_initial... OK\n(venv) ➜  ninja_server\n```\n\n# JWT 认证\n\n先安装一下 jwt 依赖\n\n`pip3 install python-jose`\n\n```python\ndef generate_token(username: str, expires_delta=None):\n    \"\"\"\n    生成token\n    :param username:用户名\n    :param expires_delta:有效时长\n    :return:\n    \"\"\"\n    to_encode = {\"sub\": username}.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=1)\n    to_encode.update(dict(exp=expire))\n    encoded_jwt = jwt.encode(to_encode, \"SECRET_KEY\", algorithm=\"HS256\")\n    return encoded_jwt\n\n\nclass TokenAuth(HttpBearer):\n    def authenticate(self, request, token):\n        # 解密token\n        payload = jwt.decode(token, \"SECRET_KEY\", algorithms=[\"HS256\"])\n        username: str = payload.get(\"sub\")\n        # 校验用户是否存在\n        if username == \"zachary\":\n            request.session[\"user\"] = username\n            return username\n        else:\n            return HttpError(404, \"user not found\")\n\n\nTokenRouter = Router(tags=[\"Token\"], auth=TokenAuth())\n\n\n@TokenRouter.get(\"/token\", summary=\"token\", auth=None)\ndef token(request, user):\n    token = generate_token(user)\n    return token\n\n\n@TokenRouter.get(\"/check\", summary=\"user\")\ndef check(request):\n    return request.session.get(\"user\")\n```\n\n# 异常处理\n\n写到 urls.py\n\n```python\n@api.exception_handler(Exception)\ndef global_exception_handler(request: HttpRequest, exc):\n    print(exec)\n    print(request.build_absolute_uri())\n    print(traceback.format_exc())\n    return JsonResponse({\n        \"data\": None,\n        \"msg\": str(exc),\n        \"code\": 500\n    })\n\n\n@api.exception_handler(HttpError)\ndef http_error(request: HttpRequest, exc):\n    return JsonResponse({\n        \"data\": None,\n        \"msg\": str(exc),\n        \"code\": exc.status_code\n    })\n\n\n@api.get(\"/hello1\")\ndef hello(request):\n    1 / 0\n\n\n@api.get(\"/hello2\")\ndef hello2(request):\n    raise HttpError(404, \"user not found\")\n\n\n@api.get(\"/hello3\")\ndef hello3(request):\n    raise ValueError(\"user not found\")\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720961272264-36bbbedd-c5fc-4216-b960-3bea669f1db7.png)\n\n> 更新: 2024-07-14 20:47:56  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/oukufzfyh2p6vb38>\n","tags":["Python Web","Django-Ninja"],"categories":["Python Web"]},{"title":"Django 实现 RESTful API","url":"/blog/3684614663/","content":"\n# Django 实现 RESTful API\n\n一个超快、超极速的 Django 入门教程\n\n直接从 PyCharm 开始就可以\n\n# 创建项目\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720614004639-4039f8f4-4a5c-476e-9a74-a21329a0c224.png)\n\n# 目录介绍\n\n在完成项目依赖的安装和初始化之后，就可以看到以下目录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720614289363-b12d9096-0ffd-4538-9e1f-8a51d4c23806.png)\n\n- manage.py 是 Django 提供的命令行操作脚本\n- storeProject\n  - **init**.py 声明了 storeProject 为一个模块\n  - urls.py 用于配置 url 映射的文件\n  - settings.py 项目相关应用配置\n  - asgi.py 与 wsgi.py 是项目部署相关文件\n\n# DRF 安装\n\n`pip3 install djangorestframework`\n\n使用该命令安装 drf 的依赖\\库\\包\n\n# 修改 settings.py\n\n将 drf 注册到应用里面\n\n在 settings.py 中找到`INSTALLED_APPS\u0000`\n\n然后添加`rest_framework`如下即可\n\n```python\nINSTALLED_APPS = [\n    'rest_framework',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n\n# DRF 启动\n\n启动项目，仅需点击 PyCharm 右上角的运行按钮\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720614892409-a1835fdb-fc9a-40df-be28-39de345f23b3.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720614986446-230b95b8-fb2d-4772-933e-932f34304562.png)\n\n# 创建 api\n\n## 创建视图 views\n\n在项目目录下，创建一个名为 api 的包，并且再创建一个 views.py 文件\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n\n@api_view(['GET'])\ndef get_data(request):\n    goods = {\n        \"name\": \"苹果\",\n        \"price\": 12.0\n    }\n    return Response(goods)\n\n```\n\n## 创建 urls\n\n在 api 包下创建一个 urls.py 文件\n\n编写上面创建的视图的 url 映射\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.get_data),\n]\n```\n\n## 导入映射\n\n在项目目录的 storeProject 下找到 urls.py\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('api.urls')),\n]\n```\n\n重启项目后可以看到以下内容\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720615834866-665b0f69-c366-48f4-9b89-d8eaf8ecc405.png)\n\n# 创建应用\n\n可以在命令行中通过`python manage.py startapp [应用名称]`来创建一个新的应用\n\n## 创建 goods\n\n`python manage.py startapp goods`\n\n执行命令之后会发现，目录结构多了一个 goods 包\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720616042735-dae58d5c-67e7-4305-89c8-773b9968367f.png)\n\n## 注册 goods\n\n在 storeProject 下的 settings.py 下注册下刚才创建的 goods\n\n```python\nINSTALLED_APPS = [\n    'goods',\n    'rest_framework',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n\n## goods 模型\n\n在新创建的 goods 包下找到 models.py 文件\n\n```python\nfrom django.db import models\n\n\n# Create your models here.\n\nclass Goods(models.Model):\n    name = models.CharField(max_length=100)\n    price = models.FloatField()\n    description = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\n```\n\n创建好之后别忘记执行`python manage.py makemigrations`迁移命令，更新数据库变化，包括增删表，修改字段等操作，还可以保持数据库字段与类模型的同步；\n\n之后还需要再次执行一下 migrate 命令，`python manage.py migrate`\n\n```shell\n(venv) ➜  storeProject python manage.py makemigrations\nMigrations for 'goods':\n  goods/migrations/0001_initial.py\n    - Create model Goods\n(venv) ➜  storeProject python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, goods, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying auth.0012_alter_user_first_name_max_length... OK\n  Applying goods.0001_initial... OK\n  Applying sessions.0001_initial... OK\n(venv) ➜\n```\n\n至此完成了模型的创建和数据的迁移操作\n\n# 添加数据\n\n接下来使用 admin 控制台来添加数据\n\n## 创建超级管理员\n\n使用命令创建一个超级管理员用户\n\n`python manage.py createsuperuser`\n\n创建一个名称为：admin，密码为：admin 的超级用户\n\n```shell\n(venv) ➜  storeProject python manage.py createsuperuser\nUsername (leave blank to use 'zachary'): admin\nEmail address:\nPassword:\nPassword (again):\nThe password is too similar to the username.\nThis password is too short. It must contain at least 8 characters.\nThis password is too common.\nBypass password validation and create user anyway? [y/N]: y\nSuperuser created successfully.\n```\n\n## 注册数据模型\n\n在 goods 应用下的 admin.py 中注册 goods 数据模型\n\n```python\nfrom django.contrib import admin\n\nfrom . import models\n\n# Register your models here.\nadmin.site.register(models.Goods)\n\n```\n\n之后重新启动一下服务\n\n## admin 管理后台\n\n在浏览器中输入`localhost:8000/admin`进入 admin 管理后台\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720617144203-248ad3d3-04b7-41ae-bf4b-3df5c4fa4ee8.png)\n\n使用上面创建的超级管理员账号密码进行登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720617175721-2cc6a03a-d5c4-4fd1-a594-a2f669a3e9fe.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720617435234-73d77bfb-e8b2-4523-9611-4302073bb711.png)\n\n## Add goods\n\n点击 GOODS 下的 Goodss 右侧的+Add 按钮\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720617578298-bbcb5a89-9364-4eb5-b496-154f08f239d7.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720617613829-ce43db61-45b9-4f84-8c2d-39a10a460651.png)\n\n然后现在就有两个商品了\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720617662223-8f69931b-ae90-4177-9107-a060a7084887.png)\n\n# CRUD\n\n## 序列化\n\n先把数据序列化功能实现了，序列化实现了 Python 类与 json 数据的转化\n\n在项目目录/api 下新建一个 serializers.py\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom rest_framework import serializers\n\nfrom goods.models import Goods\n\n\nclass GoodsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Goods\n        fields = '__all__'\n```\n\n## 查询商品列表\n\n在项目目录/api 的 views.py 下修改\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\nfrom api.serializers import GoodsSerializer\nfrom goods.models import Goods\n\n\n@api_view(['GET'])\ndef goods_list(request):\n    goods = Goods.objects.all()\n    serializer = GoodsSerializer(goods, many=True)\n    return Response(serializer.data)\n\n```\n\n下一步需要修改/api 下的 urls.py\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('goods/', views.goods_list),\n]\n```\n\n重启项目后`localhost:8000/goods/`查看查询结果\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720618538260-5c327cae-e5c1-4b8b-9ec5-5790a40199a9.png)\n\n## 添加商品\n\n直接在之前的视图上面修改一下\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\nfrom api.serializers import GoodsSerializer\nfrom goods.models import Goods\n\n\n@api_view(['GET', 'POST'])\ndef goods_list(request):\n    if request.method == 'GET':\n        goods = Goods.objects.all()\n        serializer = GoodsSerializer(goods, many=True)\n        return Response(serializer.data)\n    elif request.method == 'POST':\n        serializer = GoodsSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n```\n\n然后这个新增商品的功能用 postman 测一下\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720619449144-66a2f2d2-0ce7-4c93-830b-116474bf345d.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720619491536-0d00437d-86e3-433a-8906-049967efc9aa.png)\n\n## 查询、修改、删除具体商品\n\n仍旧是在/api 下的 views.py 中添加一个 view 视图\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\nfrom api.serializers import GoodsSerializer\nfrom goods.models import Goods\n\n\n@api_view(['GET', 'POST'])\ndef goods_list(request):\n    if request.method == 'GET':\n        goods = Goods.objects.all()\n        serializer = GoodsSerializer(goods, many=True)\n        return Response(serializer.data)\n    elif request.method == 'POST':\n        serializer = GoodsSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n\n@api_view(['GET', 'PUT', 'DELETE'])\ndef goods_detail(request, id):\n    try:\n        goods = Goods.objects.get(id=id)\n    except Goods.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n    if request.method == 'GET':\n        serializer = GoodsSerializer(goods)\n        return Response(serializer.data)\n    elif request.method == 'PUT':\n        serializer = GoodsSerializer(goods, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    elif request.method == 'DELETE':\n        goods.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n\n```\n\n同样在/api 的 urls.py 得添加上新的 url\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('goods/', views.goods_list),\n    path('goods/<int:id>', views.goods_detail),\n]\n```\n\n## 测试\n\n### 查询具体商品\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720620101444-6371c3e6-6ce6-42ca-b52c-079d3898b835.png)\n\n### 修改具体商品\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720621977675-5568f7a6-1ca4-4456-96de-7bd1ceb36225.png)\n\n### 删除具体商品\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720622031456-573eeee8-d303-4068-bb08-11787731e892.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1720622036282-e61363b5-2990-47d9-9860-8edaf7e00e1a.png)\n\n> 更新: 2024-07-10 22:34:56  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/dmf3g69cggt8iatm>\n","tags":["Python Web","RESTful API","Django"],"categories":["Python Web"]},{"title":"学生成绩管理","url":"/blog/1210368491/","content":"\n# 学生成绩管理\n\n## 成绩表设计\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710672515547-06744996-10e2-4629-895f-049353a26c84.png)\n\n## 管理员课程打分\n\n### 前端\n\n添加课程打分弹窗\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"addGrade(scope.row)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >评分\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <!--    评分表单-->\n    <el-dialog v-model=\"data.formVisible\" title=\"成绩信息\" width=\"35%\">\n      <el-form\n        :model=\"data.gradeForm\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 40px\"\n      >\n        <el-form-item label=\"课程名称\">\n          <el-input v-model=\"data.gradeForm.name\" autocomplete=\"off\" disabled />\n        </el-form-item>\n        <el-form-item label=\"分数\">\n          <el-input v-model=\"data.gradeForm.score\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"评语\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.gradeForm.comment\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button plain @click=\"data.formVisible = false\">取消</el-button>\n          <el-button type=\"primary\" plain @click=\"save\">保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n  gradeForm: {},\n  formVisible: false,\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    name: data.name,\n    number: data.number,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/studentCourse/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  load();\n};\n\nconst del = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/studentCourse/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"操作成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 打分函数，弹窗\nconst addGrade = (row) => {\n  // 弹窗\n  data.formVisible = true;\n  data.gradeForm.name = row.name;\n  data.gradeForm.studentId = row.studentId;\n  data.gradeForm.courseId = row.courseId;\n  data.gradeForm.score = \"\";\n  data.gradeForm.comment = \"\";\n};\n\nconst save = () => {\n  request\n    .post(\"/grade/add\", data.gradeForm)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n### 后端\n\n依次创建上：`gradeApi.py`、`gradeService.py`、`grade.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import APIRouter, Depends\n\nfrom api import app\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.grade import GradeCreate\nfrom service.gradeService import GradeService\n\ngrade_router = APIRouter(prefix=\"/grade\")\n\n\n@grade_router.post(\"/add\", response_model=ResultModel)\nasync def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)):\n    GradeService.add_grade(grade, db_session)\n    return Result.success()\n\n\napp.include_router(grade_router)\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler, courseApi, studentApi, fileApi, studentCourseApi, gradeApi\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_\n\nfrom common.utils import set_attrs\nfrom exception.customException import GradeExistException\nfrom model import Session\nfrom model.grade import GradeCreate, Grade\n\n\nclass GradeService:\n\n    @staticmethod\n    def add_grade(grade: GradeCreate, db_session: Session):\n        query = select(Grade).where(\n            and_(Grade.studentId == grade.studentId,\n                 Grade.courseId == grade.courseId))\n        exist_grade: Grade = db_session.execute(query).scalar()\n        if exist_grade:\n            raise GradeExistException(\"课程已打分\")\n        new_grade = Grade()\n        set_attrs(new_grade, jsonable_encoder(grade))\n        db_session.add(new_grade)\n        db_session.commit()\n        return new_grade\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, Double, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\nfrom model.course import Course\nfrom model.student import Student\n\n\nclass Grade(Base):\n    __tablename__ = \"grade\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, nullable=False)\n    score: Mapped[str] = mapped_column(Double, nullable=False)\n    comment: Mapped[str] = mapped_column(String(255), nullable=False)\n    feedback: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\n\nclass GradeBase(BaseModel):\n    courseId: int\n    studentId: int\n    score: Optional[float] = None\n    comment: Optional[str] = None\n    feedback: Optional[str] = None\n\n\nclass GradeCreate(GradeBase):\n    pass\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass UserExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass FileNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass StudentCourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass StudentCourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass GradeExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\\n    StudentCourseExistException, StudentCourseNotExistException, GradeExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserExistException)\nasync def user_exist_exception_handler(request: Request, exc: UserExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(FileNotFoundException)\nasync def file_not_found_exception_handler(request: Request, exc: FileNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(StudentCourseExistException)\nasync def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(StudentCourseNotExistException)\nasync def student_course_not_exist_exception_handler(request: Request, exc: StudentCourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(GradeExistException)\nasync def grade_exist_exception_handler(request: Request, exc: GradeExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n```\n\n### 测试\n\n管理员评分\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710675251367-8006657d-70b1-4466-827e-8b6b2224e83d.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710675277634-bae53b43-899d-4c13-bbdf-6618caaf77c6.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710675286983-171e5613-910d-43d8-ab55-d340d24eda54.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710675316480-e70f1dc4-2dc2-4d27-8587-9c41b08b2f95.png)\n\n## 显示课程分数\n\n### 前端\n\n复制`StudentCourse.vue`重命名为`Grade.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.courseName\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.studentName\"\n        placeholder=\"请输入要查询的学生名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"course.name\" label=\"课程名称\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column prop=\"score\" label=\"成绩\" />\n          <el-table-column prop=\"comment\" label=\"教师评语\" />\n          <el-table-column prop=\"feedback\" label=\"学生评价\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >删除\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"setFeedback(scope.row)\"\n                v-if=\"data.user.role === 'STUDENT'\"\n                >评价\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <!--    评分表单-->\n    <el-dialog v-model=\"data.formVisible\" title=\"反馈信息\" width=\"35%\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 40px\"\n      >\n        <el-form-item label=\"反馈\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.form.feedback\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button plain @click=\"data.formVisible = false\">取消</el-button>\n          <el-button type=\"primary\" plain @click=\"save\">保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  form: {},\n  courseName: \"\",\n  studentName: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n  formVisible: false,\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    courseName: data.courseName,\n    studentName: data.studentName,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/grade/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.courseName = \"\";\n  data.studentName = \"\";\n  load();\n};\n\nconst del = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/studentCourse/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"操作成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 打分\nconst setFeedback = (row) => {\n  // 弹窗\n  data.formVisible = true;\n  data.form = JSON.parse(JSON.stringify(row));\n};\n\nconst save = () => {\n  request\n    .post(\"/grade/update\", data.form)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"student\",\n          name: \"Student\",\n          component: () => import(\"@/views/manager/Student.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"person\",\n          name: \"Person\",\n          component: () => import(\"@/views/manager/Person.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"courseList\",\n          name: \"CourseList\",\n          component: () => import(\"@/views/manager/CourseList.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"studentCourse\",\n          name: \"StudentCourse\",\n          component: () => import(\"@/views/manager/StudentCourse.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"grade\",\n          name: \"Grade\",\n          component: () => import(\"@/views/manager/Grade.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          :src=\"\n            user.avatar ||\n            'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'\n          \"\n          alt=\"\"\n          style=\"width: 40px; height: 40px; border-radius: 50%\"\n        />\n        <span style=\"margin-left: 5px\">{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3', '4']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\" v-if=\"user.role === 'ADMIN'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n            <el-menu-item index=\"/courseList\" v-if=\"user.role === 'STUDENT'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>学生选课</span>\n            </el-menu-item>\n            <el-menu-item index=\"/studentCourse\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>选课记录</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"4\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>成绩信息</span>\n            </template>\n            <el-menu-item index=\"/grade\">\n              <el-icon>\n                <List />\n              </el-icon>\n              <span>学生成绩</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\" v-if=\"user.role === 'STUDENT'\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.grade import GradeCreate, GradeSearch, GradeUpdate\nfrom service.gradeService import GradeService\n\ngrade_router = APIRouter(prefix=\"/grade\")\n\n\n@grade_router.post(\"/add\", response_model=ResultModel)\nasync def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)):\n    GradeService.add_grade(grade, db_session)\n    return Result.success()\n\n\n@grade_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      studentName: Optional[str] = Query(None, description=\"Student name\"),\n                      courseName: Optional[str] = Query(None, description=\"Course name\"),\n                      studentId: Optional[str] = Query(None, description=\"Student id\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    grade_search: GradeSearch = GradeSearch(studentName=studentName, courseName=courseName, studentId=studentId)\n    grade_list = GradeService.select_page(grade_search, db_session)\n    return Result.success(pageInfo.of(grade_list))\n\n\n@grade_router.put(\"/update\", response_model=ResultModel)\nasync def update(grade: GradeUpdate, db_session: Session = Depends(get_db_session)):\n    GradeService.update_by_id(grade, db_session)\n    return Result.success()\n\n\napp.include_router(grade_router)\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_, asc\n\nfrom common.utils import set_attrs\nfrom exception.customException import GradeExistException\nfrom model import Session\nfrom model.course import Course\nfrom model.grade import GradeCreate, Grade, GradeSearch, GradeUpdate\nfrom model.student import Student\n\n\nclass GradeService:\n\n    @staticmethod\n    def add_grade(grade: GradeCreate, db_session: Session):\n        query = select(Grade).where(\n            and_(Grade.studentId == grade.studentId,\n                 Grade.courseId == grade.courseId))\n        exist_grade: Grade = db_session.execute(query).scalar()\n        if exist_grade:\n            raise GradeExistException(\"课程已打分\")\n        new_grade = Grade()\n        set_attrs(new_grade, jsonable_encoder(grade))\n        db_session.add(new_grade)\n        db_session.commit()\n        return new_grade\n\n    @staticmethod\n    def select_page(grade_search: GradeSearch, db_session: Session):\n        query = select(Grade, Student, Course).outerjoin(Grade.student).outerjoin(Grade.course).order_by(asc(Grade.id))\n        if grade_search.courseName:\n            query = query.where(Course.name.like(f\"%{grade_search.courseName}%\"))\n        if grade_search.studentName:\n            query = query.where(Student.name.like(f\"%{grade_search.studentName}%\"))\n        if grade_search.studentId:\n            query = query.where(Grade.studentId == grade_search.studentId)\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def update_by_id(grade: GradeUpdate, db_session: Session):\n        exist_grade: Grade = check_grade_exist(grade.id, db_session)\n        set_attrs(exist_grade, jsonable_encoder(grade))\n        db_session.commit()\n        return exist_grade\n\n\ndef check_grade_exist(grade_id: int, db_session: Session):\n    query = select(Grade).where(Grade.id == grade_id)\n    exist_grade: Grade = db_session.execute(query).scalar()\n    if not exist_grade:\n        raise GradeExistException(\"成绩记录不存在\")\n    return exist_grade\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, Double, ForeignKey, String\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom model import Base\nfrom model.course import Course\nfrom model.student import Student\n\n\nclass Grade(Base):\n    __tablename__ = \"grade\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, ForeignKey('course.id'), nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, ForeignKey('student.id'), nullable=False)\n    score: Mapped[str] = mapped_column(Double, nullable=False)\n    comment: Mapped[str] = mapped_column(String(255), nullable=False)\n    feedback: Mapped[str] = mapped_column(String(255), nullable=False)\n\n    student: Mapped[Student] = relationship(lazy=False, backref=\"grade\")\n    course: Mapped[Course] = relationship(lazy=False, backref=\"grade\")\n\n\nclass GradeBase(BaseModel):\n    courseId: int\n    studentId: int\n    score: Optional[float] = None\n    comment: Optional[str] = None\n    feedback: Optional[str] = None\n\n\nclass GradeCreate(GradeBase):\n    pass\n\n\nclass GradeSearch(BaseModel):\n    courseName: str | None\n    studentName: str | None\n    studentId: str | None\n\n\nclass GradeUpdate(GradeBase):\n    id: int\n\n```\n\n### 测试\n\n管理员\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710677201407-3b1dcc5f-5d41-482a-8a92-00848a7df6fa.png)\n\n## 课程分数编辑\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.courseName\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.studentName\"\n        placeholder=\"请输入要查询的学生名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"course.name\" label=\"课程名称\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column prop=\"score\" label=\"成绩\" />\n          <el-table-column prop=\"comment\" label=\"教师评语\" />\n          <el-table-column prop=\"feedback\" label=\"学生评价\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >编辑\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >删除\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                v-if=\"data.user.role === 'STUDENT'\"\n                >评价\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <!--    评分表单-->\n    <el-dialog v-model=\"data.formVisible\" title=\"反馈信息\" width=\"35%\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 40px\"\n      >\n        <el-form-item label=\"分数\" v-if=\"data.user.role === 'ADMIN'\">\n          <el-input v-model=\"data.form.score\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"教师评语\" v-if=\"data.user.role === 'ADMIN'\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.form.comment\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n        <el-form-item label=\"学生评价\" v-if=\"data.user.role === 'STUDENT'\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.form.feedback\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button plain @click=\"data.formVisible = false\">取消</el-button>\n          <el-button type=\"primary\" plain @click=\"save\">保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  form: {},\n  courseName: \"\",\n  studentName: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n  formVisible: false,\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    courseName: data.courseName,\n    studentName: data.studentName,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/grade/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.courseName = \"\";\n  data.studentName = \"\";\n  load();\n};\n\nconst del = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/studentCourse/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"操作成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 打分\nconst handleEdit = (row) => {\n  // 弹窗\n  data.formVisible = true;\n  data.form = JSON.parse(JSON.stringify(row));\n};\n\nconst save = () => {\n  request\n    .put(\"/grade/update\", data.form)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n学生：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710677951814-7b1991b2-8113-4f85-963c-d8387ba996b0.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710677959948-2638843d-3be8-468b-ac69-340f5748173f.png)\n\n管理员：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710678028780-780c5ab0-4be8-4d3e-86b7-64dcad143cb9.png)![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710678035811-c86a8508-8c75-48cb-b543-767be4bcc735.png)\n\n## 课程分数删除\n\n### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.courseName\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.studentName\"\n        placeholder=\"请输入要查询的学生名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"course.name\" label=\"课程名称\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column prop=\"score\" label=\"成绩\" />\n          <el-table-column prop=\"comment\" label=\"教师评语\" />\n          <el-table-column prop=\"feedback\" label=\"学生评价\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >编辑\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >删除\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                v-if=\"data.user.role === 'STUDENT'\"\n                >评价\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <!--    评分表单-->\n    <el-dialog v-model=\"data.formVisible\" title=\"反馈信息\" width=\"35%\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 40px\"\n      >\n        <el-form-item label=\"分数\" v-if=\"data.user.role === 'ADMIN'\">\n          <el-input v-model=\"data.form.score\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"教师评语\" v-if=\"data.user.role === 'ADMIN'\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.form.comment\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n        <el-form-item label=\"学生评价\" v-if=\"data.user.role === 'STUDENT'\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.form.feedback\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button plain @click=\"data.formVisible = false\">取消</el-button>\n          <el-button type=\"primary\" plain @click=\"save\">保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  form: {},\n  courseName: \"\",\n  studentName: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n  formVisible: false,\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    courseName: data.courseName,\n    studentName: data.studentName,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/grade/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.courseName = \"\";\n  data.studentName = \"\";\n  load();\n};\n\nconst del = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/grade/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"操作成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 打分\nconst handleEdit = (row) => {\n  // 弹窗\n  data.formVisible = true;\n  data.form = JSON.parse(JSON.stringify(row));\n};\n\nconst save = () => {\n  request\n    .put(\"/grade/update\", data.form)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.grade import GradeCreate, GradeSearch, GradeUpdate\nfrom service.gradeService import GradeService\n\ngrade_router = APIRouter(prefix=\"/grade\")\n\n\n@grade_router.post(\"/add\", response_model=ResultModel)\nasync def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)):\n    GradeService.add_grade(grade, db_session)\n    return Result.success()\n\n\n@grade_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      studentName: Optional[str] = Query(None, description=\"Student name\"),\n                      courseName: Optional[str] = Query(None, description=\"Course name\"),\n                      studentId: Optional[str] = Query(None, description=\"Student id\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    grade_search: GradeSearch = GradeSearch(studentName=studentName, courseName=courseName, studentId=studentId)\n    grade_list = GradeService.select_page(grade_search, db_session)\n    return Result.success(pageInfo.of(grade_list))\n\n\n@grade_router.put(\"/update\", response_model=ResultModel)\nasync def update(grade: GradeUpdate, db_session: Session = Depends(get_db_session)):\n    GradeService.update_by_id(grade, db_session)\n    return Result.success()\n\n\n@grade_router.delete(\"/delete/{id}\", response_model=ResultModel)\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    GradeService.delete_by_id(id, db_session)\n    return Result.success()\n\n\napp.include_router(grade_router)\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_, asc\n\nfrom common.utils import set_attrs\nfrom exception.customException import GradeExistException\nfrom model import Session\nfrom model.course import Course\nfrom model.grade import GradeCreate, Grade, GradeSearch, GradeUpdate\nfrom model.student import Student\n\n\nclass GradeService:\n\n    @staticmethod\n    def add_grade(grade: GradeCreate, db_session: Session):\n        query = select(Grade).where(\n            and_(Grade.studentId == grade.studentId,\n                 Grade.courseId == grade.courseId))\n        exist_grade: Grade = db_session.execute(query).scalar()\n        if exist_grade:\n            raise GradeExistException(\"课程已打分\")\n        new_grade = Grade()\n        set_attrs(new_grade, jsonable_encoder(grade))\n        db_session.add(new_grade)\n        db_session.commit()\n        return new_grade\n\n    @staticmethod\n    def select_page(grade_search: GradeSearch, db_session: Session):\n        query = select(Grade, Student, Course).outerjoin(Grade.student).outerjoin(Grade.course).order_by(asc(Grade.id))\n        if grade_search.courseName:\n            query = query.where(Course.name.like(f\"%{grade_search.courseName}%\"))\n        if grade_search.studentName:\n            query = query.where(Student.name.like(f\"%{grade_search.studentName}%\"))\n        if grade_search.studentId:\n            query = query.where(Grade.studentId == grade_search.studentId)\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def update_by_id(grade: GradeUpdate, db_session: Session):\n        exist_grade: Grade = check_grade_exist(grade.id, db_session)\n        set_attrs(exist_grade, jsonable_encoder(grade))\n        db_session.commit()\n        return exist_grade\n\n    @staticmethod\n    def delete_by_id(id: int, db_session: Session):\n        exist_grade: Grade = check_grade_exist(id, db_session)\n        db_session.delete(exist_grade)\n        db_session.commit()\n        return exist_grade\n\n\ndef check_grade_exist(grade_id: int, db_session: Session):\n    query = select(Grade).where(Grade.id == grade_id)\n    exist_grade: Grade = db_session.execute(query).scalar()\n    if not exist_grade:\n        raise GradeExistException(\"成绩记录不存在\")\n    return exist_grade\n\n```\n\n### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710678715152-35dd8383-9e4c-4d96-b75f-56eda2266de6.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710678731077-6041b07e-bae2-413a-89cb-c08681df37ba.png)\n\n#\n\n> 更新: 2024-05-26 21:20:47  \n> 原文: <https://www.yuque.com/zacharyblock/iacda/izxixxgu5aq8g2nw>\n","tags":["Python","Vue3","FastAPI","实战"],"categories":["FastAPI入门"]},{"title":"学生选课功能","url":"/blog/1815875435/","content":"\n# 学生选课功能\n\n# 学生选课功能\n\n## 数据库\n\n新增一张学生选课表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710661868105-c089191b-2c9a-4bcd-a48a-de4fb53fa15f.png)\n\n## 前端\n\n学生选课页面，把 Course 页面复制粘贴一份，命名为`CourseList.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"selectCourse(scope.row)\"\n                >选课</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n\nconst selectCourse = (row) => {\n  request\n    .post(\"/studentCourse/add\", {\n      studentId: data.user.id,\n      name: row.name,\n      number: row.number,\n      courseId: row.id,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"选课成功\");\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"student\",\n          name: \"Student\",\n          component: () => import(\"@/views/manager/Student.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"person\",\n          name: \"Person\",\n          component: () => import(\"@/views/manager/Person.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"courseList\",\n          name: \"CourseList\",\n          component: () => import(\"@/views/manager/CourseList.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          :src=\"\n            user.avatar ||\n            'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'\n          \"\n          alt=\"\"\n          style=\"width: 40px; height: 40px; border-radius: 50%\"\n        />\n        <span style=\"margin-left: 5px\">{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\" v-if=\"user.role === 'ADMIN'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n            <el-menu-item index=\"/courseList\" v-if=\"user.role === 'STUDENT'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>学生选课</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\" v-if=\"user.role === 'STUDENT'\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710663024513-c0ac7ae4-706a-47b6-85cc-4056c92c95a7.png)\n\n## 后端\n\n### 选课实体类定义\n\n在项目目录`/model`下创建一个`studentCourse.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom model import Base\nfrom model.student import Student\n\n\nclass StudentCourse(Base):\n    __tablename__ = \"student_course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, nullable=False)\n```\n\n### 学生选课\n\n接着实现学生选课的 api 部分，在`/api`下创建一个`studentCourseApi.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import APIRouter, Depends\n\nfrom api import app\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.studentCourse import StudentCourseCreate\nfrom service.studentCourseService import StudentCourseService\n\nstudent_course_router = APIRouter(prefix=\"/studentCourse\")\n\n\n@student_course_router.post(\"/add\", response_model=ResultModel)\nasync def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)):\n    StudentCourseService.add_student_course(student_course, db_session)\n    return Result.success()\n\n\napp.include_router(student_course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler, courseApi, studentApi, fileApi, studentCourseApi\n```\n\n在`/servie`下创建一个`studentCourseService.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_\n\nfrom common.utils import set_attrs\nfrom exception.customException import StudentCourseExistException\nfrom model import Session\nfrom model.studentCourse import StudentCourseCreate, StudentCourse\n\n\nclass StudentCourseService:\n\n    @staticmethod\n    def add_student_course(student_course: StudentCourseCreate, db_session: Session):\n        query = select(StudentCourse).where(\n            and_(StudentCourse.studentId == student_course.studentId,\n                 StudentCourse.courseId == student_course.courseId))\n        exist_student_course: StudentCourse = db_session.execute(query).scalar()\n        if exist_student_course:\n            raise StudentCourseExistException(\"课程已选过\")\n        new_student_course = StudentCourse()\n        set_attrs(new_student_course, jsonable_encoder(student_course))\n        db_session.add(new_student_course)\n        db_session.commit()\n        return new_student_course\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom model import Base\nfrom model.student import Student\n\n\nclass StudentCourse(Base):\n    __tablename__ = \"student_course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, nullable=False)\n\n\n\nclass StudentCourseBase(BaseModel):\n    name: str\n    number: str\n    studentId: int\n    courseId: int\n\n\nclass StudentCourseCreate(StudentCourseBase):\n    pass\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass UserExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass FileNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass StudentCourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\\n    StudentCourseExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserExistException)\nasync def user_exist_exception_handler(request: Request, exc: UserExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(FileNotFoundException)\nasync def file_not_found_exception_handler(request: Request, exc: FileNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(StudentCourseExistException)\nasync def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710664237416-830483ff-a709-499c-9d8f-f2f60a902e86.png)\n\n查看数据库有无数据插入\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710664237390-1da0ccbf-e229-4afe-87a8-487bff6f3074.png)\n\n## 管理员/学生查看已选课程\n\n这个需要做到：\n\n- 学生只看自己的\n- 管理员看全部的\n\n### 前端\n\n学生选课页面，将`CourseList.vue`复制粘贴一下作为`StudentCourse.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    name: data.name,\n    number: data.number,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/studentCourse/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  load();\n};\n\nconst del = (id) => {};\n</script>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"student\",\n          name: \"Student\",\n          component: () => import(\"@/views/manager/Student.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"person\",\n          name: \"Person\",\n          component: () => import(\"@/views/manager/Person.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"courseList\",\n          name: \"CourseList\",\n          component: () => import(\"@/views/manager/CourseList.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"studentCourse\",\n          name: \"StudentCourse\",\n          component: () => import(\"@/views/manager/StudentCourse.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          :src=\"\n            user.avatar ||\n            'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'\n          \"\n          alt=\"\"\n          style=\"width: 40px; height: 40px; border-radius: 50%\"\n        />\n        <span style=\"margin-left: 5px\">{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\" v-if=\"user.role === 'ADMIN'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n            <el-menu-item index=\"/courseList\" v-if=\"user.role === 'STUDENT'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>学生选课</span>\n            </el-menu-item>\n            <el-menu-item index=\"/studentCourse\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>选课记录</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\" v-if=\"user.role === 'STUDENT'\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.studentCourse import StudentCourseCreate, StudentCourseSearch\nfrom service.studentCourseService import StudentCourseService\n\nstudent_course_router = APIRouter(prefix=\"/studentCourse\")\n\n\n@student_course_router.post(\"/add\", response_model=ResultModel)\nasync def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)):\n    StudentCourseService.add_student_course(student_course, db_session)\n    return Result.success()\n\n\n@student_course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Student name\"),\n                      number: Optional[str] = Query(None, description=\"Student number\"),\n                      studentId: Optional[str] = Query(None, description=\"Student id\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    student_course_search = StudentCourseSearch(name=name, number=number, studentId=studentId)\n    student_list = StudentCourseService.select_page(student_course_search, db_session)\n    return Result.success(pageInfo.of(student_list))\n\n\napp.include_router(student_course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_, asc\n\nfrom common.utils import set_attrs\nfrom exception.customException import StudentCourseExistException\nfrom model import Session\nfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearch\n\n\nclass StudentCourseService:\n\n    @staticmethod\n    def add_student_course(student_course: StudentCourseCreate, db_session: Session):\n        query = select(StudentCourse).where(\n            and_(StudentCourse.studentId == student_course.studentId,\n                 StudentCourse.courseId == student_course.courseId))\n        exist_student_course: StudentCourse = db_session.execute(query).scalar()\n        if exist_student_course:\n            raise StudentCourseExistException(\"课程已选过\")\n        new_student_course = StudentCourse()\n        set_attrs(new_student_course, jsonable_encoder(student_course))\n        db_session.add(new_student_course)\n        db_session.commit()\n        return new_student_course\n\n    @staticmethod\n    def select_page(student_course_search: StudentCourseSearch, db_session: Session):\n        query = select(StudentCourse).order_by(asc(StudentCourse.id))\n        if student_course_search.name:\n            query = query.where(StudentCourse.name.like(f\"%{student_course_search.name}%\"))\n        if student_course_search.number:\n            query = query.where(StudentCourse.number.like(f\"%{student_course_search.number}%\"))\n        if student_course_search.studentId:\n            query = query.where(StudentCourse.studentId == student_course_search.studentId)\n        result = db_session.execute(query).scalars().all()\n        return result\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\nfrom model.student import Student\n\n\nclass StudentCourse(Base):\n    __tablename__ = \"student_course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, nullable=False)\n\n\n\nclass StudentCourseBase(BaseModel):\n    name: str\n    number: str\n    studentId: int\n    courseId: int\n\n\nclass StudentCourseCreate(StudentCourseBase):\n    pass\n\n\nclass StudentCourseSearch(BaseModel):\n    name: str | None\n    number: str | None\n    studentId: int | None\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710665807707-fc4d3521-f29e-4877-84af-54403312cd59.png)\n\n从学生用户这里来看是挺好的，但是如果，多插入几个学生选课\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710665844621-a038df5d-50fd-4645-83c4-baa6528d179c.png)\n\n从管理员的角度来看是这样的，并不能直接看出是哪位学生选了这门课\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710665872322-80597b11-2899-4281-991d-8ad3e6be1187.png)\n\n### 修改\n\n我们给显示选课记录的这个表格，加一列`学生姓名`\n\n学生选课表就需要追加一个表的关联，去关联一下学生表获取学生姓名\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom model import Base\nfrom model.student import Student\n\n\nclass StudentCourse(Base):\n    __tablename__ = \"student_course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, ForeignKey('student.id'), nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, nullable=False)\n\n    student: Mapped[Student] = relationship(lazy=False, backref=\"student_course\")\n\n\nclass StudentCourseBase(BaseModel):\n    name: str\n    number: str\n    studentId: int\n    courseId: int\n\n\nclass StudentCourseCreate(StudentCourseBase):\n    pass\n\n\nclass StudentCourseSearch(BaseModel):\n    name: str | None\n    number: str | None\n    studentId: int | None\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_, asc\n\nfrom common.utils import set_attrs\nfrom exception.customException import StudentCourseExistException\nfrom model import Session\nfrom model.student import Student\nfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearch\n\n\nclass StudentCourseService:\n\n    @staticmethod\n    def add_student_course(student_course: StudentCourseCreate, db_session: Session):\n        query = select(StudentCourse).where(\n            and_(StudentCourse.studentId == student_course.studentId,\n                 StudentCourse.courseId == student_course.courseId))\n        exist_student_course: StudentCourse = db_session.execute(query).scalar()\n        if exist_student_course:\n            raise StudentCourseExistException(\"课程已选过\")\n        new_student_course = StudentCourse()\n        set_attrs(new_student_course, jsonable_encoder(student_course))\n        db_session.add(new_student_course)\n        db_session.commit()\n        return new_student_course\n\n    @staticmethod\n    def select_page(student_course_search: StudentCourseSearch, db_session: Session):\n        query = select(StudentCourse, Student).join(StudentCourse.student).order_by(asc(StudentCourse.id))\n        if student_course_search.name:\n            query = query.where(StudentCourse.name.like(f\"%{student_course_search.name}%\"))\n        if student_course_search.number:\n            query = query.where(StudentCourse.number.like(f\"%{student_course_search.number}%\"))\n        if student_course_search.studentId:\n            query = query.where(StudentCourse.studentId == student_course_search.studentId)\n        result = db_session.execute(query).scalars().all()\n        return result\n```\n\n然后给前端这块 数据显示加一列，同时得是管理员的时候才显示这么一列\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    name: data.name,\n    number: data.number,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/studentCourse/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  load();\n};\n\nconst del = (id) => {};\n</script>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710666586302-ce81afa4-106c-421b-8862-bb589eabdc2b.png)\n\n## 学生选课删除\n\n现在实现删除学生所选课程\n\n### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    name: data.name,\n    number: data.number,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/studentCourse/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  load();\n};\n\nconst del = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/studentCourse/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"操作成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.studentCourse import StudentCourseCreate, StudentCourseSearch\nfrom service.studentCourseService import StudentCourseService\n\nstudent_course_router = APIRouter(prefix=\"/studentCourse\")\n\n\n@student_course_router.post(\"/add\", response_model=ResultModel)\nasync def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)):\n    StudentCourseService.add_student_course(student_course, db_session)\n    return Result.success()\n\n\n@student_course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Student name\"),\n                      number: Optional[str] = Query(None, description=\"Student number\"),\n                      studentId: Optional[str] = Query(None, description=\"Student id\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    student_course_search = StudentCourseSearch(name=name, number=number, studentId=studentId)\n    student_list = StudentCourseService.select_page(student_course_search, db_session)\n    return Result.success(pageInfo.of(student_list))\n\n\n@student_course_router.delete(\"/delete/{id}\", response_model=ResultModel)\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    StudentCourseService.delete_by_id(id, db_session)\n    return Result.success()\n\n\napp.include_router(student_course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_, asc\n\nfrom common.utils import set_attrs\nfrom exception.customException import StudentCourseExistException\nfrom model import Session\nfrom model.student import Student\nfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearch\n\n\nclass StudentCourseService:\n\n    @staticmethod\n    def add_student_course(student_course: StudentCourseCreate, db_session: Session):\n        query = select(StudentCourse).where(\n            and_(StudentCourse.studentId == student_course.studentId,\n                 StudentCourse.courseId == student_course.courseId))\n        exist_student_course: StudentCourse = db_session.execute(query).scalar()\n        if exist_student_course:\n            raise StudentCourseExistException(\"课程已选过\")\n        new_student_course = StudentCourse()\n        set_attrs(new_student_course, jsonable_encoder(student_course))\n        db_session.add(new_student_course)\n        db_session.commit()\n        return new_student_course\n\n    @staticmethod\n    def select_page(student_course_search: StudentCourseSearch, db_session: Session):\n        query = select(StudentCourse, Student).join(StudentCourse.student).order_by(asc(StudentCourse.id))\n        if student_course_search.name:\n            query = query.where(StudentCourse.name.like(f\"%{student_course_search.name}%\"))\n        if student_course_search.number:\n            query = query.where(StudentCourse.number.like(f\"%{student_course_search.number}%\"))\n        if student_course_search.studentId:\n            query = query.where(StudentCourse.studentId == student_course_search.studentId)\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def delete_by_id(id, db_session):\n        exist_student_course: StudentCourse = check_student_course_exist(id, db_session)\n        db_session.delete(exist_student_course)\n        db_session.commit()\n        return exist_student_course\n\n\ndef check_student_course_exist(student_course_id: int, db_session: Session):\n    query = select(StudentCourse).where(StudentCourse.id == student_course_id)\n    exist_student_course: StudentCourse = db_session.execute(query).scalar()\n    if not exist_student_course:\n        raise StudentCourseNotExistException(\"选课记录不存在\")\n    return exist_student_course\n```\n\n这种写法很冗余，大家自己想想可以怎么优化，我就不改了，或者后面有空改\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass UserExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass FileNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass StudentCourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass StudentCourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\\n    StudentCourseExistException, StudentCourseNotExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserExistException)\nasync def user_exist_exception_handler(request: Request, exc: UserExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(FileNotFoundException)\nasync def file_not_found_exception_handler(request: Request, exc: FileNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(StudentCourseExistException)\nasync def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(StudentCourseNotExistException)\nasync def student_course_not_exist_exception_handler(request: Request, exc: StudentCourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n```\n\n### 测试\n\n管理员删除\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710667558071-b682345f-f090-48e5-9525-c8457b288a29.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710667586667-08596238-c09f-4451-87ab-d7e2916f3641.png)\n\n学生自己删除\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710667608790-265986c5-0fc2-436f-b690-f6c20b7fd3ce.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710667626926-b7a0eb77-cc59-47cb-a367-70740cd6d6a1.png)\n\n---\n\n> 更新: 2024-05-26 18:51:54  \n> 原文: <https://www.yuque.com/zacharyblock/iacda/hyi625azhg5dant9>\n","tags":["Python","Vue3","FastAPI","实战"],"categories":["FastAPI入门"]},{"title":"个人页面","url":"/blog/3275320888/","content":"\n# 个人页面\n\n## 文件上传与下载\n\n### 依赖包\n\n需要安装一下`werkzeug`这个包\n\n```plain\nfastapi[all]\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\npyjwt\npasslib[bcrypt]\nwerkzeug\n```\n\n### fileApi\n\n为了实现头像上传的功能创建一个新的`fileApi.py`\n\n注意：\n\n- StreamingResponse 引得是`from fastapi.responses import StreamingResponse`\n- secure_filename 引得是`from werkzeug.utils import secure_filename`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport mimetypes\nimport os\nfrom datetime import datetime\nfrom fastapi.encoders import jsonable_encoder\nfrom werkzeug.utils import secure_filename\nfrom fastapi.responses import StreamingResponse\nfrom fastapi import APIRouter, UploadFile\n\nfrom api import app\nfrom common.constant import HOST, PORT\nfrom common.profile import Profile\nfrom common.result import ResultModel, Result\nfrom exception.customException import FileNotFoundException\n\nfile_router = APIRouter(prefix=\"/files\")\n\n\n@file_router.post(\"/upload\", response_model=ResultModel)\nasync def upload(file: UploadFile):\n    original_filename = secure_filename(file.filename)\n    timestamp = int(datetime.now().timestamp())\n    unique_filename = f\"{timestamp}_{original_filename}\"\n    file_save_path = Profile.get_files_path()\n\n    # 创建保存文件的完整路径\n    file_final_path = file_save_path.joinpath(unique_filename)\n\n    # 将文件保存到指定位置\n    with open(file_final_path, 'wb') as buffer_file:\n        content = await file.read()\n        buffer_file.write(content)\n\n    # 构建文件访问URL\n    url = f\"http://{HOST}:{PORT}/files/download?filename={unique_filename}\"\n    return Result.success(jsonable_encoder({\"url\": url}))\n\n\n@file_router.get(\"/download\")\nasync def download(filename: str):\n    file_save_path = Profile.get_files_path()\n    file_path = file_save_path.joinpath(filename)\n\n    if not file_path.exists():\n        raise FileNotFoundException(\"文件不存在\")\n    # 用于触发下载文件的\n    # return FileResponse(file_path, media_type='image/png', filename=filename)\n\n    mime_type, _ = mimetypes.guess_type(file_path)\n\n    # 创建一个StreamingResponse，以便流式传输大文件，同时设置正确的MIME类型\n    response = StreamingResponse(\n        open(file_path, 'rb'),\n        media_type=mime_type,\n    )\n    # 不设置Content-Disposition，避免浏览器触发下载\n    return response\n\n\napp.include_router(file_router)\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler, courseApi, studentApi, fileApi\n```\n\n### Profile\n\n在项目目录`/common`下创建一个`profile.py`，用于获取项目目录路径\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom pathlib import Path\n\n\nclass Profile:\n    __file_path = None\n\n    @staticmethod\n    def get_files_path():\n        project_path = Path(__file__).parent.parent  # 获取项目根目录\n        file_path = project_path.joinpath(\"files\")\n        if not file_path.exists():\n            file_path.mkdir(parents=True)\n        Profile.__file_path = file_path\n        return file_path\n\n```\n\n### 自定义异常\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass UserExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass FileNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserExistException)\nasync def user_exist_exception_handler(request: Request, exc: UserExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(FileNotFoundException)\nasync def file_not_found_exception_handler(request: Request, exc: FileNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n```\n\n### 测试\n\n使用 postman 测试一下\n\n#### 上传\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710616492511-d448efde-cc0e-4231-925e-d04f54841c77.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710616565148-33a0b257-5782-41fb-8100-e9c5ccfeab65.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710616639614-cc34bcbc-102d-4887-9134-35122935f222.png)\n\n#### 下载\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710616608908-20c654d8-30b2-4645-aea1-490ab9428df0.png)\n\n## 完善图片上传\n\n修改一下`Student.vue`头像上传的功能\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.username\"\n        placeholder=\"请输入要查询的学生学号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的学生姓名\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"username\" label=\"学生学号\" />\n          <el-table-column prop=\"name\" label=\"学生姓名\" />\n          <el-table-column prop=\"gender\" label=\"性别\" />\n          <el-table-column prop=\"phone\" label=\"手机号\" />\n          <el-table-column prop=\"birthday\" label=\"出生日期\" />\n\n          <el-table-column prop=\"avatar\" label=\"头像\">\n            <template #default=\"scope\">\n              <el-image\n                v-if=\"scope.row.avatar\"\n                :src=\"scope.row.avatar\"\n                :preview-src-list=\"[scope.row.avatar]\"\n                style=\"width: 40px; height: 40px\"\n              ></el-image>\n            </template>\n          </el-table-column>\n\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                >编辑</el-button\n              >\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"handleDelete(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"学生信息\">\n      <el-form\n        :model=\"data.form\"\n        :rules=\"rules\"\n        ref=\"formRef\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"学生学号\" prop=\"username\">\n          <el-input v-model=\"data.form.username\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input v-model=\"data.form.password\" autocomplete=\"off\" disabled />\n        </el-form-item>\n        <el-form-item label=\"学生姓名\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"性别\">\n          <el-radio-group v-model=\"data.form.gender\">\n            <el-radio label=\"男\"></el-radio>\n            <el-radio label=\"女\"></el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"手机号\">\n          <el-input v-model=\"data.form.phone\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"出生日期\">\n          <el-date-picker\n            format=\"YYYY-MM-DD\"\n            value-format=\"YYYY-MM-DD\"\n            v-model=\"data.form.birthday\"\n          ></el-date-picker>\n        </el-form-item>\n        <el-form-item label=\"头像\">\n          <el-upload\n            action=\"http://localhost:9090/files/upload\"\n            list-type=\"picture\"\n            :on-success=\"handleImgUploadSuccess\"\n          >\n            <el-button type=\"primary\">上传头像 </el-button>\n          </el-upload>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  username: \"\",\n  name: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: { password: \"123456\" },\n});\n\nconst load = () => {\n  request\n    .get(\"/student/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        username: data.username,\n        name: data.name,\n      },\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.username = \"\";\n  data.name = \"\";\n  load();\n};\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入学生学号\", trigger: \"blur\" }],\n  password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n});\n\nconst formRef = ref();\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = { password: \"123456\" };\n};\n\nconst save = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      request\n        .request({\n          url: data.form.id ? \"/student/update\" : \"/student/add\",\n          method: data.form.id ? \"put\" : \"post\",\n          data: data.form,\n        })\n        .then((res) => {\n          if (res.code === \"200\") {\n            ElMessage.success(\"操作成功\");\n            data.formVisible = false;\n            load();\n          } else {\n            ElMessage.error(res.msg);\n          }\n        })\n        .catch((err) => {\n          if (err.response?.data?.code === \"401\") {\n            localStorage.removeItem(\"student-user\");\n          }\n          ElMessage.error(err.response?.data?.msg || err.message);\n        });\n    }\n  });\n};\n\nconst handleEdit = (row) => {\n  data.form = JSON.parse(JSON.stringify(row));\n  data.formVisible = true;\n  data.form.password = \"123456\";\n};\n\nconst handleDelete = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/student/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"删除成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\nconst handleImgUploadSuccess = (res) => {\n  data.form.avatar = res.data.url;\n};\n</script>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710617080504-595e3da2-e366-40a1-8c95-11cf4ac4715a.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710617244456-eed99781-03fc-4a41-94fe-1ac67ea49a5c.png)\n\n## 个人资料\n\n在项目目录`/manager`文件夹下面创建一个`Person.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"width: 50%; padding: 40px\">\n      <el-form\n        :model=\"data.form\"\n        ref=\"formRef\"\n        :rules=\"rules\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 40px\"\n      >\n        <el-form-item label=\"头像\">\n          <el-upload\n            class=\"avatar-uploader\"\n            action=\"http://localhost:9090/files/upload\"\n            :show-file-list=\"false\"\n            :on-success=\"handleImgUploadSuccess\"\n          >\n            <img\n              v-if=\"data.form.avatar\"\n              :src=\"data.form.avatar\"\n              class=\"avatar\"\n            />\n            <el-icon v-else class=\"avatar-uploader-icon\">\n              <Plus />\n            </el-icon>\n          </el-upload>\n        </el-form-item>\n        <el-form-item label=\"学生学号\" prop=\"username\">\n          <el-input v-model=\"data.form.username\" autocomplete=\"off\" disabled />\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input\n            show-password\n            v-model=\"data.form.password\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n        <el-form-item label=\"学生姓名\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"性别\">\n          <el-radio-group v-model=\"data.form.gender\">\n            <el-radio label=\"男\"></el-radio>\n            <el-radio label=\"女\"></el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"手机号\">\n          <el-input v-model=\"data.form.phone\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"出生日期\">\n          <el-date-picker\n            format=\"YYYY-MM-DD\"\n            value-format=\"YYYY-MM-DD\"\n            v-model=\"data.form.birthday\"\n          ></el-date-picker>\n        </el-form-item>\n        <el-form-item style=\"padding-left: 60%\">\n          <el-button type=\"primary\" @click=\"update\">保存</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive } from \"vue\";\nimport { Plus } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\nimport router from \"@/router\";\n\nconst data = reactive({\n  form: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n});\n\nif (data.form) {\n  data.form.password = \"\";\n}\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入账号\", trigger: \"blur\" }],\n  password: [\n    {\n      required: true,\n      message: \"修改个人资料必须重新输入密码\",\n      trigger: \"blur\",\n    },\n  ],\n});\n\nconst update = () => {\n  request\n    .put(\"/student/update\", data.form)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        router.push(\"/login\");\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\nconst handleImgUploadSuccess = (res) => {\n  data.form.avatar = res.data;\n};\n</script>\n\n<style>\n.avatar-uploader .el-upload {\n  border: 1px dashed #d9d9d9;\n  border-radius: 6px;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n}\n\n.avatar-uploader .el-upload:hover {\n  border-color: #409eff;\n}\n\n.el-icon.avatar-uploader-icon {\n  font-size: 28px;\n  color: #8c939d;\n  width: 100px;\n  height: 100px;\n  line-height: 100px;\n  text-align: center;\n}\n\n.avatar {\n  width: 100px;\n  height: 100px;\n  display: block;\n}\n</style>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"student\",\n          name: \"Student\",\n          component: () => import(\"@/views/manager/Student.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"person\",\n          name: \"Person\",\n          component: () => import(\"@/views/manager/Person.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          :src=\"\n            user.avatar ||\n            'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'\n          \"\n          alt=\"\"\n          style=\"width: 40px; height: 40px; border-radius: 50%\"\n        />\n        <span style=\"margin-left: 5px\">{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\" v-if=\"user.role === 'STUDENT'\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710617861421-2875f037-9f2c-4363-8e02-c60dc3e8df63.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710619302880-4b22bf47-85be-4ba5-aa25-68c49b706f28.png)\n\n---\n","tags":["Python","Vue3","FastAPI","实战"],"categories":["FastAPI入门"]},{"title":"学生管理","url":"/blog/837251381/","content":"\n# 学生管理\n\n## 数据库\n\n先在数据库中创建一张学生信息表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710448899467-1a869fa8-d221-4995-a81e-87a7de808e74.png)\n\n## Student 实体类定义\n\n在`/model`的包下创建一个`student.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Student(Base):\n    __tablename__ = \"student\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    phone: Mapped[str] = mapped_column(String(255), nullable=False)\n    gender: Mapped[str] = mapped_column(String(255), nullable=False)\n    birthday: Mapped[str] = mapped_column(String(255), nullable=False)\n    avatar: Mapped[str] = mapped_column(String(255), nullable=False\n```\n\n## 学生登录\n\n### 前端-登录页面\n\n学生登录和 admin 的登录，我们复用同一个前端页面和后端接口，所以需要加一个`role`用以区分是 admin 登录了还是普通的 student 登录了；同时，不同用户进入页面之后。看到的内容应该是不同的。\n\n```vue\n<template>\n  <div>\n    <div class=\"login-container\">\n      <div style=\"width: 420px\" class=\"login-box\">\n        <div class=\"title\">学生信息管理系统 - 登录</div>\n        <el-form :model=\"data.form\" ref=\"formRef\" :rules=\"rules\">\n          <el-form-item prop=\"username\">\n            <el-input\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Avatar\"\n              v-model=\"data.form.username\"\n              placeholder=\"请输入账号\"\n            />\n          </el-form-item>\n          <el-form-item prop=\"password\">\n            <el-input\n              show-password\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Lock\"\n              v-model=\"data.form.password\"\n              placeholder=\"请输入密码\"\n            />\n          </el-form-item>\n          <el-form-item prop=\"role\">\n            <el-radio-group size=\"large\" v-model=\"data.form.role\">\n              <el-radio-button\n                style=\"margin-left: 70px\"\n                label=\"管理员\"\n                value=\"ADMIN\"\n              />\n              <el-radio-button\n                style=\"margin-left: 50px\"\n                label=\"学生\"\n                value=\"STUDENT\"\n              />\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item>\n            <el-button\n              type=\"primary\"\n              style=\"width: 100%;font-size: 18px\"\n              plain\n              @click=\"login\"\n              >登 录</el-button\n            >\n          </el-form-item>\n        </el-form>\n        <div style=\"margin-top:35px;text-align: right;font-size: 15px\">\n          还没有账号？请<a href=\"/register\">注册</a>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from \"vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\nimport router from \"@/router\";\n\nconst data = reactive({\n  form: { role: \"ADMIN\" },\n});\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入账号\", trigger: \"blur\" }],\n  password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n});\n\nconst formRef = ref();\n\nconst login = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      request\n        .post(\"/login\", data.form)\n        .then((res) => {\n          if (res.code === \"200\") {\n            localStorage.setItem(\"student-user\", JSON.stringify(res.data));\n            ElMessage.success(\"登录成功\");\n            router.push(\"/home\");\n          } else {\n            ElMessage.error(res.msg);\n          }\n        })\n        .catch((err) => {\n          ElMessage.error(err.response?.data?.msg || err.message);\n        });\n    }\n  });\n};\n</script>\n\n<style scoped>\n.login-container {\n  min-height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-image: url(\"@/assets/imgs/login_background.png\");\n  background-size: cover;\n}\n\n.login-box {\n  background-color: rgb(255, 255, 255, 50%);\n  box-shadow: 0 0 10px rgba(84, 221, 245, 0.41);\n  padding: 30px;\n}\n\n.title {\n  font-weight: bold;\n  font-size: 30px;\n  text-align: center;\n  margin-bottom: 35px;\n}\n</style>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710529973649-8285d66a-b8b1-4b28-97fd-7feb1fcf9f0f.png)\n\n### 后端-管理员/学生登录的 api 接口\n\n管理员和学生的登录复用同一个 api 接口\n\n所以需要修改一下之前的登录逻辑\n\n#### Account\n\n在`/model`下创建一个`account.py`，接收前端传递来的账号、密码、角色\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\n\n\nclass AccountLogin(BaseModel):\n    username: str\n    password: str\n    role: str\n\n\nclass AccountLoginResponse:\n    id: int\n    username: str\n    name: str\n    role: str\n    token: str\n```\n\n#### Student\n\n给 student 表追加`role`字段\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710531077648-4789f2d8-9189-43a5-80bf-1223b30a86c6.png)\n\n给`/model/student.py`更新一下\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Student(Base):\n    __tablename__ = \"student\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    phone: Mapped[str] = mapped_column(String(255), nullable=False)\n    gender: Mapped[str] = mapped_column(String(255), nullable=False)\n    birthday: Mapped[str] = mapped_column(String(255), nullable=False)\n    avatar: Mapped[str] = mapped_column(String(255), nullable=False)\n    role: Mapped[str] = mapped_column(String(255), nullable=False)\n```\n\n#### Admin\n\n给 admin 表追加`name`字段和`role`字段\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710531287748-bbeb3fca-e7a2-4cff-bce6-5e0ce13b2678.png)\n\n给`/model/admin.py`更新一下\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport bcrypt\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Admin(Base):\n    __tablename__ = \"admin\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    role: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass AdminModel(BaseModel):\n    username: str\n    password: str\n\n\nclass AdminLoginResponse(BaseModel):\n    id: int\n    username: str\n    token: str\n```\n\n#### Service\n\n在项目目录`/service`下创建一个`studentService.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select\n\nfrom common.auth import auth_handler\nfrom common.utils import set_attrs\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.account import AccountLogin, AccountLoginResponse\nfrom model.student import Student\n\n\nclass StudentService:\n    @staticmethod\n    def login(account: AccountLogin, db_session: Session) -> AccountLoginResponse:\n        query = select(Student).where(Student.username == account.username)\n        exist_student: Student = db_session.execute(query).scalars().first()\n        if not exist_student:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(account.password, exist_student.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        account_login_response = AccountLoginResponse()\n        set_attrs(account_login_response, jsonable_encoder(exist_student))\n        account_login_response.token = auth_handler.encode_token(exist_student.id)\n        return account_login_response\n```\n\n然后修改`adminService.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select\n\nfrom common.auth import auth_handler\nfrom common.utils import set_attrs\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.account import AccountLoginResponse, AccountLogin\nfrom model.admin import Admin\n\n\nclass AdminService:\n    @staticmethod\n    def login(account: AccountLogin, db_session: Session) -> AccountLoginResponse:\n        query = select(Admin).where(Admin.username == account.username)\n        exist_admin: Admin = db_session.execute(query).scalars().first()\n        if not exist_admin:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(account.password, exist_admin.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        account_login_response = AccountLoginResponse()\n        set_attrs(account_login_response, jsonable_encoder(exist_admin))\n        account_login_response.token = auth_handler.encode_token(exist_admin.id)\n        return account_login_response\n```\n\n#### Role\n\n创建一个枚举类 Role，用以区分学生和管理员\n\n在`/common`下创建一个`Enum.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\n\n\nclass Role(str, Enum):\n    ADMIN = \"管理员\"\n    STUDENT = \"学生\"\n```\n\n#### API\n\n然后修改一下登录的 api\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import Depends\nfrom fastapi.encoders import jsonable_encoder\n\nfrom api import app\nfrom common.Enum import Role\nfrom common.result import Result, ResultModel\nfrom model import Session, get_db_session\nfrom model.account import AccountLogin\nfrom service.adminService import AdminService\nfrom service.studentService import StudentService\n\n\n@app.post(\"/login\", response_model=ResultModel)\nasync def login(account: AccountLogin, db_session: Session = Depends(get_db_session)):\n    if Role.ADMIN.name.__eq__(account.role):\n        db_account = AdminService.login(account, db_session)\n    elif Role.STUDENT.name.__eq__(account.role):\n        db_account = StudentService.login(account, db_session)\n    else:\n        return Result.error(\"角色错误\")\n    return Result.success(jsonable_encoder(db_account))\n```\n\n## 学生注册\n\n### 前端-注册页面\n\n写一下学生的注册页面，这里管理员就不参与注册了\n\n在前端项目目录`/views`下创建一个`Register.vue`（这里我偷懒了，没有替换注册页的背景图，大家可以自行替换）\n\n```vue\n<template>\n  <div>\n    <div class=\"register-container\">\n      <div style=\"width: 400px\" class=\"register-box\">\n        <div class=\"title\">学生信息管理系统 - 注册</div>\n        <el-form :model=\"data.form\" ref=\"formRef\" :rules=\"rules\">\n          <el-form-item prop=\"username\">\n            <el-input\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"User\"\n              v-model=\"data.form.username\"\n              placeholder=\"请输入账号\"\n            />\n          </el-form-item>\n          <el-form-item prop=\"password\">\n            <el-input\n              show-password\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Lock\"\n              v-model=\"data.form.password\"\n              placeholder=\"请输入密码\"\n            />\n          </el-form-item>\n          <el-form-item>\n            <el-button\n              type=\"primary\"\n              style=\"width: 100%\"\n              plain\n              @click=\"register\"\n              >注 册</el-button\n            >\n          </el-form-item>\n        </el-form>\n        <div style=\"margin-top:30px;text-align: right\">\n          已有账号？请直接<a href=\"/login\">登录</a>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from \"vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\nimport router from \"@/router\";\n\nconst data = reactive({\n  form: {},\n});\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入账号\", trigger: \"blur\" }],\n  password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n});\n\nconst formRef = ref();\n\nconst register = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      request\n        .post(\"/register\", data.form)\n        .then((res) => {\n          if (res.code === \"200\") {\n            ElMessage.success(\"注册成功\");\n            router.push(\"/login\");\n          } else {\n            ElMessage.error(res.msg);\n          }\n        })\n        .catch((err) => {\n          ElMessage.error(err.response?.data?.msg || err.message);\n        });\n    }\n  });\n};\n</script>\n\n<style scoped>\n.register-container {\n  min-height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-image: url(\"@/assets/imgs/login_background.png\");\n  background-size: cover;\n}\n\n.register-box {\n  background-color: rgb(255, 255, 255, 50%);\n  box-shadow: 0 0 10px rgba(84, 221, 245, 0.41);\n  padding: 30px;\n}\n\n.title {\n  font-weight: bold;\n  font-size: 30px;\n  text-align: center;\n  margin-bottom: 35px;\n}\n</style>\n```\n\n添加一下注册页面的路由\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710604627683-dfd384fa-3167-419f-a922-f52d2d61a218.png)\n\n### 后端-注册的 api 接口\n\n接下来实现一下，后端注册的逻辑\n\n#### API\n\n因为这个注册只是给学生使用的，在项目目录`/api`下新建一个`studentApi.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import Depends\n\nfrom api import app\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.account import AccountRegister\nfrom service.studentService import StudentService\n\n\n@app.post(\"/register\", response_model=ResultModel)\nasync def register(account: AccountRegister, db_session: Session = Depends(get_db_session)):\n    StudentService.register(account, db_session)\n    return Result.success()\n```\n\n添加一下 studentApi\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler, courseApi, studentApi\n```\n\n给`account.py`添加注册的请求体\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\n\n\nclass AccountLogin(BaseModel):\n    username: str\n    password: str\n    role: str\n\n\nclass AccountLoginResponse:\n    id: int\n    username: str\n    name: str\n    role: str\n    token: str\n\n\nclass AccountRegister(BaseModel):\n    username: str\n    password: str\n```\n\n#### Service\n\n实现一下注册的 service\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select\n\nfrom common.Enum import Role\nfrom common.auth import auth_handler\nfrom common.utils import set_attrs\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, UserExistException\nfrom model import Session\nfrom model.account import AccountLogin, AccountLoginResponse, AccountRegister\nfrom model.student import Student\n\n\nclass StudentService:\n    @staticmethod\n    def login(account: AccountLogin, db_session: Session) -> AccountLoginResponse:\n        query = select(Student).where(Student.username == account.username)\n        exist_student: Student = db_session.execute(query).scalars().first()\n        if not exist_student:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(account.password, exist_student.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        account_login_response = AccountLoginResponse()\n        set_attrs(account_login_response, jsonable_encoder(exist_student))\n        account_login_response.token = auth_handler.encode_token(exist_student.id)\n        return account_login_response\n\n    @staticmethod\n    def register(account: AccountRegister, db_session: Session):\n        query = select(Student).where(Student.username == account.username)\n        exist_student = db_session.execute(query).scalars().first()\n        if exist_student:\n            raise UserExistException(\"账号已存在\")\n\n        new_student = Student()\n        account.password = auth_handler.get_password_hash(account.password)\n        set_attrs(new_student, jsonable_encoder(account))\n        if new_student.name is None:\n            new_student.name = account.username\n        new_student.role = Role.STUDENT.name\n\n        db_session.add(new_student)\n        db_session.commit()\n        return new_student\n```\n\n添加自定义异常\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass UserExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException, UserExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserExistException)\nasync def user_exist_exception_handler(request: Request, exc: UserExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n```\n\n## 登录/注册测试\n\n现在测试一下学生登录和注册的逻辑\n\n### 学生注册\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710606986452-eaa412a2-43ab-4d6d-90bf-4143eae2ff77.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710606994269-e22569b7-b4d5-447b-a361-8c08b84ca44e.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710607036436-aa5689b3-3ece-4802-9978-bb4db123c161.png)\n\n### 学生登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710607063704-884a65f3-36c4-4487-8c43-b3d32c8c47ac.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710607072554-7fccd671-d1c1-46d1-b3d0-7970068664f6.png)\n\n现在登录进来了，但是右上角的显示不太对，等下改改\n\n### 管理员登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710607176805-d6ca2dae-fc34-476c-b3e2-c80338393074.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710607184624-4ba6ad15-b071-46e2-8b54-66c5c3535e51.png)\n\n## 学生管理\n\n这块咱们做个设定，当管理员新增用户、替用户修改用户数据，密码必须重新设置为初始密码-123456\n\n### 前端\n\n复制粘贴一下之前的`Course.vue`，命名为`Student.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.username\"\n        placeholder=\"请输入要查询的学生学号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的学生姓名\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"username\" label=\"学生学号\" />\n          <el-table-column prop=\"name\" label=\"学生姓名\" />\n          <el-table-column prop=\"gender\" label=\"性别\" />\n          <el-table-column prop=\"phone\" label=\"手机号\" />\n          <el-table-column prop=\"birthday\" label=\"出生日期\" />\n          <el-table-column prop=\"avatar\" label=\"头像\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                >编辑</el-button\n              >\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"handleDelete(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"学生信息\">\n      <el-form\n        :model=\"data.form\"\n        :rules=\"rules\"\n        ref=\"formRef\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"学生学号\" prop=\"username\">\n          <el-input v-model=\"data.form.username\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input v-model=\"data.form.password\" autocomplete=\"off\" disabled />\n        </el-form-item>\n        <el-form-item label=\"学生姓名\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"性别\">\n          <el-radio-group v-model=\"data.form.gender\">\n            <el-radio label=\"男\"></el-radio>\n            <el-radio label=\"女\"></el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"手机号\">\n          <el-input v-model=\"data.form.phone\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"出生日期\">\n          <el-date-picker\n            format=\"YYYY-MM-DD\"\n            value-format=\"YYYY-MM-DD\"\n            v-model=\"data.form.birthday\"\n          ></el-date-picker>\n        </el-form-item>\n        <el-form-item label=\"头像\">\n          <el-input v-model=\"data.form.avatar\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  username: \"\",\n  name: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: { password: \"123456\" },\n});\n\nconst load = () => {\n  request\n    .get(\"/student/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        username: data.username,\n        name: data.name,\n      },\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.username = \"\";\n  data.name = \"\";\n  load();\n};\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入学生学号\", trigger: \"blur\" }],\n  password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n});\n\nconst formRef = ref();\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = { password: \"123456\" };\n};\n\nconst save = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      request\n        .request({\n          url: data.form.id ? \"/student/update\" : \"/student/add\",\n          method: data.form.id ? \"put\" : \"post\",\n          data: data.form,\n        })\n        .then((res) => {\n          if (res.code === \"200\") {\n            ElMessage.success(\"操作成功\");\n            data.formVisible = false;\n            load();\n          } else {\n            ElMessage.error(res.msg);\n          }\n        })\n        .catch((err) => {\n          if (err.response?.data?.code === \"401\") {\n            localStorage.removeItem(\"student-user\");\n          }\n          ElMessage.error(err.response?.data?.msg || err.message);\n        });\n    }\n  });\n};\n\nconst handleEdit = (row) => {\n  data.form = JSON.parse(JSON.stringify(row));\n  data.formVisible = true;\n  data.form.password = \"123456\";\n};\n\nconst handleDelete = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/student/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"删除成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"student\",\n          name: \"Student\",\n          component: () => import(\"@/views/manager/Student.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          src=\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\"\n          alt=\"\"\n          style=\"width: 40px; height: 40px\"\n        />\n        <span style=\"margin-left: 5px\">管理员</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n### 后端\n\n直接一次性实现学生管理的增删查改\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import Depends, APIRouter, Query\n\nfrom api import app\nfrom common.auth import auth_handler\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.account import AccountRegister\nfrom model.student import StudentSearch, StudentCreate, StudentUpdate\nfrom service.studentService import StudentService\n\n\n@app.post(\"/register\", response_model=ResultModel)\nasync def register(account: AccountRegister, db_session: Session = Depends(get_db_session)):\n    StudentService.register(account, db_session)\n    return Result.success()\n\n\nstudent_router = APIRouter(prefix=\"/student\")\n\n\n@student_router.get(\"/selectPage\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      username: Optional[str] = Query(None, description=\"Student username\"),\n                      name: Optional[str] = Query(None, description=\"Student name\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    student_search = StudentSearch(username=username, name=name)\n    student_list = StudentService.select_page(student_search, db_session)\n    return Result.success(pageInfo.of(student_list))\n\n\n@student_router.post(\"/add\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def add(student: StudentCreate, db_session: Session = Depends(get_db_session)):\n    StudentService.add_student(student, db_session)\n    return Result.success()\n\n\n@student_router.put(\"/update\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def update(student: StudentUpdate, db_session: Session = Depends(get_db_session)):\n    StudentService.update_by_id(student, db_session)\n    return Result.success()\n\n\n@student_router.delete(\"/delete/{id}\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    StudentService.delete_by_id(id, db_session)\n    return Result.success()\n\n\napp.include_router(student_router)\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, asc\n\nfrom common.Enum import Role\nfrom common.auth import auth_handler\nfrom common.utils import set_attrs\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, UserExistException\nfrom model import Session\nfrom model.account import AccountLogin, AccountLoginResponse, AccountRegister\nfrom model.student import Student, StudentCreate, StudentUpdate\n\n\nclass StudentService:\n    @staticmethod\n    def login(account: AccountLogin, db_session: Session) -> AccountLoginResponse:\n        query = select(Student).where(Student.username == account.username)\n        exist_student: Student = db_session.execute(query).scalars().first()\n        if not exist_student:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(account.password, exist_student.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        account_login_response = AccountLoginResponse()\n        set_attrs(account_login_response, jsonable_encoder(exist_student))\n        account_login_response.token = auth_handler.encode_token(exist_student.id)\n        return account_login_response\n\n    @staticmethod\n    def register(account: AccountRegister, db_session: Session):\n        query = select(Student).where(Student.username == account.username)\n        exist_student = db_session.execute(query).scalars().first()\n        if exist_student:\n            raise UserExistException(\"账号已存在\")\n\n        new_student = Student()\n        account.password = auth_handler.get_password_hash(account.password)\n        set_attrs(new_student, jsonable_encoder(account))\n        if new_student.name is None:\n            new_student.name = account.username\n        new_student.role = Role.STUDENT.name\n\n        db_session.add(new_student)\n        db_session.commit()\n        return new_student\n\n    @staticmethod\n    def select_page(student_search: Student, db_session: Session):\n        query = select(Student).order_by(asc(Student.id))\n        if student_search.username:\n            query = query.where(Student.username.like(f\"%{student_search.username}%\"))\n        if student_search.name:\n            query = query.where(Student.name.like(f\"%{student_search.name}%\"))\n\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def add_student(student: StudentCreate, db_session: Session):\n        query = select(Student).where(Student.username == student.username)\n        exist_student = db_session.execute(query).scalars().all()\n        if exist_student:\n            raise UserExistException(\"账号已存在\")\n\n        student.password = auth_handler.get_password_hash(student.password)\n        student = Student(**student.dict())\n        if student.name is None:\n            student.name = student.username\n        student.role = Role.STUDENT.name\n        db_session.add(student)\n        db_session.commit()\n        return student\n\n    @staticmethod\n    def update_by_id(student: StudentUpdate, db_session: Session):\n        exist_student: Student = check_student_exist(student.id, db_session)\n        student.password = auth_handler.get_password_hash(student.password)\n        set_attrs(exist_student, jsonable_encoder(student))\n        db_session.commit()\n        return exist_student\n\n    @staticmethod\n    def delete_by_id(id: int, db_session: Session):\n        exist_student: Student = check_student_exist(id, db_session)\n        db_session.delete(exist_student)\n        db_session.commit()\n        return exist_student\n\n\ndef check_student_exist(student_id: int, db_session: Session):\n    query = select(Student).where(Student.id == student_id)\n    exist_student: Student = db_session.execute(query).scalar()\n    if not exist_student:\n        raise UserNotFoundException(\"账号不存在\")\n    return exist_student\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Student(Base):\n    __tablename__ = \"student\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    phone: Mapped[str] = mapped_column(String(255), nullable=False)\n    gender: Mapped[str] = mapped_column(String(255), nullable=False)\n    birthday: Mapped[str] = mapped_column(String(255), nullable=False)\n    avatar: Mapped[str] = mapped_column(String(255), nullable=False)\n    role: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass StudentBase(BaseModel):\n    username: str\n    password: str = Field(..., min_length=1)\n    name: Optional[str] = None\n    role: Optional[str] = None\n\n\nclass StudentSearch(BaseModel):\n    username: str | None\n    name: str | None\n\n\nclass StudentCreate(StudentBase):\n    phone: Optional[str] = None\n    gender: Optional[str] = None\n    birthday: Optional[str] = Field(None)\n    avatar: Optional[str] = Field(None)\n\n\nclass StudentUpdate(StudentCreate):\n    id: int\n```\n\n### 测试\n\n#### 增\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614101507-2bf573c5-fa17-4163-a689-3385877daa5d.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614339357-f6290c1c-bd96-4b2c-8530-09e5bf23b1c4.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614350016-64f541ee-ce8e-4f50-80ee-182cbf2e277c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614399226-a9223fce-2830-4d70-b5b0-5345265e68b1.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614409533-4ccb0b0e-b43c-4e2b-8732-2cc57e64a637.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614456422-3dd9bdc7-3664-4db1-b0fa-d463de9a24ab.png)\n\n#### 删\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614471327-76769a3d-22b0-448d-90e4-4732685f6265.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614484226-16c0dee1-16e3-4ddf-86fd-046dc6241284.png)\n\n#### 查\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614500386-0b89fdc6-06f8-460f-8a82-f50af83bf667.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614524924-97ff251c-c108-4913-a355-722cb37adee5.png)\n\n#### 改\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614569965-55e3a371-083d-4f48-9bc8-49c7c1124c96.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614577734-0d8b6662-062e-437f-a4d8-5288c15995b2.png)\n\n但是修改过后，密码会被强制重置为 123456\n\n## 限制权限\n\n现在不管普通的学生还是管理员都能看到管理页面 这不符合\n\n需要加入一个权限`v-if=\"user.role === 'ADMIN'\"`\n\n顺便修改一下右上角和主页显示的用户名称\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          src=\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\"\n          alt=\"\"\n          style=\"width: 40px; height: 40px\"\n        />\n        <span style=\"margin-left: 5px\">{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n```vue\n<template>\n  <div class=\"welcome-container\">\n    <div class=\"custom-card bg-white shadow rounded p-4 mb-5\">\n      <h2 class=\"text-center text-primary\">欢迎来到本系统</h2>\n      <p class=\"text-center mt-3\">\n        您好 <span :style=\"{ color: '#116ca9' }\">{{ user.name }}</span\n        >，祝您使用愉快！\n      </p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport request from \"@/utils/request\";\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.welcome-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: calc(100vh - 100px); /* 根据实际项目需要调整高度 */\n}\n\n.custom-card {\n  max-width: 400px;\n  border: none;\n}\n</style>\n```\n\n普通学生登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710615211512-e0cccb33-3e60-4b88-9678-4c2ce8e98086.png)\n\n管理员登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710615040123-41959ce6-a154-4412-ae89-c76b26d83cec.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710615228358-010c1595-4196-4110-b8a8-96aee9e8ddd7.png)\n\n---\n\n> 更新: 2024-05-20 00:11:43  \n> 原文: <https://www.yuque.com/zacharyblock/iacda/uuigf300461wndud>\n","tags":["Python","Vue3","FastAPI","实战"],"categories":["FastAPI入门"]},{"title":"Linux手册","url":"/blog/1442625339/","content":"\n# 手册\n\n# 基本操作\n\n## Linux 关机,重启\n\n```latex\n#关机\nshutdown -h now\n\n#重启\nshutdown -r now\n```\n\n## 查看系统,CPU 信息\n\n```latex\n#查看系统内核信息\nuname -a\n\n#查看系统内核版本\ncat /proc/version\n\n#查看当前用户环境变量\nenv\n\ncat /proc/cpuinfo\n\n#查看有几个逻辑cpu, 包括cpu型号\ncat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c\n\n#查看有几颗cpu,每颗分别是几核\ncat /proc/cpuinfo | grep physical | uniq -c\n\n#查看当前CPU运行在32bit还是64bit模式下, 如果是运行在32bit下也不代表CPU不支持64bit\ngetconf LONG_BIT\n\n#结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit\ncat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l\n```\n\n## 建立软连接\n\n```latex\nln -s /usr/local/jdk1.8/ jdk\n```\n\n## rpm 相关\n\n```latex\n#查看是否通过rpm安装了该软件\nrpm -qa | grep 软件名\n```\n\n## sshkey\n\n```latex\n#创建sshkey\nssh-keygen -t rsa -C your_email@example.com\n\n#id_rsa.pub 的内容拷贝到要控制的服务器的 home/username/.ssh/authorized_keys 中,如果没有则新建(.ssh权限为700, authorized_keys权限为600)\n```\n\n## 命令重命名\n\n```latex\n#在各个用户的.bash_profile中添加重命名配置\nalias ll='ls -alF'\n```\n\n## 同步服务器时间\n\n```latex\nsudo ntpdate -u ntp.api.bz\n```\n\n## 后台运行命令\n\n```latex\n#后台运行,并且有nohup.out输出\nnohup xxx &\n\n#后台运行, 不输出任何日志\nnohup xxx > /dev/null &\n\n#后台运行, 并将错误信息做标准输出到日志中\nnohup xxx >out.log 2>&1 &\n```\n\n## 强制活动用户退出\n\n```latex\n#命令来完成强制活动用户退出.其中TTY表示终端名称\npkill -kill -t [TTY]\n```\n\n## 查看命令路径\n\n```latex\nwhich <命令>\n```\n\n## 查看进程所有打开最大 fd 数\n\n```latex\nulimit -n\n```\n\n## 配置 dns\n\n```latex\nvim /etc/resolv.conf\n```\n\n## nslookup,查看域名路由表\n\n```latex\nnslookup google.com\n```\n\n## last, 最近登录信息列表\n\n```latex\n#最近登录的5个账号\nlast -n 5\n```\n\n## 设置固定 ip\n\n```latex\nifconfig em1  192.168.5.177 netmask 255.255.255.0\n```\n\n## 查看进程内加载的环境变量\n\n```latex\n#也可以去 cd /proc 目录下, 查看进程内存中加载的东西\nps eww -p  XXXXX(进程号)\n```\n\n## 查看进程树找到服务器进程\n\n```latex\nps auwxf\n```\n\n## 查看进程启动路径\n\n```latex\ncd /proc/xxx(进程号)\nls -all\n#cwd对应的是启动路径\n```\n\n## 添加用户, 配置 sudo 权限\n\n```latex\n#新增用户\nuseradd 用户名\npasswd 用户名\n\n#增加sudo权限\nvim /etc/sudoers\n#修改文件里面的\n#root    ALL=(ALL)       ALL\n#用户名 ALL=(ALL)       ALL\n```\n\n## 强制关闭进程名包含 xxx 的所有进程\n\n```latex\nps aux|grep xxx | grep -v grep | awk '{print $2}' | xargs kill -9\n```\n\n# 磁盘,文件,目录相关操作\n\n## vim 操作\n\n```latex\n#normal模式下 g表示全局, x表示查找的内容, y表示替换后的内容\n:%s/x/y/g\n\n#normal模式下\n0  #光标移到行首(数字0)\n$  #光标移至行尾\nshift + g #跳到文件最后\ngg #跳到文件头\n\n#显示行号\n:set nu\n\n#去除行号\n:set nonu\n\n#检索\n/xxx(检索内容)  #从头检索, 按n查找下一个\n?xxx(检索内容)  #从尾部检索\n```\n\n## 打开只读文件,修改后需要保存时(不用切换用户即可保存的方式)\n\n```latex\n#在normal模式下\n:w !sudo tee %\n```\n\n## 查看磁盘, 文件目录基本信息\n\n```latex\n#查看磁盘挂载情况\nmount\n\n#查看磁盘分区信息\ndf\n\n#查看目录及子目录大小\ndu -H -h\n\n#查看当前目录下各个文件, 文件夹占了多少空间, 不会递归\ndu -sh *\n```\n\n## wc 命令\n\n```latex\n#查看文件里有多少行\nwc -l filename\n\n#看文件里有多少个word\nwc -w filename\n\n#文件里最长的那一行是多少个字\nwc -L filename\n\n#统计字节数\nwc -c\n```\n\n## 常用压缩, 解压缩命令\n\n### 压缩命令\n\n```latex\ntar czvf xxx.tar 压缩目录\n\nzip -r xxx.zip 压缩目录\n```\n\n### 解压缩命令\n\n```latex\ntar zxvf xxx.tar\n\n#解压到指定文件夹\ntar zxvf xxx.tar -C /xxx/yyy/\n\nunzip xxx.zip\n```\n\n## 变更文件所属用户, 用户组\n\n```latex\nchown eagleye.eagleye xxx.log\n```\n\n## cp, scp, mkdir\n\n```latex\n#复制\ncp xxx.log\n\n#复制并强制覆盖同名文件\ncp -f xxx.log\n\n#复制文件夹\ncp -r xxx(源文件夹) yyy(目标文件夹)\n\n#远程复制\nscp -P ssh端口 username@10.10.10.101:/home/username/xxx /home/xxx\n\n#级联创建目录\nmkdir -p /xxx/yyy/zzz\n\n#批量创建文件夹, 会在test,main下都创建java, resources文件夹\nmkdir -p src/{test,main}/{java,resources}\n```\n\n## 比较两个文件\n\n```latex\ndiff -u 1.txt 2.txt\n```\n\n## 日志输出的字节数,可以用作性能测试\n\n```latex\n#如果做性能测试, 可以每执行一次, 往日志里面输出 “.” , 这样日志中的字节数就是实际的性能测试运行的次数, 还可以看见实时速率.\ntail -f xxx.log | pv -bt\n```\n\n## 查看, 去除特殊字符\n\n```latex\n#查看特殊字符\ncat -v xxx.sh\n\n#去除特殊字符\nsed -i 's/^M//g’ env.sh  去除文件的特殊字符, 比如^M:  需要这样输入: ctrl+v+enter\n```\n\n## 处理因系统原因引起的文件中特殊字符的问题\n\n```latex\n#可以转换为该系统下的文件格式\ncat file.sh > file.sh_bak\n\n#先将file.sh中文件内容复制下来然后运行, 然后粘贴内容, 最后ctrl + d 保存退出\ncat > file1.sh\n\n#在vim中通过如下设置文件编码和文件格式\n:set fileencodings=utf-8 ，然后 w （存盘）一下即可转化为 utf8 格式，\n:set fileformat=unix\n\n#在mac下使用dos2unix进行文件格式化\nfind . -name \"*.sh\" | xargs dos2unix\n```\n\n## tee, 重定向的同时输出到屏幕\n\n```latex\nawk ‘{print $0}’ xxx.log | tee test.log\n```\n\n# 检索相关\n\n## grep\n\n```latex\n#反向匹配, 查找不包含xxx的内容\ngrep -v xxx\n\n#排除所有空行\ngrep -v '^/pre>\n\n#返回结果 2,则说明第二行是空行\ngrep -n “^$” 111.txt\n\n#查询以abc开头的行\ngrep -n “^abc” 111.txt\n\n#同时列出该词语出现在文章的第几行\ngrep 'xxx' -n xxx.log\n\n#计算一下该字串出现的次数\ngrep 'xxx' -c xxx.log\n\n#比对的时候，不计较大小写的不同\ngrep 'xxx' -i xxx.log\n```\n\n## awk\n\n```latex\n#以':' 为分隔符,如果第五域有user则输出该行\nawk -F ':' '{if ($5 ~ /user/) print $0}' /etc/passwd\n\n#统计单个文件中某个字符（串）(中文无效)出现的次数\nawk -v RS='character' 'END {print --NR}' xxx.txt\n```\n\n## find 检索命令\n\n```latex\n#在目录下找后缀是.mysql的文件\nfind /home/eagleye -name '*.mysql' -print\n\n#会从 /usr 目录开始往下找，找最近3天之内存取过的文件。\nfind /usr -atime 3 –print\n\n#会从 /usr 目录开始往下找，找最近5天之内修改过的文件。\nfind /usr -ctime 5 –print\n\n#会从 /doc 目录开始往下找，找jacky 的、文件名开头是 j的文件。\nfind /doc -user jacky -name 'j*' –print\n\n#会从 /doc 目录开始往下找，找寻文件名是 ja 开头或者 ma开头的文件。\nfind /doc \\( -name 'ja*' -o- -name 'ma*' \\) –print\n\n#会从 /doc 目录开始往下找，找到凡是文件名结尾为 bak的文件，把它删除掉。-exec 选项是执行的意思，rm 是删除命令，{ } 表示文件名，“\\;”是规定的命令结尾。\nfind /doc -name '*bak' -exec rm {} \\;\n```\n\n# 网络相关\n\n## 查看什么进程使用了该端口\n\n```latex\nlsof -i:port\n```\n\n## 获取本机 ip 地址\n\n```latex\n/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d \"addr:\"\n```\n\n## iptables\n\n```latex\n#查看iptables状态\nservice iptables status\n\n#要封停一个ip\niptables -I INPUT -s ***.***.***.*** -j DROP\n\n#要解封一个IP，使用下面这条命令：\niptables -D INPUT -s ***.***.***.*** -j DROP\n\n备注: 参数-I是表示Insert（添加），-D表示Delete（删除）。后面跟的是规则，INPUT表示入站，***.***.***.***表示要封停的IP，DROP表示放弃连接。\n\n#开启9090端口的访问\n/sbin/iptables -I INPUT -p tcp --dport 9090 -j ACCEPT\n\n#防火墙开启、关闭、重启\n/etc/init.d/iptables status\n/etc/init.d/iptables start\n/etc/init.d/iptables stop\n/etc/init.d/iptables restart\n```\n\n## nc 命令, tcp 调试利器\n\n```latex\n#给某一个endpoint发送TCP请求,就将data的内容发送到对端\nnc 192.168.0.11 8000 < data.txt\n\n#nc可以当做服务器，监听某个端口号,把某一次请求的内容存储到received_data里\nnc -l 8000 > received_data\n\n#上边只监听一次，如果多次可以加上-k参数\nnc -lk 8000\n```\n\n## tcpdump\n\n```latex\n#dump出本机12301端口的tcp包\ntcpdump -i em1 tcp port 12301 -s 1500 -w abc.pcap\n```\n\n## 跟踪网络路由路径\n\n```latex\n#traceroute默认使用udp方式, 如果是-I则改成icmp方式\ntraceroute -I www.163.com\n\n#从ttl第3跳跟踪\ntraceroute -M 3 www.163.com\n\n#加上端口跟踪\ntraceroute -p 8080 192.168.10.11\n```\n\n## ss\n\n```latex\n#显示本地打开的所有端口\nss -l\n\n#显示每个进程具体打开的socket\nss -pl\n\n#显示所有tcp socket\nss -t -a\n\n#显示所有的UDP Socekt\nss -u -a\n\n#显示所有已建立的SMTP连接\nss -o state established '( dport = :smtp or sport = :smtp )'\n\n#显示所有已建立的HTTP连接\nss -o state established '( dport = :http or sport = :http )'\n\n找出所有连接X服务器的进程\nss -x src /tmp/.X11-unix/*\n\n列出当前socket统计信息\nss -s\n\n解释：netstat是遍历/proc下面每个PID目录，ss直接读/proc/net下面的统计信息。所以ss执行的时候消耗资源以及消耗的时间都比netstat少很多\n```\n\n## netstat\n\n```latex\n#输出每个ip的连接数，以及总的各个状态的连接数\nnetstat -n | awk '/^tcp/ {n=split($(NF-1),array,\":\");if(n<=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N} END {for(a in S){printf(\"%-20s %s\\n\", a, S[a]);++I}printf(\"%-20s %s\\n\",\"TOTAL_IP\",I);for(a in s) printf(\"%-20s %s\\n\",a, s[a]);printf(\"%-20s %s\\n\",\"TOTAL_LINK\",N);}'\n\n#统计所有连接状态,\n#CLOSED：无连接是活动的或正在进行\n#LISTEN：服务器在等待进入呼叫\n#SYN_RECV：一个连接请求已经到达，等待确认\n#SYN_SENT：应用已经开始，打开一个连接\n#ESTABLISHED：正常数据传输状态\n#FIN_WAIT1：应用说它已经完成\n#FIN_WAIT2：另一边已同意释放\n#ITMED_WAIT：等待所有分组死掉\n#CLOSING：两边同时尝试关闭\n#TIME_WAIT：主动关闭连接一端还没有等到另一端反馈期间的状态\n#LAST_ACK：等待所有分组死掉\nnetstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,\"\\t\",state[key]}'\n\n#查找较多time_wait连接\nnetstat -n|grep TIME_WAIT|awk '{print $5}'|sort|uniq -c|sort -rn|head -n20\n```\n\n# 监控 linux 性能命令\n\n## top\n\n```latex\n按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序, 然后回车。而大写的 R 键可以将当前的排序倒转\n```\n\n| 列名    | 含义                                                                |\n| ------- | ------------------------------------------------------------------- |\n| PID     | 进程 id                                                             |\n| PPID    | 父进程 id                                                           |\n| RUSER   | Real user name                                                      |\n| UID     | 进程所有者的用户 id                                                 |\n| USER    | 进程所有者的用户名                                                  |\n| GROUP   | 进程所有者的组名                                                    |\n| TTY     | 启动进程的终端名。不是从终端启动的进程则显示为 ?                    |\n| PR      | 优先级                                                              |\n| NI      | nice 值。负值表示高优先级，正值表示低优先级                         |\n| P       | 最后使用的 CPU，仅在多 CPU 环境下有意义                             |\n| %CPU    | 上次更新到现在的 CPU 时间占用百分比                                 |\n| TIME    | 进程使用的 CPU 时间总计，单位秒                                     |\n| TIME+   | 进程使用的 CPU 时间总计，单位 1/100 秒                              |\n| %MEM    | 进程使用的物理内存百分比                                            |\n| VIRT    | 进程使用的虚拟内存总量，单位 kb。VIRT=SWAP+RES                      |\n| SWAP    | 进程使用的虚拟内存中，被换出的大小，单位 kb。                       |\n| RES     | 进程使用的、未被换出的物理内存大小，单位 kb。RES=CODE+DATA          |\n| CODE    | 可执行代码占用的物理内存大小，单位 kb                               |\n| DATA    | 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位 kb          |\n| SHR     | 共享内存大小，单位 kb                                               |\n| nFLT    | 页面错误次数                                                        |\n| nDRT    | 最后一次写入到现在，被修改过的页面数。                              |\n| S       | 进程状态。D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程 |\n| COMMAND | 命令名/命令行                                                       |\n| WCHAN   | 若该进程在睡眠，则显示睡眠中的系统函数名                            |\n| Flags   | 任务标志，参考 sched.h                                              |\n\n## dmesg,查看系统日志\n\n```latex\ndmesg\n```\n\n## iostat,磁盘 IO 情况监控\n\n```latex\niostat -xz 1\n\n#r/s, w/s, rkB/s, wkB/s：分别表示每秒读写次数和每秒读写数据量（千字节）。读写量过大，可能会引起性能问题。\n#await：IO操作的平均等待时间，单位是毫秒。这是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时。如果这个数值过大，可能是硬件设备遇到了瓶颈或者出现故障。\n#avgqu-sz：向设备发出的请求平均数量。如果这个数值大于1，可能是硬件设备已经饱和（部分前端硬件设备支持并行写入）。\n#%util：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过60，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达100%，说明硬件设备已经饱和。\n#如果显示的是逻辑设备的数据，那么设备利用率不代表后端实际的硬件设备已经饱和。值得注意的是，即使IO性能不理想，也不一定意味这应用程序性能会不好，可以利用诸如预读取、写缓存等策略提升应用性能。\n```\n\n## free,内存使用情况\n\n```latex\nfree -m\n\neg:\n\n     total       used       free     shared    buffers     cached\nMem:          1002        769        232          0         62        421\n-/+ buffers/cache:          286        715\nSwap:          1153          0       1153\n\n第一部分Mem行:\ntotal 内存总数: 1002M\nused 已经使用的内存数: 769M\nfree 空闲的内存数: 232M\nshared 当前已经废弃不用,总是0\nbuffers Buffer 缓存内存数: 62M\ncached Page 缓存内存数:421M\n\n关系：total(1002M) = used(769M) + free(232M)\n\n第二部分(-/+ buffers/cache):\n(-buffers/cache) used内存数：286M (指的第一部分Mem行中的used – buffers – cached)\n(+buffers/cache) free内存数: 715M (指的第一部分Mem行中的free + buffers + cached)\n\n可见-buffers/cache反映的是被程序实实在在吃掉的内存,而+buffers/cache反映的是可以挪用的内存总数.\n\n第三部分是指交换分区\n```\n\n## sar,查看网络吞吐状态\n\n```latex\n#sar命令在这里可以查看网络设备的吞吐率。在排查性能问题时，可以通过网络设备的吞吐量，判断网络设备是否已经饱和\nsar -n DEV 1\n\n#\n#sar命令在这里用于查看TCP连接状态，其中包括：\n#active/s：每秒本地发起的TCP连接数，既通过connect调用创建的TCP连接；\n#passive/s：每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接；\n#retrans/s：每秒TCP重传数量；\n#TCP连接数可以用来判断性能问题是否由于建立了过多的连接，进一步可以判断是主动发起的连接，还是被动接受的连接。TCP重传可能是因为网络环境恶劣，或者服务器压力过大导致丢包\nsar -n TCP,ETCP 1\n```\n\n## vmstat, 给定时间监控 CPU 使用率, 内存使用, 虚拟内存交互, IO 读写\n\n```latex\n#2表示每2秒采集一次状态信息, 1表示只采集一次(忽略既是一直采集)\nvmstat 2 1\n\neg:\nr b swpd free buff cache si so bi bo in cs us sy id wa\n1 0 0 3499840 315836 3819660 0 0 0 1 2 0 0 0 100 0\n0 0 0 3499584 315836 3819660 0 0 0 0 88 158 0 0 100 0\n0 0 0 3499708 315836 3819660 0 0 0 2 86 162 0 0 100 0\n0 0 0 3499708 315836 3819660 0 0 0 10 81 151 0 0 100 0\n1 0 0 3499732 315836 3819660 0 0 0 2 83 154 0 0 100 0\n```\n\n- r 表示运行队列(就是说多少个进程真的分配到 CPU)，我测试的服务器目前 CPU 比较空闲，没什么程序在跑，当这个值超过了 CPU 数目，就会出现 CPU 瓶颈了。这个也和 top 的负载有关系，一般负载超过了 3 就比较高，超过了 5 就高，超过了 10 就不正常了，服务器的状态很危险。top 的负载类似每秒的运行队列。如果运行队列过大，表示你的 CPU 很繁忙，一般会造成 CPU 使用率很高。\n- b 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。\n- swpd 虚拟内存已使用的大小，如果大于 0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。\n- free 空闲的物理内存的大小，我的机器内存总共 8G，剩余 3415M。\n- buff Linux/Unix 系统是用来存储，目录里面有什么内容，权限等的缓存，我本机大概占用 300 多 M\n- cache cache 直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用 300 多 M(这里是 Linux/Unix 的聪明之处，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached 会很快地被使用。)\n- si 每秒从磁盘读入虚拟内存的大小，如果这个值大于 0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。我的机器内存充裕，一切正常。\n- so 每秒虚拟内存写入磁盘的大小，如果这个值大于 0，同上。\n- bi 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是 1024byte，我本机上没什么 IO 操作，所以一直是 0，但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到 140000/s，磁盘写入速度差不多 140M 每秒\n- bo 块设备每秒发送的块数量，例如我们读取文件，bo 就要大于 0。bi 和 bo 一般都要接近 0，不然就是 IO 过于频繁，需要调整。\n- in 每秒 CPU 的中断次数，包括时间中断\n- cs 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在 apache 和 nginx 这种 web 服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择 web 服务器的进程可以由进程或者线程的峰值一直下调，压测，直到 cs 到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的 CPU 大部分浪费在上下文切换，导致 CPU 干正经事的时间少了，CPU 没有充分利用，是不可取的。\n- us 用户 CPU 时间，我曾经在一个做加密解密很频繁的服务器上，可以看到 us 接近 100,r 运行队列达到 80(机器在做压力测试，性能表现不佳)。\n- sy 系统 CPU 时间，如果太高，表示系统调用时间长，例如是 IO 操作频繁。\n- id 空闲 CPU 时间，一般来说，id + us + sy = 100,一般我认为 id 是空闲 CPU 使用率，us 是用户 CPU 使用率，sy 是系统 CPU 使用率。\n- wt 等待 IO CPU 时间。\n\n> 更新: 2024-05-16 00:14:36  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/ik6dzvhn4ahxsfba>\n","tags":["Linux"],"categories":["Linux"]},{"title":"Linux基础","url":"/blog/2762478163/","content":"\n# Linux 基础\n\n## 安装 Ubuntu 系统\n\n这里我们就以安装虚拟机的方式在我们的电脑上安装 Linux 操作系统，我们选用 Ubuntu 作为教程，如果有经济实力，可以在腾讯云、阿里云之类的服务商购买一台云服务器，并选择预装 Ubuntu 系统；如果你还想搞嵌入式开发之类的工作，可以购买一台树莓派服务器，也可以在上面安装 Ubuntu 系统，相当于一台迷你主机。在你已经有云服务器的情况下，可以直接跳过虚拟机安装教学。\n\n官网下载：[https://cn.ubuntu.com/download/server/step1](https://cn.ubuntu.com/download/server/step1)\n\n注意是下载服务器版本，不是桌面版本。\n\n### 在虚拟机中安装\n\n这里我们使用 VMware 进行安装，VMware 是一个虚拟化应用程序，它可以在我们当前运行的操作系统之上，创建一个虚线的主机，相当于创建了一台电脑，而我们就可以在这台电脑上安装各种各样的操作系统，并且我们可以自由为其分配 CPU 核心和内存以及硬盘容量（如果你接触过云计算相关内容，应该会对虚拟化技术有所了解）\n\n官网下载：[https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html](https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html)\n\n安装完成后，会出现一个类似于 CMD 的命令窗口，而我们就是通过输入命令来操作我们的操作系统。\n\n### 使用 SSH 远程连接\n\n如果你使用的是树莓派或是云服务器，那么你会得到一个公网的 IP 地址，以及默认的用户名和密码，由于服务器安装的 Ubuntu 并不是在我们的电脑上运行的，那么我们怎么去远程操作呢？\n\n比如我们要远程操作一台 Windows 电脑，直接使用远程桌面连接即可，但是 Ubuntu 上来就是命令行，这种情况下要实现远程连接就只能使用 SSH 终端。\n\nSSH 是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用 SSH 协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995 年，芬兰学者 Tatu Ylonen 设计了 SSH 协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为 Linux 系统的标准配置。\n\n云服务器上安装的 Ubuntu 默认都是自带了 OpenSSH 服务端的，我们可以直接连接，如果你的 Ubuntu 服务器上没有安装 OpenSSH 服务器端，那么可以输入命令进行安装：\n\n```shell\nsudo apt install openssh-server\n#输入后还需要你输入当前用户的密码才可以执行，至于为什么我们后面会说\n```\n\nssh 的开启命令\n\n```shell\nservice ssh start\n```\n\n查看 ssh 进程\n\n```shell\nps -e|grep ssh\n```\n\n非 root 用户如果登录不上 ssh\n\n```shell\nchown zachary:zachary -R /home/zachary\n```\n\n这里我们使用 XShell 来进行 SSH 登陆，官网：[https://www.netsarang.com/zh/free-for-home-school/](https://www.netsarang.com/zh/free-for-home-school/)\n\n直接使用 mac 下的终端进行登录\n\n```shell\nssh zachary@172.16.59.130\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1715788970979-7ffb2b99-91b5-4fe8-be57-3491b1bc05df.png)\n\n### 文件系统介绍\n\n在 Windows 下，我们的整个硬盘实际上可以被分为多个磁盘驱动器：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1715788970973-a60f796b-3065-4a85-8473-32d627ba4e75.png)\n\n我们一般习惯将软件装到 D 盘，文件数据存在 E 盘，系统和一些环境安装在 C 盘，根据不同的盘符进行划分，并且每个盘都有各自的存储容量大小。而在 Linux 中，没有这个概念，所有的文件都是位于根目录下的：\n\n![](https://cdn.nlark.com/yuque/0/2024/webp/38881094/1715788971071-ea8ff465-d9f5-4c69-8225-23c612491976.webp)\n\n我们可以看到根目录下有很多个文件夹，它们都有着各自的划分：\n\n- /bin 可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等实际上都是一些小的应用程序\n- /home 普通用户的主目录，对应 Windows 下的 C:/Users/用户名/\n- /root root 用户的主目录（root 用户是具有最高权限的用户，之后会讲）\n- /boot 内核文件的引导目录, 放置 linux 系统启动时用到的一些文件\n- /sbing 超级用户使用的指令文件\n- /tmp 临时文件目录，一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下。\n- /dev 设备文件目录，在 Linux 中万物皆文件，实际上你插入的 U 盘等设备都会在 dev 目录下生成一个文件，我们可以很方便地通过文件 IO 方式去操作外设，对嵌入式开发极为友好。\n- /lib 共享库，系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助。\n- /usr 第三方 程序目录\n- /etc 配置程序目录，系统配置文件存放的目录\n- /var 可变文件，放置系统执行过程中经常变化的文件\n- /opt 用户使用目录，给主机额外安装软件所摆放的目录。\n\n我们可以直接输入命令来查看目录下的所有文件：\n\n```bash\n#只显示文件名称，且不显示隐藏文件\nls\n#显示隐藏文件以及文件详细信息\nll\n```\n\n那么我们如何才能像 Windows 那样方便的管理 Linux 中的文件呢？我们可以使用 FTP 管理工具，默认情况下 Ubuntu 是安装了 SFTP 服务器的。\n\n这里我们使用 Xftp 来进行管理，官网：[https://www.netsarang.com/zh/free-for-home-school/](https://www.netsarang.com/zh/free-for-home-school/)\n\n---\n\n## 用户和用户组\n\n我们整个 Linux 阶段的学习主要是以实操为主，大量的命令需要大量的使用才能记得更牢固。\n\nLinux 系统是一个多用户多任务的分时操作系统，任何一个要使用系统的用户，都必须申请一个账号，然后以这个账号的身份进入系统。比如我们之前就是使用我们在创建服务器时申请的初始用户 test，通过输入用户名和密码登录到系统中，之后才能使用各种命令进行操作。其实用户机制和我们的 Windows 比较类似。一般的普通用户只能做一些比较基本的操作，并且只能在自己的目录（如/home/test）中进行文件的创建和删除操作。\n\n我们可以看到，当前状态信息分为三段：\n\n```bash\ntest@ubuntu-server:~$\n```\n\n格式为：用户名@服务器名称:当前所处的目录$，其中~代表用户目录，如果不是用户目录，会显示当前的绝对路径地址。我们也可以使用 pwd 命令来直接查看当前所处的目录。\n\n在 Linux 中默认存在一个超级用户 root，而此用户拥有最高执行权限，它能够修改任何的内容，甚至可以删除整个 Linux 内核，正常情况下不会使用 root 用户进行登陆，只有在特殊情况下才会使用 root 用户来进行一些操作，root 用户非常危险，哪怕一个小小的命令都能够毁掉整个 Linux 系统，比如 rm -rf /\\*，感兴趣的话我们可以放在最后来演示（在以前老是听说安卓手机 root，实际上就是获取安卓系统底层 Linux 系统的 root 权限，以实现修改系统文件的目的）\n\n我们可以使用 sudo -s 并输入当前用户的密码切换到 root 用户，可以看到出现了一些变化：\n\n```bash\ntest@ubuntu-server:~$\n\nroot@ubuntu-server:/home/test#\n```\n\n我们发现$符号变成了#符号，注意此符号表示当前的用户权限等级，并且 test 也变为了 root，在此用户下，我们可以随意修改 test 用户文件夹以外的内容，而 test 用户下则无法修改。如果需要退出 root 用户，直接输入 exit 即可。\n\n接着我们来看一下，如何进行用户的管理操作，进行用户管理，包括添加用户和删除用户都需要 root 权限才可以执行，但是现在我们是 test 用户，我们可以在命令前面添加 sudo 来暂时以管理员身份执行此命令，比如说我们现在想要添加一个新的用户：\n\n```bash\nsudo useradd study\n```\n\n其中 study 就是我们想要创建的新用户，useradd 命令就是创建新用户的命令，同样的，删除用户：\n\n```bash\nsudo userdel study\n```\n\nLinux 中的命令一般都可以携带一些参数来以更多特地的方式执行，我们可以在创建用户时，添加一些额外的参数来进行更多高级操作：\n\n- -d<登录目录> 指定用户登录时的起始目录。\n- -g<群组> 指定用户所属的群组。\n- -G<群组> 指定用户所属的附加群组。\n- -m 自动建立用户的登入目录。\n- -M 不要自动建立用户的登入目录。\n- -s 指定 Shell，一般指定为/bin/bash\n\n如果还想查看更多命令，可以直接使用 man 来查看命令的详细参数列表，比如：\n\n```bash\nman useradd\n```\n\n比如我们现在需要在用户创建时顺便创建用户的文件夹，并指定 shell（任意一种命令解释程序，用于处理我们输入的命令）为 bash：\n\n```bash\nsudo useradd study -m -s /bin/bash\n```\n\n可以看到已经自动在 home 目录下创建了 study 文件夹（这里..表示上一级目录，.表示当前目录）：\n\n```bash\ntest@ubuntu-server:~$ ls ..\nstudy  test\n```\n\n用户创建完成之后，我们可以为此用户设定密码（如果不指定用户，那么会设置当前用户的密码）：\n\n```bash\nsudo passwd study\n```\n\n输入密码之后，我们可以使用命令来切换用户：\n\n```bash\ntest@ubuntu-server:~$ su - study\nPassword:\nstudy@ubuntu-server:~$\n```\n\n可以看到，切换用户后名称已经修改为 study 了，我们使用 exit 即可退出当前用户回到 test。\n\n输入 who 可以查看当前登录账号（注意是登录的账号）输入 whoami 可以查看当前的操作账号：\n\n```bash\ntest@ubuntu-server:~$ su study\nPassword:\nstudy@ubuntu-server:/home/test$ cd ~\nstudy@ubuntu-server:~$ who\ntest     pts/0        2022-01-24 03:57 (192.168.10.3)\nstudy@ubuntu-server:~$ whoami\nstudy\nstudy@ubuntu-server:~$\n```\n\n接着我们来看用户组，每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。我们可以输入 groups 来查看当前用户所有的用户组：\n\n```bash\ntest@ubuntu-server:~$ groups\ntest adm cdrom sudo dip plugdev lxd\n```\n\n我们可以输入 id 来查看用户所属的用户相关信息：\n\n```bash\ntest@ubuntu-server:~$ id\nuid=1000(test) gid=1000(test) groups=1000(test),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lxd)\n```\n\n我们可以看到 test 用户默认情况下主要用户组为同名的 test 用户组，并且还属于一些其他的用户组，其中 sudo 用户组就表示可以执行 sudo 命令，我们发现我们创建的 study 用户没有 sudo 的执行权限：\n\n```bash\nstudy@ubuntu-server:~$ sudo -s\n[sudo] password for study:\nstudy is not in the sudoers file.  This incident will be reported.\n```\n\n正是因为没有加入到 sudo 用户组，这里我们来尝试将其添加到 sudo 用户组：\n\n```bash\ntest@ubuntu-server:~$ id study\nuid=1001(study) gid=1001(study) groups=1001(study)\n```\n\n使用 usermod 命令来对用户的相关设置进行修改，参数与 useradd 大致相同：\n\n```bash\ntest@ubuntu-server:~$ sudo usermod study -G sudo\ntest@ubuntu-server:~$ id study\nuid=1001(study) gid=1001(study) groups=1001(study),27(sudo)\n```\n\n接着切换到 study 用户就可以使用 sudo 命令了：\n\n```bash\nTo run a command as administrator (user \"root\"), use \"sudo <command>\".\nSee \"man sudo_root\" for details.\n\nstudy@ubuntu-server:/home/test$ sudo -s\n[sudo] password for study:\nroot@ubuntu-server:/home/test#\n```\n\n实际上，我们的用户信息是存储在配置文件中的，我们之前说了，配置文件一般都放在 etc 目录下，而用户和用户组相关的配置文件，存放在/etc/passwd 和/etc/group 中，我们可以使用 cat 命令将文件内容打印到控制台：\n\n```bash\ntest@ubuntu-server:~$ cat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\n```\n\n格式为：注册名:口令:用户标识号:组标识号:用户名:用户主目录:命令解释程序 ，而我们的密码则存放在/etc/shadow 中，是以加密形式存储的，并且需要 root 权限才能查看。\n\n---\n\n## 常用命令\n\n接着我们来看一下 Linux 系统中一些比较常用的命令。\n\n### 文件操作\n\n文件是最基本的内容，我们可以使用 ls 命令列出当前目录中所有的文件，参数-a 表示包含所有的隐藏文件，-l 表示列出详细信息：\n\n```bash\ntest@ubuntu-server:~$ ls -al\ntotal 44\ndrwxr-xr-x 4 test test 4096 Jan 24 08:55 .\ndrwxr-xr-x 4 root root 4096 Jan 24 04:24 ..\n-rw------- 1 test test 2124 Jan 24 04:29 .bash_history\n-rw-r--r-- 1 test test  220 Feb 25  2020 .bash_logout\n-rw-r--r-- 1 test test 3771 Feb 25  2020 .bashrc\ndrwx------ 2 test test 4096 Jan 21 15:48 .cache\ndrwx------ 3 test test 4096 Jan 23 14:49 .config\n-rw-r--r-- 1 test test  807 Feb 25  2020 .profile\n-rw------- 1 test test   34 Jan 24 04:17 .python_history\n-rw-r--r-- 1 test test    0 Jan 21 15:52 .sudo_as_admin_successful\n-rw------- 1 test test 7201 Jan 24 08:55 .viminfo\n```\n\n可以看到当前目录下的整个文件列表，那么这些信息各种代表什么意思呢，尤其是最前面那一栏类似于 drwxr-xr-x 的字符串。\n\n它表示文件的属性，其中第 1 个字符表示此文件的类型：-表示普通文件，l 为链接文件，d 表示目录（文件夹），c 表示字符设备、b 表示块设备，还有 p 有名管道、f 堆栈文件、s 套接字等，这些一般都是用于进程之间通信使用的。\n\n第 2-4 个字符表示文件的拥有者（User）对该文件的权限，第 5-7 个字符表示文件所属用户组（Group）内用户对该文件的权限，最后 8-10 个字符表示其他用户（Other）对该文件的权限。其中 r 为读权限、w 为写权限、x 为执行权限，为了方便记忆，直接记 UGO 就行了。\n\n比如 drwxr-xr-x 就表示这是一个目录，文件的拥有者可以在目录中读、写和执行，而同一用户组的其他用户只能读和执行，其他用户也是一样。\n\n第二栏数据可以看到是一列数字，它表示文件创建的链接文件（快捷方式）数量，一般只有 1 表示只有当前文件，我们也可以尝试创建一个链接文件：\n\n```bash\ntest@ubuntu-server:~$ ln .bash_logout kk\n```\n\n创建后，会生成一个名为 kk 的文件，我们对此文件的操作相当于直接操作.bash_logout，跟 Windows 中的快捷方式比较类似，了解一下即可。再次执行 ll 命令，可以看到.bash_logout 的链接数变成了 2。\n\n第三栏数据为该文件或是目录的拥有者。\n\n第四栏数据表示所属的组。\n\n第五栏数据表示文件大小，以字节为单位。\n\n第六栏数据为文件的最后一次修改时间\n\n最后一栏就是文件名称了，就不多说了，再次提及..表示上级目录，.表示当前目录，最前面有一个.开头的文件为隐藏文件。可以看到上级目录（也就是/home 目录）所有者为 root，并且非 root 用户无法进行写操作，只能执行读操作，而当前目录以及目录下所有文件则属于 test 用户，test 用户可以随意进行修改。\n\n在了解了 Linux 的文件查看之后再去看 Windows 的文件管理，会觉得 Windows 的太拉了：\n\n![](https://cdn.nlark.com/yuque/0/2024/jpeg/38881094/1715788971144-041ad64f-f4c9-4853-8a05-758a5c84cf40.jpeg)\n\n那么，如果我们希望对文件的属性进行修改，比如我们现在希望将某个文件的写权限给关闭，可以使用 chmod 命令来进行文件属性修改，我们先创建一个 test 文件，使用 touch 命令来创建文件，使用 mkdir 命令来创建目录：\n\n```bash\ntest@ubuntu-server:~$ touch test\ntest@ubuntu-server:~$ ll test\n-rw-rw-r-- 1 test test 0 Jan 24 09:32 test\n```\n\n可以看到文件创建之后的默认权限为可读可写，接着我们来将其修改为只读，chmod 的使用方法如下：\n\n- chmod (u/g/o/a)(+/-)(r/w/x) 文件名称\n\n我们可以从 ugo 中选择或是直接 a 表示所有，+和-表示添加和删除权限，最后 rwx 不用我说了吧\n\n```plain\ntest@ubuntu-server:~$ chmod a-w test\ntest@ubuntu-server:~$ ll test\n-r--r--r-- 1 test test 0 Jan 24 09:32 test\n```\n\n除了这种方式之外，我们也可以使用数字来代替，比如现在我要给前两个添加读权限，那么：\n\n约定：r=4，w=2，x=1，需要什么权限就让对应权限的数字相加，一个数字表示一个 rwx 的权限状态，比如我们想修改为-rw-rw-r--，那么对应的数字就是 664，对应的命令为：\n\n```bash\ntest@ubuntu-server:~$ chmod 664 test\ntest@ubuntu-server:~$ ll test\n-rw-rw-r-- 1 test test 0 Jan 24 09:32 test\n```\n\n如果我们想修改文件的拥有者或是所属组，可以使用 chown 和 chgrp 命令：\n\n```bash\ntest@ubuntu-server:~$ sudo chown root test\ntest@ubuntu-server:~$ ls -l\ntotal 0\n-rw-rw-r-- 1 root test 0 Jan 24 10:43 test\ntest@ubuntu-server:~$ sudo chgrp root test\ntest@ubuntu-server:~$ ls -l\ntotal 0\n-rw-rw-r-- 1 root root 0 Jan 24 10:43 test\n```\n\n再次操作该文件，会发现没权限：\n\n```bash\ntest@ubuntu-server:~$ chmod 777 test\nchmod: changing permissions of 'test': Operation not permitted\n```\n\n接着我们来看文件的复制、移动和删除，这里我们先创建一个新的目录并进入到此目录用于操作：\n\n```bash\ntest@ubuntu-server:~$ mkdir study\ntest@ubuntu-server:~$ cd study\ntest@ubuntu-server:~/study$\n```\n\n首先我们演示文件的复制操作，文件的复制使用 cp 命令，比如现在我们想把上一级目录中的 test 文件复制到当前目录中：\n\n```bash\ntest@ubuntu-server:~/study$ cp ../test test\ntest@ubuntu-server:~/study$ ls\ntest\n```\n\n那么如果我们想要将一整个目录进行复制呢？我们需要添加一个-r 参数表示将目录中的文件递归复制：\n\n```bash\ntest@ubuntu-server:~/study$ cd ~\ntest@ubuntu-server:~$ cp -r study study_copied\ntest@ubuntu-server:~$ ls -l\ntotal 8\ndrwxrwxr-x 2 test test 4096 Jan 24 10:16 study\ndrwxrwxr-x 2 test test 4096 Jan 24 10:20 study_copied\n-rw-rw-r-- 1 test test    0 Jan 24 09:32 test\n```\n\n可以看到我们的整个目录中所有的文件也一起被复制了。\n\n接着我们来看看移动操作，相当于是直接将一个文件转移到另一个目录中了，我们再创建一个目录用于文件的移动，并将 test 文件移动到此目录中，我们使用 mv 命令进行文件的移动：\n\n```bash\ntest@ubuntu-server:~$ mkdir study2\ntest@ubuntu-server:~$ mv test study2\ntest@ubuntu-server:~$ ls\nstudy  study2  study_copied\ntest@ubuntu-server:~$ cd study2\ntest@ubuntu-server:~/study2$ ls\ntest\n```\n\n现在我们想要移动个目录到另一个目录中，比如我们想将 study 目录移动到 study2 目录中：\n\n```bash\ntest@ubuntu-server:~$ mv study study2\ntest@ubuntu-server:~$ ls\nstudy2  study_copied\ntest@ubuntu-server:~$ cd study2\ntest@ubuntu-server:~/study2$ ls\nstudy  test\n```\n\nmv 命令不仅能实现文件的移动，还可以实现对文件重命名操作，比如我们想将文件 test 重命名为 yyds，那么直接将其进行移动操作即可：\n\n```bash\ntest@ubuntu-server:~/study2$ ls\nstudy  test\ntest@ubuntu-server:~/study2$ mv test yyds\ntest@ubuntu-server:~/study2$ ls\nstudy  yyds\n```\n\n最后就是删除命令了，使用 rm 进行删除操作，比如现在我们想删除 study2 目录（注意需要添加-r 参数表示递归删除文件夹中的内容）：\n\n```bash\ntest@ubuntu-server:~$ rm -r study2\ntest@ubuntu-server:~$ ls\nstudy_copied\n```\n\n而最常提到的 rm -rf /*正是删除根目录下所有的文件（非常危险的操作），-f 表示忽略不存在的文件，不进行任何提示，*是一个通配符，表示任意文件。这里我们演示一下删除所有.txt 结尾的文件：\n\n```bash\ntest@ubuntu-server:~$ touch 1.txt 2.txt 3.txt\ntest@ubuntu-server:~$ ls\n1.txt  2.txt  3.txt\ntest@ubuntu-server:~$ rm *.txt\ntest@ubuntu-server:~$ ls\ntest@ubuntu-server:~$\n```\n\n最后我们再来看文件的搜索，我们使用 find 命令来进行搜索，比如我想搜索/etc 目录下名为 passwd 的文件：\n\n```bash\ntest@ubuntu-server:~$ sudo find /etc -name passwd\n[sudo] password for test:\n/etc/pam.d/passwd\n/etc/passwd\n```\n\n它还支持通配符，比如搜索以 s 开头的文件：\n\n```bash\ntest@ubuntu-server:~$ sudo find /etc -name s*\n/etc/subuid\n/etc/screenrc\n/etc/sensors3.conf\n/etc/sysctl.conf\n/etc/sudoers\n/etc/shadow\n/etc/skel\n/etc/pam.d/su\n/etc/pam.d/sshd\n/etc/pam.d/sudo\n...\n```\n\n### 系统管理\n\n接着我们来查看一些系统管理相关的命令，比如我们 Windows 中的任务管理器，我们可以使用 top 命令来打开：\n\n```bash\ntop - 10:48:46 up  5:52,  1 user,  load average: 0.00, 0.00, 0.00\nTasks: 191 total,   2 running, 189 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.0 us,  0.2 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   3919.1 total,   2704.2 free,    215.0 used,    999.9 buff/cache\nMiB Swap:   3923.0 total,   3923.0 free,      0.0 used.   3521.4 avail Mem\n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n  10528 test      20   0    8944   3072   2652 R   0.7   0.1   0:00.07 top\n   9847 root      20   0       0      0      0 I   0.3   0.0   0:00.87 kworker/0:0-events\n      1 root      20   0  102760  10456   7120 S   0.0   0.3   0:02.02 systemd\n      2 root      20   0       0      0      0 S   0.0   0.0   0:00.01 kthreadd\n      3 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_gp\n      4 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_par_gp\n      6 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 kworker/0:0H-kblockd\n      8 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 mm_percpu_wq\n      9 root      20   0       0      0      0 S   0.0   0.0   0:00.15 ksoftirqd/0\n     10 root      20   0       0      0      0 R   0.0   0.0   0:01.49 rcu_sched\n     11 root      rt   0       0      0      0 S   0.0   0.0   0:00.24 migration/0\n     12 root     -51   0       0      0      0 S   0.0   0.0   0:00.00 idle_inject/0\n     14 root      20   0       0      0      0 S   0.0   0.0   0:00.00 cpuhp/0\n     15 root      20   0       0      0      0 S   0.0   0.0   0:00.00 cpuhp/1\n     16 root     -51   0       0      0      0 S   0.0   0.0   0:00.00 idle_inject/1\n     17 root      rt   0       0      0      0 S   0.0   0.0   0:00.30 migration/1\n     18 root      20   0       0      0      0 S   0.0   0.0   0:00.07 ksoftirqd/1\n     20 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 kworker/1:0H-kblockd\n```\n\n可以很清楚地看到当前 CPU 的使用情况以及内存的占用情况。\n\n按下数字键 1，可以展示所有 CPU 核心的使用情况：\n\n```bash\n%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n%Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n```\n\n按下 f 键可以设置以哪一列进行排序或是显示那些参数：\n\n```bash\nFields Management for window 1:Def, whose current sort field is %MEM\n   Navigate with Up/Dn, Right selects for move then <Enter> or Left commits,\n   'd' or <Space> toggles display, 's' sets sort.  Use 'q' or <Esc> to end!\n```\n\n按下 q 键即可退出监控界面。\n\n我们可以直接输入 free 命令来查看当前系统的内存使用情况：\n\n```bash\ntest@ubuntu-server:~$ free -m\n              total        used        free      shared  buff/cache   available\nMem:           3919         212        2706           1         999        3523\nSwap:          3922           0        3922\n```\n\n其中-m 表示以 M 为单位，也可以-g 表示以 G 为单位，默认是 kb 为单位。\n\n最后就是磁盘容量，我们可以使用 lsblk 来查看所有块设备的信息，其中就包括我们的硬盘、光驱等：\n\n```bash\ntest@ubuntu-server:~$ lsblk\nNAME                      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nloop0                       7:0    0 48.9M  1 loop /snap/core18/2127\nloop1                       7:1    0 28.1M  1 loop /snap/snapd/12707\nloop2                       7:2    0   62M  1 loop /snap/lxd/21032\nsr0                        11:0    1 1024M  0 rom\nnvme0n1                   259:0    0   20G  0 disk\n├─nvme0n1p1               259:1    0  512M  0 part /boot/efi\n├─nvme0n1p2               259:2    0    1G  0 part /boot\n└─nvme0n1p3               259:3    0 18.5G  0 part\n  └─ubuntu--vg-ubuntu--lv 253:0    0 18.5G  0 lvm  /\n```\n\n可以看到 nvme 开头的就是我们的硬盘（这个因人而异，可能你们的是 sda，磁盘类型不同名称就不同）可以看到 nvme0n1 容量为 20G，并且 512M 用作存放 EFI 文件，1G 存放启动文件，剩余容量就是存放系统文件和我们的用户目录。\n\n这里要提到一个挂载的概念：\n\n挂载，指的就是将设备文件中的顶级目录连接到 Linux 根目录下的某一目录（最好是空目录），访问此目录就等同于访问设备文件。\n\n比如我们的主硬盘，挂载点就被设定为/根目录，而我们所有保存的文件都会存储在硬盘中，如果你有 U 盘（最好将 U 盘的文件格式改为 ExFat，可以直接在 Windows 中进行格式化，然后随便放入一些文件即可）之类的东西，我们可以演示一下对 U 盘进行挂载：\n\n```bash\ntest@ubuntu-server:~$ sudo fdisk -l\n...\nDisk /dev/sda: 60 GiB, 64424509440 bytes, 125829120 sectors\nDisk model: USB DISK\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x4a416279\n\nDevice     Boot     Start       End   Sectors  Size Id Type\n/dev/sda1  *       614400 125214719 124600320 59.4G  7 HPFS/NTFS/exFAT\n/dev/sda2       125214720 125825022    610303  298M  6 FAT16\n```\n\n将 U 盘插入电脑，选择连接到 Linux，输入 sudo fdisk -l 命令来查看硬盘实体情况，可以看到有一个 USB DISK 设备，注意观察一下是不是和自己的 U 盘容量一致，可以看到设备名称为/dev/sda1。\n\n接着我们设备挂载到一个目录下：\n\n```bash\ntest@ubuntu-server:~$ mkdir u-test\ntest@ubuntu-server:~$ sudo mount /dev/sda1 u-test/\ntest@ubuntu-server:~$ cd u-test/\ntest@ubuntu-server:~/u-test$ ls\n CGI\n cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso\n cn_windows_7_professional_x64_dvd_x15-65791.iso\n cn_windows_8.1_enterprise_with_update_x64_dvd_6050374.iso\n cn_windows_8.1_professional_vl_with_update_x64_dvd_4050293.iso\n cn_windows_server_2019_updated_july_2020_x64_dvd_2c9b67da.iso\n'System Volume Information'\n zh-cn_windows_10_consumer_editions_version_21h1_updated_sep_2021_x64_dvd_991b822f.iso\n zh-cn_windows_11_consumer_editions_x64_dvd_904f13e4.iso\n```\n\n最后进入到此目录中，就能看到你 U 盘中的文件了，如果你不想使用 U 盘了，可以直接取消挂载：\n\n```plain\ntest@ubuntu-server:~/u-test$ cd ..\ntest@ubuntu-server:~$ sudo umount /dev/sda1\n```\n\n最后我们可以通过 df 命令查看当前磁盘使用情况：\n\n```bash\ntest@ubuntu-server:~$ df -m\nFilesystem                        1M-blocks  Used Available Use% Mounted on\nudev                                   1900     0      1900   0% /dev\ntmpfs                                   392     2       391   1% /run\n/dev/mapper/ubuntu--vg-ubuntu--lv     18515  6544     11009  38% /\ntmpfs                                  1960     0      1960   0% /dev/shm\ntmpfs                                     5     0         5   0% /run/lock\ntmpfs                                  1960     0      1960   0% /sys/fs/cgroup\n/dev/nvme0n1p2                          976   109       800  12% /boot\n/dev/nvme0n1p1                          511     4       508   1% /boot/efi\n/dev/loop0                               49    49         0 100% /snap/core18/2127\n/dev/loop1                               29    29         0 100% /snap/snapd/12707\n/dev/loop2                               62    62         0 100% /snap/lxd/21032\ntmpfs                                   392     0       392   0% /run/user/1000\n```\n\n输入 ps 可以查看当前运行的一些进程，其实和 top 有点类似，但是没有监控功能，只能显示当前的。\n\n```bash\ntest@ubuntu-server:~$ ps\n    PID TTY          TIME CMD\n  11438 pts/0    00:00:00 bash\n  11453 pts/0    00:00:00 ps\n```\n\n添加-ef 查看所有的进程：\n\n```bash\ntest@ubuntu-server:~$ ps -ef\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 04:55 ?        00:00:02 /sbin/init\nroot           2       0  0 04:55 ?        00:00:00 [kthreadd]\nroot           3       2  0 04:55 ?        00:00:00 [rcu_gp]\nroot           4       2  0 04:55 ?        00:00:00 [rcu_par_gp]\nroot           6       2  0 04:55 ?        00:00:00 [kworker/0:0H-kblockd]\n...\n```\n\n我们可以找到对应的进程 ID（PID），使用 kill 命令将其强制终止：\n\n```bash\ntest@ubuntu-server:~$ ps\n    PID TTY          TIME CMD\n  11438 pts/0    00:00:00 bash\n  11455 pts/0    00:00:00 ps\ntest@ubuntu-server:~$ kill -9 11438\nConnection to 192.168.10.6 closed.\n```\n\n比如我们可以将当前会话的 bash 给杀死，那么会导致我们的连接直接断开，其中-9 是一个信号，表示杀死进程：\n\n- 1 (HUP)：重新加载进程。\n- 9 (KILL)：杀死一个进程。\n- 15 (TERM)：正常停止一个进程。\n\n最后如果我们想要正常关机，只需要输入 shutdown 即可，系统会创建一个关机计划，并在指定时间关机，或是添加 now 表示立即关机：\n\n```bash\ntest@ubuntu-server:~$ sudo shutdown\n[sudo] password for test:\nShutdown scheduled for Mon 2022-01-24 11:46:18 UTC, use 'shutdown -c' to cancel.\ntest@ubuntu-server:~$ sudo shutdown now\nConnection to 192.168.10.6 closed by remote host.\nConnection to 192.168.10.6 closed.\n```\n\n### 压缩解压\n\n比较常用的压缩和解压也是重点，我们在 Windows 中经常需要下载一些压缩包，并且将压缩包解压才能获得里面的文件，而 Linux 中也支持文件的压缩和解压。\n\n这里我们使用 tar 命令来完成文件压缩和解压操作，在 Linux 中比较常用的是 gzip 格式，后缀名一般为.gz，tar 命令的参数-c 表示对文件进行压缩，创建新的压缩文件，-x 表示进行解压操作，-z 表示以 gzip 格式进行操作，-v 可以在处理过程中输出一些日志信息，-f 表示对普通文件进行操作，这里我们创建三个文件并对这三个文件进行打包：\n\n```bash\ntest@ubuntu-server:~$ tar -zcvf test.tar.gz *.txt\n1.txt\n2.txt\n3.txt\ntest@ubuntu-server:~$ ls\n1.txt  2.txt  3.txt  test.tar.gz\ntest@ubuntu-server:~$\n```\n\n接着我们删除刚刚三个文件，再执行解压操作，得到压缩包中文件：\n\n```bash\ntest@ubuntu-server:~$ rm *.txt\ntest@ubuntu-server:~$ ls\ntest.tar.gz\ntest@ubuntu-server:~$ tar -zxvf test.tar.gz\n1.txt\n2.txt\n3.txt\ntest@ubuntu-server:~$ ls\n1.txt  2.txt  3.txt  test.tar.gz\n```\n\n同样的，我们也可以对一个文件夹进行打包：\n\n```bash\ntest@ubuntu-server:~$ mv *.txt test\ntest@ubuntu-server:~$ tar -zcvf test.tar.gz test/\ntest/\ntest/1.txt\ntest/2.txt\ntest/3.txt\ntest@ubuntu-server:~$ rm -r test\ntest@ubuntu-server:~$ ls\ntest.tar.gz\ntest@ubuntu-server:~$ tar -zxvf test.tar.gz\ntest/\ntest/1.txt\ntest/2.txt\ntest/3.txt\ntest@ubuntu-server:~$ ls\ntest  test.tar.gz\ntest@ubuntu-server:~$ ls test\n1.txt  2.txt  3.txt\n```\n\n到此，Linux 的一些基本命令就讲解为止。\n\n---\n\n## vim 文本编辑器\n\n和 Windows 中的记事本一样，Linux 中也有文本编辑器，叫做 Vi 编辑器，Ubuntu 中内置了 Vi 编辑器的升级版 Vim，我们这里就讲解 Vim 编辑器的使用。\n\n我们可以直接输入 vim 文件名称来使用 Vim 编辑器对文本文件进行编辑：\n\n```bash\ntest@ubuntu-server:~$ vim hello.txt\n```\n\n进入编辑器之后，我们发现界面变成了：\n\n```bash\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n~\n\"hello.txt\" [New File]                                                            0,0-1         All\n```\n\n这时我们直接输入内容是无法完成的，因为默认进入之后为命令模式，Vim 编辑器默认有三种模式：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1715788971404-1ca508da-5bf5-4490-ab03-6a2d9541cc2a.png)\n\n- 命令模式：此模式下可以输入任意的命令进行操作，所有的输入都被看做是命令输入，而不是文本编辑输入。\n- 编辑模式：此模式下输入的任何内容都会以文本编辑方式写入到文件中，就像我们直接在 Windows 的记事本中写内容一样。\n- 末行模式：此模式下用于输入一些复杂命令，会在最后一行进行复杂命令的输入。\n\n在命令模式下，我们可以直接按下键盘上的 i，此命令表示进行插入操作，会自动切换到编辑模式，这时可以看到最下方变为：\n\n```bash\n~\n~\n~\n~\n~\n~\n~\n-- INSERT --                                                                      1,1           All\n```\n\n而这时我们所有的输入内容都可以直接写到文件中了，如果我们想回到命令模式，按下 Esc 键即可。\n\n除了 i 以外，我们也可以按下 a 表示从当前光标所在位置之后继续写，与 i 不同的是，i 会在光标之前继续写，o 会直接跳到下一行，而 A 表示在当前行的最后继续写入，I 表示在当前行的最前面继续写入。\n\n这里我们随便粘贴一段文本信息进去（不要用 Ctrl+V，Linux 中没这操作，XShell 右键点粘贴）：\n\n```plain\nI was hard on people sometimes, probably harder than I needed to be.\nI remember the time when Reed was six years old, coming home, and I had just fired somebody that day.\nAnd I imagined what it was like for that person to tell his family and his young son that he had lost his job.\nIt was hard.\nBut　somebody’s got to do it.\nI figured that it was always my job to make sure that the team was excellent, and if I didn’t do it, nobody was going to do it.\nYou always have to keep pushing to innovate.\nDylan could have sung protest songs forever and probably made a lot of money, but he didn’t.\nHe had to move on, and when he did, by going electric in 1965, he alienated a lot of people.\n```\n\n在我们编辑完成之后，需要进入到末行模式进行文件的保存并退出，按下:进入末行模式，再输入 wq 即可保存退出。\n\n接着我们来看一些比较常用的命令，首先是命令模式下的光标移动命令：\n\n- ^ 直接调到本行最前面\n- $ 直接跳到本行最后面\n- gg 直接跳到第一行\n- [N]G 跳转到第 N 行\n- [N]方向键 向一个方向跳转 N 个字符\n\n在末行模式下，常用的复杂命令有：\n\n- :set number 开启行号\n- :w 保存\n- :wq 或:x 保存并关闭\n- :q 关闭\n- :q! 强制关闭\n\n我们可以输入/或是?在末行模式中使用搜索功能，比如我们要搜索单词 it：\n\n```bash\n/it\n```\n\n接着会在文本中出现高亮，按 n 跳转到下一个搜索结果，?是从后向前搜索，/是从前向后搜索。\n\n它还支持替换功能，但是使用起来稍微比较复杂，语法如下：\n\n```bash\n:[addr]s/源字符串/目的字符串/[option]\n```\n\naddr 表示第几行或是一个范围，option 表示操作类型：\n\n- g: globe,表示全局替换\n- c: confirm,表示进行确认\n- p: 表示替代结果逐行显示(Ctrl + L 恢复屏幕)\n- i: ignore,不区分大小写\n\n比如我们要将当前行中的 it 全部替换为 he，那么可以这样写：\n\n```plain\n:s/it/he/g\n```\n\n实际上除了以上三种模式外，还有一种模式叫做可视化模式，按下键盘上的 v 即可进入，它能够支持选取一段文本，选取后，我们可以对指定段落的文本内容快速进行复制、剪切、删除、插入等操作，非常方便。在此模式下，我们可以通过上下左右键进行选取，以进入可视化模式时的位置作为基本位置，通过移动另一端来进行选取。\n\n我们可以使用以下命令来对选中区域进行各种操作：\n\n- y 复制选中区域\n- d/x 剪切（删除）选中区域\n- p 粘贴\n- u 撤销上一步\n\n当然，这些命令在命令模式下也可以使用，但是可视化模式下使用更适合一些。\n\n---\n\n## 环境安装和项目部署\n\n在学习完了 Linux 操作系统的一些基本操作之后，我们接着来看如何进行项目的环境安装和部署，包括安装 JDK、Nginx 服务器，以及上传我们的 SpringBoot 项目并运行。\n\n我们可以直接使用 apt 进行软件的安装，它是一个高级的安装包管理工具，我们可以直接寻找对应的软件进行安装，无需再去官网进行下载，非常方便，软件仓库中默认已经帮助我们存放了大量实用软件的安装包，只需要一个安装命令就可以进行安装了。\n\n实际上 Ubuntu 系统已经为我们自带了一些环境了，比如 Python3：\n\n```plain\ntest@ubuntu-server:~$ python3\nPython 3.8.10 (default, Nov 26 2021, 20:14:08)\n[GCC 9.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> print(\"HelloWorld！\")\nHelloWorld！\n>>> exit()\n```\n\nC 语言的编译工具 GCC 可以通过 APT 进行安装：\n\n```plain\nsudo apt install gcc\n```\n\n安装后，可以编写一个简单的 C 语言程序并且编译为可执行文件：\n\n```c\n#include<stdio.h>\n\nint main(){\n        printf(\"Hello World!\\n\");\n}\n```\n\n```plain\ntest@ubuntu-server:~$ vim hello.c\ntest@ubuntu-server:~$ gcc hello.c -o hello\ntest@ubuntu-server:~$ ./hello\nHello World!\n```\n\n而 JDK 实际上安装也非常简单，通过 APT 即可：\n\n```plain\ntest@ubuntu-server:~$ sudo apt install openjdk-8-j\nopenjdk-8-jdk           openjdk-8-jre           openjdk-8-jre-zero\nopenjdk-8-jdk-headless  openjdk-8-jre-headless\ntest@ubuntu-server:~$ sudo apt install openjdk-8-jdk\n```\n\n接着我们来测试一下编译和运行，首先编写一个 Java 程序：\n\n```plain\ntest@ubuntu-server:~$ vim Main.java\n```\n\n```plain\npublic class Main{\n        public static void main(String[] args){\n                System.out.println(\"Hello World！\");\n        }\n}\n```\n\n```plain\ntest@ubuntu-server:~$ javac Main.java\ntest@ubuntu-server:~$ ls\nMain.class  Main.java\ntest@ubuntu-server:~$ java Main\nHello World！\n```\n\n接着我们来部署一下 Redis 服务器：\n\n```plain\ntest@ubuntu-server:~$ sudo apt install redis\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1715788971654-25de2aeb-6200-44b7-9f93-f75a3e6837a8.png)\n\n安装完成后，可以直接使用 redis-cli 命令打开 Redis 客户端连接本地的服务器：\n\n```plain\ntest@ubuntu-server:~$ redis-cli\n127.0.0.1:6379> keys *\n(empty list or set)\n```\n\n使用和之前 Windows 下没有区别。\n\n接着我们安装一下 MySQL 服务器，同样的，直接使用 apt 即可：\n\n```plain\nsudo apt install mysql-server-8.0\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1715788971584-7e843e1b-2fd8-44a1-8de1-07b5316f64be.png)\n\n我们直接直接登录 MySQL 服务器，注意要在 root 权限下使用，这样就不用输入密码了：\n\n```plain\nsudo mysql -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 11\nServer version: 8.0.27-0ubuntu0.20.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2021, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> exit\n```\n\n可以发现实际上就是我们之前在 Windows 的 CMD 中使用的样子，接着我们就创建一个生产环境下使用的数据库：\n\n```plain\nmysql> create database book_manage;\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| book_manage        |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.01 sec)\n```\n\n接着我们创建一个用户来使用这个数据，一会我们就可以将 SpringBoot 配置文件进行修改并直接放到此服务器上进行部署。\n\n```plain\nmysql> create user test identified by '123456';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> grant all on book_manage.* to test;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n如果觉得这样很麻烦不是可视化的，可以使用 Navicat 连接进行操作，注意开启一下 MySQL 的外网访问。\n\n```plain\ntest@ubuntu-server:~$ mysql -u test -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 13\nServer version: 8.0.27-0ubuntu0.20.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2021, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| book_manage        |\n| information_schema |\n+--------------------+\n2 rows in set (0.01 sec)\n```\n\n使用 test 用户登录之后，查看数据库列表，有 book_manage 就 OK 了。\n\n最后我们修改一下 SpringBoot 项目的生产环境配置即可：\n\n```yaml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/bookmanage\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: zachary\n    password: 980226\n  mail:\n    host: smtp.163.com\n    username: zachary26626@163.com\n    password: YALHSGARSOCGDNJH\n  redis:\n    host: localhost\n  jpa:\n    show-sql: false\n    hibernate:\n      ddl-auto: update\nspringfox:\n  documentation:\n    enabled: false\n```\n\n然后将之前的 springboot 项目中的 static 文件拿走，之后打包，最后启动我们的项目：\n\n```plain\ntest@ubuntu-server:~$ java -jar springboot-project-0.0.1-SNAPSHOT.jar\n```\n\n现在我们将前端页面的 API 访问地址修改为我们的 SpringBoot 服务器地址，即可正常使用了。\n\n我们也可以将我们的静态资源使用 Nginx 服务器进行代理：\n\nNginx(\"engine x\")是一款是由俄罗斯的程序设计师 Igor Sysoev 所开发高性能的 Web 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 在高连接并发的情况下，Nginx 是 Apache 服务器不错的替代品。\n\nNginx 非常强大，它能够通提供非常方便的反向代理服务，并且支持负载均衡，不过我们这里用一下反向代理就可以了，实际上就是代理我们的前端页面，然后我们访问 Nginx 服务器即可访问到静态资源，这样我们前后端都放在了服务器上（你也可以搞两台服务器，一台挂静态资源一台挂 SpringBoot 服务器，实现真正意义上的分离，有条件的还能上个域名和证书啥的）。\n\n安装如下：\n\n```plain\ntest@ubuntu-server:~$ sudo apt install nginx\n```\n\n安装完成后，我们可以直接访问：[http://192.168.10.4/，能够出现 Nginx 页面表示安装成功！](http://192.168.10.4/%EF%BC%8C%E8%83%BD%E5%A4%9F%E5%87%BA%E7%8E%B0Nginx%E9%A1%B5%E9%9D%A2%E8%A1%A8%E7%A4%BA%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%EF%BC%81)\n\n接着我们将静态资源上传到 Linux 服务器中，\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1715788971613-f8009179-9c24-4b05-b17a-25c334092245.png)\n\n然后对 Nginx 进行反向代理配置，写到 http 大括号里面去：\n\n```plain\ntest@ubuntu-server:~$ cd /etc/nginx/\ntest@ubuntu-server:/etc/nginx$ ls\nconf.d    koi-utf     modules-available  proxy_params  sites-enabled  win-utf\nfastcgi.conf  koi-win     modules-enabled    scgi_params  snippets\nfastcgi_params  mime.types  nginx.conf         sites-available  uwsgi_params\ntest@ubuntu-server:/etc/nginx$ sudo vim nginx.conf\n```\n\n```plain\nserver {\n                listen       80;\n                server_name  172.16.59.130;\n                add_header Access-Control-Allow-Origin *;\n                location / {\n                        root /home/zachary/static;\n                        charset utf-8;\n                        add_header 'Access-Control-Allow-Origin' '*';\n                        add_header 'Access-Control-Allow-Credentials' 'true';\n                        add_header 'Access-Control-Allow-Methods' '*';\n                        add_header 'Access-Control-Allow-Headers' 'Content-Type,*';\n                }\n        }\n```\n\n重启一下 nginx 服务器\n\n```plain\nsudo systemctl restart nginx.service\n```\n\n```plain\njava -jar springboot-project-0.0.1-SNAPSHOT.jar\n```\n\n然后就可以直接访问到我们的前端页面了，这时再开启 SpringBoot 服务器即可，可以在最后添加&符号表示后台启动。\n\n输入：[http://172.16.59.130/](http://172.16.59.130/)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1715788971666-73d7f965-90e5-473a-adea-6de2742b726e.png)\n\n> 更新: 2024-05-16 00:11:56  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/qhyvxbr4m26peqma>\n","tags":["Linux"],"categories":["Linux"]},{"title":"API鉴权","url":"/blog/2848525117/","content":"\n# API 鉴权\n\n为了不允许，任何人都可以调用后端的 api 接口，现在给 api 接口加上权限校验，只有登录过的才能调用后端的 api 接口，之前在`auth.py`中实现了一个校验，通过依赖注入给 api 直接加上即可\n\n## 依赖注入\n\n比如给`courseApi.py`的所有接口加上 token 校验的依赖\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.auth import auth_handler\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import CourseSearch, CourseCreate, CourseUpdate\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\n@course_router.post(\"/add\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def add(course: CourseCreate, db_session: Session = Depends(get_db_session)):\n    CourseService.add_course(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.put(\"/update\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)):\n    CourseService.update_by_id(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.delete(\"/delete/{id}\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    CourseService.delete_by_id(id, db_session)\n    result = Result.success()\n    return result\n\n\napp.include_router(course_router)\n```\n\n或者给整个/course 下的 api 都注入依赖，\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom api import app\nfrom common.auth import auth_handler\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import CourseSearch, CourseCreate, CourseUpdate\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix='/course', dependencies=[Depends(auth_handler.auth_required)])\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\n@course_router.post(\"/add\", response_model=ResultModel)\nasync def add(course: CourseCreate, db_session: Session = Depends(get_db_session)):\n    CourseService.add_course(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.put(\"/update\", response_model=ResultModel)\nasync def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)):\n    CourseService.update_by_id(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.delete(\"/delete/{id}\", response_model=ResultModel)\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    CourseService.delete_by_id(id, db_session)\n    result = Result.success()\n    return result\n\n\napp.include_router(course_router)\n\n```\n\n这样如果没有登录的情况下，直接用 postman 是无法调用接口的\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710427325734-11834e2f-d189-420d-8d57-8b67386e6943.png)\n\n## 登录 token\n\n虽然现在前端页面上已经登录了，但由于请求头没有带上 token，所以无法获取数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710419406685-19044c40-990d-496d-9cad-a0b7dbde9e49.png)\n\n为了让浏览器拿到后端生成的这个 token，需要改变一下登录后的返回结果\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import select\n\nfrom common.auth import auth_handler\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.admin import Admin, AdminModel, AdminLoginResponse\n\n\nclass AdminService:\n    @staticmethod\n    def login(admin: AdminModel, db_session: Session) -> Admin:\n        query = select(Admin).where(Admin.username == admin.username)\n        exist_admin: Admin = db_session.execute(query).scalars().first()\n        if not exist_admin:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(admin.password, exist_admin.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        admin_login_response = AdminLoginResponse(id=exist_admin.id, username=exist_admin.username,\n                                                  token=auth_handler.encode_token(exist_admin.id))\n        return admin_login_response\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport bcrypt\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Admin(Base):\n    __tablename__ = \"admin\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass AdminModel(BaseModel):\n    username: str\n    password: str\n\n\nclass AdminLoginResponse(BaseModel):\n    id: int\n    username: str\n    token: str\n```\n\n这样子在重新登录之后就可以获得后端返回的 token，前端 axios 会在发起请求之前，将 token 放到请求头中，再向后端请求 api 接口\n\n登录后会返回 token：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710420080541-20a155e1-15a0-4052-ae34-c60a582e6b41.png)\n\n能正确获取数据：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710427424832-4e162436-19bc-4d6d-b51a-e81eae83e769.png)\n\n## token 超时失效\n\n为了让前端的 token 失效之后，自动回到 Login 页面，需要做些调整\n\n当请求 api 接口的时候返回的状态值为 401 的时候，移除存储的 student-user，这样就会自动跳转回 login 页面重新进行登录\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                >编辑</el-button\n              >\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"handleDelete(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"课程信息\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"课程名称\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程编号\">\n          <el-input v-model=\"data.form.number\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程描述\">\n          <el-input v-model=\"data.form.description\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课时\">\n          <el-input v-model=\"data.form.periods\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"任课教师\">\n          <el-input v-model=\"data.form.teacher\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\nimport router from \"@/router\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: {},\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = {};\n};\n\nconst save = () => {\n  request\n    .request({\n      url: data.form.id ? \"/course/update\" : \"/course/add\",\n      method: data.form.id ? \"put\" : \"post\",\n      data: data.form,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\nconst handleEdit = (row) => {\n  data.form = JSON.parse(JSON.stringify(row));\n  data.formVisible = true;\n};\n\nconst handleDelete = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/course/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"删除成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      ElMessage.error(err.response?.data?.msg || err.message);\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n\u0000![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710445924935-211ab920-04f6-4bd6-ae07-b125be316f6b.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710445934776-e2d6aab9-287b-4cdd-be66-61b04249bb07.png)\n\n## token 超时配置\n\n为了更便捷地配置 token 的超时时间，设置一下超时时间常量\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom common.config import config\n\nHOST = config.env.get(\"HOST\")\nPORT = config.env.get(\"PORT\")\n\nMYSQL_DIALECT = config.env.get(\"MYSQL_DIALECT\")\nMYSQL_HOST = config.env.get(\"MYSQL_HOST\")\nMYSQL_PORT = config.env.get(\"MYSQL_PORT\")\nMYSQL_USER = config.env.get(\"MYSQL_USER\")\nMYSQL_PASSWORD = config.env.get(\"MYSQL_PASSWORD\")\nMYSQL_DATABASE = config.env.get(\"MYSQL_DATABASE\")\n\nTOKEN_EXPIRE_DAYS = 7\nTOKEN_EXPIRE_MINUTES = 0\nTOKEN_EXPIRE_SECONDS = 0\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime, timedelta\n\nimport jwt\nfrom fastapi import Security\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom passlib.context import CryptContext\n\nfrom common.constant import TOKEN_EXPIRE_DAYS, TOKEN_EXPIRE_MINUTES, TOKEN_EXPIRE_SECONDS\nfrom exception.customException import TokenException\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n    secret = \"SECRET\"\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, plain_password, hashed_password):\n        return self.pwd_context.verify(plain_password, hashed_password)\n\n    def encode_token(self, user_id):\n        payload = {\n            'exp': datetime.utcnow() + timedelta(days=TOKEN_EXPIRE_DAYS, minutes=TOKEN_EXPIRE_MINUTES,\n                                                 seconds=TOKEN_EXPIRE_SECONDS),\n            'iat': datetime.utcnow(),\n            'sub': user_id\n        }\n        return jwt.encode(\n            payload,\n            self.secret,\n            algorithm='HS256'\n        )\n\n    def decode_token(self, token):\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=['HS256'])\n            return payload['sub']\n        except jwt.ExpiredSignatureError:\n            raise TokenException(\"token过期\")\n        except jwt.InvalidTokenError:\n            raise TokenException(\"无效token\")\n\n    def auth_required(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        return self.decode_token(auth.credentials)\n\n\nauth_handler = AuthHandler()\n```\n\n---\n\n> 更新: 2024-05-03 21:07:51  \n> 原文: <https://www.yuque.com/zacharyblock/iacda/po1gqzqal77c94sl>\n","tags":["Python","Vue3","FastAPI","实战"],"categories":["FastAPI入门"]},{"title":"课程管理","url":"/blog/2192504553/","content":"\n# 课程管理\n\n接下来开发一个课程管理功能，用于管理和显示学生课程的\n\n## 数据库\n\n先设计一下课程数据表，命名为 course，字段（课程名称、课程编号、课程描述、课时、任课老师）\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710344223757-045d4a5b-3901-4683-a2e6-b30d7fe489b8.png)\n\n## 课程页面\n\n在前端的项目目录下的`/manage`下创建一个`Course.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"primary\" style=\"margin: 0 0 0 10px\" plain\n        >查询</el-button\n      >\n      <el-button type=\"info\" plain>重置</el-button>\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button type=\"primary\" style=\"margin-bottom: 5px\" plain\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination background layout=\"prev, pager, next\" :total=\"1000\" />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\n\nconst data = reactive({\n  name: \"\",\n  tableData: [\n    {\n      id: 1,\n      name: \"大学英语\",\n      number: \"001\",\n      description: \"大学英语不想学-6学分\",\n      periods: \"36课时\",\n      teacher: \"张三\",\n    },\n    {\n      id: 2,\n      name: \"高等数学\",\n      number: \"002\",\n      description: \"高等数学好难学-4学分\",\n      periods: \"24课时\",\n      teacher: \"李四\",\n    },\n    {\n      id: 3,\n      name: \"必修物理\",\n      number: \"003\",\n      description: \"必修物理有难度-2学分\",\n      periods: \"24课时\",\n      teacher: \"王五\",\n    },\n    {\n      id: 4,\n      name: \"思想政治\",\n      number: \"004\",\n      description: \"思想政治必修课-4学分\",\n      periods: \"18课时\",\n      teacher: \"赵六\",\n    },\n    {\n      id: 5,\n      name: \"微机原理\",\n      number: \"005\",\n      description: \"微机原理很基础-3学分\",\n      periods: \"24课时\",\n      teacher: \"钱七\",\n    },\n    {\n      id: 6,\n      name: \"通信原理\",\n      number: \"006\",\n      description: \"通信原理很难懂-4学分\",\n      periods: \"24课时\",\n      teacher: \"孙八\",\n    },\n    {\n      id: 7,\n      name: \"离散数学\",\n      number: \"007\",\n      description: \"离散数学很离散-2学分\",\n      periods: \"18课时\",\n      teacher: \"周九\",\n    },\n    {\n      id: 8,\n      name: \"工程制图\",\n      number: \"008\",\n      description: \"工程制图好有趣-3学分\",\n      periods: \"24课时\",\n      teacher: \"吴十\",\n    },\n  ],\n});\n</script>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          src=\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\"\n          alt=\"\"\n          style=\"width: 40px; height: 40px\"\n        />\n        <span style=\"margin-left: 5px\">管理员</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710345904561-545c4764-d0b5-40d6-85ce-e80b94fbaf5a.png)\n\n## 课程查询 api\n\n### Course 实体类定义\n\n在项目目录`/model`下创建一个`course.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Course(Base):\n    __tablename__ = \"course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=False)\n    periods: Mapped[str] = mapped_column(String(255), nullable=False)\n    teacher: Mapped[str] = mapped_column(String(255), nullable=False)\n\n```\n\n### 课程管理 Api 接口\n\n#### courseApi\n\n在项目目录`/api`下创建一个`courseApi.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_list = CourseService.select_page(db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\napp.include_router(course_router)\n```\n\n需要在`/api/__init__.py`下增加 courseApi\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler, courseApi\n```\n\n#### courseService\n\n在项目目录`/service`下创建一个`courseService.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import desc, select\n\nfrom model import Session\nfrom model.course import Course\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        result = db_session.execute(query).scalars().all()\n        return result\n```\n\n#### 分页插件\n\n在项目路径的`/common`下创建一个`pageHelper.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\n\n\nclass Page:\n    list: list\n    total: int\n    pageNum: int\n    pageSize: int\n\n    def __init__(self, list: list, total: int, pageNum: int, pageSize: int):\n        self.list = list\n        self.total = total\n        self.pageNum = pageNum\n        self.pageSize = pageSize\n\n\nclass PageHelper:\n    page: int\n    size: int\n    limit: int\n    offset: int\n\n    def __init__(self, page: int, size: int, limit: int, offset: int):\n        self.page = page\n        self.size = size\n        self.limit = limit\n        self.offset = offset\n\n    @classmethod\n    def startPage(cls, page: int, size: int):\n        limit = size\n        offset = size * (page - 1)\n        return cls(page, size, limit, offset)\n\n    def of(self, data):\n        data_list = [jsonable_encoder(dataitem) for dataitem in data[self.offset:self.offset + self.limit]]\n        data_total = len(data)\n        page = Page(data_list, data_total, self.page, self.size)\n        return jsonable_encoder(page)\n\n```\n\n#### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710348643107-29bbfdfb-d10f-4c85-b147-83ff95950f89.png)\n\n可以发现，请求是成功的，但就是没数据，因为数据库里面是空的，给数据库中插入数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710348776973-d6ed84e3-0822-4b77-aa5a-36160f5b9d8a.png)\n\n再次使用 postman 测试一下\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710348855186-37b36339-051a-4ee2-bbad-c131429d1dd9.png)\n\n## 增删查改实现\n\n### 数据分页\n\n前端这块需要调用分页查询的请求接口，并将结果显示出来\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"primary\" style=\"margin: 0 0 0 10px\" plain\n        >查询</el-button\n      >\n      <el-button type=\"info\" plain>重置</el-button>\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button type=\"primary\" style=\"margin-bottom: 5px\" plain\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\n\nconst data = reactive({\n  name: \"\",\n  tableData: [],\n  total: 0,\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: 1,\n        pageSize: 5,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n</script>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710350328830-b3e6c9a9-134a-417b-9cac-679a67ca7b5e.png)\n\n虽然可以显示一部分数据，但是这个换页有问题，不显示后续跳转的页面按钮\n\n需要绑定一下这两个值\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710350466618-783bd600-76cf-4fc5-8f7e-416b946783af.png)\n\n同时还需要，在换了页面之后也重新刷新一下数据，触发 current-change\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710350803714-c97f58de-c82c-4148-a218-fbee9b491178.png)\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"primary\" style=\"margin: 0 0 0 10px\" plain\n        >查询</el-button\n      >\n      <el-button type=\"info\" plain>重置</el-button>\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button type=\"primary\" style=\"margin-bottom: 5px\" plain\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\n\nconst data = reactive({\n  name: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n</script>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710350849051-ebf1ebe5-e160-456f-8c6c-52fb710cf57f.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710350855737-b858fd91-310f-4d67-97a7-fe92f984c359.png)\n\n分页成功实现了\n\n### 查询和重置\n\n为了依据课程名称实现筛查的功能，需要传递一个`name`字段传给后端进行数据库层面的模糊查询\n\n重置按钮要将查询的内容清空，同时显示回完整的数据\n\n#### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button type=\"primary\" style=\"margin-bottom: 5px\" plain\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\n\nconst data = reactive({\n  name: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  load();\n};\n</script>\n```\n\n#### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_list = CourseService.select_page(name, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\napp.include_router(course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import desc, select\n\nfrom model import Session\nfrom model.course import Course\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(name, db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        if name:\n            query = query.where(Course.name.like(f\"%{name}%\"))\n        result = db_session.execute(query).scalars().all()\n        return result\n```\n\n#### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710351673810-56f5faca-7e70-48c0-b9cf-c52d7b1256b9.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710351685682-0cbf7f2e-530d-48c0-bb1b-5d5b910848e6.png)\n\n### 查询扩展\n\n当需要筛选的字段不只是`课程名称`时，需要怎么处理；比如加上`课程编号`、`任课教师`进行多条件模糊查询\n\n#### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button type=\"primary\" style=\"margin-bottom: 5px\" plain\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n</script>\n```\n\n#### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import Course, CourseSearch\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\napp.include_router(course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import desc, select\n\nfrom model import Session\nfrom model.course import Course, CourseSearch\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(course_search: CourseSearch, db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        if course_search.name:\n            query = query.where(Course.name.like(f\"%{course_search.name}%\"))\n        if course_search.number:\n            query = query.where(Course.number.like(f\"%{course_search.number}%\"))\n        if course_search.teacher:\n            query = query.where(Course.teacher.like(f\"%{course_search.teacher}%\"))\n        result = db_session.execute(query).scalars().all()\n        return result\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Course(Base):\n    __tablename__ = \"course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=False)\n    periods: Mapped[str] = mapped_column(String(255), nullable=False)\n    teacher: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass CourseSearch(BaseModel):\n    name: str | None\n    number: str | None\n    teacher: str | None\n```\n\n#### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710352618882-cb1e9708-6bd4-4ca2-bfd3-932e95f7dcb5.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710352626029-9e559e62-e9d0-46c5-ab64-e2ff7aba1ae9.png)\n\n### 新增\n\n下面实现给课程表新增数据的功能，需要点击`新增`按钮后，出现弹窗\n\n在官网找一个`Dialog`组件\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710353096927-a86240ee-4794-4e32-8e5f-ceb8e24b351c.png)\n\n#### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"课程信息\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"课程名称\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程编号\">\n          <el-input v-model=\"data.form.number\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程描述\">\n          <el-input v-model=\"data.form.description\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课时\">\n          <el-input v-model=\"data.form.periods\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"任课教师\">\n          <el-input v-model=\"data.form.teacher\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: {},\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = {};\n};\n\nconst save = () => {\n  request\n    .post(\"/course/add\", data.form)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"新增成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n#### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import Course, CourseSearch, CourseCreate\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\n@course_router.post(\"/add\", response_model=ResultModel)\nasync def add(course: CourseCreate, db_session: Session = Depends(get_db_session)):\n    CourseService.add_course(course, db_session)\n    result = Result.success()\n    return result\n\n\napp.include_router(course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import desc, select\n\nfrom exception.customException import CourseExistException\nfrom model import Session\nfrom model.course import Course, CourseSearch, CourseCreate\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(course_search: CourseSearch, db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        if course_search.name:\n            query = query.where(Course.name.like(f\"%{course_search.name}%\"))\n        if course_search.number:\n            query = query.where(Course.number.like(f\"%{course_search.number}%\"))\n        if course_search.teacher:\n            query = query.where(Course.teacher.like(f\"%{course_search.teacher}%\"))\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def add_course(course: CourseCreate, db_session: Session):\n        query = select(Course).where(Course.name == course.name)\n        exist_course: Course = db_session.execute(query).scalars().all()\n        if exist_course:\n            raise CourseExistException(\"课程名已存在\")\n        course = Course(**course.dict())\n        db_session.add(course)\n        db_session.commit()\n        return course\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Course(Base):\n    __tablename__ = \"course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=False)\n    periods: Mapped[str] = mapped_column(String(255), nullable=False)\n    teacher: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass CourseSearch(BaseModel):\n    name: str | None\n    number: str | None\n    teacher: str | None\n\n\nclass CourseBase(BaseModel):\n    name: str\n    number: str\n    description: str\n    periods: str\n    teacher: str\n\n\nclass CourseCreate(CourseBase):\n    ...\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n```\n\n#### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710354157588-440bcfb5-5023-45ba-a3d9-f8e1f8e5a1ff.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710354164375-6265da8d-4675-4d88-b0a4-9ef2ed4eb4dd.png)\n\n### 编辑\n\n点击数据中的`编辑`按钮可以对已有的课程数据，进行修改\n\n#### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                >编辑</el-button\n              >\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"课程信息\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"课程名称\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程编号\">\n          <el-input v-model=\"data.form.number\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程描述\">\n          <el-input v-model=\"data.form.description\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课时\">\n          <el-input v-model=\"data.form.periods\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"任课教师\">\n          <el-input v-model=\"data.form.teacher\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: {},\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = {};\n};\n\nconst save = () => {\n  request\n    .request({\n      url: data.form.id ? \"/course/update\" : \"/course/add\",\n      method: data.form.id ? \"put\" : \"post\",\n      data: data.form,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    });\n};\n\nconst handleEdit = (row) => {\n  data.form = JSON.parse(JSON.stringify(row));\n  data.formVisible = true;\n};\n</script>\n```\n\n#### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdate\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\n@course_router.post(\"/add\", response_model=ResultModel)\nasync def add(course: CourseCreate, db_session: Session = Depends(get_db_session)):\n    CourseService.add_course(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.put(\"/update\", response_model=ResultModel)\nasync def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)):\n    CourseService.update_by_id(course, db_session)\n    result = Result.success()\n    return result\n\n\napp.include_router(course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import desc, select\n\nfrom common.utils import set_attrs\nfrom exception.customException import CourseExistException, CourseNotExistException\nfrom model import Session\nfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdate\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(course_search: CourseSearch, db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        if course_search.name:\n            query = query.where(Course.name.like(f\"%{course_search.name}%\"))\n        if course_search.number:\n            query = query.where(Course.number.like(f\"%{course_search.number}%\"))\n        if course_search.teacher:\n            query = query.where(Course.teacher.like(f\"%{course_search.teacher}%\"))\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def add_course(course: CourseCreate, db_session: Session):\n        query = select(Course).where(Course.name == course.name)\n        exist_course: Course = db_session.execute(query).scalars().all()\n        if exist_course:\n            raise CourseExistException(\"课程名已存在\")\n        course = Course(**course.dict())\n        db_session.add(course)\n        db_session.commit()\n        return course\n\n    @staticmethod\n    def update_by_id(course: CourseUpdate, db_session: Session):\n        query = select(Course).where(Course.id == course.id)\n        exist_course: Course = db_session.execute(query).scalar()\n        if not exist_course:\n            raise CourseNotExistException(\"课程不存在\")\n        set_attrs(exist_course, jsonable_encoder(course))\n        db_session.commit()\n        return exist_course\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Course(Base):\n    __tablename__ = \"course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=False)\n    periods: Mapped[str] = mapped_column(String(255), nullable=False)\n    teacher: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass CourseSearch(BaseModel):\n    name: str | None\n    number: str | None\n    teacher: str | None\n\n\nclass CourseBase(BaseModel):\n    name: str\n    number: str\n    description: str\n    periods: str\n    teacher: str\n\n\nclass CourseCreate(CourseBase):\n    ...\n\n\nclass CourseUpdate(CourseBase):\n    id: int\n```\n\n实现给对象的属性更新的一个方法，在项目目录`/common`下，新建一个`utils.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\n\n# 用于更新对象属性\ndef set_attrs(obj, data: dict):\n    if data:\n        for key, value in data.items():\n            setattr(obj, key, value)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n```\n\n#### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710361942830-1b838073-bb1f-4c9c-8167-2c5b8bd6fc3c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710361960257-ff8da7d5-86d5-4314-b3d6-5e5e9fe8bdf5.png)\n\n### 删除\n\n点击已有课程数据中的`删除`按钮，实现删除数据表中对应数据\n\n#### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                >编辑</el-button\n              >\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"handleDelete(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"课程信息\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"课程名称\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程编号\">\n          <el-input v-model=\"data.form.number\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程描述\">\n          <el-input v-model=\"data.form.description\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课时\">\n          <el-input v-model=\"data.form.periods\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"任课教师\">\n          <el-input v-model=\"data.form.teacher\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: {},\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = {};\n};\n\nconst save = () => {\n  request\n    .request({\n      url: data.form.id ? \"/course/update\" : \"/course/add\",\n      method: data.form.id ? \"put\" : \"post\",\n      data: data.form,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    });\n};\n\nconst handleEdit = (row) => {\n  data.form = JSON.parse(JSON.stringify(row));\n  data.formVisible = true;\n};\n\nconst handleDelete = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/course/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"删除成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n#### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdate\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\n@course_router.post(\"/add\", response_model=ResultModel)\nasync def add(course: CourseCreate, db_session: Session = Depends(get_db_session)):\n    CourseService.add_course(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.put(\"/update\", response_model=ResultModel)\nasync def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)):\n    CourseService.update_by_id(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.delete(\"/delete/{id}\", response_model=ResultModel)\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    CourseService.delete_by_id(id, db_session)\n    result = Result.success()\n    return result\n\n\napp.include_router(course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import desc, select\n\nfrom common.utils import set_attrs\nfrom exception.customException import CourseExistException, CourseNotExistException\nfrom model import Session\nfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdate\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(course_search: CourseSearch, db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        if course_search.name:\n            query = query.where(Course.name.like(f\"%{course_search.name}%\"))\n        if course_search.number:\n            query = query.where(Course.number.like(f\"%{course_search.number}%\"))\n        if course_search.teacher:\n            query = query.where(Course.teacher.like(f\"%{course_search.teacher}%\"))\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def add_course(course: CourseCreate, db_session: Session):\n        query = select(Course).where(Course.name == course.name)\n        exist_course: Course = db_session.execute(query).scalars().all()\n        if exist_course:\n            raise CourseExistException(\"课程名已存在\")\n        course = Course(**course.dict())\n        db_session.add(course)\n        db_session.commit()\n        return course\n\n    @staticmethod\n    def update_by_id(course: CourseUpdate, db_session: Session):\n        exist_course: Course = check_course_exist(course.id, db_session)\n        set_attrs(exist_course, jsonable_encoder(course))\n        db_session.commit()\n        return exist_course\n\n    @staticmethod\n    def delete_by_id(id: int, db_session: Session):\n        exist_course: Course = check_course_exist(id, db_session)\n        db_session.delete(exist_course)\n        db_session.commit()\n        return exist_course\n\n\ndef check_course_exist(course_id: int, db_session: Session):\n    query = select(Course).where(Course.id == course_id)\n    exist_course: Course = db_session.execute(query).scalar()\n    if not exist_course:\n        raise CourseNotExistException(\"课程不存在\")\n    return exist_course\n```\n\n#### 测试\n\n先创建一个课程\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710362829857-c2f0f339-f279-4816-b09d-ee9a6442cc4e.png)\n\n然后删除\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710362849747-11c06463-9cb4-4402-bc1a-3f1d40cb3a70.png)\n\n删除成功\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710362860933-f9cec0e6-64b1-4bf3-877b-559734cd4abc.png)\n\n---\n\n> 更新: 2024-05-03 22:02:17  \n> 原文: <https://www.yuque.com/zacharyblock/iacda/lsqxkzaok37g7aaz>\n","tags":["Python","Vue3","FastAPI","实战"],"categories":["FastAPI入门"]},{"title":"JWT权限校验","url":"/blog/1398871575/","content":"\n# JWT 权限校验\n\n在退出登录之后，依旧可以进入到主页面；同样后续其他 api 接口也需要在登录之后才能调用，需要加上 token，使用 JWT 实现。\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710335150678-c0013c3b-c00f-4f9b-949b-78286e63d87f.png)\n\n## 前端\n\n首先从前端这块处理，除了 login 和后续会增加的 register 页面不需要登录才能访问，其他页面，都需要登录用户之后才能访问，否则自动跳转回 login 页面\n\n### 请求头\n\n给请求头带上 token，提供给后端进行验证\n\n```javascript\nimport { ElMessage } from \"element-plus\";\nimport router from \"../router\";\nimport axios from \"axios\";\n\nconst request = axios.create({\n  baseURL: import.meta.env.VITE_BASE_URL,\n  timeout: 30000, // 后台接口超时时间设置\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\nrequest.interceptors.request.use(\n  (config) => {\n    const user = JSON.parse(localStorage.getItem(\"student-user\"));\n    config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n    if (user) {\n      config.headers.Authorization = `Bearer ${user.token}`;\n    }\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n  (response) => {\n    let res = response.data;\n    // 如果是返回的文件\n    if (response.config.responseType === \"blob\") {\n      return res;\n    }\n    // 兼容服务端返回的字符串数据\n    if (typeof res === \"string\") {\n      res = res ? JSON.parse(res) : res;\n    }\n    // 当权限验证不通过的时候给出提示\n    if (res.code === \"401\") {\n      ElMessage.error(res.msg);\n      router.push(\"/login\");\n    }\n    return res;\n  },\n  (error) => {\n    console.log(\"err\" + error);\n    return Promise.reject(error);\n  }\n);\n\nexport default request;\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710336890469-a77306ca-5be8-480f-9570-4a796f68df1d.png)\n\n### 路由\n\n实现在没有 token 的情况下无法进入主页而跳转到 login 页面，在路由守卫中进行判断和处理\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n\u0000![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710336834715-bbfe0bce-f29f-46dc-b65c-73afb2105f5c.png)\n\n### 测试\n\n不登录，无法进入 home 页面\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710337011611-010bd441-a61b-4e6d-bbfe-6b67dd19b54e.png)\n\n登录后，才可以进入 home 页面\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710337034729-eb685506-a372-44c1-a919-ec563223fd2e.png)\n\n## 后端\n\n后端这块需要实现一下 jwt，包括密码的校验和生成，以及 token 的生成和校验；那么之前的密码校验就可以舍去了，写一个统一的 auth 验证\n\n### 安装依赖\n\n这里需要两个依赖：`pyjwt`、`passlib[bcrypt]`\n\n```plain\nfastapi[all]\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\npyjwt\npasslib[bcrypt]\n```\n\n### AuthHandler\n\n#### 密码生成与校验\n\n接下先来编写 密码的生成和校验，在项目目录的`/common`下创建一个`auth.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.security import HTTPBearer\nfrom passlib.context import CryptContext\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n    secret = \"SECRET\"\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, plain_password, hashed_password):\n        return self.pwd_context.verify(plain_password, hashed_password)\n\nif __name__ == '__main__':\n    auth = AuthHandler()\n    print(auth.get_password_hash(\"admin\"))\n    print(auth.verify_password(\"admin\", '$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum'))\n    print(auth.verify_password(\"123\", '$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum'))\n```\n\n其中的`$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum`是数据库中存储的 admin 的密码\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710339283730-f5386141-228b-4a40-8a02-b03d5c5abdc8.png)\n\n运行一下\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710339640006-9c71c0db-8f4e-4e2c-90f0-2719c440afb1.png)\n\n可以看到，之前使用 bcrypt 直接生成的 hash 密码，虽然与现在生成的不一样，但是依旧可以用于验证\n\n修改一下 adminService 的验证逻辑，尝试一下登录\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.security import HTTPBearer\nfrom passlib.context import CryptContext\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n    secret = \"SECRET\"\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, plain_password, hashed_password):\n        return self.pwd_context.verify(plain_password, hashed_password)\n\n\nauth_handler = AuthHandler()\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import select\n\nfrom common.auth import auth_handler\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.admin import Admin, AdminModel\n\n\nclass AdminService:\n    @staticmethod\n    def login(admin: AdminModel, db_session: Session) -> Admin:\n        query = select(Admin).where(Admin.username == admin.username)\n        result = db_session.execute(query).scalars().first()\n        if not result:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(admin.password, result.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        return result\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710339937574-abe7280b-5945-446a-882b-8aa631eabf32.png)\n\n#### token 的生成与校验\n\n通过装饰器实现一个，登录验证\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime, timedelta\n\nimport jwt\nfrom fastapi import Security\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom passlib.context import CryptContext\n\nfrom exception.customException import TokenException\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n    secret = \"SECRET\"\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, plain_password, hashed_password):\n        return self.pwd_context.verify(plain_password, hashed_password)\n\n    def encode_token(self, user_id):\n        payload = {\n            'exp': datetime.utcnow() + timedelta(days=7, minutes=0, seconds=0),\n            'iat': datetime.utcnow(),\n            'sub': user_id\n        }\n        return jwt.encode(\n            payload,\n            self.secret,\n            algorithm='HS256'\n        )\n\n    def decode_token(self, token):\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=['HS256'])\n            return payload['sub']\n        except jwt.ExpiredSignatureError:\n            raise TokenException(\"token过期\")\n        except jwt.InvalidTokenError:\n            raise TokenException(\"无效token\")\n\n    def auth_required(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        return self.decode_token(auth.credentials)\n\n\nauth_handler = AuthHandler()\n```\n\n给`customException.py`添加一个自定义异常\n\n```python\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n给`exceptionHandler.py`添加一个异常处理\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n```\n\n这个先写到这，后面新增加 api 的时候进行一个验证\n\n---\n\n> 更新: 2024-07-30 17:40:29  \n> 原文: <https://www.yuque.com/zacharyblock/iacda/pkecek3noxmavqwz>\n","tags":["Python","Vue3","FastAPI","实战"],"categories":["FastAPI入门"]},{"title":"管理员登录","url":"/blog/701228072/","content":"\n# 管理员登录\n\n## 前端\n\n### Login\n\n首先绘制一个登录页面\n\n参考 element-plus 官网提供的表单[https://element-plus.org/zh-CN/component/form.html](https://element-plus.org/zh-CN/component/form.html)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710081142620-3acddbcf-774a-4d82-8992-bbf5b08a991f.png)\n\n在项目路径`/src/views`下创建一个`Login.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"login-container\">\n      <div style=\"width: 420px\" class=\"login-box\">\n        <div class=\"title\">学生信息管理系统 - 登录</div>\n        <el-form :model=\"data.form\">\n          <el-form-item>\n            <el-input\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Avatar\"\n              v-model=\"data.form.username\"\n              placeholder=\"请输入账号\"\n            />\n          </el-form-item>\n          <el-form-item>\n            <el-input\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Lock\"\n              v-model=\"data.form.password\"\n              placeholder=\"请输入密码\"\n            />\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" style=\"width: 100%;font-size: 18px\"\n              >登 录</el-button\n            >\n          </el-form-item>\n        </el-form>\n        <div style=\"margin-top:35px;text-align: right;font-size: 15px\">\n          还没有账号？请<a href=\"/register\">注册</a>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\n\nconst data = reactive({\n  form: {},\n});\n</script>\n\n<style scoped>\n.login-container {\n  min-height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-image: url(\"@/assets/imgs/login_background.png\");\n  background-size: cover;\n}\n\n.login-box {\n  background-color: rgb(255, 255, 255, 50%);\n  box-shadow: 0 0 10px rgba(84, 221, 245, 0.41);\n  padding: 30px;\n}\n\n.title {\n  font-weight: bold;\n  font-size: 30px;\n  text-align: center;\n  margin-bottom: 35px;\n}\n</style>\n```\n\n### 背景图片\n\n添加一张登录背景图片到`/src/assets/imags/login_background.png`\n\n[https://iconscout.com/free-illustration/children-are-doing-chemical-experiments-10946611](https://iconscout.com/free-illustration/children-are-doing-chemical-experiments-10946611)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710082231293-c528b0f7-371d-4f7b-9f01-6d10be6dd257.png)\n\n### 路由添加\n\n在`/src/router/index.js`中添加一下上面这个`Login`的路由\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n  ],\n});\n\nexport default router;\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710082953287-5609d967-2864-44d1-ae13-201bfb968727.png)\n\n通过[http://localhost:5173/login](http://localhost:5173/login)可以访问到登录页面\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710083039407-bc17182f-32f8-4ecc-9742-ce9c634f7b6e.png)\n\n### 表单校验和登录\n\n```vue\n<template>\n  <div>\n    <div class=\"login-container\">\n      <div style=\"width: 420px\" class=\"login-box\">\n        <div class=\"title\">学生信息管理系统 - 登录</div>\n        <el-form :model=\"data.form\" ref=\"formRef\" :rules=\"rules\">\n          <el-form-item prop=\"username\">\n            <el-input\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Avatar\"\n              v-model=\"data.form.username\"\n              placeholder=\"请输入账号\"\n            />\n          </el-form-item>\n          <el-form-item prop=\"password\">\n            <el-input\n              show-password\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Lock\"\n              v-model=\"data.form.password\"\n              placeholder=\"请输入密码\"\n            />\n          </el-form-item>\n          <el-form-item>\n            <el-button\n              type=\"primary\"\n              style=\"width: 100%;font-size: 18px\"\n              @click=\"login\"\n              >登 录</el-button\n            >\n          </el-form-item>\n        </el-form>\n        <div style=\"margin-top:35px;text-align: right;font-size: 15px\">\n          还没有账号？请<a href=\"/register\">注册</a>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from \"vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\nimport router from \"@/router\";\n\nconst data = reactive({\n  form: {},\n});\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入账号\", trigger: \"blur\" }],\n  password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n});\n\nconst formRef = ref();\n\nconst login = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      request\n        .post(\"/login\", data.form)\n        .then((res) => {\n          if (res.code === \"200\") {\n            localStorage.setItem(\"student-user\", JSON.stringify(res.data));\n            ElMessage.success(\"登录成功\");\n            router.push(\"/home\");\n          } else {\n            ElMessage.error(res.msg);\n          }\n        })\n        .catch((err) => {\n          ElMessage.error(err.response?.data?.msg || err.message);\n        });\n    }\n  });\n};\n</script>\n\n<style scoped>\n.login-container {\n  min-height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-image: url(\"@/assets/imgs/login_background.png\");\n  background-size: cover;\n}\n\n.login-box {\n  background-color: rgb(255, 255, 255, 50%);\n  box-shadow: 0 0 10px rgba(84, 221, 245, 0.41);\n  padding: 30px;\n}\n\n.title {\n  font-weight: bold;\n  font-size: 30px;\n  text-align: center;\n  margin-bottom: 35px;\n}\n</style>\n```\n\n## 后端\n\n### 数据库\n\n#### IDE 连接 MySQL\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710085705678-d51970ce-f35a-4582-95aa-a05156df4838.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710085783761-e03f3a33-edb0-481c-9d8f-747eb9d0d9c4.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710085814318-d7b039ea-490d-41c2-b744-b088af37fe67.png)\n\n#### 创建库\n\n首先在数据库中创建一个 student_info 库\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710085943623-eee4c6a8-24d2-4cbe-af89-fd7badf6485f.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710086149939-85b20d45-d2ce-424c-afcb-af1878495898.png)\n\n#### 创建 admin 表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710086214220-4ed6fe62-305d-4b2c-9b1d-ca2e0368d1b7.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710086442240-8393e748-717f-4178-bc73-0fdc64e1a260.png)\n\n插入一条数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710086572996-c8379960-6bc4-4da3-b369-10c788aed8b0.png)\n\n### 数据库配置\n\n查看 sqlalchemy 官方文档[https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb](https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710086788369-74f56963-dc07-4175-92fb-afabb26d6919.png)\n\n#### requirements.txt\n\n通过 sqlalchemy 连接数据库需要增加两个驱动\n\n```plain\nfastapi[all]\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\n```\n\n#### .env\n\n在.env 文件下添加数据库的配置信息（记得改成你们自己的内容）\n\n```plain\nHOST = \"localhost\"\nPORT = \"9090\"\n\nMYSQL_DIALECT = \"mysql+mysqldb\"\nMYSQL_HOST = \"localhost\"\nMYSQL_PORT = \"3306\"\nMYSQL_USER = \"root\"\nMYSQL_PASSWORD = \"XXXXXX\"\nMYSQL_DATABASE = \"student_info\"\n```\n\n#### constant.py\n\n添加数据库配置常量\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom common.config import config\n\nHOST = config.env.get(\"HOST\")\nPORT = config.env.get(\"PORT\")\n\nMYSQL_DIALECT = config.env.get(\"MYSQL_DIALECT\")\nMYSQL_HOST = config.env.get(\"MYSQL_HOST\")\nMYSQL_PORT = config.env.get(\"MYSQL_PORT\")\nMYSQL_USER = config.env.get(\"MYSQL_USER\")\nMYSQL_PASSWORD = config.env.get(\"MYSQL_PASSWORD\")\nMYSQL_DATABASE = config.env.get(\"MYSQL_DATABASE\")\n```\n\n#### model/**init**.py\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import DeclarativeBase, sessionmaker\n\nfrom common.constant import *\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\n# mysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>\nengine = create_engine(\n    f\"{MYSQL_DIALECT}://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOST}:{MYSQL_PORT}/{MYSQL_DATABASE}?charset=utf8mb4\",\n    echo=True)\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n```\n\n### 管理员实体类定义\n\n在`/model`下创建一个`admin.py`文件\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Admin(Base):\n    __tablename__ = \"admin\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass AdminModel(BaseModel):\n    username: str\n    password: str\n```\n\n### 管理员登录的 api 接口\n\n为了实现每一个 api 都能拿到一个连接数据库的 session，在`/model/__init__.py`中实现一个 session 的获取方法\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import DeclarativeBase, sessionmaker\n\nfrom common.constant import *\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\n# mysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>\nengine = create_engine(\n    f\"{MYSQL_DIALECT}://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOST}:{MYSQL_PORT}/{MYSQL_DATABASE}?charset=utf8mb4\",\n    echo=True)\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\n\ndef get_db_session():\n    session = Session()\n    try:\n        yield session\n    finally:\n        session.close()\n```\n\n#### adminApi\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import Body, Depends\nfrom fastapi.encoders import jsonable_encoder\n\nfrom api import app\nfrom common.result import Result, ResultModel\nfrom model import Session, get_db_session\nfrom model.admin import AdminModel\nfrom service.adminService import AdminService\n\n\n@app.post(\"/login\", response_model=ResultModel)\nasync def login(admin: AdminModel = Body(...), db_session: Session = Depends(get_db_session)):\n    dbadmin = AdminService.login(admin, db_session)\n    return Result.success(jsonable_encoder(dbadmin))\n```\n\n#### adminService\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import select\n\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.admin import Admin, AdminModel\n\n\nclass AdminService:\n    @staticmethod\n    def login(admin: AdminModel, db_session: Session) -> Admin:\n        query = select(Admin).where(Admin.username == admin.username)\n        result = db_session.execute(query).scalars().first()\n        if not result:\n            raise UserNotFoundException(\"用户不存在\")\n        if result.password != admin.password:\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        return result\n```\n\n#### exception\n\n创建自定义异常的`exception`的 package\n\n然后创建一个`customException.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n#### exceptionHandler\n\n在`/api`包下面创建一个`exceptionHandler.py`用于处理异常\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n```\n\n#### /api/**init**.py\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\nfrom api import adminApi, exceptionHandler\n```\n\n## 测试\n\n### postman 测试后端接口\n\n正确登录：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710090169264-78775744-eb08-4d59-8716-ea72837aa214.png)\n\n密码错误：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710090242243-c94a897d-57d8-4a1f-9f75-e5021c671e83.png)\n\n账号错误：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710090279026-33ef7189-2ec6-4812-a64d-0e9c4dc036f6.png)\n\n### 前后端测试\n\n#### 跨域问题\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710093723455-2a5ba47e-cc59-4337-9bc1-64af595d7676.png)\n\n发生了跨域 CORS 的问题\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler\n```\n\n正确账号密码：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710094075420-b59a37ac-a447-49b0-a88a-712414a6e96c.png)\n\n错误账号：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710094119593-32a92c73-05cc-4ca8-a4e4-91c040c6a693.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710094126043-4277dec3-a187-4520-915b-89fbc42be75b.png)\n\n错误密码：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710094143695-dd039dad-c6a9-4693-878b-a7749cb52dd3.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710094152200-0402f3c8-7a81-49bc-9f4a-fb667b4e0ea3.png)\n\n## 数据库密码\n\n为了安全，数据库中的 password 不应该以明文显示，需要做个加密\n\n这里需要使用到一个库 bcrypt\n\n```plain\nfastapi[all]\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\nbcrypt==4.1.1\n```\n\n### 密码加密\n\n通过`hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())` 依据生成的盐值，生成 hash 后的密码值，结果是字节码\n\n```shell\n(venv) ➜  studentbackend python3\nPython 3.10.11 (v3.10.11:7d4cc5aa85, Apr  4 2023, 19:05:19) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import bcrypt\n>>> password = \"admin\"\n>>> hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n>>> print(hashed_pw)\nb'$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum'\n>>> print(hashed_pw.decode('utf-8'))\n$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum\n```\n\n将密码对应的加密密码 `$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum` 替换到数据库中的 admin 账号中（这一步操作其实应该是，在注册的时候将这个密码值写入数据库 de~）\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710184351868-37a0e9d3-2535-43d8-9b1c-3a43e9b36be7.png)\n\n### 密码验证\n\n通过`bcrypt.check(check_pw.encode(), hashed_pw)`检验密码是否匹配\n\n给 Admin 实体类定义一个密码检查方法\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport bcrypt\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Admin(Base):\n    __tablename__ = \"admin\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n\n    def password_check(self, password):\n        return bcrypt.checkpw(password.encode(), self.password.encode())\n\n\nclass AdminModel(BaseModel):\n    username: str\n    password: str\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import select\n\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.admin import Admin, AdminModel\n\n\nclass AdminService:\n    @staticmethod\n    def login(admin: AdminModel, db_session: Session) -> Admin:\n        query = select(Admin).where(Admin.username == admin.username)\n        result = db_session.execute(query).scalars().first()\n        if not result:\n            raise UserNotFoundException(\"用户不存在\")\n        if result.password_check(admin.password) is False:\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        return result\n```\n\n### 前后端测试\n\n密码错误：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710185314797-f8b42918-353f-44ff-86e3-16a92834f391.png)\n\n密码正确：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710185361178-79c22824-8f0c-4bd0-8aa8-12e477bfd4fb.png)\n\n---\n\n> 更新: 2024-05-03 22:08:05  \n> 原文: <https://www.yuque.com/zacharyblock/iacda/qhg30r2hbk5wb58m>\n","tags":["Python","Vue3","FastAPI","实战"],"categories":["FastAPI入门"]},{"title":"环境及项目初始化","url":"/blog/3296237781/","content":"\n# 环境及项目初始化\n\n# 环境介绍\n\n开发环境版本：\n\n<font style=\"color:rgb(63, 74, 84);\">Python3.10.11、Node.js16.9.0、Vue3、MySQL5.7.31</font>\n\n# <font style=\"color:rgb(63, 74, 84);\">官方文档</font>\n\nNode.js：[https://nodejs.org/en](https://nodejs.org/en)\n\nVue：[https://cn.vuejs.org/](https://cn.vuejs.org/)\n\nVite：[https://cn.vitejs.dev/guide/](https://cn.vitejs.dev/guide/)\n\nElement-Plus：[https://element-plus.org/zh-CN/](https://element-plus.org/zh-CN/)\n\nFastAPI：[https://fastapi.tiangolo.com/zh/](https://fastapi.tiangolo.com/zh/)\n\nSQLAlchemy：[https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb](https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n\n图片素材库：[https://iconscout.com/](https://iconscout.com/)\n\n# 前端 Vue\n\n### 安装 Node.js\n\n进入官网 [https://nodejs.org/download/release/v16.19.0/](https://nodejs.org/download/release/v16.19.0/)安装好 node.js\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710063799995-b795f9b2-b844-4281-aa06-797eaeb7540e.png)\n\n### 安装 vue-cli\n\n然后使用`npm install -g @vue/cli`命令安装 vue-cli\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710064251821-6359ed25-0048-4327-9665-92d9427cc4c4.png)\n\n### 创建 vue 项目\n\n使用 vite 进行构建\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710064798538-2fcb3e12-aba3-4b83-8f7a-22bbcd4bb066.png)\n\n通过`npm create vite@latest studentfontend -- --template vue`构建前端项目\n\n```shell\n➜  ~ cd Documents/PythonCode\n➜  PythonCode mkdir studentProject\n➜  PythonCode cd studentProject\n➜  studentProject npm create vite@latest studentfontend -- --template vue\n\nScaffolding project in /Users/zachary/Documents/PythonCode/studentProject/studentfontend...\n\nDone. Now run:\n\n  cd studentfontend\n  npm install\n  npm run dev\n\n➜  studentProject cd studentfontend\n➜  studentfontend ls\nREADME.md      package.json   src\nindex.html     public         vite.config.js\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710065004239-161031a6-9bc3-4c47-8591-6a6cf76114a5.png)\n\n### npm 源\n\n如果 npm 命令运行的时候很卡的话，尝试换源\n\n`npm config set registry [https://registry.npmmirror.com](https://registry.npmmirror.com)`\n\n### 打开 vue 项目\n\n使用 WebStorm 打开创建好的前端项目\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710065436602-f66e538b-cdcc-4f8a-a0b0-1fde6cc990e9.png)\n\n先什么都不做，尝试把项目运行起来\n\n```shell\n➜  studentfontend npm install\nnpm WARN EBADENGINE Unsupported engine {\nnpm WARN EBADENGINE   package: '@vitejs/plugin-vue@5.0.4',\nnpm WARN EBADENGINE   required: { node: '^18.0.0 || >=20.0.0' },\nnpm WARN EBADENGINE   current: { node: 'v16.19.0', npm: '8.19.3' }\nnpm WARN EBADENGINE }\nnpm WARN EBADENGINE Unsupported engine {\nnpm WARN EBADENGINE   package: 'rollup@4.12.1',\nnpm WARN EBADENGINE   required: { node: '>=18.0.0', npm: '>=8.0.0' },\nnpm WARN EBADENGINE   current: { node: 'v16.19.0', npm: '8.19.3' }\nnpm WARN EBADENGINE }\nnpm WARN EBADENGINE Unsupported engine {\nnpm WARN EBADENGINE   package: 'vite@5.1.5',\nnpm WARN EBADENGINE   required: { node: '^18.0.0 || >=20.0.0' },\nnpm WARN EBADENGINE   current: { node: 'v16.19.0', npm: '8.19.3' }\nnpm WARN EBADENGINE }\n\nup to date in 649ms\n➜  studentfontend npm run dev\n\n> studentfontend@0.0.0 dev\n> vite\n\n\n  VITE v5.1.5  ready in 814 ms\n\n  ➜  Local:   http://127.0.0.1:5173/\n  ➜  Network: use --host to expose\n  ➜  press h + enter to show help\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710065907865-bf45b0ec-1f33-4399-8013-ee1cd9a85c30.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710065926633-560bff63-2de0-4f09-bcd8-921fdad2ad7a.png)\n\n### 项目整改\n\n现在我们把这个项目做好看些，为了学生信息管理系统做准备的，\n\n需要把路由写好，同时修改主题色，还有 request http 的请求封装，选择一个自己喜欢的页面标题及 icon\n\n#### index.html\n\n修改项目下的 index.html 文件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" href=\"/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>学生信息管理系统</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"/src/main.js\"></script>\n  </body>\n</html>\n```\n\n#### css&imgs\n\n删除`/assets`下的`vue.svg`\n\n在`/src/assets`路径下创建一个`css`和`imgs`目录\n\n在创建好的`/css`目录下分别创建`global.css`和`index.scss`\n\n全局 css 样式\n\n```css\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  color: #252424;\n}\n\na {\n  text-decoration: none;\n}\n\n.card {\n  background-color: rgb(255, 255, 255);\n  border-radius: 5px;\n  padding: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n```\n\n主题色配置文件\n\n```css\n@forward \"element-plus/theme-chalk/src/common/var.scss\" with (\n  $colors: (\n    \"primary\": (\n      \"base\": #0a7fce\n    ),\n    \"success\": (\n      \"base\": #08b41f\n    ),\n    \"warning\": (\n      \"base\": #e8af56\n    ),\n    \"danger\": (\n      \"base\": #ef3030\n    ),\n    \"info\": (\n      \"base\": #5d66ea\n    )\n  )\n);\n```\n\n#### 路由设置\n\n在`/src`路径下创建一个`router`目录，在其中创建一个`index.js`文件\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n        },\n      ],\n    },\n  ],\n});\n\nexport default router;\n```\n\n#### request 请求\n\n`/src`路径下创建一个`utils`目录，在其中创建一个`request.js`文件\n\n```javascript\nimport { ElMessage } from \"element-plus\";\nimport router from \"../router\";\nimport axios from \"axios\";\n\nconst request = axios.create({\n  baseURL: import.meta.env.VITE_BASE_URL,\n  timeout: 30000, // 后台接口超时时间设置\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\nrequest.interceptors.request.use(\n  (config) => {\n    config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n  (response) => {\n    let res = response.data;\n    // 如果是返回的文件\n    if (response.config.responseType === \"blob\") {\n      return res;\n    }\n    // 兼容服务端返回的字符串数据\n    if (typeof res === \"string\") {\n      res = res ? JSON.parse(res) : res;\n    }\n    // 当权限验证不通过的时候给出提示\n    if (res.code === \"401\") {\n      ElMessage.error(res.msg);\n      router.push(\"/login\");\n    }\n    return res;\n  },\n  (error) => {\n    console.log(\"err\" + error);\n    return Promise.reject(error);\n  }\n);\n\nexport default request;\n```\n\n#### views\n\n`/src`路径下的`/components`修改为`/views`目录，将其中的`HelloWorld.vue`修改成`Manager.vue`\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          src=\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\"\n          alt=\"\"\n          style=\"width: 40px; height: 40px\"\n        />\n        <span style=\"margin-left: 5px\">管理员</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon><HomeFilled /></el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n          <el-menu-item index=\"/person\">\n            <el-icon><User /></el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"login\" @click=\"logout\">\n            <el-icon><SwitchButton /></el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n接着在`/src/views`路径下创建一个`manager`目录，在其中创建一个`Home.vue`文件\n\n```vue\n<template>\n  <div class=\"welcome-container\">\n    <div class=\"custom-card bg-white shadow rounded p-4 mb-5\">\n      <h2 class=\"text-center text-primary\">欢迎来到本系统</h2>\n      <p class=\"text-center mt-3\">\n        您好 <span :style=\"{ color: '#116ca9' }\">{{ user.username }}</span\n        >，祝您使用愉快！\n      </p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport request from \"@/utils/request\";\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.welcome-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: calc(100vh - 100px); /* 根据实际项目需要调整高度 */\n}\n\n.custom-card {\n  max-width: 400px;\n  border: none;\n}\n</style>\n```\n\n#### App.vue\n\n修改项目中的`/src/App.vue`\n\n```vue\n<template>\n  <RouterView />\n</template>\n```\n\n#### main.js\n\n修改项目中的`/src/main.js`\n\n```javascript\nimport { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\nimport ElementPlus from \"element-plus\";\nimport zhCn from \"element-plus/dist/locale/zh-cn.mjs\";\nimport * as ElementPlusIconsVue from \"@element-plus/icons-vue\";\n\nimport \"@/assets/css/global.css\";\n\nconst app = createApp(App);\n\napp.use(router);\napp.use(ElementPlus, {\n  locale: zhCn,\n});\napp.mount(\"#app\");\n\nfor (const [key, component] of Object.entries(ElementPlusIconsVue)) {\n  app.component(key, component);\n}\n```\n\n#### .env\n\n在项目路径下创建两个文件`.env.development`、`.env.production`\n\n```plain\nVITE_BASE_URL='http://localhost:9090'\n```\n\n```plain\nVITE_BASE_URL='http://:9090'\n```\n\n#### json 配置\n\n修改项目路径下的文件：`package.json`\n\n```json\n{\n  \"name\": \"studentfontend\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@element-plus/icons-vue\": \"^2.1.0\",\n    \"axios\": \"^1.6.2\",\n    \"element-plus\": \"^2.4.2\",\n    \"sass\": \"^1.69.5\",\n    \"unplugin-element-plus\": \"^0.8.0\",\n    \"vue\": \"^3.3.4\",\n    \"vue-router\": \"^4.2.5\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-vue\": \"^4.4.0\",\n    \"unplugin-auto-import\": \"^0.16.7\",\n    \"unplugin-vue-components\": \"^0.25.2\",\n    \"vite\": \"^4.4.11\"\n  }\n}\n```\n\n#### vite.config.js\n\n修改项目路径下的文件：`vite.config.js`\n\n```javascript\nimport { fileURLToPath, URL } from \"node:url\";\n\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\n\nimport AutoImport from \"unplugin-auto-import/vite\";\nimport Components from \"unplugin-vue-components/vite\";\nimport { ElementPlusResolver } from \"unplugin-vue-components/resolvers\";\n\nimport ElementPlus from \"unplugin-element-plus/vite\";\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    AutoImport({\n      resolvers: [ElementPlusResolver({ importStyle: \"sass\" })],\n    }),\n    Components({\n      resolvers: [ElementPlusResolver({ importStyle: \"sass\" })],\n    }),\n\n    ElementPlus({\n      useSource: true,\n    }),\n  ],\n  resolve: {\n    alias: {\n      \"@\": fileURLToPath(new URL(\"./src\", import.meta.url)),\n    },\n  },\n  css: {\n    preprocessorOptions: {\n      scss: {\n        additionalData: `\n          @use \"@/assets/css/index.scss\" as *;\n        `,\n      },\n    },\n  },\n});\n```\n\n#### logo\n\n修改一下 logo 和标题的 icon\n\n分别放在`/public/favicon.ico`和`/src/assets/imgs/logo.png`路径下\n\n删除`/public/vite.svg`\n\n可以去这个网站下载[https://iconscout.com/icons](https://iconscout.com/icons)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710072944856-06f0b813-035e-47a6-97bb-4cef728d4d96.png)\n\n[https://iconscout.com/free-icon/library-2642818](https://iconscout.com/free-icon/library-2642818)，将该图片保存为`/src/assets/imgs/logo.png`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710072841938-4d2b4f5c-bdcc-44b1-a9e1-547acad96314.png)\n\n或者[https://iconscout.com/free-icon/student-79](https://iconscout.com/free-icon/student-79)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710073182135-0de083f0-80ed-4581-88cd-4206625351d2.png)\n\n[https://iconscout.com/free-icon/student-reading-2909468](https://iconscout.com/free-icon/student-reading-2909468)，保存为`/public/favicon.ico`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710073454459-14d7fe76-e2e9-42ba-bf66-b053b3361d8b.png)\n\n### 运行\n\n#### 命令运行\n\n```shell\n➜  studentfontend npm install\n\nadded 93 packages, removed 1 package, and changed 5 packages in 16s\n➜  studentfontend npm run dev\n\n> studentfontend@0.0.0 dev\n> vite\n\n\n  VITE v4.5.2  ready in 1169 ms\n\n  ➜  Local:   http://127.0.0.1:5173/\n  ➜  Network: use --host to expose\n  ➜  press h to show help\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710073748592-e493c9f4-d4e2-4bd4-85b4-8453500970bc.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710081458951-c6a801f9-8eae-46bb-b325-6a19fca7e328.png)\n\n#### 一键运行\n\n通过配置一个启动项，便捷运行项目\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710073954088-25c7af70-0be2-4565-bb0e-177becbcb268.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710074006858-4dd1ac08-6ee9-4d53-bfc5-453e64efb6ce.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710074069281-da351ef0-e419-4e68-b63b-039792a9a967.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710074171111-8ac13c5e-13ab-4976-921a-4060b9ff8427.png)\n\n---\n\n# 后端 FastAPI\n\n### 创建空项目\n\n新建一个项目进入 FastAPI 的世界\n\n先创建项目文件夹\n\n```shell\n➜  studentProject ll\ntotal 0\ndrwxr-xr-x@ 16 zachary  staff   512B  3 10 20:25 studentfontend\n➜  studentProject mkdir studentbackend\n➜  studentProject ll\ntotal 0\ndrwxr-xr-x@  2 zachary  staff    64B  3 10 20:41 studentbackend\ndrwxr-xr-x@ 16 zachary  staff   512B  3 10 20:25 studentfontend\n```\n\n然后使用 Pycharm 创建一个空项目\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710074648550-44040fe2-4fd2-4567-bd0f-7f7144e8b28c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710074693683-58e58844-db50-485e-8141-f77ba005143b.png)\n\n### 依赖包安装\n\n需要安装一个 FastAPI 的依赖包\n\n#### 命令安装\n\n`pip install fastapi[all]`\n\n#### requirements.txt 安装\n\n```plain\nfastapi[all]\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075023414-21bae007-671a-4c15-86ed-a8266626db4f.png)\n\n### 实现一个 api\n\n#### 创建\n\n项目目录下创建一个`main.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def hello():\n    return {\"message\": \"Hello World\"}\n```\n\n#### 运行\n\n需要使用 fastapi 提供的一个`uvicorn`ASGI 网关服务器来启动 api 服务\n\n##### 命令运行\n\n`uvicorn main:app --reload`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075474004-85328fc1-6c65-419b-a642-556a371c6d4e.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075491989-b1ebc0c3-4d85-4e46-acca-76e439fb32f7.png)\n\n##### 一键运行\n\n- 配置 main 函数\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def hello():\n    return {\"message\": \"Hello World\"}\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075648021-89cf5781-dc93-4ff2-ae28-3569b7b92cd4.png)\n\n- 启动配置项\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075761116-bff52145-5d69-49fc-b6e4-130f05f659a4.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075846696-632b2590-c791-48cd-a5f6-1b8ff86cf9df.png)\n\n以上两种方式均可以实现，具体看个人习惯\n\n### 项目整改\n\n#### .env\n\n这个文件用于存放环境变量，包括项目的运行 ip、端口号等，后面的数据库环境变量也在这里存放\n\n```plain\nHOST = \"localhost\"\nPORT = \"9090\"\n```\n\n#### common\n\n在项目路径下创建一个`/common`的 package，用于实现公共类或者公共方法\n\n##### 环境变量配置文件\n\n在`/common`包下创建一个`config.py`文件，实现对环境变量的获取\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport os\nfrom pathlib import Path\nfrom dotenv import load_dotenv\n\n\nclass Config:\n    def __init__(self):\n        dotenv_path = Path(__file__).parent.parent / \".env\"\n        load_dotenv(dotenv_path=dotenv_path)\n        self._env = dict(os.environ)\n\n    @property\n    def env(self):\n        return self._env\n\n\nconfig = Config()\n```\n\n在`/common`包下创建一个`constant.py`文件，用于配置常量\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom common.config import config\n\nHOST = config.env.get(\"HOST\")\nPORT = config.env.get(\"PORT\")\n```\n\n##### 返回类 Result\n\n实现一下 api 的通用返回类，在`/common`包下创建一个`result.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\n\n\nclass ResultBase:\n    code: str\n    msg: str\n    data: dict\n\n\nclass ResultModel(BaseModel, ResultBase):\n    pass\n\n\nclass Result(ResultBase):\n\n    def __init__(self, code, msg, data):\n        self.code = code\n        self.msg = msg\n        self.data = data\n\n    @classmethod\n    def success(cls, data: object = None, code: str = \"200\", msg: str = \"success\"):\n        if not data:\n            data = {}\n        return cls(code, msg, data)\n\n    @classmethod\n    def error(cls, data: object = None, code: str = \"500\", msg: str = \"error\"):\n        if not data:\n            data = {}\n        return cls(code, msg, data)\n```\n\n#### exception\n\n创建一个`/exception`的 package 用于自定义异常\n\n#### api\n\n创建一个`/api`的 package，用于创建后端的 API，实际就是 Controller 层\n\n##### **init**.py\n\n用于创建 FastAPI 应用初始化\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n```\n\n##### adminApi.py\n\n创建一个 hello fastapi 接口测试一下项目\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom api import app\nfrom common.result import Result\n\n\n@app.get(\"/\")\nasync def hello():\n    return Result.success()\n```\n\n然后新增了一个 api 文件之后需要给 api 的**init**.py 说明一下新增了一个 api 文件\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\nfrom api import adminApi\n```\n\n#### service\n\n创建一个`/service`的 package 用于实现 Service 层的业务代码\n\n#### model\n\n创建一个`/model`的 package 用于实现数据库的映射类\n\n#### main\n\n用于启动 FastAPI 的主入口程序\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom api import app\nimport uvicorn\n\nfrom common.constant import HOST, PORT\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", host=HOST, port=int(PORT), reload=True)\n```\n\n### 运行\n\n直接运行 main.py 文件即可\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710079493940-afe468b5-57b5-4875-b3c0-03ff2cf75b03.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710085301150-7c6b0c7b-a89a-4bc5-b314-c090850cfcac.png)\n\n出现这个就是访问成功啦\n\n至此，我们的前端后端项目就都初始化好了\n\n---\n\n> 更新: 2024-05-03 22:13:04  \n> 原文: <https://www.yuque.com/zacharyblock/iacda/sengqtgphw3hc0hv>\n","tags":["Python","Vue3","FastAPI","实战"],"categories":["FastAPI入门"]},{"title":"项目介绍","url":"/blog/1071630779/","content":"\n# 项目介绍\n\n# 学生信息管理系统——前后端分离\n\n# 技术栈\n\n后端：FastAPI + SQLAlchemy\n\n前端：Vue3 + Element-plus\n\n数据库：MySQL\n\n# 所需工具\n\nPycharm、WebStorm、Postman\n\n# 项目功能\n\n## 管理员\n\n- 登录\n- 学生管理\n- 课程管理\n- 选课管理\n- 成绩管理\n\n## 学生\n\n- 登录、注册\n- 查看、修改个人信息\n- 查看课程、选课\n- 查看成绩\n- 查看、修改评价\n\n# 链接 🔗\n\n- BiliBili：[https://www.bilibili.com/video/BV1Rx4y1U79A/?vd_source=4eb61e12ff64fa3d03cfec0f2eb09ce7](https://www.bilibili.com/video/BV1Rx4y1U79A/?vd_source=4eb61e12ff64fa3d03cfec0f2eb09ce7)\n- 语雀：[https://www.yuque.com/zacharyblock/iacda?# 《PythonLearning》](https://www.yuque.com/zacharyblock/iacda?# 《PythonLearning》)\n- Github：\n  - 前端：[https://github.com/BlockZachary/studentfontend](https://github.com/BlockZachary/studentfontend)\n  - 后端：[https://github.com/BlockZachary/studentbackend](https://github.com/BlockZachary/studentbackend)\n\n---\n\n> 更新: 2024-05-26 21:30:46  \n> 原文: <https://www.yuque.com/zacharyblock/iacda/wlw9b68ykem94qi1>\n","tags":["Python","Vue3","FastAPI","实战"],"categories":["FastAPI入门"]},{"title":"面经2","url":"/blog/1445218469/","content":"\n# 面经 2\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 001: 在 Python 中如何实现单例模式。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：单例模式是指让一个类只能创建出唯一的实例，这个题目在面试中出现的频率极高，因为它考察的不仅仅是单例模式，更是对 Python 语言到底掌握到何种程度，建议大家用装饰器和元类这两种方式来实现单例模式，因为这两种方式的通用性最强，而且也可以顺便展示自己对装饰器和元类中两个关键知识点的理解。</font>\n\n方法一：使用装饰器实现单例模式。\n\n```python\nfrom functools import wraps\n\n\ndef singleton(cls):\n    \"\"\"单例类装饰器\"\"\"\n    instances = {}\n\n    @wraps(cls)\n    def wrapper(*args, **kwargs):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kwargs)\n        return instances[cls]\n\n    return wrapper\n\n\n@singleton\nclass President:\n    pass\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：装饰器是 Python 中非常有特色的语法，用一个函数去装饰另一个函数或类，为其添加额外的能力。通常通过装饰来实现的功能都属横切关注功能，也就是跟正常的业务逻辑没有必然联系，可以动态添加或移除的功能。装饰器可以为代码提供缓存、代理、上下文环境等服务，它是对设计模式中代理模式的践行。在写装饰器的时候，带装饰功能的函数（上面代码中的</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">wrapper</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数）通常都会用</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">functools</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">模块中的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">wraps</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">再加以装饰，这个装饰器最重要的作用是给被装饰的类或函数动态添加一个</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**wrapped**</font>_<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">属性，这个属性会将被装饰之前的类或函数保留下来，这样在我们不需要装饰功能的时候，可以通过它来取消装饰器，例如可以使用</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">President</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">=</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">President.**wrapped**</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">来取消对</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">President</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">类做的单例处理。需要提醒大家的是：上面的单例并不是线程安全的，如果要做到线程安全，需要对创建对象的代码进行加锁的处理。在 Python 中可以使用</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">threading</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">模块的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">RLock</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">对象来提供锁，可以使用锁对象的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">acquire</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">和</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">release</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">方法来实现加锁和解锁的操作。当然，更为简便的做法是使用锁对象的</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">with</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">上下文语法来进行隐式的加锁和解锁操作。</font>\n\n方法二：使用元类实现单例模式。\n\n```python\nclass SingletonMeta(type):\n    \"\"\"自定义单例元类\"\"\"\n\n    def __init__(cls, *args, **kwargs):\n        cls.__instance = None\n        super().__init__(*args, **kwargs)\n\n    def __call__(cls, *args, **kwargs):\n        if cls.__instance is None:\n            cls.__instance = super().__call__(*args, **kwargs)\n        return cls.__instance\n\n\nclass President(metaclass=SingletonMeta):\n    pass\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：Python 是面向对象的编程语言，在面向对象的世界中，一切皆为对象。对象是通过类来创建的，而类本身也是对象，类这样的对象是通过元类来创建的。我们在定义类时，如果没有给一个类指定父类，那么默认的父类是</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">object</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，如果没有给一个类指定元类，那么默认的元类是</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">type</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。通过自定义的元类，我们可以改变一个类默认的行为，就如同上面的代码中，我们通过元类的</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**call**</font>_<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">魔术方法，改变了</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">President</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">类的构造器那样。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">补充</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：关于单例模式，在面试中还有可能被问到它的应用场景。通常一个对象的状态是被其他对象共享的，就可以将其设计为单例，例如项目中使用的数据库连接池对象和配置对象通常都是单例，这样才能保证所有地方获取到的</font>[数据库](https://link.csdn.net/?target=https%3A%2F%2Fgitcode.com%2FSequoiaDB%2FSequoiaDB%2Foverview)<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">连接和配置信息是完全一致的；而且由于对象只有唯一的实例，因此从根本上避免了重复创建对象造成的时间和空间上的开销，也避免了对资源的多重占用。再举个例子，项目中的日志操作通常也会使用单例模式，这是因为共享的日志文件一直处于打开状态，只能有一个实例去操作它，否则在写入日志的时候会产生混乱。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 002：不使用中间变量，交换两个变量`a`和`b`的值。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：典型的送人头的题目，通常交换两个变量需要借助一个中间变量，如果不允许使用中间变量，在其他编程语言中可以使用异或运算的方式来实现交换两个变量的值，但是 Python 中有更为简单明了的做法。</font>\n\n方法一：\n\n```python\na = a ^ b\nb = a ^ b\na = a ^ b\n```\n\n方法二：\n\n```python\na, b = b, a\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：需要注意，</font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">a</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">,</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">b</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">=</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">b</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">, a</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">这种做法其实并不是元组解包，虽然很多人都这样认为。Python 字节码指令中有</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">ROT_TWO</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">指令来支持这个操作，类似的还有</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">ROT_THREE</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，对于 3 个以上的元素，如</font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">a</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">,</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">b</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">, c, d =</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">b</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">, c, d, a</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，才会用到创建元组和元组解包。想知道你的代码对应的字节码指令，可以使用 Python 标准库中</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">dis</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">模块的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">dis</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数来反汇编你的 Python 代码。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 003：写一个删除列表中重复元素的函数，要求去重后元素相对位置保持不变。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：这个题目在初中级 Python 岗位面试的时候经常出现，题目源于《Python Cookbook》这本书第一章的第 10 个问题，有很多面试题其实都是这本书上的原题，所以建议大家有时间好好研读一下这本书。</font>\n\n```python\ndef dedup(items):\n    no_dup_items = []\n    seen = set()\n    for item in items:\n        if item not in seen:\n            no_dup_items.append(item)\n            seen.add(item)\n    return no_dup_items\n```\n\n如果愿意也可以把上面的函数改造成一个生成器，代码如下所示。\n\n```python\ndef dedup(items):\n    seen = set()\n    for item in items:\n        if item not in seen:\n            yield item\n            seen.add(item)\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：由于 Python 中的集合底层使用哈希存储，所以集合的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">in</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">和</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">not in</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">成员运算在性能上远远优于列表，所以上面的代码我们使用了集合来保存已经出现过的元素。集合中的元素必须是</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">hashable</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">对象，因此上面的代码在列表元素不是</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">hashable</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">对象时会失效，要解决这个问题可以给函数增加一个参数，该参数可以设计为返回哈希码或</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">hashable</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">对象的函数。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 004：假设你使用的是官方的 CPython，说出下面代码的运行结果。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：下面的程序对实际开发并没有什么意义，但却是 CPython 中的一个大坑，这道题旨在考察面试者对官方的 Python 解释器到底了解到什么程度。</font>\n\n```python\na, b, c, d = 1, 1, 1000, 1000\nprint(a is b, c is d)\n\ndef foo():\n    e = 1000\n    f = 1000\n    print(e is f, e is d)\n    g = 1\n    print(g is a)\n\nfoo()\n```\n\n运行结果：\n\n```plain\nTrue False\nTrue False\nTrue\n```\n\n上面代码中<font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">a</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">is</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">b</font>的结果是<font style=\"color:rgb(86, 182, 194);background-color:rgb(40, 44, 52);\">True</font>但<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">c</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">is</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">d</font>的结果是<font style=\"color:rgb(86, 182, 194);background-color:rgb(40, 44, 52);\">False</font>，这一点的确让人费解。CPython 解释器出于性能优化的考虑，把频繁使用的整数对象用一个叫<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">small</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">_</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">ints</font>的对象池缓存起来造成的。<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">small</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">_</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">ints</font>缓存的整数值被设定为<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[-5, 256]</font>这个区间，也就是说，在任何引用这些整数的地方，都不需要重新创建<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">int</font>对象，而是直接引用缓存池中的对象。如果整数不在该范围内，那么即便两个整数的值相同，它们也是不同的对象。\n\nCPython 底层为了进一步提升性能还做了另一个设定，对于同一个代码块中值不在<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">small</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">\\_</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">ints</font>缓存范围内的整数，如果同一个代码块中已经存在一个值与其相同的整数对象，那么就直接引用该对象，否则创建新的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">int</font>对象。需要大家注意的是，这条规则对数值型适用，但对字符串则需要考虑字符串的长度，这一点大家可以自行证明。\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：如果你用 PyPy（另一种 Python 解释器实现，支持 JIT，对 CPython 的缺点进行了改良，在性能上优于 CPython，但对三方库的支持略差）来运行上面的代码，你会发现所有的输出都是 True。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 005：Lambda 函数是什么，举例说明的它的应用场景。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：这个题目主要想考察的是 Lambda 函数的应用场景，潜台词是问你在项目中有没有使用过 Lambda 函数，具体在什么场景下会用到 Lambda 函数，借此来判断你写代码的能力。因为 Lambda 函数通常用在高阶函数中，主要的作用是通过向函数传入函数或让函数返回函数最终实现代码的解耦合。</font>\n\nLambda 函数也叫匿名函数，它是功能简单用一行代码就能实现的小型函数。Python 中的 Lambda 函数只能写一个表达式，这个表达式的执行结果就是函数的返回值，不用写<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">return</font>关键字。Lambda 函数因为没有名字，所以也不会跟其他函数发生命名冲突的问题。\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：面试的时候有可能还会考你用 Lambda 函数来实现一些功能，也就是用一行代码来实现题目要求的功能，例如：用一行代码实现求阶乘的函数，用一行代码实现求最大公约数的函数等。</font>\n\n```python\nfac = lambda x: __import__('functools').reduce(int.__mul__, range(1, x + 1), 1)\ngcd = lambda x, y: y % x and gcd(y % x, x) or x\n```\n\nLambda 函数其实最为主要的用途是把一个函数传入另一个高阶函数（如 Python 内置的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">filter</font>、<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">map</font>等）中来为函数做解耦合，增强函数的灵活性和通用性。下面的例子通过使用<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">filter</font>和<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">map</font>函数，实现了从列表中筛选出奇数并求平方构成新列表的操作，因为用到了高阶函数，过滤和映射数据的规则都是函数的调用者通过另外一个函数传入的，因此这<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">filter</font>和<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">map</font>函数没有跟特定的过滤和映射数据的规则耦合在一起。\n\n```python\nitems = [12, 5, 7, 10, 8, 19]\nitems = list(map(lambda x: x ** 2, filter(lambda x: x % 2, items)))\nprint(items)    # [25, 49, 361]\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：用列表的生成式来实现上面的代码会更加简单明了，代码如下所示。</font>\n\n```python\nitems = [12, 5, 7, 10, 8, 19]\nitems = [x ** 2 for x in items if x % 2]\nprint(items)    # [25, 49, 361]\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 006：说说 Python 中的浅拷贝和深拷贝。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：这个题目本身出现的频率非常高，但是就题论题而言没有什么技术含量。对于这种面试题，在</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">回答的时候一定要让你的答案能够超出面试官的预期</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，这样才能</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">获得更好的印象分</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。所以回答这个题目的要点不仅仅是能够说出浅拷贝和深拷贝的区别，深拷贝的时候可能遇到的两大问题，还要说出 Python 标准库对浅拷贝和深拷贝的支持，然后可以说说列表、字典如何实现拷贝操作以及如何通过序列化和反序列的方式实现深拷贝，最后还可以提到设计模式中的原型模式以及它在项目中的应用。</font>\n\n浅拷贝通常只复制对象本身，而深拷贝不仅会复制对象，还会递归的复制对象所关联的对象。深拷贝可能会遇到两个问题：一是一个对象如果直接或间接的引用了自身，会导致无休止的递归拷贝；二是深拷贝可能对原本设计为多个对象共享的数据也进行拷贝。Python 通过<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">copy</font>模块中的<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">copy</font>和<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">deepcopy</font>函数来实现浅拷贝和深拷贝操作，其中<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">deepcopy</font>可以通过<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">memo</font>字典来保存已经拷贝过的对象，从而避免刚才所说的自引用递归问题；此外，可以通过<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">copyreg</font>模块的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">pickle</font>函数来定制指定类型对象的拷贝行为。\n\n<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">deepcopy</font>函数的本质其实就是对象的一次序列化和一次返回序列化，面试题中还考过用自定义函数实现对象的深拷贝操作，显然我们可以使用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">pickle</font>模块的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">dumps</font>和<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">loads</font>来做到，代码如下所示。\n\n```python\nimport pickle\n\nmy_deep_copy = lambda obj: pickle.loads(pickle.dumps(obj))\n```\n\n列表的切片操作<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[:]</font>相当于实现了列表对象的浅拷贝，而字典的<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">copy</font>方法可以实现字典对象的浅拷贝。对象拷贝其实是更为快捷的创建对象的方式。在 Python 中，通过构造器创建对象属于两阶段构造，首先是分配内存空间，然后是初始化。在创建对象时，我们也可以基于“原型”对象来创建新对象，通过对原型对象的拷贝（复制内存）就完成了对象的创建和初始化，这种做法更加高效，这也就是设计模式中的原型模式。在 Python 中，我们可以通过元类的方式来实现原型模式，代码如下所示。\n\n```python\nimport copy\n\n\nclass PrototypeMeta(type):\n    \"\"\"实现原型模式的元类\"\"\"\n\n    def __init__(cls, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # 为对象绑定clone方法来实现对象拷贝\n        cls.clone = lambda self, is_deep=True: \\\n        copy.deepcopy(self) if is_deep else copy.copy(self)\n\n\nclass Person(metaclass=PrototypeMeta):\n    pass\n\n\np1 = Person()\np2 = p1.clone()                 # 深拷贝\np3 = p1.clone(is_deep=False)    # 浅拷贝\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 007：Python 是如何实现内存管理的？</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：当面试官问到这个问题的时候，一个展示自己的机会就摆在面前了。你要先反问面试官：“你说的是官方的 CPython 解释器吗？”。这个反问可以展示出你了解过 Python 解释器的不同的实现版本，而且你也知道面试官想问的是 CPython。当然，很多面试官对不同的 Python 解释器底层实现到底有什么差别也没有概念。所以，</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">千万不要觉得面试官一定比你强</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，怀揣着这份自信可以让你更好的完成面试。</font>\n\nPython 提供了自动化的内存管理，也就是说内存空间的分配与释放都是由 Python 解释器在运行时自动进行的，自动管理内存功能极大的减轻程序员的工作负担，也能够帮助程序员在一定程度上解决内存泄露的问题。以 CPython 解释器为例，它的内存管理有三个关键点：引用计数、标记清理、分代收集。\n\n**引用计数**：对于 CPython 解释器来说，Python 中的每一个对象其实就是<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">PyObject</font>结构体，它的内部有一个名为<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">ob_refcnt</font> 的引用计数器成员变量。程序在运行的过程中<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">ob_refcnt</font>的值会被更新并藉此来反映引用有多少个变量引用到该对象。当对象的引用计数值为 0 时，它的内存就会被释放掉。\n\n```plain\ntypedef struct _object {\n    _PyObject_HEAD_EXTRA\n    Py_ssize_t ob_refcnt;\n    struct _typeobject *ob_type;\n} PyObject;\n```\n\n以下情况会导致引用计数加<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font>：\n\n- 对象被创建\n- 对象被引用\n- 对象作为参数传入到一个函数中\n- 对象作为元素存储到一个容器中\n\n以下情况会导致引用计数减<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font>：\n\n- 用<font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">del</font>语句显示删除对象引用\n- 对象引用被重新赋值其他对象\n- 一个对象离开它所在的作用域\n- 持有该对象的容器自身被销毁\n- 持有该对象的容器删除该对象\n\n可以通过<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">sys</font>模块的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">getrefcount</font>函数来获得对象的引用计数。引用计数的内存管理方式在遇到循环引用的时候就会出现致命伤，因此需要其他的垃圾回收算法对其进行补充。\n\n**标记清理**：CPython 使用了“标记-清理”（Mark and Sweep）算法解决容器类型可能产生的循环引用问题。该算法在垃圾回收时分为两个阶段：标记阶段，遍历所有的对象，如果对象是可达的（被其他对象引用），那么就标记该对象为可达；清除阶段，再次遍历对象，如果发现某个对象没有标记为可达，则就将其回收。CPython 底层维护了两个双端链表，一个链表存放着需要被扫描的容器对象（姑且称之为链表 A），另一个链表存放着临时不可达对象（姑且称之为链表 B）。为了实现“标记-清理”算法，链表中的每个节点除了有记录当前引用计数的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">ref</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">\\_count</font>变量外，还有一个<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">gc_ref</font>变量，这个<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">gc_ref</font>是<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">ref</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">\\_count</font>的一个副本，所以初始值为<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">ref</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">\\_count</font>的大小。执行垃圾回收时，首先遍历链表 A 中的节点，并且将当前对象所引用的所有对象的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">gc_ref</font>减<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font>，这一步主要作用是解除循环引用对引用计数的影响。再次遍历链表 A 中的节点，如果节点的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">gc_ref</font>值为<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">0</font>，那么这个对象就被标记为“暂时不可达”（<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">GC_TENTATIVELY_UNREACHABLE</font>）并被移动到链表 B 中；如果节点的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">gc_ref</font>不为<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">0</font>，那么这个对象就会被标记为“可达“（<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">GC_REACHABLE</font>），对于”可达“对象，还要递归的将该节点可以到达的节点标记为”可达“；链表 B 中被标记为”可达“的节点要重新放回到链表 A 中。在两次遍历之后，链表 B 中的节点就是需要释放内存的节点。\n\n**分代回收**：在循环引用对象的回收中，整个应用程序会被暂停，为了减少应用程序暂停的时间，Python 通过分代回收（空间换时间）的方法提高垃圾回收效率。分代回收的基本思想是：**对象存在的时间越长，是垃圾的可能性就越小，应该尽量不对这样的对象进行垃圾回收**。CPython 将对象分为三种世代分别记为<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">0</font>、<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font>、<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">2</font>，每一个新生对象都在第<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">0</font>代中，如果该对象在一轮垃圾回收扫描中存活下来，那么它将被移到第<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font>代中，存在于第<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font>代的对象将较少的被垃圾回收扫描到；如果在对第<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font>代进行垃圾回收扫描时，这个对象又存活下来，那么它将被移至第 2 代中，在那里它被垃圾回收扫描的次数将会更少。分代回收扫描的门限值可以通过<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">gc</font>模块的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">get_threshold</font>函数来获得，该函数返回一个三元组，分别表示多少次内存分配操作后会执行<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">0</font>代垃圾回收，多少次<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">0</font>代垃圾回收后会执行<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font>代垃圾回收，多少次<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font>代垃圾回收后会执行<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">2</font>代垃圾回收。需要说明的是，如果执行一次<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">2</font>代垃圾回收，那么比它年轻的代都要执行垃圾回收。如果想修改这几个门限值，可以通过<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">gc</font>模块的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">set_threshold</font>函数来做到。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 008：说一下你对 Python 中迭代器和生成器的理解。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：很多人面试者都会写迭代器和生成器，但是却无法准确的解释什么是迭代器和生成器。如果你也有同样的困惑，可以参考下面的回答。</font>\n\n迭代器是实现了迭代器协议的对象。跟其他编程语言不通，Python 中没有用于定义协议或表示约定的关键字，像<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">interface</font>、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">protocol</font>这些单词并不在 Python 语言的关键字列表中。Python 语言通过魔法方法来表示约定，也就是我们所说的协议，而*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**next**</font>*和*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**iter**</font>*这两个魔法方法就代表了迭代器协议。可以通过<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">for-in</font>循环从迭代器对象中取出值，也可以使用<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">next</font>函数取出迭代器对象中的下一个值。生成器是迭代器的语法升级版本，可以用更为简单的代码来实现一个迭代器。\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：面试中经常让写生成斐波那契数列的迭代器，大家可以参考下面的代码。</font>\n\n```python\nclass Fib(object):\n\n    def __init__(self, num):\n        self.num = num\n        self.a, self.b = 0, 1\n        self.idx = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.idx < self.num:\n            self.a, self.b = self.b, self.a + self.b\n            self.idx += 1\n            return self.a\n        raise StopIteration()\n```\n\n<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">如果用生成器的语法来改写上面的代码，代码会简单优雅很多。</font>\n\n```python\ndef fib(num):\n    a, b = 0, 1\n    for _ in range(num):\n        a, b = b, a + b\n        yield a\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 009：正则表达式的 match 方法和 search 方法有什么区别？</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：正则表达式是字符串处理的重要工具，所以也是面试中经常考察的知识点。在 Python 中，使用正则表达式有两种方式，一种是直接调用</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">re</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">模块中的函数，传入正则表达式和需要处理的字符串；一种是先通过</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">re</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">模块的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">compile</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数创建正则表达式对象，然后再通过对象调用方法并传入需要处理的字符串。</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">如果一个正则表达式被频繁的使用，我们推荐用</font>\\*\\***<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">re.</font>\\***\\*<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">compile</font>\\*\\***<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数创建正则表达式对象，这样会减少频繁编译同一个正则表达式所造成的开销</font>\\*\\*<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。</font>\n\n<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">match</font>方法是从字符串的起始位置进行正则表达式匹配，返回<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">Match</font>对象或 None。<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">search</font>方法会扫描整个字符串来找寻匹配的模式，同样也是返回 Match 对象或 None。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 010：下面这段代码的执行结果是什么。</font>\n\n```python\ndef multiply():\n    return [lambda x: i * x for i in range(4)]\n\nprint([m(100) for m in multiply()])\n```\n\n运行结果：\n\n```plain\n[300, 300, 300, 300]\n```\n\n上面代码的运行结果很容易被误判为<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[0, 100, 200, 300]</font>。首先需要注意的是<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">multiply</font>函数用生成式语法返回了一个列表，列表中保存了 4 个 Lambda 函数，这 4 个 Lambda 函数会返回传入的参数乘以<font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">i</font>的结果。需要注意的是这里有闭包（closure）现象，<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">multiply</font>函数中的局部变量<font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">i</font>的生命周期被延展了，由于<font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">i</font>最终的值是<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">3</font>，所以通过<font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">m</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">(</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">100</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">)</font>调列表中的 Lambda 函数时会返回<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">300</font>，而且 4 个调用都是如此。\n\n如果想得到<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[0, 100, 200, 300]</font>这个结果，可以按照下面几种方式来修改<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">multiply</font>函数。\n\n方法一：使用生成器，让函数获得<font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">i</font>的当前值。\n\n```python\ndef multiply():\n    return (lambda x: i * x for i in range(4))\n\nprint([m(100) for m in multiply()])\n```\n\n或者\n\n```python\ndef multiply():\n    for i in range(4):\n        yield lambda x: x * i\n\nprint([m(100) for m in multiply()])\n```\n\n方法二：使用偏函数，彻底避开闭包。\n\n```python\nfrom functools import partial\nfrom operator import __mul__\n\ndef multiply():\n    return [partial(__mul__, i) for i in range(4)]\n\nprint([m(100) for m in multiply()])\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 011：Python 中为什么没有函数重载？</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：C++、Java、C#等诸多编程语言都支持函数重载，所谓函数重载指的是在同一个作用域中有多个同名函数，它们拥有不同的参数列表（参数个数不同或参数类型不同或二者皆不同），可以相互区分。重载也是一种多态性，因为通常是在编译时通过参数的个数和类型来确定到底调用哪个重载函数，所以也被称为编译时多态性或者叫前绑定。这个问题的潜台词其实是问面试者是否有其他编程语言的经验，是否理解 Python 是动态类型语言，是否知道 Python 中函数的可变参数、关键字参数这些概念。</font>\n\n首先 Python 是解释型语言，函数重载现象通常出现在编译型语言中。其次 Python 是动态类型语言，函数的参数没有类型约束，也就无法根据参数类型来区分重载。再者 Python 中函数的参数可以有默认值，可以使用可变参数和关键字参数，因此即便没有函数重载，也要可以让一个函数根据调用者传入的参数产生不同的行为。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 012：用 Python 代码实现 Python 内置函数 max。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：这个题目看似简单，但实际上还是比较考察面试者的功底。因为 Python 内置的</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">max</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数既可以传入可迭代对象找出最大，又可以传入两个或多个参数找出最大；最为关键的是还可以通过命名关键字参数</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">key</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">来指定一个用于元素比较的函数，还可以通过</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">default</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">命名关键字参数来指定当可迭代对象为空时返回的默认值。</font>\n\n下面的代码仅供参考：\n\n```python\ndef my_max(*args, key=None, default=None):\n    \"\"\"\n    获取可迭代对象中最大的元素或两个及以上实参中最大的元素\n    :param args: 一个可迭代对象或多个元素\n    :param key: 提取用于元素比较的特征值的函数，默认为None\n    :param default: 如果可迭代对象为空则返回该默认值，如果没有给默认值则引发ValueError异常\n    :return: 返回可迭代对象或多个元素中的最大元素\n    \"\"\"\n    if len(args) == 1 and len(args[0]) == 0:\n        if default:\n            return default\n        else:\n            raise ValueError('max() arg is an empty sequence')\n    items = args[0] if len(args) == 1 else args\n    max_elem, max_value = items[0], items[0]\n    if key:\n        max_value = key(max_value)\n    for item in items:\n        value = item\n        if key:\n            value = key(item)\n        if value > max_value:\n            max_elem, max_value = item, value\n    return max_elem\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 013：写一个函数统计传入的列表中每个数字出现的次数并返回对应的字典。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：送人头的题目，不解释。</font>\n\n```python\ndef count_letters(items):\n    result = {}\n    for item in items:\n        if isinstance(item, (int, float)):\n            result[item] = result.get(item, 0) + 1\n    return result\n```\n\n也可以直接使用 Python 标准库中<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">collections</font>模块的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">Counter</font>类来解决这个问题，<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">Counter</font>是<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">dict</font>的子类，它会将传入的序列中的每个元素作为键，元素出现的次数作为值来构造字典。\n\n```python\nfrom collections import Counter\n\ndef count_letters(items):\n    counter = Counter(items)\n    return {key: value for key, value in counter.items() \\\n            if isinstance(key, (int, float))}\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 014：使用 Python 代码实现遍历一个文件夹的操作。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：基本也是送人头的题目，只要用过</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">os</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">模块就应该知道怎么做。</font>\n\nPython 标准库<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">os</font>模块的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">walk</font>函数提供了遍历一个文件夹的功能，它返回一个生成器。\n\n```python\nimport os\n\ng = os.walk('/Users/Hao/Downloads/')\nfor path, dir_list, file_list in g:\n    for dir_name in dir_list:\n        print(os.path.join(path, dir_name))\n    for file_name in file_list:\n        print(os.path.join(path, file_name))\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">说明</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">os</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">path</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">模块提供了很多进行路径操作的工具函数，在项目开发中也是经常会用到的。如果题目明确要求不能使用</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">os</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.walk</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数，那么可以使用</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">os</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.listdir</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数来获取指定目录下的文件和文件夹，然后再通过循环遍历用</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">os</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.isdir</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数判断哪些是文件夹，对于文件夹可以通过</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">递归调用</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">进行遍历，这样也可以实现遍历一个文件夹的操作。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 015：现有 2 元、3 元、5 元共三种面额的货币，如果需要找零 99 元，一共有多少种找零的方式？</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：还有一个非常类似的题目：“一个小朋友走楼梯，一次可以走 1 个台阶、2 个台阶或 3 个台阶，问走完 10 个台阶一共有多少种走法？”，这两个题目的思路是一样，如果用递归函数来写的话非常简单。</font>\n\n```plain\nfrom functools import lru_cache\n\n\n@lru_cache()\ndef change_money(total):\n    if total == 0:\n        return 1\n    if total < 0:\n        return 0\n    return change_money(total - 2) + change_money(total - 3) + \\\n        change_money(total - 5)\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">说明</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：在上面的代码中，我们用</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">lru_cache</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">装饰器装饰了递归函数</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">change_money</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，如果不做这个优化，上面代码的渐近时间复杂度将会是</font>![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710778212608-15021bec-58e2-4a1c-bbce-648755adb08d.png)<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，而如果参数</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">total</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">的值是</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">99</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，这个运算量是非常巨大的。</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">lru_cache</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">装饰器会缓存函数的执行结果，这样就可以减少重复运算所造成的开销，这是空间换时间的策略，也是动态规划的编程思想。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 016：写一个函数，给定矩阵的阶数</font>`<font style=\"color:rgb(85, 87, 112);\">n</font>`<font style=\"color:rgb(85, 87, 112);\">，输出一个螺旋式数字矩阵。</font>\n\n<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">例如：n = 2，返回：</font>\n\n```plain\n1 2\n4 3\n```\n\n<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">例如：n = 3，返回：</font>\n\n```plain\n1 2 3\n8 9 4\n7 6 5\n```\n\n这个题目本身并不复杂，下面的代码仅供参考。\n\n```python\ndef show_spiral_matrix(n):\n    matrix = [[0] * n for _ in range(n)]\n    row, col = 0, 0\n    num, direction = 1, 0\n    while num <= n ** 2:\n        if matrix[row][col] == 0:\n            matrix[row][col] = num\n            num += 1\n        if direction == 0:\n            if col < n - 1 and matrix[row][col + 1] == 0:\n                col += 1\n            else:\n                direction += 1\n        elif direction == 1:\n            if row < n - 1 and matrix[row + 1][col] == 0:\n                row += 1\n            else:\n                direction += 1\n        elif direction == 2:\n            if col > 0 and matrix[row][col - 1] == 0:\n                col -= 1\n            else:\n                direction += 1\n        else:\n            if row > 0 and matrix[row - 1][col] == 0:\n                row -= 1\n            else:\n                direction += 1\n        direction %= 4\n    for x in matrix:\n        for y in x:\n            print(y, end='\\t')\n        print()\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 017：阅读下面的代码，写出程序的运行结果。</font>\n\n```python\nitems = [1, 2, 3, 4]\nprint([i for i in items if i > 2])\nprint([i for i in items if i % 2])\nprint([(x, y) for x, y in zip('abcd', (1, 2, 3, 4, 5))])\nprint({x: f'item{x ** 2}' for x in (2, 4, 6)})\nprint(len({x for x in 'hello world' if x not in 'abcdefg'}))\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">生成式（推导式）属于 Python 的特色语法之一，几乎是面试必考内容</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。Python 中通过生成式字面量语法，可以创建出列表、集合、字典。</font>\n\n```plain\n[3, 4]\n[1, 3]\n[('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n{2: 'item4', 4: 'item16', 6: 'item36'}\n6\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 018：说出下面代码的运行结果。</font>\n\n```python\nclass Parent:\n    x = 1\n\nclass Child1(Parent):\n    pass\n\nclass Child2(Parent):\n    pass\n\nprint(Parent.x, Child1.x, Child2.x)\nChild1.x = 2\nprint(Parent.x, Child1.x, Child2.x)\nParent.x = 3\nprint(Parent.x, Child1.x, Child2.x)\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：运行上面的代码首先输出</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">1</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">1</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">1</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，这一点大家应该没有什么疑问。接下来，通过</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">Child1.x</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">=</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">2</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">给类</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">Child1</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">重新绑定了属性</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">x</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">并赋值为</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">2</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，所以</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">Child</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">1</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">x</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">会输出</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">2</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，而</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">Parent</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">和</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">Child2</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">并不受影响。执行</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">Parent.x</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">=</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">3</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">会重新给</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">Parent</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">类的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">x</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">属性赋值为</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">3</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，由于</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">Child2</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">x</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">属性继承自</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">Parent</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，所以</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">Child</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">2</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">x</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">的值也是</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">3</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">；而之前我们为</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">Child1</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">重新绑定了</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">x</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">属性，那么它的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">x</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">属性值不会受到</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">Parent.x</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">=</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">3</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">的影响，还是之前的值</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">2</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。</font>\n\n```plain\n1 1 1\n1 2 1\n3 2 3\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 19：说说你用过 Python 标准库中的哪些模块。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：Python 标准库中的模块非常多，建议大家根据自己过往的项目经历来介绍你用过的标准库和三方库，因为这些是你最为熟悉的，经得起面试官深挖的。</font>\n\n| **<font style=\"color:rgb(79, 79, 79);\">模块名</font>**                   | **<font style=\"color:rgb(79, 79, 79);\">介绍</font|\n| :----------------------------------------------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| <font style=\"color:rgb(79, 79, 79);\">sys</font>                          | <font style=\"color:rgb(79, 79, 79);\">跟 Python 解释器相关的变量和函数，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">sys.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">version</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">sys.</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">exit</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">()</font>                                                                                                                                                                                                                                                                                   |\n| <font style=\"color:rgb(79, 79, 79);\">os</font>                           | <font style=\"color:rgb(79, 79, 79);\">和操作系统相关的功能，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">os.listdir</font>_<font style=\"color:rgb(92, 99, 112);background-color:rgb(40, 44, 52);\">()</font>_<font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">os</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">remove</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">()</font>                                                                                                                                                                                                             |\n| <font style=\"color:rgb(79, 79, 79);\">re</font>                           | <font style=\"color:rgb(79, 79, 79);\">和正则表达式相关的功能，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">re.compile</font>_<font style=\"color:rgb(92, 99, 112);background-color:rgb(40, 44, 52);\">()</font>_<font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">re.search</font>_<font style=\"color:rgb(92, 99, 112);background-color:rgb(40, 44, 52);\">()</font>_                                                                                                                                                                                                                                                                                                                                                                           |\n| <font style=\"color:rgb(79, 79, 79);\">math</font>                         | <font style=\"color:rgb(79, 79, 79);\">和数学运算相关的功能，例如：</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">math</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">pi</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">math</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.e</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">math</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">cos</font> |\n| <font style=\"color:rgb(79, 79, 79);\">logging</font>                      | <font style=\"color:rgb(79, 79, 79);\">和日志系统相关的类和函数，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">logging.Logger</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">logging.</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">Handler</font>                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| <font style=\"color:rgb(79, 79, 79);\">json / pickle</font>                | <font style=\"color:rgb(79, 79, 79);\">实现对象序列化和反序列的模块，例如：</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">json</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.loads</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">json</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.dumps</font>                                                                                                                                                                                                                                                                                                                                                                        |\n| <font style=\"color:rgb(79, 79, 79);\">hashlib</font>                      | <font style=\"color:rgb(79, 79, 79);\">封装了多种哈希摘要算法的模块，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">hashlib.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">md5</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">hashlib.sha1</font>                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| <font style=\"color:rgb(79, 79, 79);\">urllib</font>                       | <font style=\"color:rgb(79, 79, 79);\">包含了和 URL 相关的子模块，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">urllib.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">request</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">urllib.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">parse</font>                                                                                                                                                                                                                                                                                                                                                                     |\n| <font style=\"color:rgb(79, 79, 79);\">itertools</font>                    | <font style=\"color:rgb(79, 79, 79);\">提供各种迭代器的模块，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">itertools.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">cycle</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">itertools.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">product</font>                                                                                                                                                                                                                                                                                                                                                                    |\n| <font style=\"color:rgb(79, 79, 79);\">functools</font>                    | <font style=\"color:rgb(79, 79, 79);\">函数相关工具模块，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">functools.</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">partial</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">functools.lru_cache</font>                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| <font style=\"color:rgb(79, 79, 79);\">collections / heapq</font>          | <font style=\"color:rgb(79, 79, 79);\">封装了常用数据结构和算法的模块，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">collections.deque</font|\n| <font style=\"color:rgb(79, 79, 79);\">threading / multiprocessing</font>  | <font style=\"color:rgb(79, 79, 79);\">多线程/多进程相关类和函数的模块，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">threading.</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">Thread</font|\n| <font style=\"color:rgb(79, 79, 79);\">concurrent.futures / asyncio</font> | <font style=\"color:rgb(79, 79, 79);\">并发编程/异步编程相关的类和函数的模块，例如：</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">ThreadPoolExecutor</font>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| <font style=\"color:rgb(79, 79, 79);\">base64</font>                       | <font style=\"color:rgb(79, 79, 79);\">提供 BASE-64 编码相关函数的模块，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">bas64.</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">encode</font|\n| <font style=\"color:rgb(79, 79, 79);\">csv</font>                          | <font style=\"color:rgb(79, 79, 79);\">和读写 CSV 文件相关的模块，例如：</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">csv</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.reader</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">csv</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.writer</font>                                                                                                                                                                                                                                                                                                                                                                           |\n| <font style=\"color:rgb(79, 79, 79);\">profile / cProfile / pstats</font>  | <font style=\"color:rgb(79, 79, 79);\">和代码性能剖析相关的模块，例如：</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">cProfile.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">run</font><font style=\"color:rgb(79, 79, 79);\">、</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">pstats.Stats</font>                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| <font style=\"color:rgb(79, 79, 79);\">unittest</font>                     | <font style=\"color:rgb(79, 79, 79);\">和单元测试相关的模块，例如：</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">unittest</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.TestCase</font|\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 20：</font>`<font style=\"color:rgb(85, 87, 112);\">__</font>**<font style=\"color:rgb(85, 87, 112);\">init__</font>**`**<font style=\"color:rgb(85, 87, 112);\">和</font>**`**<font style=\"color:rgb(85, 87, 112);\">__new__</font>**`<font style=\"color:rgb(85, 87, 112);\">方法有什么区别？</font>\n\nPython 中调用构造器创建对象属于两阶段构造过程，首先执行*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**new**</font>*方法获得保存对象所需的内存空间，再通过*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**init**</font>*执行对内存空间数据的填充（对象属性的初始化）。*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**new**</font>*方法的返回值是创建好的 Python 对象（的引用），而*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**init**</font>*方法的第一个参数就是这个对象（的引用），所以在*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**init**</font>*中可以完成对对象的初始化操作。*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**new**</font>*是类方法，它的第一个参数是类，*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**init**</font>*是对象方法，它的第一个参数是对象。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 21：输入年月日，判断这个日期是这一年的第几天。</font>\n\n方法一：不使用标准库中的模块和函数。\n\n```python\ndef is_leap_year(year):\n    \"\"\"判断指定的年份是不是闰年，平年返回False，闰年返回True\"\"\"\n    return year % 4 == 0 and year % 100 != 0 or year % 400 == 0\n\ndef which_day(year, month, date):\n    \"\"\"计算传入的日期是这一年的第几天\"\"\"\n    # 用嵌套的列表保存平年和闰年每个月的天数\n    days_of_month = [\n        [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n        [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    ]\n    days = days_of_month[is_leap_year(year)][:month - 1]\n    return sum(days) + date\n```\n\n方法二：使用标准库中的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">datetime</font>模块。\n\n```python\nimport datetime\n\ndef which_day(year, month, date):\n    end = datetime.date(year, month, date)\n    start = datetime.date(year, 1, 1)\n    return (end - start).days + 1\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 22：平常工作中用什么工具进行静态代码分析。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：静态代码分析工具可以从代码中提炼出各种静态属性，这使得开发者可以对代码的复杂性、可维护性和可读性有更好的了解，这里所说的静态属性包括：</font>\n\n1. <font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">代码是否符合编码规范，例如：PEP-8。</font>\n2. <font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">代码中潜在的问题，包括：语法错误、缩进问题、导入缺失、变量覆盖等。</font>\n3. <font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">代码中的坏味道。</font>\n4. <font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">代码的复杂度。</font>\n5. <font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">代码的逻辑问题。</font>\n\n工作中静态代码分析主要用到的是 Pylint 和 Flake8。Pylint 可以检查出代码错误、坏味道、不规范的代码等问题，较新的版本中还提供了代码复杂度统计数据，可以生成检查报告。Flake8 封装了 Pyflakes（检查代码逻辑错误）、McCabe（检查代码复杂性）和 Pycodestyle（检查代码是否符合 PEP-8 规范）工具，它可以执行这三个工具提供的检查。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 23：说一下你知道的 Python 中的魔术方法。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：魔术方法也称为魔法方法，是 Python 中的特色语法，也是面试中的高频问题。</font>\n\n| **<font style=\"color:rgb(79, 79, 79);\">魔术方法</font| **<font style=\"color:rgb(79, 79, 79);\">作用</font>**           |\n|| :------------------------------------------------------------- |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**new**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**init**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**del**</font>_                                                                                                                                                                                                                                                                                                                                                                                                                          | <font style=\"color:rgb(79, 79, 79);\">创建和销毁对象相关</font> |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**add**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**sub**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**mul**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**div**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**floordiv**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**mod**</font>_ | <font style=\"color:rgb(79, 79, 79);\">算术运算符相关</font>     |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**eq**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**ne**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**lt**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**gt**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**le**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**ge**</font>_            | <font style=\"color:rgb(79, 79, 79);\">关系运算符相关</font>     |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**pos**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**neg**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**invert**</font>_                                                                                                                                                                                                                                                                                                                                                                                                                        | <font style=\"color:rgb(79, 79, 79);\">一元运算符相关</font>     |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**lshift**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**rshift**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**and**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**or**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**xor**</font>_                                                                                                                                        | <font style=\"color:rgb(79, 79, 79);\">位运算相关</font>         |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**enter**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**exit**</font| <font style=\"color:rgb(79, 79, 79);\">上下文管理器协议</font>   |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**iter**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**next**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**reversed**</font>_                                                                                                                                                                                                                                                                                                                                                                                                                    | <font style=\"color:rgb(79, 79, 79);\">迭代器协议</font>         |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**int**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**long**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**float**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**oct**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**hex**</font>_                                                                                                                                          | <font style=\"color:rgb(79, 79, 79);\">类型/进制转换相关</font>  |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**str**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**repr**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**hash**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**dir**</font>_                                                                                                                                                                                                                                                                                  | <font style=\"color:rgb(79, 79, 79);\">对象表述相关</font>       |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**len**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**getitem**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**setitem**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**contains**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**missing**</font>_                                                                                                                            | <font style=\"color:rgb(79, 79, 79);\">序列相关</font>           |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**copy**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**deepcopy**</font| <font style=\"color:rgb(79, 79, 79);\">对象拷贝相关</font>       |\n| _<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**call**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**setattr**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**getattr**</font>_<font style=\"color:rgb(79, 79, 79);\">、</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**delattr**</font>_                                                                                                                                                                                                                                                                       | <font style=\"color:rgb(79, 79, 79);\">其他魔术方法</font>       |\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 24：函数参数</font>`_<font style=\"color:rgb(85, 87, 112);\">arg</font>_`_<font style=\"color:rgb(85, 87, 112);\">和</font>_`<font style=\"color:rgb(85, 87, 112);\">*kwargs</font>`<font style=\"color:rgb(85, 87, 112);\">分别代表什么？</font>\n\nPython 中，函数的参数分为位置参数、可变参数、关键字参数、命名关键字参数。*<font style=\"color:rgb(92, 99, 112);background-color:rgb(40, 44, 52);\">\\*args</font>*代表可变参数，可以接收<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">0</font>个或任意多个参数，当不确定调用者会传入多少个位置参数时，就可以使用可变参数，它会将传入的参数打包成一个元组。*<font style=\"color:rgb(92, 99, 112);background-color:rgb(40, 44, 52);\">\\*\\*kwargs</font>*代表关键字参数，可以接收用<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">参数名</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">=</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">参数值</font>的方式传入的参数，传入的参数的会打包成一个字典。定义函数时如果同时使用*<font style=\"color:rgb(92, 99, 112);background-color:rgb(40, 44, 52);\">\\*args</font>*和*<font style=\"color:rgb(92, 99, 112);background-color:rgb(40, 44, 52);\">\\*\\*kwargs</font>*，那么函数可以接收任意参数。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 25：写一个记录函数执行时间的装饰器。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：高频面试题，也是最简单的装饰器，面试者</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">必须要掌握的内容</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。</font>\n\n方法一：用函数实现装饰器。\n\n```python\nfrom functools import wraps\nfrom time import time\n\n\ndef record_time(func):\n\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time()\n        result = func(*args, **kwargs)\n        print(f'{func.__name__}执行时间: {time() - start}秒')\n        return result\n\n    return wrapper\n```\n\n方法二：用类实现装饰器。类有*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**call**</font>*魔术方法，该类对象就是可调用对象，可以当做装饰器来使用。\n\n```python\nfrom functools import wraps\nfrom time import time\n\n\nclass Record:\n\n    def __call__(self, func):\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            start = time()\n            result = func(*args, **kwargs)\n            print(f'{func.__name__}执行时间: {time() - start}秒')\n            return result\n\n        return wrapper\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">说明</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：装饰器可以用来装饰类或函数，为其提供额外的能力，属于设计模式中的</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">代理模式</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">装饰器本身也可以参数化</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，例如上面的例子中，如果不希望在终端中显示函数的执行时间而是希望由调用者来决定如何输出函数的执行时间，可以通过参数化装饰器的方式来做到，代码如下所示。</font>\n\n```python\nfrom functools import wraps\nfrom time import time\n\n\ndef record_time(output):\n    \"\"\"可以参数化的装饰器\"\"\"\n\n    def decorate(func):\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            start = time()\n            result = func(*args, **kwargs)\n            output(func.__name__, time() - start)\n            return result\n\n        return wrapper\n\n    return decorate\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 26：什么是鸭子类型（duck typing）？</font>\n\n鸭子类型是动态类型语言判断一个对象是不是某种类型时使用的方法，也叫做鸭子判定法。简单的说，鸭子类型是指判断一只鸟是不是鸭子，我们只关心它游泳像不像鸭子、叫起来像不像鸭子、走路像不像鸭子就足够了。换言之，如果对象的行为跟我们的预期是一致的（能够接受某些消息），我们就认定它是某种类型的对象。\n\n在 Python 语言中，有很多 bytes-like 对象（如：<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">bytes</font>、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">bytearray</font>、<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">array</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">array</font>、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">memoryview</font>）、file-like 对象（如：<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">StringIO</font>、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">BytesIO</font>、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">GzipFile</font>、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">socket</font>）、path-like 对象（如：<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">str</font>、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">bytes</font>），其中 file-like 对象都能支持<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">read</font>和<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">write</font>操作，可以像文件一样读写，这就是所谓的对象有鸭子的行为就可以判定为鸭子的判定方法。再比如 Python 中列表的<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">extend</font>方法，它需要的参数并不一定要是列表，只要是可迭代对象就没有问题。\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">说明</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：动态语言的鸭子类型使得设计模式的应用被大大简化。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 27：说一下 Python 中变量的作用域。</font>\n\nPython 中有四种作用域，分别是局部作用域（**L**ocal）、嵌套作用域（**E**mbedded）、全局作用域（**G**lobal）、内置作用域（**B**uilt-in），搜索一个标识符时，会按照**LEGB**的顺序进行搜索，如果所有的作用域中都没有找到这个标识符，就会引发<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">NameError</font>异常。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 28：说一下你对闭包的理解。</font>\n\n闭包是支持一等函数的编程语言（Python、JavaScript 等）中实现词法绑定的一种技术。当捕捉闭包的时候，它的自由变量（在函数外部定义但在函数内部使用的变量）会在捕捉时被确定，这样即便脱离了捕捉时的上下文，它也能照常运行。简单的说，可以将闭包理解为**能够读取其他函数内部变量的函数**。正在情况下，函数的局部变量在函数调用结束之后就结束了生命周期，但是**闭包使得局部变量的生命周期得到了延展**。使用闭包的时候需要注意，闭包会使得函数中创建的对象不会被垃圾回收，可能会导致很大的内存开销，所以**闭包一定不能滥用**。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 29：说一下 Python 中的多线程和多进程的应用场景和优缺点。</font>\n\n线程是操作系统分配 CPU 的基本单位，进程是操作系统分配内存的基本单位。通常我们运行的程序会包含一个或多个进程，而每个进程中又包含一个或多个线程。多线程的优点在于多个线程可以共享进程的内存空间，所以线程间的通信非常容易实现；但是如果使用官方的 CPython 解释器，多线程受制于 GIL（全局解释器锁），并不能利用 CPU 的多核特性，这是一个很大的问题。使用多进程可以充分利用 CPU 的多核特性，但是进程间通信相对比较麻烦，需要使用 IPC 机制（管道、套接字等）。\n\n多线程适合那些会花费大量时间在 I/O 操作上，但没有太多并行计算需求且不需占用太多内存的 I/O 密集型应用。多进程适合执行计算密集型任务（如：视频编码解码、数据处理、科学计算等）、可以分解为多个并行子任务并能合并子任务执行结果的任务以及在内存使用方面没有任何限制且不强依赖于 I/O 操作的任务。\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：Python 中实现并发编程通常有多线程、多进程和异步编程三种选择。异步编程实现了协作式并发，通过多个相互协作的子程序的用户态切换，实现对 CPU 的高效利用，这种方式也是非常适合 I/O 密集型应用的。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 30：说一下 Python 2 和 Python 3 的区别。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：这种问题千万不要背所谓的参考答案，说一些自己最熟悉的就足够了。</font>\n\n1. Python 2 中的<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">print</font>和<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">exec</font>都是关键字，在 Python 3 中变成了函数。\n2. Python 3 中没有<font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">long</font>类型，整数都是<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">int</font>类型。\n3. Python 2 中的不等号<font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">&lt;</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">&gt;</font>在 Python 3 中被废弃，统一使用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">!=</font>。\n4. Python 2 中的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">xrange</font>函数在 Python 3 中被<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">range</font>函数取代。\n5. Python 3 对 Python 2 中不安全的<font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">input</font>函数做出了改进，废弃了<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">raw_input</font>函数。\n6. Python 2 中的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">file</font>函数被 Python 3 中的<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">open</font>函数取代。\n7. Python 2 中的<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">/</font>运算对于<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">int</font>类型是整除，在 Python 3 中要用*<font style=\"color:rgb(92, 99, 112);background-color:rgb(40, 44, 52);\">//</font>*来做整除除法。\n8. Python 3 中改进了 Python 2 捕获异常的代码，很明显 Python 3 的写法更合理。\n9. Python 3 生成式中循环变量的作用域得到了更好的控制，不会影响到生成式之外的同名变量。\n10. Python 3 中的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">round</font>函数可以返回<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">int</font>或<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">float</font>类型，Python 2 中的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">round</font>函数返回<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">float</font>类型。\n11. Python 3 的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">str</font>类型是 Unicode 字符串，Python 2 的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">str</font>类型是字节串，相当于 Python 3 中的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">bytes</font>。\n12. Python 3 中的比较运算符必须比较同类对象。\n13. Python 3 中定义类的都是新式类，Python 2 中定义的类有新式类（显式继承自<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">object</font>的类）和旧式类（经典类）之分，新式类和旧式类在 MRO 问题上有非常显著的区别，新式类可以使用<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**class**`属性获取自身类型，新式类可以使用`**slots**</font>魔法。\n14. Python 3 对代码缩进的要求更加严格，如果混用空格和制表键会引发<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">TabError</font>。\n15. Python 3 中字典的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">keys</font>、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">values</font>、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">items</font>方法都不再返回<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">list</font>对象，而是返回<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">view</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">object</font>，内置的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">map</font>、<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">filter</font>等函数也不再返回<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">list</font>对象，而是返回迭代器对象。\n16. Python 3 标准库中某些模块的名字跟 Python 2 是有区别的；而在三方库方面，有些三方库只支持 Python 2，有些只能支持 Python 3。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 31：谈谈你对“猴子补丁”（monkey patching）的理解。</font>\n\n“猴子补丁”是动态类型语言的一个特性，代码运行时在不修改源代码的前提下改变代码中的方法、属性、函数等以达到热补丁（hot patch）的效果。很多系统的安全补丁也是通过猴子补丁的方式来实现的，但实际开发中应该避免对猴子补丁的使用，以免造成代码行为不一致的问题。\n\n在使用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">gevent</font>库的时候，我们会在代码开头的地方执行<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">gevent</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">.monkey</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">.patch_all</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">()</font>，这行代码的作用是把标准库中的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">socket</font>模块给替换掉，这样我们在使用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">socket</font>的时候，不用修改任何代码就可以实现对代码的协程化，达到提升性能的目的，这就是对猴子补丁的应用。\n\n另外，如果希望用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">ujson</font>三方库替换掉标准库中的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">json</font>，也可以使用猴子补丁的方式，代码如下所示。\n\n```plain\nimport json, ujson\n\njson.__name__ = 'ujson'\njson.dumps = ujson.dumps\njson.loads = ujson.loads\n```\n\n单元测试中的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">Mock</font>技术也是对猴子补丁的应用，Python 中的<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">unittest</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.mock</font>模块就是解决单元测试中用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">Mock</font>对象替代被测对象所依赖的对象的模块。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 32：阅读下面的代码说出运行结果。</font>\n\n```python\nclass A:\n    def who(self):\n        print('A', end='')\n\nclass B(A):\n    def who(self):\n        super(B, self).who()\n        print('B', end='')\n\nclass C(A):\n    def who(self):\n        super(C, self).who()\n        print('C', end='')\n\nclass D(B, C):\n    def who(self):\n        super(D, self).who()\n        print('D', end='')\n\nitem = D()\nitem.who()\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：这道题考查到了两个知识点：</font>\n\n1. <font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">Python 中的 MRO（方法解析顺序）。在没有多重继承的情况下，向对象发出一个消息，如果对象没有对应的方法，那么向上（父类）搜索的顺序是非常清晰的。如果向上追溯到</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">object</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">类（所有类的父类）都没有找到对应的方法，那么将会引发</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">AttributeError</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">异常。但是有多重继承尤其是出现菱形继承（钻石继承）的时候，向上追溯到底应该找到那个方法就得确定 MRO。Python 3 中的类以及 Python 2 中的新式类使用 C3 算法来确定 MRO，它是一种类似于广度优先搜索的方法；Python 2 中的旧式类（经典类）使用深度优先搜索来确定 MRO。在搞不清楚 MRO 的情况下，可以使用类的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">mro</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">方法或</font>**<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**mro**</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">属性来获得类的 MRO 列表。</font>\n2. <font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">super</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">()</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数的使用。在使用</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">super</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数时，可以通过</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">super</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">(类型, 对象)</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">来指定对哪个对象以哪个类为起点向上搜索父类方法。所以上面</font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">B</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">类代码中的</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">super</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">(B, self)</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">.who</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">()</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">表示以 B 类为起点，向上搜索</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">self</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">（D 类对象）的</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">who</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">方法，所以会找到</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">C</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">类中的</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">who</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">方法，因为</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">D</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">类对象的 MRO 列表是</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">D --</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">&gt;</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">B --</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">&gt;</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">C --</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">&gt;</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">A --</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">&gt;</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">object</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。</font>\n\n```plain\nACBD\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 33：编写一个函数实现对逆波兰表达式求值，不能使用 Python 的内置函数。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：逆波兰表达式也称为“后缀表达式”，相较于平常我们使用的“中缀表达式”，逆波兰表达式不需要括号来确定运算的优先级，例如</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">5</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">_ (</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">2</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">+</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">3</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">)</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">对应的逆波兰表达式是</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">5</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">2</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">3</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">+ _</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。逆波兰表达式求值需要借助栈结构，扫描表达式遇到运算数就入栈，遇到运算符就出栈两个元素做运算，将运算结果入栈。表达式扫描结束后，栈中只有一个数，这个数就是最终的运算结果，直接出栈即可。</font>\n\n```python\nimport operator\n\n\nclass Stack:\n    \"\"\"栈（FILO）\"\"\"\n\n    def __init__(self):\n        self.elems = []\n\n    def push(self, elem):\n        \"\"\"入栈\"\"\"\n        self.elems.append(elem)\n\n    def pop(self):\n        \"\"\"出栈\"\"\"\n        return self.elems.pop()\n\n    @property\n    def is_empty(self):\n        \"\"\"检查栈是否为空\"\"\"\n        return len(self.elems) == 0\n\n\ndef eval_suffix(expr):\n    \"\"\"逆波兰表达式求值\"\"\"\n    operators = {\n        '+': operator.add,\n        '-': operator.sub,\n        '*': operator.mul,\n        '/': operator.truediv\n    }\n    stack = Stack()\n    for item in expr.split():\n        if item.isdigit():\n            stack.push(float(item))\n        else:\n            num2 = stack.pop()\n            num1 = stack.pop()\n            stack.push(operators[item](num1, num2))\n    return stack.pop()\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 34：Python 中如何实现字符串替换操作？</font>\n\nPython 中实现字符串替换大致有两类方法：字符串的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">replace</font>方法和正则表达式的<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">sub</font>方法。\n\n方法一：使用字符串的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">replace</font>方法。\n\n```python\nmessage = 'hello, world!'\nprint(message.replace('o', 'O').replace('l', 'L').replace('he', 'HE'))\n```\n\n方法二：使用正则表达式的<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">sub</font>方法。\n\n```python\nimport re\n\nmessage = 'hello, world!'\npattern = re.compile('[aeiou]')\nprint(pattern.sub('#', message))\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：还有一个相关的面试题，对保存文件名的列表排序，要求文件名按照字母表和数字大小进行排序，例如对于列表</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">filenames = [</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'a12</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.txt',</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'a8</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.txt',</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'b10</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.txt',</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'b2</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.txt',</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'b19</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.txt',</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'a3</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.txt']</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，排序的结果是</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">[</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'a3.txt</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">',</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'a8.txt</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">',</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'a12.txt</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">',</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'b2.txt</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">',</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'b10.txt</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">',</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">'b19.txt</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">']</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。提示一下，可以通过字符串替换的方式为文件名补位，根据补位后的文件名用</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">sorted</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数来排序，大家可以思考下这个问题如何解决。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 35：如何剖析 Python 代码的执行性能？</font>\n\n剖析代码性能可以使用 Python 标准库中的<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">cProfile</font>和<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">pstats</font>模块，<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">cProfile</font>的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">run</font>函数可以执行代码并收集统计信息，创建出<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">Stats</font>对象并打印简单的剖析报告。<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">Stats</font>是<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">pstats</font>模块中的类，它是一个统计对象。当然，也可以使用三方工具<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">line_profiler</font>和<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">memory_profiler</font>来剖析每一行代码耗费的时间和内存，这两个三方工具都会用非常友好的方式输出剖析结构。如果使用 PyCharm，可以利用“Run”菜单的“Profile”菜单项对代码进行性能分析，PyCharm 中可以用表格或者调用图（Call Graph）的方式来显示性能剖析的结果。\n\n下面是使用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">cProfile</font>剖析代码性能的例子。\n\n<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">example</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.py</font>\n\n```python\nimport cProfile\n\n\ndef is_prime(num):\n    for factor in range(2, int(num ** 0.5) + 1):\n        if num % factor == 0:\n            return False\n    return True\n\n\nclass PrimeIter:\n\n    def __init__(self, total):\n        self.counter = 0\n        self.current = 1\n        self.total = total\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.counter < self.total:\n            self.current += 1\n            while not is_prime(self.current):\n                self.current += 1\n            self.counter += 1\n            return self.current\n        raise StopIteration()\n\n\ncProfile.run('list(PrimeIter(10000))')\n```\n\n如果使用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">line_profiler</font>三方工具，可以直接剖析<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">is</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">\\_p</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">rime</font>函数每行代码的性能，需要给<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">is</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">\\_p</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">rime</font>函数添加一个<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">profiler</font>装饰器，代码如下所示。\n\n```python\n@profiler\ndef is_prime(num):\n    for factor in range(2, int(num ** 0.5) + 1):\n        if num % factor == 0:\n            return False\n    return True\n```\n\n安装<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">line_profiler</font>。\n\n```python\npip install line_profiler\n```\n\n使用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">line_profiler</font>。\n\n```plain\nkernprof -lv example.py\n```\n\n运行结果如下所示。\n\n```plain\nLine #    Hits    Time      Per Hit  % Time  Line Contents\n==============================================================\n     1                                       @profile\n     2                                       def is_prime(num):\n     3    86624   48420.0   0.6      50.5        for factor in range(2, int(num ** 0.5) + 1):\n     4    85624   44000.0   0.5      45.9            if num % factor == 0:\n     5    6918     3080.0   0.4       3.2                return False\n     6    1000      430.0   0.4       0.4        return True\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 36：如何使用</font>`<font style=\"color:rgb(85, 87, 112);\">random</font>`<font style=\"color:rgb(85, 87, 112);\">模块生成随机数、实现随机乱序和随机抽样？</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：送人头的题目，因为 Python 标准库中的常用模块应该是 Python 开发者都比较熟悉的内容，这个问题回如果答不上来，整个面试基本也就砸锅了。</font>\n\n1. <font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">()</font>函数可以生成<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">[0.0, 1.0)</font>之间的随机浮点数。\n2. <font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">.uniform</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">(</font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">a</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">,</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">b</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">)</font>函数可以生成<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[a, b]</font>或<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[b, a]</font>之间的随机浮点数。\n3. <font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">.randint</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">(</font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">a</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">,</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">b</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">)</font>函数可以生成<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[a, b]</font>或<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[b, a]</font>之间的随机整数。\n4. <font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.shuffle(x)</font>函数可以实现对序列<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">x</font>的原地随机乱序。\n5. <font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.choice(seq)</font>函数可以从非空序列中取出一个随机元素。\n6. <font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">random.choices(population,</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">weights</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">=None, \\*,</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">cum_weights</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">=None,</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">k</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">=1)</font>函数可以从总体中随机抽取（有放回抽样）出容量为<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">k</font>的样本并返回样本的列表，可以通过参数指定个体的权重，如果没有指定权重，个体被选中的概率均等。\n7. <font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.sample(population, k)</font>函数可以从总体中随机抽取（无放回抽样）出容量为<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">k</font>的样本并返回样本的列表。\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">模块提供的函数除了生成均匀分布的随机数外，还可以生成其他分布的随机数，例如</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">gauss</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">(mu, sigma)</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数可以生成高斯分布（正态分布）的随机数；</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">paretovariate</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">(</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">alpha</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">)</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数会生成帕累托分布的随机数；</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">random</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.gammavariate(alpha,</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">beta</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">)</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数会生成伽马分布的随机数。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);background-color:#EDCE02;\">题目 37：解释一下线程池的工作原理。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:#EDCE02;\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:#EDCE02;\">：池化技术就是一种典型空间换时间的策略，我们使用的</font>[<font style=\"background-color:#EDCE02;\">数据库</font>](https://link.csdn.net/?target=https%3A%2F%2Fgitcode.com%2FSequoiaDB%2FSequoiaDB%2Foverview)<font style=\"color:rgb(79, 79, 79);background-color:#EDCE02;\">连接池、线程池等都是池化技术的应用，Python 标准库</font><font style=\"color:rgb(171, 178, 191);background-color:#EDCE02;\">currrent.futures</font><font style=\"color:rgb(79, 79, 79);background-color:#EDCE02;\">模块的</font><font style=\"color:rgb(152, 195, 121);background-color:#EDCE02;\">ThreadPoolExecutor</font><font style=\"color:rgb(79, 79, 79);background-color:#EDCE02;\">就是线程池的实现，如果要弄清楚它的工作原理，可以参考下面的内容。</font>\n\n<font style=\"background-color:#EDCE02;\">线程池是一种用于减少线程本身创建和销毁造成的开销的技术，属于典型的空间换时间操作。如果应用程序需要频繁的将任务派发到线程中执行，线程池就是必选项，因为创建和释放线程涉及到大量的系统底层操作，开销较大，如果能够在应用程序工作期间，将创建和释放线程的操作变成预创建和借还操作，将大大减少底层开销。线程池在应用程序启动后，立即创建一定数量的线程，放入空闲队列中。这些线程最开始都处于阻塞状态，不会消耗 CPU 资源，但会占用少量的内存空间。当任务到来后，从队列中取出一个空闲线程，把任务派发到这个线程中运行，并将该线程标记为已占用。当线程池中所有的线程都被占用后，可以选择自动创建一定数量的新线程，用于处理更多的任务，也可以选择让任务排队等待直到有空闲的线程可用。在任务执行完毕后，线程并不退出结束，而是继续保持在池中等待下一次的任务。当系统比较空闲时，大部分线程长时间处于闲置状态时，线程池可以自动销毁一部分线程，回收系统资源。基于这种预创建技术，线程池将线程创建和销毁本身所带来的开销分摊到了各个具体的任务上，执行次数越多，每个任务所分担到的线程本身开销则越小。</font>\n\n<font style=\"background-color:#EDCE02;\">一般线程池都必须具备下面几个组成部分：</font>\n\n1. <font style=\"background-color:#EDCE02;\">线程池管理器：用于创建并管理线程池。</font>\n2. <font style=\"background-color:#EDCE02;\">工作线程和线程队列：线程池中实际执行的线程以及保存这些线程的容器。</font>\n3. <font style=\"background-color:#EDCE02;\">任务接口：将线程执行的任务抽象出来，形成任务接口，确保线程池与具体的任务无关。</font>\n4. <font style=\"background-color:#EDCE02;\">任务队列：线程池中保存等待被执行的任务的容器。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 38：举例说明什么情况下会出现</font>`<font style=\"color:rgb(85, 87, 112);\">KeyError</font>`<font style=\"color:rgb(85, 87, 112);\">、</font>`<font style=\"color:rgb(85, 87, 112);\">TypeError</font>`<font style=\"color:rgb(85, 87, 112);\">、</font>`<font style=\"color:rgb(85, 87, 112);\">ValueError</font>`<font style=\"color:rgb(85, 87, 112);\">。</font>\n\n举一个简单的例子，变量<font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">a</font>是一个字典，执行<font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">int</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">(a[</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">'x'</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">])</font>这个操作就有可能引发上述三种类型的异常。如果字典中没有键<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">x</font>，会引发<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">KeyError</font>；如果键<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">x</font>对应的值不是<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">str</font>、<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">float</font>、<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">int</font>、<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">bool</font>以及<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">bytes-</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">like</font>类型，在调用<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">int</font>函数构造<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">int</font>类型的对象时，会引发<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">TypeError</font>；如果<font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">a</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">[x]</font>是一个字符串或者字节串，而对应的内容又无法处理成<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">int</font>时，将引发<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">ValueError</font>。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 39：说出下面代码的运行结果。</font>\n\n```python\ndef extend_list(val, items=[]):\n    items.append(val)\n    return items\n\nlist1 = extend_list(10)\nlist2 = extend_list(123, [])\nlist3 = extend_list('a')\nprint(list1)\nprint(list2)\nprint(list3)\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：Python 函数在定义的时候，默认参数</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">items</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">的值就被计算出来了，即</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[]</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。因为默认参数</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">items</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">引用了对象</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[]</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，每次调用该函数，如果对</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">items</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">引用的列表进行了操作，下次调用时，默认参数还是引用之前的那个列表而不是重新赋值为</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[]</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，所以列表中会有之前添加的元素。如果通过传参的方式为</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">items</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">重新赋值，那么</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">items</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">将引用到新的列表对象，而不再引用默认的那个列表对象。这个题在面试中经常被问到，通常不建议使用容器类型的默认参数，像 PyLint 这样的代码检查工具也会对这种代码提出质疑和警告。</font>\n\n```plain\n[10, 'a']\n[123]\n[10, 'a']\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 40：如何读取大文件，例如内存只有 4G，如何读取一个大小为 8G 的文件？</font>\n\n很显然 4G 内存要一次性的加载大小为 8G 的文件是不现实的，遇到这种情况必须要考虑多次读取和分批次处理。在 Python 中读取文件可以先通过<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">open</font>函数获取文件对象，在读取文件时，可以通过<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">read</font>方法的<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">size</font>参数指定读取的大小，也可以通过<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">seek</font>方法的<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">offset</font>参数指定读取的位置，这样就可以控制单次读取数据的字节数和总字节数。除此之外，可以使用内置函数<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">iter</font>将文件对象处理成迭代器对象，每次只读取少量的数据进行处理，代码大致写法如下所示。\n\n```plain\nwith open('...', 'rb') as file:\n    for data in iter(lambda: file.read(2097152), b''):\n        pass\n```\n\n在 Linux 系统上，可以通过<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">split</font>命令将大文件切割为小片，然后通过读取切割后的小文件对数据进行处理。例如下面的命令将名为<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">filename</font>的大文件切割为大小为 512M 的多个文件。\n\n```plain\nsplit -b 512m filename\n```\n\n如果愿意， 也可以将名为<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">filename</font>的文件切割为 10 个文件，命令如下所示。\n\n```plain\nsplit -n 10 filename\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：外部排序跟上述的情况非常类似，由于处理的数据不能一次装入内存，只能放在读写较慢的外存储器（通常是硬盘）上。“</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">排序-归并算法</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">”就是一种常用的外部排序策略。在排序阶段，先读入能放在内存中的数据量，将其排序输出到一个临时文件，依此进行，将待排序数据组织为多个有序的临时文件，然后在归并阶段将这些临时文件组合为一个大的有序文件，这个大的有序文件就是排序的结果。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 41：说一下你对 Python 中模块和包的理解。</font>\n\n每个 Python 文件就是一个模块，而保存这些文件的文件夹就是一个包，但是这个作为 Python 包的文件夹必须要有一个名为*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**init**</font>*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.py</font>的文件，否则无法导入这个包。通常一个文件夹下还可以有子文件夹，这也就意味着一个包下还可以有子包，子包中的*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**init**</font>*<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">.py</font>并不是必须的。模块和包解决了 Python 中命名冲突的问题，不同的包下可以有同名的模块，不同的模块下可以有同名的变量、函数或类。在 Python 中可以使用<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">import</font>或<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">from</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">...</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">import</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">...</font>来导入包和模块，在导入的时候还可以使用<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">as</font>关键字对包、模块、类、函数、变量等进行别名，从而彻底解决编程中尤其是多人协作团队开发时的命名冲突问题。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 42：说一下你知道的 Python 编码规范。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：企业的 Python 编码规范基本上是参照 PEP-8 或谷歌开源项目风格指南来制定的，后者还提到了可以使用 Lint 工具来检查代码的规范程度，面试的时候遇到这类问题，可以先说下这两个参照标准，然后挑重点说一下 Python 编码的注意事项。</font>\n\n1. <font style=\"color:rgb(85, 87, 112);\">空格的使用</font>\n\n- 使用空格来表示缩进而不要用制表符（Tab）。\n- 和语法相关的每一层缩进都用 4 个空格来表示。\n- 每行的字符数不要超过 79 个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上 4 个空格。\n- 函数和类的定义，代码前后都要用两个空行进行分隔。\n- 在同一个类中，各个方法之间应该用一个空行进行分隔。\n- 二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。\n\n1. <font style=\"color:rgb(85, 87, 112);\">标识符命名</font>\n\n- 变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。\n- 类中受保护的实例属性，应该以一个下划线开头。\n- 类中私有的实例属性，应该以两个下划线开头。\n- 类和异常的命名，应该每个单词首字母大写。\n- 模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。\n- 类的实例方法，应该把第一个参数命名为<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">self</font>以表示对象自身。\n- 类的类方法，应该把第一个参数命名为<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">cls</font>以表示该类自身。\n\n1. <font style=\"color:rgb(85, 87, 112);\">表达式和语句</font>\n\n- 采用内联形式的否定词，而不要把否定词放在整个表达式的前面。例如：<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">if</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">a</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">is not</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">b</font>就比<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">if not</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">a</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">is</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">b</font>更容易让人理解。\n- 不要用检查长度的方式来判断字符串、列表等是否为<font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">None</font>或者没有元素，应该用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">if not x</font>这样的写法来检查它。\n- 就算<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">if</font>分支、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">for</font>循环、<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">except</font>异常捕获等中只有一行代码，也不要将代码和<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">if</font>、<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">for</font>、<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">except</font>等写在一起，分开写才会让代码更清晰。\n- <font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">import</font>语句总是放在文件开头的地方。\n- 引入模块的时候，<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">from</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">math</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">import</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">sqrt</font>比<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">import</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">math</font>更好。\n- 如果有多个<font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">import</font>语句，应该将其分为三部分，从上到下分别是 Python**标准模块**、**第三方模块**和**自定义模块**，每个部分内部应该按照模块名称的**字母表顺序**来排列。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 43：运行下面的代码是否会报错，如果报错请说明哪里有什么样的错，如果不报错请说出代码的执行结果。</font>\n\n```python\nclass A:\n    def __init__(self, value):\n        self.__value = value\n\n    @property\n    def value(self):\n        return self.__value\n\nobj = A(1)\nobj.__value = 2\nprint(obj.value)\nprint(obj.__value)\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：这道题有两个考察点，一个考察点是对</font><font style=\"color:rgb(86, 182, 194);background-color:rgb(40, 44, 52);\">\\_</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">和</font><font style=\"color:rgb(97, 174, 238);background-color:rgb(40, 44, 52);\">\\_\\_</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">开头的对象属性访问权限以及</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">@</font><font style=\"color:rgb(198, 120, 221);background-color:rgb(40, 44, 52);\">property</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">装饰器的了解，另外一个考察的点是对动态语言的理解，不需要过多的解释。</font>\n\n```plain\n1\n2\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：如果不希望代码运行时动态的给对象添加新属性，可以在定义类时使用</font>_<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">**slots**</font>_<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">魔法。例如，我们可以在上面的</font><font style=\"color:rgb(224, 108, 117);background-color:rgb(40, 44, 52);\">A</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">中添加一行</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">**slots**</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">= (</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">'\\_\\_value'</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">, )</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，再次运行上面的代码，将会在原来的第 10 行处产生</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">AttributeError</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">错误。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 44：对下面给出的字典按值从大到小对键进行排序。</font>\n\n```plain\nprices = {\n    'AAPL': 191.88,\n    'GOOG': 1186.96,\n    'IBM': 149.24,\n    'ORCL': 48.44,\n    'ACN': 166.89,\n    'FB': 208.09,\n    'SYMC': 21.29\n}\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">sorted</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">函数的高阶用法在面试的时候经常出现，</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">key</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">参数可以传入一个函数名或一个 Lambda 函数，该函数的返回值代表了在排序时比较元素的依据。</font>\n\n```plain\nsorted(prices, key=lambda x: prices[x], reverse=True)\n```\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 45：说一下</font>`<font style=\"color:rgb(85, 87, 112);\">namedtuple</font>`<font style=\"color:rgb(85, 87, 112);\">的用法和作用。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：Python 标准库的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">collections</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">模块提供了很多有用的数据结构，这些内容并不是每个开发者都清楚，就比如题目问到的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">namedtuple</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，在我参加过的面试中，90%的面试者都不能准确的说出它的作用和应用场景。此外，</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">deque</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">也是一个非常有用但又经常被忽视的类，还有</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">Counter</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">、</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">OrderedDict</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\"> </font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">、</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">defaultdict</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\"> </font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">、</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">UserDict</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">等类，大家清楚它们的用法吗？</font>\n\n在使用面向对象编程语言的时候，定义类是最常见的一件事情，有的时候，我们会用到只有属性没有方法的类，这种类的对象通常只用于组织数据，并不能接收消息，所以我们把这种类称为数据类或者退化的类，就像 C 语言中的结构体那样。我们并不建议使用这种退化的类，在 Python 中可以用<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">namedtuple</font>（命名元组）来替代这种类。\n\n```python\nfrom collections import namedtuple\n\nCard = namedtuple('Card', ('suite', 'face'))\ncard1 = Card('红桃', 13)\ncard2 = Card('草花', 5)\nprint(f'{card1.suite}{card1.face}')\nprint(f'{card2.suite}{card2.face}')\n```\n\n命名元组与普通元组一样是不可变容器，一旦将数据存储在<font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">namedtuple</font>的顶层属性中，数据就不能再修改了，也就意味着对象上的所有属性都遵循“一次写入，多次读取”的原则。和普通元组不同的是，命名元组中的数据有访问名称，可以通过名称而不是索引来获取保存的数据，不仅在操作上更加简单，代码的可读性也会更好。\n\n命名元组的本质就是一个类，所以它还可以作为父类创建子类。除此之外，命名元组内置了一系列的方法，例如，可以通过<font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">_asdict</font>方法将命名元组处理成字典，也可以通过<font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">_</font><font style=\"color:rgb(230, 192, 123);background-color:rgb(40, 44, 52);\">replace</font>方法创建命名元组对象的浅拷贝。\n\n```python\nclass MyCard(Card):\n\n    def show(self):\n        faces = ['', 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n        return f'{self.suite}{faces[self.face]}'\n\n\nprint(Card)    # <class '__main__.Card'>\ncard3 = MyCard('方块', 12)\nprint(card3.show())    # 方块Q\nprint(dict(card1._asdict()))    # {'suite': '红桃', 'face': 13}\nprint(card2._replace(suite='方块'))    # Card(suite='方块', face=5)\n```\n\n总而言之，命名元组能更好的组织数据结构，让代码更加清晰和可读，在很多场景下是元组、字典和数据类的替代品。在需要创建占用空间更少的不可变类时，命名元组就是很好的选择。\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 46：按照题目要求写出对应的函数。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">要求</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：写一个函数，传入一个有若干个整数的列表，该列表中某个元素出现的次数超过了 50%，返回这个元素。</font>\n\n```python\ndef more_than_half(items):\n    temp, times = None, 0\n    for item in items:\n        if times == 0:\n            temp = item\n            times += 1\n        else:\n            if item == temp:\n                times += 1\n            else:\n                times -= 1\n    return temp\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：LeetCode 上的题目，在 Python 面试中出现过，利用元素出现次数超过了 50%这一特征，出现和</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">temp</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">相同的元素就将计数值加 1，出现和</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">temp</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">不同的元素就将计数值减 1。如果计数值为</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">0</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，说明之前出现的元素已经对最终的结果没有影响，用</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">temp</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">记下当前元素并将计数值置为</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。最终，出现次数超过了 50%的这个元素一定会被赋值给变量</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">temp</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 47：按照题目要求写出对应的函数。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">要求</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：写一个函数，传入的参数是一个列表（列表中的元素可能也是一个列表），返回该列表最大的嵌套深度。例如：列表</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[1, 2, 3]</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">的嵌套深度为</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">1</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，列表</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">[[1], [2, [3]]</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">]</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">的嵌套深度为</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">3</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">。</font>\n\n```plain\ndef list_depth(items):\n    if isinstance(items, list):\n        max_depth = 1\n        for item in items:\n            max_depth = max(list_depth(item) + 1, max_depth)\n        return max_depth\n    return 0\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：看到题目应该能够比较自然的想到使用递归的方式检查列表中的每个元素。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 48：按照题目要求写出对应的装饰器。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">要求</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：有一个通过网络获取数据的函数（可能会因为网络原因出现异常），写一个装饰器让这个函数在出现指定异常时可以重试指定的次数，并在每次重试之前随机延迟一段时间，最长延迟时间可以通过参数进行控制。</font>\n\n方法一：\n\n```python\nfrom functools import wraps\nfrom random import random\nfrom time import sleep\n\n\ndef retry(*, retry_times=3, max_wait_secs=5, errors=(Exception, )):\n\n    def decorate(func):\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for _ in range(retry_times):\n                try:\n                    return func(*args, **kwargs)\n                except errors:\n                    sleep(random() * max_wait_secs)\n            return None\n\n        return wrapper\n\n    return decorate\n```\n\n方法二：\n\n```plain\nfrom functools import wraps\nfrom random import random\nfrom time import sleep\n\n\nclass Retry(object):\n\n    def __init__(self, *, retry_times=3, max_wait_secs=5, errors=(Exception, )):\n        self.retry_times = retry_times\n        self.max_wait_secs = max_wait_secs\n        self.errors = errors\n\n    def __call__(self, func):\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for _ in range(self.retry_times):\n                try:\n                    return func(*args, **kwargs)\n                except self.errors:\n                    sleep(random() * self.max_wait_secs)\n            return None\n\n        return wrapper\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：我们不止一次强调过，装饰器几乎是 Python 面试必问内容，这个题目比之前的题目稍微复杂一些，它需要的是一个参数化的装饰器。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 49：写一个函数实现字符串反转，尽可能写出你知道的所有方法。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：烂大街的题目，基本上算是送人头的题目。</font>\n\n**方法一**：反向切片\n\n```plain\ndef reverse_string(content):\n    return content[::-1]\n```\n\n**方法二**：反转拼接\n\n```plain\ndef reverse_string(content):\n    return ''.join(reversed(content))\n```\n\n**方法三**：递归调用\n\n```plain\ndef reverse_string(content):\n    if len(content) <= 1:\n        return content\n    return reverse_string(content[1:]) + content[0]\n```\n\n**方法四**：双端队列\n\n```plain\nfrom collections import deque\n\ndef reverse_string(content):\n    q = deque()\n    q.extendleft(content)\n    return ''.join(q)\n```\n\n**方法五**：反向组装\n\n```plain\nfrom io import StringIO\n\ndef reverse_string(content):\n    buffer = StringIO()\n    for i in range(len(content) - 1, -1, -1):\n        buffer.write(content[i])\n    return buffer.getvalue()\n```\n\n**方法六**：反转拼接\n\n```plain\ndef reverse_string(content):\n    return ''.join([content[i] for i in range(len(content) - 1, -1, -1)])\n```\n\n**方法七**：半截交换\n\n```plain\ndef reverse_string(content):\n    length, content= len(content), list(content)\n    for i in range(length // 2):\n        content[i], content[length - 1 - i] = content[length - 1 - i], content[i]\n    return ''.join(content)\n```\n\n**方法八**：对位交换\n\n```plain\ndef reverse_string(content):\n    length, content= len(content), list(content)\n    for i, j in zip(range(length // 2), range(length - 1, length // 2 - 1, -1)):\n        content[i], content[j] = content[j], content[i]\n    return ''.join(content)\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">扩展</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：这些方法其实都是大同小异的，面试的时候能够给出几种有代表性的就足够了。给大家留一个思考题，上面这些方法，哪些做法的性能较好呢？我们之前提到过剖析代码性能的方法，大家可以用这些方法来检验下你给出的答案是否正确。</font>\n\n##### <font style=\"color:rgb(85, 87, 112);\">题目 50：按照题目要求写出对应的函数。</font>\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">要求</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：列表中有</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">1000000</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">个元素，取值范围是</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">[</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">1000</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">,</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\"> </font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">10000</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">)</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，设计一个函数找出列表中的重复元素。</font>\n\n```plain\ndef find_dup(items: list):\n    dups = [0] * 9000\n    for item in items:\n        dups[item - 1000] += 1\n    for idx, val in enumerate(dups):\n        if val > 1:\n            yield idx + 1000\n```\n\n**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">点评</font>**<font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">：这道题的解法和计数排序的原理一致，虽然元素的数量非常多，但是取值范围</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">[</font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">1000</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">, </font><font style=\"color:rgb(209, 154, 102);background-color:rgb(40, 44, 52);\">10000</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">)</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">并不是很大，只有 9000 个可能的取值，所以可以用一个能够保存 9000 个元素的</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">dups</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">列表来记录每个元素出现的次数，</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">dups</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">列表所有元素的初始值都是</font><font style=\"color:rgb(171, 178, 191);background-color:rgb(40, 44, 52);\">0</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">，通过对</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">items</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">列表中元素的遍历，当出现某个元素时，将</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">dups</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">列表对应位置的值加 1，最后</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">dups</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">列表中值大于 1 的元素对应的就是</font><font style=\"color:rgb(152, 195, 121);background-color:rgb(40, 44, 52);\">items</font><font style=\"color:rgb(79, 79, 79);background-color:rgb(238, 240, 244);\">列表中重复出现过的元素。</font>\n\n> 更新: 2024-05-02 11:38:36  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/slgtyqlpzyibq4yr>\n","tags":["Python","面经"],"categories":["Python 面经"]},{"title":"面经","url":"/blog/2565273121/","content":"\n# 面经\n\n#### 一面\n\n##### 网络和操作系统方面\n\n- 说一下 TCP 的三次握手？\n- 什么时候用多线程？多线程的优势是什么？为什么用多线程不用多进程？python 的多线程 start 以后立马能起来吗？\n- 讲一下 IO 多路复用？\n\n##### flask 方面\n\n- Flask 的底层原理讲一下？描述一下 flask 是怎么处理 url 请求的，整个底层流程是怎么样大概说下就行；\n- endpoint 是啥，讲一下？\n- before request 有用过吗？触发 before request 钩子是在 view function 以前还是以后？\n- 常用的 rest 接口有哪些？你是怎么写类视图的？例子讲一下；\n- 大概就这么多，其他问题的想不起来了\n\n##### mysql 方面\n\n- 讲下聚簇索引？\n- 聚簇索引的优点？\n- 为什么使用 B+树作为索引数据结构？\n- 你是怎么 sql 或者索引调优的？慢查询日志里面的内容是啥？\n\n数据库方面问的不多，比较简单，如果忘了可以看我右边这篇博客[Github-Mysql 热点问题总结](https://github.com/ewenliu/Learning_Note/blob/master/Mysql%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.md)\n\n##### redis 方面\n\n- redis 常用的数据类型有哪些？\n- 持久化 rdb 和 aof 讲一下\n- 知道 redis 中 list 的底层实现原理吗？\n\nredis 问也比较基础，如果忘了可以看右边这篇博客[Github-Redis 热点问题总结](https://github.com/ewenliu/Learning_Note/blob/master/Redis%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.md)\n\n##### python 基础\n\n- 用的是 python2 还是 3？为什么用 3？知道最新的稳定版本是哪个吗？\n- 知道 python3 的新特性吗？\n- 迭代器和生成器说一下？\n- 类方法用过吗？**str**和**repr**区别？\n- 类里面怎么实现**iter**？\n- GIL 讲一下？讲一下多线程下 GIL 和线程的关系？\n- 协程用过吗？yield 讲一下\n\n#### 二面\n\n- 未来有什么职业规划？\n- 觉得杭州怎么样？\n- 觉得技术该如何深入？哪方面深入有想过吗？\n- 觉得 python 未来怎么样？python 机会这么少有考虑以后怎么深入学习吗？\n- 聊一下高并发下缓存和数据库双写一致问题？\n- 你有什么要问我的吗\n\n### [https://zhuanlan.zhihu.com/p/657610494](https://zhuanlan.zhihu.com/p/657610494)\n\n> 更新: 2024-03-19 00:02:17  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/htbuqvxbegprrme6>\n","tags":["Python","面经"],"categories":["Python 面经"]},{"title":"面试题","url":"/blog/1376120437/","content":"\n# 面试题\n\n# Python 基础语言特性\n\n## 1 Python 反转序列(列表、元组、字符串)的几种方法\n\n原文参考：[Python 反转序列(列表、元组、字符串)的几种方法](https://revotu.github.io/reverse-sequence-list-tuple-str-in-python.html)\n\n## 2 Python 矩阵转置方法(二维列表行列互换)\n\n原文参考：[Python 矩阵转置方法(二维列表行列互换)](https://revotu.github.io/matrix-transpose-in-python.html)\n\n## 3 Python 合并两个字典成一个新字典的几种方法分析比较\n\n原文参考：[Python 合并两个字典成一个新字典的几种方法分析比较](https://revotu.github.io/python-merge-two-dicts-into-one-dict.html)\n\n## 4 用 pythonic 的方法合并两个列表成一个字典\n\n原文参考：[用 pythonic 的方法合并两个列表成一个字典](https://revotu.github.io/pythonic-method-merge-two-list-to-one-dict.html)\n\n## 5 三种 pythonic 的方法交换字典的键 keys 和值 values\n\n原文参考：[三种 pythonic 的方法交换字典的键 keys 和值 values](https://revotu.github.io/three-pythonic-ways-to-swap-dict-keys-and-values.html)\n\n## 6 Python 文件内容按行读取到列表中\n\n原文参考：[Python 文件内容按行读取到列表中](https://revotu.github.io/read-file-to-list-by-line.html)\n\n## 7 Python 内置函数 any 和 all 的用法及示例\n\n原文参考：[Python 内置函数 any 和 all 的用法及示例](https://revotu.github.io/python-built-in-function-any-and-all.html)\n\n## 8 Python2 和 Python3 中字典的 keys()、values()、items()方法的区别\n\n原文参考：[Python2 和 Python3 中字典的 keys()、values()、items()方法的区别](https://revotu.github.io/difference-dict-keys-values-items-between-python2-and-python3.html)\n\n# Python 数据结构与算法\n\n## 1 剑指 offer-Python 版答案\n\n原文参考：[剑指 offer-Python 版答案](https://revotu.github.io/coding-interviews-python-solutions.html)\n\n## 2 Python 基于列表实现数据结构栈 stack 和队列 queue\n\n原文参考：[Python 基于列表实现数据结构栈 stack 和队列 queue](https://revotu.github.io/python-implement-data-stucture-stack-and-queue-base-on-list.html)\n\n# Python 实现经典编程题\n\n## 1 Python 求斐波那契数列的第 n 项几种方法\n\n原文参考：[Python 求斐波那契数列的第 n 项几种方法](https://revotu.github.io/python-get-fibonacci-n-number.html)\n\n## 2 Python 解决跳台阶、变态跳台阶、矩形覆盖问题\n\n原文参考：[Python 解决跳台阶、变态跳台阶、矩形覆盖问题](\n\n> 更新: 2024-03-18 23:38:17  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/mhqafzzferxw1206>\n","tags":["Python","面经"],"categories":["Python 面经"]},{"title":"FastAPI实战汇总版","url":"/blog/493630022/","content":"\n# FastAPI 实战汇总版\n\n# 学生信息管理系统——前后端分离\n\n# 技术栈\n\n后端：FastAPI + SQLAlchemy\n\n前端：Vue3 + Element-plus\n\n数据库：MySQL\n\n# 所需工具\n\nPycharm、WebStorm、Postman\n\n# 项目功能\n\n## 管理员\n\n- 登录\n- 学生管理\n- 课程管理\n- 选课管理\n- 成绩管理\n\n## 学生\n\n- 登录、注册\n- 查看、修改个人信息\n- 查看课程、选课\n- 查看成绩\n- 查看、修改评价\n\n---\n\n# 环境介绍\n\n开发环境版本：\n\n<font style=\"color:rgb(63, 74, 84);\">Python3.10.11、Node.js16.9.0、Vue3、MySQL5.7.31</font>\n\n# 官方文档\n\nNode.js：[https://nodejs.org/en](https://nodejs.org/en)\n\nVue：[https://cn.vuejs.org/](https://cn.vuejs.org/)\n\nVite：[https://cn.vitejs.dev/guide/](https://cn.vitejs.dev/guide/)\n\nElement-Plus：[https://element-plus.org/zh-CN/](https://element-plus.org/zh-CN/)\n\nFastAPI：[https://fastapi.tiangolo.com/zh/](https://fastapi.tiangolo.com/zh/)\n\nSQLAlchemy：[https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb](https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n\n字节 Icon 库：[https://iconpark.oceanengine.com/official](https://iconpark.oceanengine.com/official)\n\n图片素材库：[https://iconscout.com/](https://iconscout.com/)\n\n# 项目初始化\n\n## 前端 Vue\n\n### 安装 Node.js\n\n进入官网 [https://nodejs.org/download/release/v16.19.0/](https://nodejs.org/download/release/v16.19.0/)安装好 node.js\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710063799995-b795f9b2-b844-4281-aa06-797eaeb7540e.png)\n\n### 安装 vue-cli\n\n然后使用`npm install -g @vue/cli`命令安装 vue-cli\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710064251821-6359ed25-0048-4327-9665-92d9427cc4c4.png)\n\n### 创建 vue 项目\n\n使用 vite 进行构建\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710064798538-2fcb3e12-aba3-4b83-8f7a-22bbcd4bb066.png)\n\n通过`npm create vite@latest studentfontend -- --template vue`构建前端项目\n\n```shell\n➜  ~ cd Documents/PythonCode\n➜  PythonCode mkdir studentProject\n➜  PythonCode cd studentProject\n➜  studentProject npm create vite@latest studentfontend -- --template vue\n\nScaffolding project in /Users/zachary/Documents/PythonCode/studentProject/studentfontend...\n\nDone. Now run:\n\n  cd studentfontend\n  npm install\n  npm run dev\n\n➜  studentProject cd studentfontend\n➜  studentfontend ls\nREADME.md      package.json   src\nindex.html     public         vite.config.js\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710065004239-161031a6-9bc3-4c47-8591-6a6cf76114a5.png)\n\n### npm 源\n\n如果 npm 命令运行的时候很卡的话，尝试换源\n\n`npm config set registry [https://registry.npmmirror.com](https://registry.npmmirror.com)`\n\n### 打开 vue 项目\n\n使用 WebStorm 打开创建好的前端项目\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710065436602-f66e538b-cdcc-4f8a-a0b0-1fde6cc990e9.png)\n\n先什么都不做，尝试把项目运行起来\n\n```shell\n➜  studentfontend npm install\nnpm WARN EBADENGINE Unsupported engine {\nnpm WARN EBADENGINE   package: '@vitejs/plugin-vue@5.0.4',\nnpm WARN EBADENGINE   required: { node: '^18.0.0 || >=20.0.0' },\nnpm WARN EBADENGINE   current: { node: 'v16.19.0', npm: '8.19.3' }\nnpm WARN EBADENGINE }\nnpm WARN EBADENGINE Unsupported engine {\nnpm WARN EBADENGINE   package: 'rollup@4.12.1',\nnpm WARN EBADENGINE   required: { node: '>=18.0.0', npm: '>=8.0.0' },\nnpm WARN EBADENGINE   current: { node: 'v16.19.0', npm: '8.19.3' }\nnpm WARN EBADENGINE }\nnpm WARN EBADENGINE Unsupported engine {\nnpm WARN EBADENGINE   package: 'vite@5.1.5',\nnpm WARN EBADENGINE   required: { node: '^18.0.0 || >=20.0.0' },\nnpm WARN EBADENGINE   current: { node: 'v16.19.0', npm: '8.19.3' }\nnpm WARN EBADENGINE }\n\nup to date in 649ms\n➜  studentfontend npm run dev\n\n> studentfontend@0.0.0 dev\n> vite\n\n\n  VITE v5.1.5  ready in 814 ms\n\n  ➜  Local:   http://127.0.0.1:5173/\n  ➜  Network: use --host to expose\n  ➜  press h + enter to show help\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710065907865-bf45b0ec-1f33-4399-8013-ee1cd9a85c30.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710065926633-560bff63-2de0-4f09-bcd8-921fdad2ad7a.png)\n\n### 项目整改\n\n现在我们把这个项目做好看些，为了学生信息管理系统做准备的，\n\n需要把路由写好，同时修改主题色，还有 request http 的请求封装，选择一个自己喜欢的页面标题及 icon\n\n#### index.html\n\n修改项目下的 index.html 文件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" href=\"/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>学生信息管理系统</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"/src/main.js\"></script>\n  </body>\n</html>\n```\n\n#### css&imgs\n\n删除`/assets`下的`vue.svg`\n\n在`/src/assets`路径下创建一个`css`和`imgs`目录\n\n在创建好的`/css`目录下分别创建`global.css`和`index.scss`\n\n全局 css 样式\n\n```css\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  color: #252424;\n}\n\na {\n  text-decoration: none;\n}\n\n.card {\n  background-color: rgb(255, 255, 255);\n  border-radius: 5px;\n  padding: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n```\n\n主题色配置文件\n\n```css\n@forward \"element-plus/theme-chalk/src/common/var.scss\" with (\n  $colors: (\n    \"primary\": (\n      \"base\": #0a7fce\n    ),\n    \"success\": (\n      \"base\": #08b41f\n    ),\n    \"warning\": (\n      \"base\": #e8af56\n    ),\n    \"danger\": (\n      \"base\": #ef3030\n    ),\n    \"info\": (\n      \"base\": #5d66ea\n    )\n  )\n);\n```\n\n#### 路由设置\n\n在`/src`路径下创建一个`router`目录，在其中创建一个`index.js`文件\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n        },\n      ],\n    },\n  ],\n});\n\nexport default router;\n```\n\n#### request 请求\n\n`/src`路径下创建一个`utils`目录，在其中创建一个`request.js`文件\n\n```javascript\nimport { ElMessage } from \"element-plus\";\nimport router from \"../router\";\nimport axios from \"axios\";\n\nconst request = axios.create({\n  baseURL: import.meta.env.VITE_BASE_URL,\n  timeout: 30000, // 后台接口超时时间设置\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\nrequest.interceptors.request.use(\n  (config) => {\n    config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n  (response) => {\n    let res = response.data;\n    // 如果是返回的文件\n    if (response.config.responseType === \"blob\") {\n      return res;\n    }\n    // 兼容服务端返回的字符串数据\n    if (typeof res === \"string\") {\n      res = res ? JSON.parse(res) : res;\n    }\n    // 当权限验证不通过的时候给出提示\n    if (res.code === \"401\") {\n      ElMessage.error(res.msg);\n      router.push(\"/login\");\n    }\n    return res;\n  },\n  (error) => {\n    console.log(\"err\" + error);\n    return Promise.reject(error);\n  }\n);\n\nexport default request;\n```\n\n#### views\n\n`/src`路径下的`/components`修改为`/views`目录，将其中的`HelloWorld.vue`修改成`Manager.vue`\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          src=\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\"\n          alt=\"\"\n          style=\"width: 40px; height: 40px\"\n        />\n        <span style=\"margin-left: 5px\">管理员</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon><HomeFilled /></el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n          <el-menu-item index=\"/person\">\n            <el-icon><User /></el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"login\" @click=\"logout\">\n            <el-icon><SwitchButton /></el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n接着在`/src/views`路径下创建一个`manager`目录，在其中创建一个`Home.vue`文件\n\n```vue\n<template>\n  <div class=\"welcome-container\">\n    <div class=\"custom-card bg-white shadow rounded p-4 mb-5\">\n      <h2 class=\"text-center text-primary\">欢迎来到本系统</h2>\n      <p class=\"text-center mt-3\">\n        您好 <span :style=\"{ color: '#116ca9' }\">{{ user.username }}</span\n        >，祝您使用愉快！\n      </p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport request from \"@/utils/request\";\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.welcome-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: calc(100vh - 100px); /* 根据实际项目需要调整高度 */\n}\n\n.custom-card {\n  max-width: 400px;\n  border: none;\n}\n</style>\n```\n\n#### App.vue\n\n修改项目中的`/src/App.vue`\n\n```vue\n<template>\n  <RouterView />\n</template>\n```\n\n#### main.js\n\n修改项目中的`/src/main.js`\n\n```javascript\nimport { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\nimport ElementPlus from \"element-plus\";\nimport zhCn from \"element-plus/dist/locale/zh-cn.mjs\";\nimport * as ElementPlusIconsVue from \"@element-plus/icons-vue\";\n\nimport \"@/assets/css/global.css\";\n\nconst app = createApp(App);\n\napp.use(router);\napp.use(ElementPlus, {\n  locale: zhCn,\n});\napp.mount(\"#app\");\n\nfor (const [key, component] of Object.entries(ElementPlusIconsVue)) {\n  app.component(key, component);\n}\n```\n\n#### .env\n\n在项目路径下创建两个文件`.env.development`、`.env.production`\n\n```plain\nVITE_BASE_URL='http://localhost:9090'\n```\n\n```plain\nVITE_BASE_URL='http://:9090'\n```\n\n#### json 配置\n\n修改项目路径下的文件：`package.json`\n\n```json\n{\n  \"name\": \"studentfontend\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@element-plus/icons-vue\": \"^2.1.0\",\n    \"axios\": \"^1.6.2\",\n    \"element-plus\": \"^2.4.2\",\n    \"sass\": \"^1.69.5\",\n    \"unplugin-element-plus\": \"^0.8.0\",\n    \"vue\": \"^3.3.4\",\n    \"vue-router\": \"^4.2.5\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-vue\": \"^4.4.0\",\n    \"unplugin-auto-import\": \"^0.16.7\",\n    \"unplugin-vue-components\": \"^0.25.2\",\n    \"vite\": \"^4.4.11\"\n  }\n}\n```\n\n#### vite.config.js\n\n修改项目路径下的文件：`vite.config.js`\n\n```javascript\nimport { fileURLToPath, URL } from \"node:url\";\n\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\n\nimport AutoImport from \"unplugin-auto-import/vite\";\nimport Components from \"unplugin-vue-components/vite\";\nimport { ElementPlusResolver } from \"unplugin-vue-components/resolvers\";\n\nimport ElementPlus from \"unplugin-element-plus/vite\";\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    AutoImport({\n      resolvers: [ElementPlusResolver({ importStyle: \"sass\" })],\n    }),\n    Components({\n      resolvers: [ElementPlusResolver({ importStyle: \"sass\" })],\n    }),\n\n    ElementPlus({\n      useSource: true,\n    }),\n  ],\n  resolve: {\n    alias: {\n      \"@\": fileURLToPath(new URL(\"./src\", import.meta.url)),\n    },\n  },\n  css: {\n    preprocessorOptions: {\n      scss: {\n        additionalData: `\n          @use \"@/assets/css/index.scss\" as *;\n        `,\n      },\n    },\n  },\n});\n```\n\n#### logo\n\n修改一下 logo 和标题的 icon\n\n分别放在`/public/favicon.ico`和`/src/assets/imgs/logo.png`路径下\n\n删除`/public/vite.svg`\n\n可以去这个网站下载[https://iconscout.com/icons](https://iconscout.com/icons)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710072944856-06f0b813-035e-47a6-97bb-4cef728d4d96.png)\n\n[https://iconscout.com/free-icon/library-2642818](https://iconscout.com/free-icon/library-2642818)，将该图片保存为`/src/assets/imgs/logo.png`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710072841938-4d2b4f5c-bdcc-44b1-a9e1-547acad96314.png)\n\n或者[https://iconscout.com/free-icon/student-79](https://iconscout.com/free-icon/student-79)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710073182135-0de083f0-80ed-4581-88cd-4206625351d2.png)\n\n[https://iconscout.com/free-icon/student-reading-2909468](https://iconscout.com/free-icon/student-reading-2909468)，保存为`/public/favicon.ico`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710073454459-14d7fe76-e2e9-42ba-bf66-b053b3361d8b.png)\n\n### 运行\n\n#### 命令运行\n\n```shell\n➜  studentfontend npm install\n\nadded 93 packages, removed 1 package, and changed 5 packages in 16s\n➜  studentfontend npm run dev\n\n> studentfontend@0.0.0 dev\n> vite\n\n\n  VITE v4.5.2  ready in 1169 ms\n\n  ➜  Local:   http://127.0.0.1:5173/\n  ➜  Network: use --host to expose\n  ➜  press h to show help\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710073748592-e493c9f4-d4e2-4bd4-85b4-8453500970bc.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710081458951-c6a801f9-8eae-46bb-b325-6a19fca7e328.png)\n\n#### 一键运行\n\n通过配置一个启动项，便捷运行项目\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710073954088-25c7af70-0be2-4565-bb0e-177becbcb268.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710074006858-4dd1ac08-6ee9-4d53-bfc5-453e64efb6ce.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710074069281-da351ef0-e419-4e68-b63b-039792a9a967.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710074171111-8ac13c5e-13ab-4976-921a-4060b9ff8427.png)\n\n---\n\n## 后端 FastAPI\n\n### 创建空项目\n\n新建一个项目进入 FastAPI 的世界\n\n先创建项目文件夹\n\n```shell\n➜  studentProject ll\ntotal 0\ndrwxr-xr-x@ 16 zachary  staff   512B  3 10 20:25 studentfontend\n➜  studentProject mkdir studentbackend\n➜  studentProject ll\ntotal 0\ndrwxr-xr-x@  2 zachary  staff    64B  3 10 20:41 studentbackend\ndrwxr-xr-x@ 16 zachary  staff   512B  3 10 20:25 studentfontend\n```\n\n然后使用 Pycharm 创建一个空项目\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710074648550-44040fe2-4fd2-4567-bd0f-7f7144e8b28c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710074693683-58e58844-db50-485e-8141-f77ba005143b.png)\n\n### 依赖包安装\n\n需要安装一个 FastAPI 的依赖包\n\n#### 命令安装\n\n`pip install fastapi[all]`\n\n#### requirements.txt 安装\n\n```plain\nfastapi[all]\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075023414-21bae007-671a-4c15-86ed-a8266626db4f.png)\n\n### 实现一个 api\n\n#### 创建\n\n项目目录下创建一个`main.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def hello():\n    return {\"message\": \"Hello World\"}\n```\n\n#### 运行\n\n需要使用 fastapi 提供的一个`uvicorn`ASGI 网关服务器来启动 api 服务\n\n##### 命令运行\n\n`uvicorn main:app --reload`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075474004-85328fc1-6c65-419b-a642-556a371c6d4e.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075491989-b1ebc0c3-4d85-4e46-acca-76e439fb32f7.png)\n\n##### 一键运行\n\n- 配置 main 函数\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def hello():\n    return {\"message\": \"Hello World\"}\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075648021-89cf5781-dc93-4ff2-ae28-3569b7b92cd4.png)\n\n- 启动配置项\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075761116-bff52145-5d69-49fc-b6e4-130f05f659a4.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710075846696-632b2590-c791-48cd-a5f6-1b8ff86cf9df.png)\n\n以上两种方式均可以实现，具体看个人习惯\n\n### 项目整改\n\n#### .env\n\n这个文件用于存放环境变量，包括项目的运行 ip、端口号等，后面的数据库环境变量也在这里存放\n\n```plain\nHOST = \"localhost\"\nPORT = \"9090\"\n```\n\n#### common\n\n在项目路径下创建一个`/common`的 package，用于实现公共类或者公共方法\n\n##### 环境变量配置文件\n\n在`/common`包下创建一个`config.py`文件，实现对环境变量的获取\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport os\nfrom pathlib import Path\nfrom dotenv import load_dotenv\n\n\nclass Config:\n    def __init__(self):\n        dotenv_path = Path(__file__).parent.parent / \".env\"\n        load_dotenv(dotenv_path=dotenv_path)\n        self._env = dict(os.environ)\n\n    @property\n    def env(self):\n        return self._env\n\n\nconfig = Config()\n```\n\n在`/common`包下创建一个`constant.py`文件，用于配置常量\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom common.config import config\n\nHOST = config.env.get(\"HOST\")\nPORT = config.env.get(\"PORT\")\n```\n\n##### 返回类 Result\n\n实现一下 api 的通用返回类，在`/common`包下创建一个`result.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\n\n\nclass ResultBase:\n    code: str\n    msg: str\n    data: dict\n\n\nclass ResultModel(BaseModel, ResultBase):\n    pass\n\n\nclass Result(ResultBase):\n\n    def __init__(self, code, msg, data):\n        self.code = code\n        self.msg = msg\n        self.data = data\n\n    @classmethod\n    def success(cls, data: object = None, code: str = \"200\", msg: str = \"success\"):\n        if not data:\n            data = {}\n        return cls(code, msg, data)\n\n    @classmethod\n    def error(cls, data: object = None, code: str = \"500\", msg: str = \"error\"):\n        if not data:\n            data = {}\n        return cls(code, msg, data)\n```\n\n#### exception\n\n创建一个`/exception`的 package 用于自定义异常\n\n#### api\n\n创建一个`/api`的 package，用于创建后端的 API，实际就是 Controller 层\n\n##### **init**.py\n\n用于创建 FastAPI 应用初始化\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n```\n\n##### adminApi.py\n\n创建一个 hello fastapi 接口测试一下项目\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom api import app\nfrom common.result import Result\n\n\n@app.get(\"/\")\nasync def hello():\n    return Result.success()\n```\n\n然后新增了一个 api 文件之后需要给 api 的**init**.py 说明一下新增了一个 api 文件\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\nfrom api import adminApi\n```\n\n#### service\n\n创建一个`/service`的 package 用于实现 Service 层的业务代码\n\n#### model\n\n创建一个`/model`的 package 用于实现数据库的映射类\n\n#### main\n\n用于启动 FastAPI 的主入口程序\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom api import app\nimport uvicorn\n\nfrom common.constant import HOST, PORT\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", host=HOST, port=int(PORT), reload=True)\n```\n\n### 运行\n\n直接运行 main.py 文件即可\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710079493940-afe468b5-57b5-4875-b3c0-03ff2cf75b03.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710085301150-7c6b0c7b-a89a-4bc5-b314-c090850cfcac.png)\n\n出现这个就是访问成功啦\n\n至此，我们的前端后端项目就都初始化好了\n\n---\n\n# 管理员登录\n\n## 前端\n\n### Login\n\n首先绘制一个登录页面\n\n参考 element-plus 官网提供的表单[https://element-plus.org/zh-CN/component/form.html](https://element-plus.org/zh-CN/component/form.html)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710081142620-3acddbcf-774a-4d82-8992-bbf5b08a991f.png)\n\n在项目路径`/src/views`下创建一个`Login.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"login-container\">\n      <div style=\"width: 420px\" class=\"login-box\">\n        <div class=\"title\">学生信息管理系统 - 登录</div>\n        <el-form :model=\"data.form\">\n          <el-form-item>\n            <el-input\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Avatar\"\n              v-model=\"data.form.username\"\n              placeholder=\"请输入账号\"\n            />\n          </el-form-item>\n          <el-form-item>\n            <el-input\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Lock\"\n              v-model=\"data.form.password\"\n              placeholder=\"请输入密码\"\n            />\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" style=\"width: 100%;font-size: 18px\"\n              >登 录</el-button\n            >\n          </el-form-item>\n        </el-form>\n        <div style=\"margin-top:35px;text-align: right;font-size: 15px\">\n          还没有账号？请<a href=\"/register\">注册</a>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\n\nconst data = reactive({\n  form: {},\n});\n</script>\n\n<style scoped>\n.login-container {\n  min-height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-image: url(\"@/assets/imgs/login_background.png\");\n  background-size: cover;\n}\n\n.login-box {\n  background-color: rgb(255, 255, 255, 50%);\n  box-shadow: 0 0 10px rgba(84, 221, 245, 0.41);\n  padding: 30px;\n}\n\n.title {\n  font-weight: bold;\n  font-size: 30px;\n  text-align: center;\n  margin-bottom: 35px;\n}\n</style>\n```\n\n### 背景图片\n\n添加一张登录背景图片到`/src/assets/imags/login_background.png`\n\n[https://iconscout.com/free-illustration/children-are-doing-chemical-experiments-10946611](https://iconscout.com/free-illustration/children-are-doing-chemical-experiments-10946611)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710082231293-c528b0f7-371d-4f7b-9f01-6d10be6dd257.png)\n\n### 路由添加\n\n在`/src/router/index.js`中添加一下上面这个`Login`的路由\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n  ],\n});\n\nexport default router;\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710082953287-5609d967-2864-44d1-ae13-201bfb968727.png)\n\n通过[http://localhost:5173/login](http://localhost:5173/login)可以访问到登录页面\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710083039407-bc17182f-32f8-4ecc-9742-ce9c634f7b6e.png)\n\n### 表单校验和登录\n\n```vue\n<template>\n  <div>\n    <div class=\"login-container\">\n      <div style=\"width: 420px\" class=\"login-box\">\n        <div class=\"title\">学生信息管理系统 - 登录</div>\n        <el-form :model=\"data.form\" ref=\"formRef\" :rules=\"rules\">\n          <el-form-item prop=\"username\">\n            <el-input\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Avatar\"\n              v-model=\"data.form.username\"\n              placeholder=\"请输入账号\"\n            />\n          </el-form-item>\n          <el-form-item prop=\"password\">\n            <el-input\n              show-password\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Lock\"\n              v-model=\"data.form.password\"\n              placeholder=\"请输入密码\"\n            />\n          </el-form-item>\n          <el-form-item>\n            <el-button\n              type=\"primary\"\n              style=\"width: 100%;font-size: 18px\"\n              @click=\"login\"\n              >登 录</el-button\n            >\n          </el-form-item>\n        </el-form>\n        <div style=\"margin-top:35px;text-align: right;font-size: 15px\">\n          还没有账号？请<a href=\"/register\">注册</a>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from \"vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\nimport router from \"@/router\";\n\nconst data = reactive({\n  form: {},\n});\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入账号\", trigger: \"blur\" }],\n  password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n});\n\nconst formRef = ref();\n\nconst login = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      request\n        .post(\"/login\", data.form)\n        .then((res) => {\n          if (res.code === \"200\") {\n            localStorage.setItem(\"student-user\", JSON.stringify(res.data));\n            ElMessage.success(\"登录成功\");\n            router.push(\"/home\");\n          } else {\n            ElMessage.error(res.msg);\n          }\n        })\n        .catch((err) => {\n          ElMessage.error(err.response?.data?.msg || err.message);\n        });\n    }\n  });\n};\n</script>\n\n<style scoped>\n.login-container {\n  min-height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-image: url(\"@/assets/imgs/login_background.png\");\n  background-size: cover;\n}\n\n.login-box {\n  background-color: rgb(255, 255, 255, 50%);\n  box-shadow: 0 0 10px rgba(84, 221, 245, 0.41);\n  padding: 30px;\n}\n\n.title {\n  font-weight: bold;\n  font-size: 30px;\n  text-align: center;\n  margin-bottom: 35px;\n}\n</style>\n```\n\n## 后端\n\n### 数据库\n\n#### IDE 连接 MySQL\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710085705678-d51970ce-f35a-4582-95aa-a05156df4838.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710085783761-e03f3a33-edb0-481c-9d8f-747eb9d0d9c4.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710085814318-d7b039ea-490d-41c2-b744-b088af37fe67.png)\n\n#### 创建库\n\n首先在数据库中创建一个 student_info 库\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710085943623-eee4c6a8-24d2-4cbe-af89-fd7badf6485f.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710086149939-85b20d45-d2ce-424c-afcb-af1878495898.png)\n\n#### 创建 admin 表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710086214220-4ed6fe62-305d-4b2c-9b1d-ca2e0368d1b7.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710086442240-8393e748-717f-4178-bc73-0fdc64e1a260.png)\n\n插入一条数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710086572996-c8379960-6bc4-4da3-b369-10c788aed8b0.png)\n\n### 数据库配置\n\n查看 sqlalchemy 官方文档[https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb](https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710086788369-74f56963-dc07-4175-92fb-afabb26d6919.png)\n\n#### requirements.txt\n\n通过 sqlalchemy 连接数据库需要增加两个驱动\n\n```plain\nfastapi[all]\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\n```\n\n#### .env\n\n在.env 文件下添加数据库的配置信息\n\n```plain\nHOST = \"localhost\"\nPORT = \"9090\"\n\nMYSQL_DIALECT = \"mysql+mysqldb\"\nMYSQL_HOST = \"localhost\"\nMYSQL_PORT = \"3306\"\nMYSQL_USER = \"root\"\nMYSQL_PASSWORD = \"980226\"\nMYSQL_DATABASE = \"student_info\"\n```\n\n#### constant.py\n\n添加数据库配置常量\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom common.config import config\n\nHOST = config.env.get(\"HOST\")\nPORT = config.env.get(\"PORT\")\n\nMYSQL_DIALECT = config.env.get(\"MYSQL_DIALECT\")\nMYSQL_HOST = config.env.get(\"MYSQL_HOST\")\nMYSQL_PORT = config.env.get(\"MYSQL_PORT\")\nMYSQL_USER = config.env.get(\"MYSQL_USER\")\nMYSQL_PASSWORD = config.env.get(\"MYSQL_PASSWORD\")\nMYSQL_DATABASE = config.env.get(\"MYSQL_DATABASE\")\n```\n\n#### model/**init**.py\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import DeclarativeBase, sessionmaker\n\nfrom common.constant import *\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\n# mysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>\nengine = create_engine(\n    f\"{MYSQL_DIALECT}://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOST}:{MYSQL_PORT}/{MYSQL_DATABASE}?charset=utf8mb4\",\n    echo=True)\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n```\n\n### 管理员实体类定义\n\n在`/model`下创建一个`admin.py`文件\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Admin(Base):\n    __tablename__ = \"admin\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass AdminModel(BaseModel):\n    username: str\n    password: str\n```\n\n### 管理员登录的 api 接口\n\n为了实现每一个 api 都能拿到一个连接数据库的 session，在`/model/__init__.py`中实现一个 session 的获取方法\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import DeclarativeBase, sessionmaker\n\nfrom common.constant import *\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\n# mysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>\nengine = create_engine(\n    f\"{MYSQL_DIALECT}://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOST}:{MYSQL_PORT}/{MYSQL_DATABASE}?charset=utf8mb4\",\n    echo=True)\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\n\ndef get_db_session():\n    session = Session()\n    try:\n        yield session\n    finally:\n        session.close()\n```\n\n#### adminApi\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import Body, Depends\nfrom fastapi.encoders import jsonable_encoder\n\nfrom api import app\nfrom common.result import Result, ResultModel\nfrom model import Session, get_db_session\nfrom model.admin import AdminModel\nfrom service.adminService import AdminService\n\n\n@app.post(\"/login\", response_model=ResultModel)\nasync def login(admin: AdminModel = Body(...), db_session: Session = Depends(get_db_session)):\n    dbadmin = AdminService.login(admin, db_session)\n    return Result.success(jsonable_encoder(dbadmin))\n```\n\n#### adminService\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import select\n\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.admin import Admin, AdminModel\n\n\nclass AdminService:\n    @staticmethod\n    def login(admin: AdminModel, db_session: Session) -> Admin:\n        query = select(Admin).where(Admin.username == admin.username)\n        result = db_session.execute(query).scalars().first()\n        if not result:\n            raise UserNotFoundException(\"用户不存在\")\n        if result.password != admin.password:\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        return result\n```\n\n#### exception\n\n创建自定义异常的`exception`的 package\n\n然后创建一个`customException.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n#### exceptionHandler\n\n在`/api`包下面创建一个`exceptionHandler.py`用于处理异常\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n```\n\n#### /api/**init**.py\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\nfrom api import adminApi, exceptionHandler\n```\n\n## 测试\n\n### postman 测试后端接口\n\n正确登录：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710090169264-78775744-eb08-4d59-8716-ea72837aa214.png)\n\n密码错误：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710090242243-c94a897d-57d8-4a1f-9f75-e5021c671e83.png)\n\n账号错误：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710090279026-33ef7189-2ec6-4812-a64d-0e9c4dc036f6.png)\n\n### 前后端测试\n\n#### 跨域问题\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710093723455-2a5ba47e-cc59-4337-9bc1-64af595d7676.png)\n\n发生了跨域 CORS 的问题\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler\n```\n\n正确账号密码：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710094075420-b59a37ac-a447-49b0-a88a-712414a6e96c.png)\n\n错误账号：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710094119593-32a92c73-05cc-4ca8-a4e4-91c040c6a693.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710094126043-4277dec3-a187-4520-915b-89fbc42be75b.png)\n\n错误密码：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710094143695-dd039dad-c6a9-4693-878b-a7749cb52dd3.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710094152200-0402f3c8-7a81-49bc-9f4a-fb667b4e0ea3.png)\n\n## 数据库密码\n\n为了安全，数据库中的 password 不应该以明文显示，需要做个加密\n\n这里需要使用到一个库 bcrypt\n\n```plain\nfastapi[all]\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\nbcrypt==4.1.1\n```\n\n### 密码加密\n\n通过`hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())` 依据生成的盐值，生成 hash 后的密码值，结果是字节码\n\n```shell\n(venv) ➜  studentbackend python3\nPython 3.10.11 (v3.10.11:7d4cc5aa85, Apr  4 2023, 19:05:19) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import bcrypt\n>>> password = \"admin\"\n>>> hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n>>> print(hashed_pw)\nb'$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum'\n>>> print(hashed_pw.decode('utf-8'))\n$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum\n```\n\n将密码对应的加密密码 `$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum` 替换到数据库中的 admin 账号中（这一步操作其实应该是，在注册的时候将这个密码值写入数据库 de~）\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710184351868-37a0e9d3-2535-43d8-9b1c-3a43e9b36be7.png)\n\n### 密码验证\n\n通过`bcrypt.check(check_pw.encode(), hashed_pw)`检验密码是否匹配\n\n给 Admin 实体类定义一个密码检查方法\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport bcrypt\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Admin(Base):\n    __tablename__ = \"admin\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n\n    def password_check(self, password):\n        return bcrypt.checkpw(password.encode(), self.password.encode())\n\n\nclass AdminModel(BaseModel):\n    username: str\n    password: str\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import select\n\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.admin import Admin, AdminModel\n\n\nclass AdminService:\n    @staticmethod\n    def login(admin: AdminModel, db_session: Session) -> Admin:\n        query = select(Admin).where(Admin.username == admin.username)\n        result = db_session.execute(query).scalars().first()\n        if not result:\n            raise UserNotFoundException(\"用户不存在\")\n        if result.password_check(admin.password) is False:\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        return result\n```\n\n### 前后端测试\n\n密码错误：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710185314797-f8b42918-353f-44ff-86e3-16a92834f391.png)\n\n密码正确：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710185361178-79c22824-8f0c-4bd0-8aa8-12e477bfd4fb.png)\n\n---\n\n# JWT 权限校验\n\n在退出登录之后，依旧可以进入到主页面；同样后续其他 api 接口也需要在登录之后才能调用，需要加上 token，使用 JWT 实现。![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710335150678-c0013c3b-c00f-4f9b-949b-78286e63d87f.png)\n\n## 前端\n\n首先从前端这块处理，除了 login 和后续会增加的 register 页面不需要登录才能访问，其他页面，都需要登录用户之后才能访问，否则自动跳转回 login 页面\n\n### 请求头\n\n给请求头带上 token，提供给后端进行验证\n\n```javascript\nimport { ElMessage } from \"element-plus\";\nimport router from \"../router\";\nimport axios from \"axios\";\n\nconst request = axios.create({\n  baseURL: import.meta.env.VITE_BASE_URL,\n  timeout: 30000, // 后台接口超时时间设置\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\nrequest.interceptors.request.use(\n  (config) => {\n    const user = JSON.parse(localStorage.getItem(\"student-user\"));\n    config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n    if (user) {\n      config.headers.Authorization = \"Bearer ${user.token}\";\n    }\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n  (response) => {\n    let res = response.data;\n    // 如果是返回的文件\n    if (response.config.responseType === \"blob\") {\n      return res;\n    }\n    // 兼容服务端返回的字符串数据\n    if (typeof res === \"string\") {\n      res = res ? JSON.parse(res) : res;\n    }\n    // 当权限验证不通过的时候给出提示\n    if (res.code === \"401\") {\n      ElMessage.error(res.msg);\n      router.push(\"/login\");\n    }\n    return res;\n  },\n  (error) => {\n    console.log(\"err\" + error);\n    return Promise.reject(error);\n  }\n);\n\nexport default request;\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710336890469-a77306ca-5be8-480f-9570-4a796f68df1d.png)\n\n### 路由\n\n实现在没有 token 的情况下无法进入主页而跳转到 login 页面，在路由守卫中进行判断和处理\n\n```plain\nimport {createRouter, createWebHistory} from 'vue-router'\n\nconst router = createRouter({\n    history: createWebHistory(import.meta.env.BASE_URL),\n    routes: [\n        {\n            path: '/',\n            name: 'Manager',\n            component: () => import('@/views/Manager.vue'),\n            redirect: '/home',\n            children: [\n                {\n                    path: 'home',\n                    name: 'Home',\n                    component: () => import('@/views/manager/Home.vue'),\n                    meta: {requiresAuth: true}\n                },\n            ]\n        },\n        {\n            path: '/login',\n            name: 'Login',\n            component: () => import('@/views/Login.vue')\n        }\n    ]\n});\n\nrouter.beforeEach((to, from, next) => {\n    const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n    const user = JSON.parse(localStorage.getItem('student-user'));\n    if (requiresAuth && !user) {  // 如果目标路由需要认证,并且用户未登录\n        next('/login');   // 跳转到登录页面\n    } else {\n        next();   // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n    }\n})\n\nexport default router\n```\n\n\u0000![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710336834715-bbfe0bce-f29f-46dc-b65c-73afb2105f5c.png)\n\n### 测试\n\n不登录，无法进入 home 页面\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710337011611-010bd441-a61b-4e6d-bbfe-6b67dd19b54e.png)\n\n登录后，才可以进入 home 页面\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710337034729-eb685506-a372-44c1-a919-ec563223fd2e.png)\n\n## 后端\n\n后端这块需要实现一下 jwt，包括密码的校验和生成，以及 token 的生成和校验；那么之前的密码校验就可以舍去了，写一个统一的 auth 验证\n\n### 安装依赖\n\n这里需要两个依赖：`pyjwt`、`passlib[bcrypt]`\n\n```plain\nfastapi[all]\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\npyjwt\npasslib[bcrypt]\n```\n\n### AuthHandler\n\n#### 密码生成与校验\n\n接下先来编写 密码的生成和校验，在项目目录的`/common`下创建一个`auth.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.security import HTTPBearer\nfrom passlib.context import CryptContext\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n    secret = \"SECRET\"\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, plain_password, hashed_password):\n        return self.pwd_context.verify(plain_password, hashed_password)\n\nif __name__ == '__main__':\n    auth = AuthHandler()\n    print(auth.get_password_hash(\"admin\"))\n    print(auth.verify_password(\"admin\", '$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum'))\n    print(auth.verify_password(\"123\", '$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum'))\n```\n\n其中的`$2b$12$ttbSmj8jD5rW/c0XdkBZyOZI5F7GP.kMuBMWgE2.yyzreJCWdwAum`是数据库中存储的 admin 的密码\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710339283730-f5386141-228b-4a40-8a02-b03d5c5abdc8.png)\n\n运行一下\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710339640006-9c71c0db-8f4e-4e2c-90f0-2719c440afb1.png)\n\n可以看到，之前使用 bcrypt 直接生成的 hash 密码，虽然与现在生成的不一样，但是依旧可以用于验证\n\n修改一下 adminService 的验证逻辑，尝试一下登录\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.security import HTTPBearer\nfrom passlib.context import CryptContext\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n    secret = \"SECRET\"\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, plain_password, hashed_password):\n        return self.pwd_context.verify(plain_password, hashed_password)\n\n\nauth_handler = AuthHandler()\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import select\n\nfrom common.auth import auth_handler\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.admin import Admin, AdminModel\n\n\nclass AdminService:\n    @staticmethod\n    def login(admin: AdminModel, db_session: Session) -> Admin:\n        query = select(Admin).where(Admin.username == admin.username)\n        result = db_session.execute(query).scalars().first()\n        if not result:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(admin.password, result.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        return result\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710339937574-abe7280b-5945-446a-882b-8aa631eabf32.png)\n\n#### token 的生成与校验\n\n通过装饰器实现一个，登录验证\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime, timedelta\n\nimport jwt\nfrom fastapi import Security\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom passlib.context import CryptContext\n\nfrom exception.customException import TokenException\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n    secret = \"SECRET\"\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, plain_password, hashed_password):\n        return self.pwd_context.verify(plain_password, hashed_password)\n\n    def encode_token(self, user_id):\n        payload = {\n            'exp': datetime.utcnow() + timedelta(days=7, minutes=0, seconds=0),\n            'iat': datetime.utcnow(),\n            'sub': user_id\n        }\n        return jwt.encode(\n            payload,\n            self.secret,\n            algorithm='HS256'\n        )\n\n    def decode_token(self, token):\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=['HS256'])\n            return payload['sub']\n        except jwt.ExpiredSignatureError:\n            raise TokenException(\"token过期\")\n        except jwt.InvalidTokenError:\n            raise TokenException(\"无效token\")\n\n    def auth_required(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        return self.decode_token(auth.credentials)\n\n\nauth_handler = AuthHandler()\n```\n\n给`customException.py`添加一个自定义异常\n\n```python\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n给`exceptionHandler.py`添加一个异常处理\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n```\n\n这个先写到这，后面新增加 api 的时候进行一个验证\n\n---\n\n# 课程管理\n\n接下来开发一个课程管理功能，用于管理和显示学生课程的\n\n## 数据库\n\n先设计一下课程数据表，命名为 course，字段（课程名称、课程编号、课程描述、课时、任课老师）\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710344223757-045d4a5b-3901-4683-a2e6-b30d7fe489b8.png)\n\n## 课程页面\n\n在前端的项目目录下的`/manage`下创建一个`Course.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"primary\" style=\"margin: 0 0 0 10px\" plain\n        >查询</el-button\n      >\n      <el-button type=\"info\" plain>重置</el-button>\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button type=\"primary\" style=\"margin-bottom: 5px\" plain\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination background layout=\"prev, pager, next\" :total=\"1000\" />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\n\nconst data = reactive({\n  name: \"\",\n  tableData: [\n    {\n      id: 1,\n      name: \"大学英语\",\n      number: \"001\",\n      description: \"大学英语不想学-6学分\",\n      periods: \"36课时\",\n      teacher: \"张三\",\n    },\n    {\n      id: 2,\n      name: \"高等数学\",\n      number: \"002\",\n      description: \"高等数学好难学-4学分\",\n      periods: \"24课时\",\n      teacher: \"李四\",\n    },\n    {\n      id: 3,\n      name: \"必修物理\",\n      number: \"003\",\n      description: \"必修物理有难度-2学分\",\n      periods: \"24课时\",\n      teacher: \"王五\",\n    },\n    {\n      id: 4,\n      name: \"思想政治\",\n      number: \"004\",\n      description: \"思想政治必修课-4学分\",\n      periods: \"18课时\",\n      teacher: \"赵六\",\n    },\n    {\n      id: 5,\n      name: \"微机原理\",\n      number: \"005\",\n      description: \"微机原理很基础-3学分\",\n      periods: \"24课时\",\n      teacher: \"钱七\",\n    },\n    {\n      id: 6,\n      name: \"通信原理\",\n      number: \"006\",\n      description: \"通信原理很难懂-4学分\",\n      periods: \"24课时\",\n      teacher: \"孙八\",\n    },\n    {\n      id: 7,\n      name: \"离散数学\",\n      number: \"007\",\n      description: \"离散数学很离散-2学分\",\n      periods: \"18课时\",\n      teacher: \"周九\",\n    },\n    {\n      id: 8,\n      name: \"工程制图\",\n      number: \"008\",\n      description: \"工程制图好有趣-3学分\",\n      periods: \"24课时\",\n      teacher: \"吴十\",\n    },\n  ],\n});\n</script>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          src=\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\"\n          alt=\"\"\n          style=\"width: 40px; height: 40px\"\n        />\n        <span style=\"margin-left: 5px\">管理员</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710345904561-545c4764-d0b5-40d6-85ce-e80b94fbaf5a.png)\n\n## 课程查询 api\n\n### Course 实体类定义\n\n在项目目录`/model`下创建一个`course.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Course(Base):\n    __tablename__ = \"course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=False)\n    periods: Mapped[str] = mapped_column(String(255), nullable=False)\n    teacher: Mapped[str] = mapped_column(String(255), nullable=False)\n\n```\n\n### 课程管理 Api 接口\n\n#### courseApi\n\n在项目目录`/api`下创建一个`courseApi.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_list = CourseService.select_page(db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\napp.include_router(course_router)\n```\n\n需要在`/api/__init__.py`下增加 courseApi\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler, courseApi\n```\n\n#### courseService\n\n在项目目录`/service`下创建一个`courseService.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import desc, select\n\nfrom model import Session\nfrom model.course import Course\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        result = db_session.execute(query).scalars().all()\n        return result\n```\n\n#### 分页插件\n\n在项目路径的`/common`下创建一个`pageHelper.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\n\n\nclass Page:\n    list: list\n    total: int\n    pageNum: int\n    pageSize: int\n\n    def __init__(self, list: list, total: int, pageNum: int, pageSize: int):\n        self.list = list\n        self.total = total\n        self.pageNum = pageNum\n        self.pageSize = pageSize\n\n\nclass PageHelper:\n    page: int\n    size: int\n    limit: int\n    offset: int\n\n    def __init__(self, page: int, size: int, limit: int, offset: int):\n        self.page = page\n        self.size = size\n        self.limit = limit\n        self.offset = offset\n\n    @classmethod\n    def startPage(cls, page: int, size: int):\n        limit = size\n        offset = size * (page - 1)\n        return cls(page, size, limit, offset)\n\n    def of(self, data):\n        data_list = [jsonable_encoder(dataitem) for dataitem in data[self.offset:self.offset + self.limit]]\n        data_total = len(data)\n        page = Page(data_list, data_total, self.page, self.size)\n        return jsonable_encoder(page)\n\n```\n\n#### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710348643107-29bbfdfb-d10f-4c85-b147-83ff95950f89.png)\n\n可以发现，请求是成功的，但就是没数据，因为数据库里面是空的，给数据库中插入数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710348776973-d6ed84e3-0822-4b77-aa5a-36160f5b9d8a.png)\n\n再次使用 postman 测试一下\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710348855186-37b36339-051a-4ee2-bbad-c131429d1dd9.png)\n\n## 增删查改实现\n\n### 数据分页\n\n前端这块需要调用分页查询的请求接口，并将结果显示出来\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"primary\" style=\"margin: 0 0 0 10px\" plain\n        >查询</el-button\n      >\n      <el-button type=\"info\" plain>重置</el-button>\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button type=\"primary\" style=\"margin-bottom: 5px\" plain\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\n\nconst data = reactive({\n  name: \"\",\n  tableData: [],\n  total: 0,\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: 1,\n        pageSize: 5,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n</script>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710350328830-b3e6c9a9-134a-417b-9cac-679a67ca7b5e.png)\n\n虽然可以显示一部分数据，但是这个换页有问题，不显示后续跳转的页面按钮\n\n需要绑定一下这两个值\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710350466618-783bd600-76cf-4fc5-8f7e-416b946783af.png)\n\n同时还需要，在换了页面之后也重新刷新一下数据，触发 current-change\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710350803714-c97f58de-c82c-4148-a218-fbee9b491178.png)\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"primary\" style=\"margin: 0 0 0 10px\" plain\n        >查询</el-button\n      >\n      <el-button type=\"info\" plain>重置</el-button>\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button type=\"primary\" style=\"margin-bottom: 5px\" plain\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\n\nconst data = reactive({\n  name: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n</script>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710350849051-ebf1ebe5-e160-456f-8c6c-52fb710cf57f.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710350855737-b858fd91-310f-4d67-97a7-fe92f984c359.png)\n\n分页成功实现了\n\n### 查询和重置\n\n为了实现依据课程名称实现筛查的功能，需要传递一个`name`字段传给后端进行数据库层面的模糊查询\n\n重置按钮要将查询的内容清空，同时显示回完整的数据\n\n#### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button type=\"primary\" style=\"margin-bottom: 5px\" plain\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\n\nconst data = reactive({\n  name: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  load();\n};\n</script>\n```\n\n#### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_list = CourseService.select_page(name, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\napp.include_router(course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import desc, select\n\nfrom model import Session\nfrom model.course import Course\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(name, db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        if name:\n            query = query.where(Course.name.like(f\"%{name}%\"))\n        result = db_session.execute(query).scalars().all()\n        return result\n```\n\n#### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710351673810-56f5faca-7e70-48c0-b9cf-c52d7b1256b9.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710351685682-0cbf7f2e-530d-48c0-bb1b-5d5b910848e6.png)\n\n### 查询扩展\n\n当需要筛选的字段不只是`课程名称`时，需要怎么处理；比如加上`课程编号`、`任课教师`进行多条件模糊查询\n\n#### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button type=\"primary\" style=\"margin-bottom: 5px\" plain\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n</script>\n```\n\n#### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import Course, CourseSearch\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\napp.include_router(course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import desc, select\n\nfrom model import Session\nfrom model.course import Course, CourseSearch\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(course_search: CourseSearch, db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        if course_search.name:\n            query = query.where(Course.name.like(f\"%{course_search.name}%\"))\n        if course_search.number:\n            query = query.where(Course.number.like(f\"%{course_search.number}%\"))\n        if course_search.teacher:\n            query = query.where(Course.teacher.like(f\"%{course_search.teacher}%\"))\n        result = db_session.execute(query).scalars().all()\n        return result\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Course(Base):\n    __tablename__ = \"course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=False)\n    periods: Mapped[str] = mapped_column(String(255), nullable=False)\n    teacher: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass CourseSearch(BaseModel):\n    name: str | None\n    number: str | None\n    teacher: str | None\n```\n\n#### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710352618882-cb1e9708-6bd4-4ca2-bfd3-932e95f7dcb5.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710352626029-9e559e62-e9d0-46c5-ab64-e2ff7aba1ae9.png)\n\n### 新增\n\n下面实现给课程表新增数据的功能，需要点击`新增`按钮后，出现弹窗\n\n在官网找一个`Dialog`组件\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710353096927-a86240ee-4794-4e32-8e5f-ceb8e24b351c.png)\n\n#### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button type=\"primary\" size=\"small\" plain>编辑</el-button>\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"课程信息\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"课程名称\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程编号\">\n          <el-input v-model=\"data.form.number\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程描述\">\n          <el-input v-model=\"data.form.description\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课时\">\n          <el-input v-model=\"data.form.periods\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"任课教师\">\n          <el-input v-model=\"data.form.teacher\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: {},\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = {};\n};\n\nconst save = () => {\n  request\n    .post(\"/course/add\", data.form)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"新增成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n#### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import Course, CourseSearch, CourseCreate\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\n@course_router.post(\"/add\", response_model=ResultModel)\nasync def add(course: CourseCreate, db_session: Session = Depends(get_db_session)):\n    CourseService.add_course(course, db_session)\n    result = Result.success()\n    return result\n\n\napp.include_router(course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import desc, select\n\nfrom exception.customException import CourseExistException\nfrom model import Session\nfrom model.course import Course, CourseSearch, CourseCreate\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(course_search: CourseSearch, db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        if course_search.name:\n            query = query.where(Course.name.like(f\"%{course_search.name}%\"))\n        if course_search.number:\n            query = query.where(Course.number.like(f\"%{course_search.number}%\"))\n        if course_search.teacher:\n            query = query.where(Course.teacher.like(f\"%{course_search.teacher}%\"))\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def add_course(course: CourseCreate, db_session: Session):\n        query = select(Course).where(Course.name == course.name)\n        exist_course: Course = db_session.execute(query).scalars().all()\n        if exist_course:\n            raise CourseExistException(\"课程名已存在\")\n        course = Course(**course.dict())\n        db_session.add(course)\n        db_session.commit()\n        return course\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Course(Base):\n    __tablename__ = \"course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=False)\n    periods: Mapped[str] = mapped_column(String(255), nullable=False)\n    teacher: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass CourseSearch(BaseModel):\n    name: str | None\n    number: str | None\n    teacher: str | None\n\n\nclass CourseBase(BaseModel):\n    name: str\n    number: str\n    description: str\n    periods: str\n    teacher: str\n\n\nclass CourseCreate(CourseBase):\n    ...\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n```\n\n#### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710354157588-440bcfb5-5023-45ba-a3d9-f8e1f8e5a1ff.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710354164375-6265da8d-4675-4d88-b0a4-9ef2ed4eb4dd.png)\n\n### 编辑\n\n点击数据中的`编辑`按钮可以对已有的课程数据，进行修改\n\n#### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                >编辑</el-button\n              >\n              <el-button type=\"danger\" size=\"small\" plain>删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"课程信息\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"课程名称\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程编号\">\n          <el-input v-model=\"data.form.number\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程描述\">\n          <el-input v-model=\"data.form.description\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课时\">\n          <el-input v-model=\"data.form.periods\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"任课教师\">\n          <el-input v-model=\"data.form.teacher\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: {},\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = {};\n};\n\nconst save = () => {\n  request\n    .request({\n      url: data.form.id ? \"/course/update\" : \"/course/add\",\n      method: data.form.id ? \"put\" : \"post\",\n      data: data.form,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    });\n};\n\nconst handleEdit = (row) => {\n  data.form = JSON.parse(JSON.stringify(row));\n  data.formVisible = true;\n};\n</script>\n```\n\n#### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdate\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\n@course_router.post(\"/add\", response_model=ResultModel)\nasync def add(course: CourseCreate, db_session: Session = Depends(get_db_session)):\n    CourseService.add_course(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.put(\"/update\", response_model=ResultModel)\nasync def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)):\n    CourseService.update_by_id(course, db_session)\n    result = Result.success()\n    return result\n\n\napp.include_router(course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import desc, select\n\nfrom common.utils import set_attrs\nfrom exception.customException import CourseExistException, CourseNotExistException\nfrom model import Session\nfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdate\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(course_search: CourseSearch, db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        if course_search.name:\n            query = query.where(Course.name.like(f\"%{course_search.name}%\"))\n        if course_search.number:\n            query = query.where(Course.number.like(f\"%{course_search.number}%\"))\n        if course_search.teacher:\n            query = query.where(Course.teacher.like(f\"%{course_search.teacher}%\"))\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def add_course(course: CourseCreate, db_session: Session):\n        query = select(Course).where(Course.name == course.name)\n        exist_course: Course = db_session.execute(query).scalars().all()\n        if exist_course:\n            raise CourseExistException(\"课程名已存在\")\n        course = Course(**course.dict())\n        db_session.add(course)\n        db_session.commit()\n        return course\n\n    @staticmethod\n    def update_by_id(course: CourseUpdate, db_session: Session):\n        query = select(Course).where(Course.id == course.id)\n        exist_course: Course = db_session.execute(query).scalar()\n        if not exist_course:\n            raise CourseNotExistException(\"课程不存在\")\n        set_attrs(exist_course, jsonable_encoder(course))\n        db_session.commit()\n        return exist_course\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Course(Base):\n    __tablename__ = \"course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=False)\n    periods: Mapped[str] = mapped_column(String(255), nullable=False)\n    teacher: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass CourseSearch(BaseModel):\n    name: str | None\n    number: str | None\n    teacher: str | None\n\n\nclass CourseBase(BaseModel):\n    name: str\n    number: str\n    description: str\n    periods: str\n    teacher: str\n\n\nclass CourseCreate(CourseBase):\n    ...\n\n\nclass CourseUpdate(CourseBase):\n    id: int\n```\n\n实现给对象的属性更新的一个方法，在项目目录`/common`下，新建一个`utils.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\n\n# 用于更新对象属性\ndef set_attrs(obj, data: dict):\n    if data:\n        for key, value in data.items():\n            setattr(obj, key, value)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n```\n\n#### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710361942830-1b838073-bb1f-4c9c-8167-2c5b8bd6fc3c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710361960257-ff8da7d5-86d5-4314-b3d6-5e5e9fe8bdf5.png)\n\n### 删除\n\n点击已有课程数据中的`删除`按钮，实现删除数据表中对应数据\n\n#### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                >编辑</el-button\n              >\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"handleDelete(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"课程信息\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"课程名称\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程编号\">\n          <el-input v-model=\"data.form.number\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程描述\">\n          <el-input v-model=\"data.form.description\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课时\">\n          <el-input v-model=\"data.form.periods\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"任课教师\">\n          <el-input v-model=\"data.form.teacher\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: {},\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      data.tableData = res.data?.list || [];\n      data.total = res.data?.total || 0;\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = {};\n};\n\nconst save = () => {\n  request\n    .request({\n      url: data.form.id ? \"/course/update\" : \"/course/add\",\n      method: data.form.id ? \"put\" : \"post\",\n      data: data.form,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    });\n};\n\nconst handleEdit = (row) => {\n  data.form = JSON.parse(JSON.stringify(row));\n  data.formVisible = true;\n};\n\nconst handleDelete = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/course/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"删除成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n#### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdate\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\n@course_router.post(\"/add\", response_model=ResultModel)\nasync def add(course: CourseCreate, db_session: Session = Depends(get_db_session)):\n    CourseService.add_course(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.put(\"/update\", response_model=ResultModel)\nasync def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)):\n    CourseService.update_by_id(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.delete(\"/delete/{id}\", response_model=ResultModel)\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    CourseService.delete_by_id(id, db_session)\n    result = Result.success()\n    return result\n\n\napp.include_router(course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import desc, select\n\nfrom common.utils import set_attrs\nfrom exception.customException import CourseExistException, CourseNotExistException\nfrom model import Session\nfrom model.course import Course, CourseSearch, CourseCreate, CourseUpdate\n\n\nclass CourseService:\n\n    @staticmethod\n    def select_page(course_search: CourseSearch, db_session: Session):\n        query = select(Course).order_by(desc(Course.id))\n        if course_search.name:\n            query = query.where(Course.name.like(f\"%{course_search.name}%\"))\n        if course_search.number:\n            query = query.where(Course.number.like(f\"%{course_search.number}%\"))\n        if course_search.teacher:\n            query = query.where(Course.teacher.like(f\"%{course_search.teacher}%\"))\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def add_course(course: CourseCreate, db_session: Session):\n        query = select(Course).where(Course.name == course.name)\n        exist_course: Course = db_session.execute(query).scalars().all()\n        if exist_course:\n            raise CourseExistException(\"课程名已存在\")\n        course = Course(**course.dict())\n        db_session.add(course)\n        db_session.commit()\n        return course\n\n    @staticmethod\n    def update_by_id(course: CourseUpdate, db_session: Session):\n        exist_course: Course = check_course_exist(course.id, db_session)\n        set_attrs(exist_course, jsonable_encoder(course))\n        db_session.commit()\n        return exist_course\n\n    @staticmethod\n    def delete_by_id(id: int, db_session: Session):\n        exist_course: Course = check_course_exist(id, db_session)\n        db_session.delete(exist_course)\n        db_session.commit()\n        return exist_course\n\n\ndef check_course_exist(course_id: int, db_session: Session):\n    query = select(Course).where(Course.id == course_id)\n    exist_course: Course = db_session.execute(query).scalar()\n    if not exist_course:\n        raise CourseNotExistException(\"课程不存在\")\n    return exist_course\n```\n\n#### 测试\n\n先创建一个课程\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710362829857-c2f0f339-f279-4816-b09d-ee9a6442cc4e.png)\n\n然后删除\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710362849747-11c06463-9cb4-4402-bc1a-3f1d40cb3a70.png)\n\n删除成功\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710362860933-f9cec0e6-64b1-4bf3-877b-559734cd4abc.png)\n\n---\n\n# API 鉴权\n\n为了不允许，任何人都可以调用后端的 api 接口，现在给 api 接口加上权限校验，只有登录过的才能调用后端的 api 接口，之前在`auth.py`中实现了一个校验，通过依赖注入给 api 直接加上即可\n\n## 依赖注入\n\n比如给`courseApi.py`的所有接口加上 token 校验的依赖\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Query, Depends\n\nfrom api import app\nfrom common.auth import auth_handler\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.course import CourseSearch, CourseCreate, CourseUpdate\nfrom service.courseService import CourseService\n\ncourse_router = APIRouter(prefix=\"/course\")\n\n\n@course_router.get(\"/selectPage\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Course name\"),\n                      number: Optional[str] = Query(None, description=\"Course number\"),\n                      teacher: Optional[str] = Query(None, description=\"Course teacher\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    course_search = CourseSearch(name=name, number=number, teacher=teacher)\n    course_list = CourseService.select_page(course_search, db_session)\n    result = Result.success(pageInfo.of(course_list))\n    return result\n\n\n@course_router.post(\"/add\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def add(course: CourseCreate, db_session: Session = Depends(get_db_session)):\n    CourseService.add_course(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.put(\"/update\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def update(course: CourseUpdate, db_session: Session = Depends(get_db_session)):\n    CourseService.update_by_id(course, db_session)\n    result = Result.success()\n    return result\n\n\n@course_router.delete(\"/delete/{id}\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    CourseService.delete_by_id(id, db_session)\n    result = Result.success()\n    return result\n\n\napp.include_router(course_router)\n```\n\n这样如果没有登录的情况下，直接用 postman 是无法调用接口的\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710427325734-11834e2f-d189-420d-8d57-8b67386e6943.png)\n\n## 登录 token\n\n虽然现在前端页面上已经登录了，但由于请求头没有带上 token，所以无法获取数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710419406685-19044c40-990d-496d-9cad-a0b7dbde9e49.png)\n\n为了让浏览器拿到后端生成的这个 token，需要改变一下登录后的返回结果\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import select\n\nfrom common.auth import auth_handler\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.admin import Admin, AdminModel, AdminLoginResponse\n\n\nclass AdminService:\n    @staticmethod\n    def login(admin: AdminModel, db_session: Session) -> Admin:\n        query = select(Admin).where(Admin.username == admin.username)\n        exist_admin: Admin = db_session.execute(query).scalars().first()\n        if not exist_admin:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(admin.password, exist_admin.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        admin_login_response = AdminLoginResponse(id=exist_admin.id, username=exist_admin.username,\n                                                  token=auth_handler.encode_token(exist_admin.id))\n        return admin_login_response\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport bcrypt\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Admin(Base):\n    __tablename__ = \"admin\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n\n    def password_check(self, password):\n        return bcrypt.checkpw(password.encode(), self.password.encode())\n\n\nclass AdminModel(BaseModel):\n    username: str\n    password: str\n\n\nclass AdminLoginResponse(BaseModel):\n    id: int\n    username: str\n    token: str\n```\n\n这样子在重新登录之后就可以获得后端返回的 token，前端 axios 会在发起请求之前，将 token 放到请求头中，再向后端请求 api 接口\n\n登录后会返回 token：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710420080541-20a155e1-15a0-4052-ae34-c60a582e6b41.png)\n\n能正确获取数据：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710427424832-4e162436-19bc-4d6d-b51a-e81eae83e769.png)\n\n## token 超时失效\n\n为了让前端的 token 失效之后，自动回到 Login 页面，需要做些调整\n\n当请求 api 接口的时候返回的状态值为 401 的时候，移除存储的 student-user，这样就会自动跳转回 login 页面重新进行登录\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                >编辑</el-button\n              >\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"handleDelete(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"课程信息\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"课程名称\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程编号\">\n          <el-input v-model=\"data.form.number\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课程描述\">\n          <el-input v-model=\"data.form.description\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"课时\">\n          <el-input v-model=\"data.form.periods\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"任课教师\">\n          <el-input v-model=\"data.form.teacher\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\nimport router from \"@/router\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: {},\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = {};\n};\n\nconst save = () => {\n  request\n    .request({\n      url: data.form.id ? \"/course/update\" : \"/course/add\",\n      method: data.form.id ? \"put\" : \"post\",\n      data: data.form,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\nconst handleEdit = (row) => {\n  data.form = JSON.parse(JSON.stringify(row));\n  data.formVisible = true;\n};\n\nconst handleDelete = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/course/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"删除成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      ElMessage.error(err.response?.data?.msg || err.message);\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n\u0000![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710445924935-211ab920-04f6-4bd6-ae07-b125be316f6b.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710445934776-e2d6aab9-287b-4cdd-be66-61b04249bb07.png)\n\n## token 超时配置\n\n为了更便捷地配置 token 的超时时间，设置一下超时时间常量\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom common.config import config\n\nHOST = config.env.get(\"HOST\")\nPORT = config.env.get(\"PORT\")\n\nMYSQL_DIALECT = config.env.get(\"MYSQL_DIALECT\")\nMYSQL_HOST = config.env.get(\"MYSQL_HOST\")\nMYSQL_PORT = config.env.get(\"MYSQL_PORT\")\nMYSQL_USER = config.env.get(\"MYSQL_USER\")\nMYSQL_PASSWORD = config.env.get(\"MYSQL_PASSWORD\")\nMYSQL_DATABASE = config.env.get(\"MYSQL_DATABASE\")\n\nTOKEN_EXPIRE_DAYS = 7\nTOKEN_EXPIRE_MINUTES = 0\nTOKEN_EXPIRE_SECONDS = 0\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime, timedelta\n\nimport jwt\nfrom fastapi import Security\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom passlib.context import CryptContext\n\nfrom common.constant import TOKEN_EXPIRE_DAYS, TOKEN_EXPIRE_MINUTES, TOKEN_EXPIRE_SECONDS\nfrom exception.customException import TokenException\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n    secret = \"SECRET\"\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, plain_password, hashed_password):\n        return self.pwd_context.verify(plain_password, hashed_password)\n\n    def encode_token(self, user_id):\n        payload = {\n            'exp': datetime.utcnow() + timedelta(days=TOKEN_EXPIRE_DAYS, minutes=TOKEN_EXPIRE_MINUTES,\n                                                 seconds=TOKEN_EXPIRE_SECONDS),\n            'iat': datetime.utcnow(),\n            'sub': user_id\n        }\n        return jwt.encode(\n            payload,\n            self.secret,\n            algorithm='HS256'\n        )\n\n    def decode_token(self, token):\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=['HS256'])\n            return payload['sub']\n        except jwt.ExpiredSignatureError:\n            raise TokenException(\"token过期\")\n        except jwt.InvalidTokenError:\n            raise TokenException(\"无效token\")\n\n    def auth_required(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        return self.decode_token(auth.credentials)\n\n\nauth_handler = AuthHandler()\n```\n\n# 学生管理\n\n## 数据库\n\n先在数据库中创建一张学生信息表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710448899467-1a869fa8-d221-4995-a81e-87a7de808e74.png)\n\n## Student 实体类定义\n\n在`/model`的包下创建一个`student.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Student(Base):\n    __tablename__ = \"student\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    phone: Mapped[str] = mapped_column(String(255), nullable=False)\n    gender: Mapped[str] = mapped_column(String(255), nullable=False)\n    birthday: Mapped[str] = mapped_column(String(255), nullable=False)\n    avatar: Mapped[str] = mapped_column(String(255), nullable=False\n```\n\n## 学生登录\n\n### 前端-登录页面\n\n学生登录和 admin 的登录，我们复用同一个前端页面和后端接口，所以需要加一个`role`用以区分是 admin 登录了还是普通的 student 登录了；同时，不同用户进入页面之后。看到的内容应该是不同的。\n\n```vue\n<template>\n  <div>\n    <div class=\"login-container\">\n      <div style=\"width: 420px\" class=\"login-box\">\n        <div class=\"title\">学生信息管理系统 - 登录</div>\n        <el-form :model=\"data.form\" ref=\"formRef\" :rules=\"rules\">\n          <el-form-item prop=\"username\">\n            <el-input\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Avatar\"\n              v-model=\"data.form.username\"\n              placeholder=\"请输入账号\"\n            />\n          </el-form-item>\n          <el-form-item prop=\"password\">\n            <el-input\n              show-password\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Lock\"\n              v-model=\"data.form.password\"\n              placeholder=\"请输入密码\"\n            />\n          </el-form-item>\n          <el-form-item prop=\"role\">\n            <el-radio-group size=\"large\" v-model=\"data.form.role\">\n              <el-radio-button\n                style=\"margin-left: 70px\"\n                label=\"管理员\"\n                value=\"ADMIN\"\n              />\n              <el-radio-button\n                style=\"margin-left: 50px\"\n                label=\"学生\"\n                value=\"STUDENT\"\n              />\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item>\n            <el-button\n              type=\"primary\"\n              style=\"width: 100%;font-size: 18px\"\n              plain\n              @click=\"login\"\n              >登 录</el-button\n            >\n          </el-form-item>\n        </el-form>\n        <div style=\"margin-top:35px;text-align: right;font-size: 15px\">\n          还没有账号？请<a href=\"/register\">注册</a>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from \"vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\nimport router from \"@/router\";\n\nconst data = reactive({\n  form: { role: \"ADMIN\" },\n});\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入账号\", trigger: \"blur\" }],\n  password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n});\n\nconst formRef = ref();\n\nconst login = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      request\n        .post(\"/login\", data.form)\n        .then((res) => {\n          if (res.code === \"200\") {\n            localStorage.setItem(\"student-user\", JSON.stringify(res.data));\n            ElMessage.success(\"登录成功\");\n            router.push(\"/home\");\n          } else {\n            ElMessage.error(res.msg);\n          }\n        })\n        .catch((err) => {\n          ElMessage.error(err.response?.data?.msg || err.message);\n        });\n    }\n  });\n};\n</script>\n\n<style scoped>\n.login-container {\n  min-height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-image: url(\"@/assets/imgs/login_background.png\");\n  background-size: cover;\n}\n\n.login-box {\n  background-color: rgb(255, 255, 255, 50%);\n  box-shadow: 0 0 10px rgba(84, 221, 245, 0.41);\n  padding: 30px;\n}\n\n.title {\n  font-weight: bold;\n  font-size: 30px;\n  text-align: center;\n  margin-bottom: 35px;\n}\n</style>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710529973649-8285d66a-b8b1-4b28-97fd-7feb1fcf9f0f.png)\n\n### 后端-管理员/学生登录的 api 接口\n\n管理员和学生的登录复用同一个 api 接口\n\n所以需要修改一下之前的登录逻辑\n\n#### Account\n\n在`/model`下创建一个`account.py`，接收前端传递来的账号、密码、角色\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\n\n\nclass AccountLogin(BaseModel):\n    username: str\n    password: str\n    role: str\n\n\nclass AccountLoginResponse:\n    id: int\n    username: str\n    name: str\n    role: str\n    token: str\n```\n\n#### Student\n\n给 student 表追加`role`字段\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710531077648-4789f2d8-9189-43a5-80bf-1223b30a86c6.png)\n\n给`/model/student.py`更新一下\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Student(Base):\n    __tablename__ = \"student\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    phone: Mapped[str] = mapped_column(String(255), nullable=False)\n    gender: Mapped[str] = mapped_column(String(255), nullable=False)\n    birthday: Mapped[str] = mapped_column(String(255), nullable=False)\n    avatar: Mapped[str] = mapped_column(String(255), nullable=False)\n    role: Mapped[str] = mapped_column(String(255), nullable=False)\n```\n\n#### Admin\n\n给 admin 表追加`name`字段和`role`字段\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710531287748-bbeb3fca-e7a2-4cff-bce6-5e0ce13b2678.png)\n\n给`/model/admin.py`更新一下\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport bcrypt\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Admin(Base):\n    __tablename__ = \"admin\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    role: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass AdminModel(BaseModel):\n    username: str\n    password: str\n\n\nclass AdminLoginResponse(BaseModel):\n    id: int\n    username: str\n    token: str\n```\n\n#### Service\n\n在项目目录`/service`下创建一个`studentService.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select\n\nfrom common.auth import auth_handler\nfrom common.utils import set_attrs\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.account import AccountLogin, AccountLoginResponse\nfrom model.student import Student\n\n\nclass StudentService:\n    @staticmethod\n    def login(account: AccountLogin, db_session: Session) -> AccountLoginResponse:\n        query = select(Student).where(Student.username == account.username)\n        exist_student: Student = db_session.execute(query).scalars().first()\n        if not exist_student:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(account.password, exist_student.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        account_login_response = AccountLoginResponse()\n        set_attrs(account_login_response, jsonable_encoder(exist_student))\n        account_login_response.token = auth_handler.encode_token(exist_student.id)\n        return account_login_response\n```\n\n然后修改`adminService.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select\n\nfrom common.auth import auth_handler\nfrom common.utils import set_attrs\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException\nfrom model import Session\nfrom model.account import AccountLoginResponse, AccountLogin\nfrom model.admin import Admin\n\n\nclass AdminService:\n    @staticmethod\n    def login(account: AccountLogin, db_session: Session) -> AccountLoginResponse:\n        query = select(Admin).where(Admin.username == account.username)\n        exist_admin: Admin = db_session.execute(query).scalars().first()\n        if not exist_admin:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(account.password, exist_admin.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        account_login_response = AccountLoginResponse()\n        set_attrs(account_login_response, jsonable_encoder(exist_admin))\n        account_login_response.token = auth_handler.encode_token(exist_admin.id)\n        return account_login_response\n```\n\n#### Role\n\n创建一个枚举类 Role，用以区分学生和管理员\n\n在`/common`下创建一个`Enum.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\n\n\nclass Role(str, Enum):\n    ADMIN = \"管理员\"\n    STUDENT = \"学生\"\n```\n\n#### API\n\n然后修改一下登录的 api\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import Depends\nfrom fastapi.encoders import jsonable_encoder\n\nfrom api import app\nfrom common.Enum import Role\nfrom common.result import Result, ResultModel\nfrom model import Session, get_db_session\nfrom model.account import AccountLogin\nfrom service.adminService import AdminService\nfrom service.studentService import StudentService\n\n\n@app.post(\"/login\", response_model=ResultModel)\nasync def login(account: AccountLogin, db_session: Session = Depends(get_db_session)):\n    if Role.ADMIN.name.__eq__(account.role):\n        db_account = AdminService.login(account, db_session)\n    elif Role.STUDENT.name.__eq__(account.role):\n        db_account = StudentService.login(account, db_session)\n    else:\n        return Result.error(\"角色错误\")\n    return Result.success(jsonable_encoder(db_account))\n```\n\n## 学生注册\n\n### 前端-注册页面\n\n写一下学生的注册页面，这里管理员就不参与注册了\n\n在前端项目目录`/views`下创建一个`Register.vue`（这里我偷懒了，没有替换注册页的背景图，大家可以自行替换）\n\n```vue\n<template>\n  <div>\n    <div class=\"register-container\">\n      <div style=\"width: 400px\" class=\"register-box\">\n        <div class=\"title\">学生信息管理系统 - 注册</div>\n        <el-form :model=\"data.form\" ref=\"formRef\" :rules=\"rules\">\n          <el-form-item prop=\"username\">\n            <el-input\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"User\"\n              v-model=\"data.form.username\"\n              placeholder=\"请输入账号\"\n            />\n          </el-form-item>\n          <el-form-item prop=\"password\">\n            <el-input\n              show-password\n              style=\"height: 40px;font-size: 18px\"\n              prefix-icon=\"Lock\"\n              v-model=\"data.form.password\"\n              placeholder=\"请输入密码\"\n            />\n          </el-form-item>\n          <el-form-item>\n            <el-button\n              type=\"primary\"\n              style=\"width: 100%\"\n              plain\n              @click=\"register\"\n              >注 册</el-button\n            >\n          </el-form-item>\n        </el-form>\n        <div style=\"margin-top:30px;text-align: right\">\n          已有账号？请直接<a href=\"/login\">登录</a>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from \"vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\nimport router from \"@/router\";\n\nconst data = reactive({\n  form: {},\n});\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入账号\", trigger: \"blur\" }],\n  password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n});\n\nconst formRef = ref();\n\nconst register = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      request\n        .post(\"/register\", data.form)\n        .then((res) => {\n          if (res.code === \"200\") {\n            ElMessage.success(\"注册成功\");\n            router.push(\"/login\");\n          } else {\n            ElMessage.error(res.msg);\n          }\n        })\n        .catch((err) => {\n          ElMessage.error(err.response?.data?.msg || err.message);\n        });\n    }\n  });\n};\n</script>\n\n<style scoped>\n.register-container {\n  min-height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-image: url(\"@/assets/imgs/login_background.png\");\n  background-size: cover;\n}\n\n.register-box {\n  background-color: rgb(255, 255, 255, 50%);\n  box-shadow: 0 0 10px rgba(84, 221, 245, 0.41);\n  padding: 30px;\n}\n\n.title {\n  font-weight: bold;\n  font-size: 30px;\n  text-align: center;\n  margin-bottom: 35px;\n}\n</style>\n```\n\n添加一下注册页面的路由\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710604627683-dfd384fa-3167-419f-a922-f52d2d61a218.png)\n\n### 后端-注册的 api 接口\n\n接下来实现一下，后端注册的逻辑\n\n#### API\n\n因为这个注册只是给学生使用的，在项目目录`/api`下新建一个`studentApi.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import Depends\n\nfrom api import app\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.account import AccountRegister\nfrom service.studentService import StudentService\n\n\n@app.post(\"/register\", response_model=ResultModel)\nasync def register(account: AccountRegister, db_session: Session = Depends(get_db_session)):\n    StudentService.register(account, db_session)\n    return Result.success()\n```\n\n添加一下 studentApi\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler, courseApi, studentApi\n```\n\n给`account.py`添加注册的请求体\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\n\n\nclass AccountLogin(BaseModel):\n    username: str\n    password: str\n    role: str\n\n\nclass AccountLoginResponse:\n    id: int\n    username: str\n    name: str\n    role: str\n    token: str\n\n\nclass AccountRegister(BaseModel):\n    username: str\n    password: str\n```\n\n#### Service\n\n实现一下注册的 service\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select\n\nfrom common.Enum import Role\nfrom common.auth import auth_handler\nfrom common.utils import set_attrs\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, UserExistException\nfrom model import Session\nfrom model.account import AccountLogin, AccountLoginResponse, AccountRegister\nfrom model.student import Student\n\n\nclass StudentService:\n    @staticmethod\n    def login(account: AccountLogin, db_session: Session) -> AccountLoginResponse:\n        query = select(Student).where(Student.username == account.username)\n        exist_student: Student = db_session.execute(query).scalars().first()\n        if not exist_student:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(account.password, exist_student.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        account_login_response = AccountLoginResponse()\n        set_attrs(account_login_response, jsonable_encoder(exist_student))\n        account_login_response.token = auth_handler.encode_token(exist_student.id)\n        return account_login_response\n\n    @staticmethod\n    def register(account: AccountRegister, db_session: Session):\n        query = select(Student).where(Student.username == account.username)\n        exist_student = db_session.execute(query).scalars().first()\n        if exist_student:\n            raise UserExistException(\"账号已存在\")\n\n        new_student = Student()\n        account.password = auth_handler.get_password_hash(account.password)\n        set_attrs(new_student, jsonable_encoder(account))\n        if new_student.name is None:\n            new_student.name = account.username\n        new_student.role = Role.STUDENT.name\n\n        db_session.add(new_student)\n        db_session.commit()\n        return new_student\n```\n\n添加自定义异常\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass UserExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException, UserExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserExistException)\nasync def user_exist_exception_handler(request: Request, exc: UserExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n```\n\n## 登录/注册测试\n\n现在测试一下学生登录和注册的逻辑\n\n### 学生注册\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710606986452-eaa412a2-43ab-4d6d-90bf-4143eae2ff77.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710606994269-e22569b7-b4d5-447b-a361-8c08b84ca44e.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710607036436-aa5689b3-3ece-4802-9978-bb4db123c161.png)\n\n### 学生登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710607063704-884a65f3-36c4-4487-8c43-b3d32c8c47ac.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710607072554-7fccd671-d1c1-46d1-b3d0-7970068664f6.png)\n\n现在登录进来了，但是右上角的显示不太对，等下改改\n\n### 管理员登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710607176805-d6ca2dae-fc34-476c-b3e2-c80338393074.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710607184624-4ba6ad15-b071-46e2-8b54-66c5c3535e51.png)\n\n## 学生管理\n\n这块咱们做个设定，当管理员新增用户、替用户修改用户数据，密码必须重新设置为初始密码-123456\n\n### 前端\n\n复制粘贴一下之前的`Course.vue`，命名为`Student.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.username\"\n        placeholder=\"请输入要查询的学生学号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的学生姓名\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"username\" label=\"学生学号\" />\n          <el-table-column prop=\"name\" label=\"学生姓名\" />\n          <el-table-column prop=\"gender\" label=\"性别\" />\n          <el-table-column prop=\"phone\" label=\"手机号\" />\n          <el-table-column prop=\"birthday\" label=\"出生日期\" />\n          <el-table-column prop=\"avatar\" label=\"头像\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                >编辑</el-button\n              >\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"handleDelete(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"学生信息\">\n      <el-form\n        :model=\"data.form\"\n        :rules=\"rules\"\n        ref=\"formRef\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"学生学号\" prop=\"username\">\n          <el-input v-model=\"data.form.username\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input v-model=\"data.form.password\" autocomplete=\"off\" disabled />\n        </el-form-item>\n        <el-form-item label=\"学生姓名\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"性别\">\n          <el-radio-group v-model=\"data.form.gender\">\n            <el-radio label=\"男\"></el-radio>\n            <el-radio label=\"女\"></el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"手机号\">\n          <el-input v-model=\"data.form.phone\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"出生日期\">\n          <el-date-picker\n            format=\"YYYY-MM-DD\"\n            value-format=\"YYYY-MM-DD\"\n            v-model=\"data.form.birthday\"\n          ></el-date-picker>\n        </el-form-item>\n        <el-form-item label=\"头像\">\n          <el-input v-model=\"data.form.avatar\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  username: \"\",\n  name: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: { password: \"123456\" },\n});\n\nconst load = () => {\n  request\n    .get(\"/student/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        username: data.username,\n        name: data.name,\n      },\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.username = \"\";\n  data.name = \"\";\n  load();\n};\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入学生学号\", trigger: \"blur\" }],\n  password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n});\n\nconst formRef = ref();\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = { password: \"123456\" };\n};\n\nconst save = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      request\n        .request({\n          url: data.form.id ? \"/student/update\" : \"/student/add\",\n          method: data.form.id ? \"put\" : \"post\",\n          data: data.form,\n        })\n        .then((res) => {\n          if (res.code === \"200\") {\n            ElMessage.success(\"操作成功\");\n            data.formVisible = false;\n            load();\n          } else {\n            ElMessage.error(res.msg);\n          }\n        })\n        .catch((err) => {\n          if (err.response?.data?.code === \"401\") {\n            localStorage.removeItem(\"student-user\");\n          }\n          ElMessage.error(err.response?.data?.msg || err.message);\n        });\n    }\n  });\n};\n\nconst handleEdit = (row) => {\n  data.form = JSON.parse(JSON.stringify(row));\n  data.formVisible = true;\n  data.form.password = \"123456\";\n};\n\nconst handleDelete = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/student/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"删除成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"student\",\n          name: \"Student\",\n          component: () => import(\"@/views/manager/Student.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          src=\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\"\n          alt=\"\"\n          style=\"width: 40px; height: 40px\"\n        />\n        <span style=\"margin-left: 5px\">管理员</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n### 后端\n\n直接一次性实现学生管理的增删查改\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import Depends, APIRouter, Query\n\nfrom api import app\nfrom common.auth import auth_handler\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.account import AccountRegister\nfrom model.student import StudentSearch, StudentCreate, StudentUpdate\nfrom service.studentService import StudentService\n\n\n@app.post(\"/register\", response_model=ResultModel)\nasync def register(account: AccountRegister, db_session: Session = Depends(get_db_session)):\n    StudentService.register(account, db_session)\n    return Result.success()\n\n\nstudent_router = APIRouter(prefix=\"/student\")\n\n\n@student_router.get(\"/selectPage\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      username: Optional[str] = Query(None, description=\"Student username\"),\n                      name: Optional[str] = Query(None, description=\"Student name\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    student_search = StudentSearch(username=username, name=name)\n    student_list = StudentService.select_page(student_search, db_session)\n    return Result.success(pageInfo.of(student_list))\n\n\n@student_router.post(\"/add\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def add(student: StudentCreate, db_session: Session = Depends(get_db_session)):\n    StudentService.add_student(student, db_session)\n    return Result.success()\n\n\n@student_router.put(\"/update\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def update(student: StudentUpdate, db_session: Session = Depends(get_db_session)):\n    StudentService.update_by_id(student, db_session)\n    return Result.success()\n\n\n@student_router.delete(\"/delete/{id}\", response_model=ResultModel, dependencies=[Depends(auth_handler.auth_required)])\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    StudentService.delete_by_id(id, db_session)\n    return Result.success()\n\n\napp.include_router(student_router)\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, asc\n\nfrom common.Enum import Role\nfrom common.auth import auth_handler\nfrom common.utils import set_attrs\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, UserExistException\nfrom model import Session\nfrom model.account import AccountLogin, AccountLoginResponse, AccountRegister\nfrom model.student import Student, StudentCreate, StudentUpdate\n\n\nclass StudentService:\n    @staticmethod\n    def login(account: AccountLogin, db_session: Session) -> AccountLoginResponse:\n        query = select(Student).where(Student.username == account.username)\n        exist_student: Student = db_session.execute(query).scalars().first()\n        if not exist_student:\n            raise UserNotFoundException(\"用户不存在\")\n        if not auth_handler.verify_password(account.password, exist_student.password):\n            raise PasswordNotMatchException(\"身份验证未通过\")\n        account_login_response = AccountLoginResponse()\n        set_attrs(account_login_response, jsonable_encoder(exist_student))\n        account_login_response.token = auth_handler.encode_token(exist_student.id)\n        return account_login_response\n\n    @staticmethod\n    def register(account: AccountRegister, db_session: Session):\n        query = select(Student).where(Student.username == account.username)\n        exist_student = db_session.execute(query).scalars().first()\n        if exist_student:\n            raise UserExistException(\"账号已存在\")\n\n        new_student = Student()\n        account.password = auth_handler.get_password_hash(account.password)\n        set_attrs(new_student, jsonable_encoder(account))\n        if new_student.name is None:\n            new_student.name = account.username\n        new_student.role = Role.STUDENT.name\n\n        db_session.add(new_student)\n        db_session.commit()\n        return new_student\n\n    @staticmethod\n    def select_page(student_search: Student, db_session: Session):\n        query = select(Student).order_by(asc(Student.id))\n        if student_search.username:\n            query = query.where(Student.username.like(f\"%{student_search.username}%\"))\n        if student_search.name:\n            query = query.where(Student.name.like(f\"%{student_search.name}%\"))\n\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def add_student(student: StudentCreate, db_session: Session):\n        query = select(Student).where(Student.username == student.username)\n        exist_student = db_session.execute(query).scalars().all()\n        if exist_student:\n            raise UserExistException(\"账号已存在\")\n\n        student.password = auth_handler.get_password_hash(student.password)\n        student = Student(**student.dict())\n        if student.name is None:\n            student.name = student.username\n        student.role = Role.STUDENT.name\n        db_session.add(student)\n        db_session.commit()\n        return student\n\n    @staticmethod\n    def update_by_id(student: StudentUpdate, db_session: Session):\n        exist_student: Student = check_student_exist(student.id, db_session)\n        student.password = auth_handler.get_password_hash(student.password)\n        set_attrs(exist_student, jsonable_encoder(student))\n        db_session.commit()\n        return exist_student\n\n    @staticmethod\n    def delete_by_id(id: int, db_session: Session):\n        exist_student: Student = check_student_exist(id, db_session)\n        db_session.delete(exist_student)\n        db_session.commit()\n        return exist_student\n\n\ndef check_student_exist(student_id: int, db_session: Session):\n    query = select(Student).where(Student.id == student_id)\n    exist_student: Student = db_session.execute(query).scalar()\n    if not exist_student:\n        raise UserNotFoundException(\"账号不存在\")\n    return exist_student\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\n\n\nclass Student(Base):\n    __tablename__ = \"student\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    username: Mapped[str] = mapped_column(String(255), nullable=False)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    phone: Mapped[str] = mapped_column(String(255), nullable=False)\n    gender: Mapped[str] = mapped_column(String(255), nullable=False)\n    birthday: Mapped[str] = mapped_column(String(255), nullable=False)\n    avatar: Mapped[str] = mapped_column(String(255), nullable=False)\n    role: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\nclass StudentBase(BaseModel):\n    username: str\n    password: str = Field(..., min_length=1)\n    name: Optional[str] = None\n    role: Optional[str] = None\n\n\nclass StudentSearch(BaseModel):\n    username: str | None\n    name: str | None\n\n\nclass StudentCreate(StudentBase):\n    phone: Optional[str] = None\n    gender: Optional[str] = None\n    birthday: Optional[str] = Field(None)\n    avatar: Optional[str] = Field(None)\n\n\nclass StudentUpdate(StudentCreate):\n    id: int\n```\n\n### 测试\n\n#### 增\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614101507-2bf573c5-fa17-4163-a689-3385877daa5d.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614339357-f6290c1c-bd96-4b2c-8530-09e5bf23b1c4.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614350016-64f541ee-ce8e-4f50-80ee-182cbf2e277c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614399226-a9223fce-2830-4d70-b5b0-5345265e68b1.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614409533-4ccb0b0e-b43c-4e2b-8732-2cc57e64a637.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614456422-3dd9bdc7-3664-4db1-b0fa-d463de9a24ab.png)\n\n#### 删\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614471327-76769a3d-22b0-448d-90e4-4732685f6265.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614484226-16c0dee1-16e3-4ddf-86fd-046dc6241284.png)\n\n#### 查\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614500386-0b89fdc6-06f8-460f-8a82-f50af83bf667.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614524924-97ff251c-c108-4913-a355-722cb37adee5.png)\n\n#### 改\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614569965-55e3a371-083d-4f48-9bc8-49c7c1124c96.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710614577734-0d8b6662-062e-437f-a4d8-5288c15995b2.png)\n\n但是修改过后，密码会被强制重置为 123456\n\n## 限制权限\n\n现在不管普通的学生还是管理员都能看到管理页面 这不符合\n\n需要加入一个权限`v-if=\"user.role === 'ADMIN'\"`\n\n顺便修改一下右上角和主页显示的用户名称\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          src=\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\"\n          alt=\"\"\n          style=\"width: 40px; height: 40px\"\n        />\n        <span style=\"margin-left: 5px\">{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n```vue\n<template>\n  <div class=\"welcome-container\">\n    <div class=\"custom-card bg-white shadow rounded p-4 mb-5\">\n      <h2 class=\"text-center text-primary\">欢迎来到本系统</h2>\n      <p class=\"text-center mt-3\">\n        您好 <span :style=\"{ color: '#116ca9' }\">{{ user.name }}</span\n        >，祝您使用愉快！\n      </p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport request from \"@/utils/request\";\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.welcome-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: calc(100vh - 100px); /* 根据实际项目需要调整高度 */\n}\n\n.custom-card {\n  max-width: 400px;\n  border: none;\n}\n</style>\n```\n\n普通学生登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710615211512-e0cccb33-3e60-4b88-9678-4c2ce8e98086.png)\n\n管理员登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710615040123-41959ce6-a154-4412-ae89-c76b26d83cec.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710615228358-010c1595-4196-4110-b8a8-96aee9e8ddd7.png)\n\n---\n\n# 个人页面\n\n## 文件上传与下载\n\n### 依赖包\n\n需要安装一下`werkzeug`这个包 \u0000\n\n```plain\nfastapi[all]\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\npyjwt\npasslib[bcrypt]\nwerkzeug\n```\n\n### fileApi\n\n为了实现头像上传的功能创建一个新的`fileApi.py`\n\n注意：\n\n- StreamingResponse 引得是`from fastapi.responses import StreamingResponse`\n- secure_filename 引得是`from werkzeug.utils import secure_filename`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport mimetypes\nimport os\nfrom datetime import datetime\nfrom fastapi.encoders import jsonable_encoder\nfrom werkzeug.utils import secure_filename\nfrom fastapi.responses import StreamingResponse\nfrom fastapi import APIRouter, UploadFile\n\nfrom api import app\nfrom common.constant import HOST, PORT\nfrom common.profile import Profile\nfrom common.result import ResultModel, Result\nfrom exception.customException import FileNotFoundException\n\nfile_router = APIRouter(prefix=\"/files\")\n\n\n@file_router.post(\"/upload\", response_model=ResultModel)\nasync def upload(file: UploadFile):\n    original_filename = secure_filename(file.filename)\n    timestamp = int(datetime.now().timestamp())\n    unique_filename = f\"{timestamp}_{original_filename}\"\n    file_save_path = Profile.get_files_path()\n\n    # 创建保存文件的完整路径\n    file_final_path = file_save_path.joinpath(unique_filename)\n\n    # 将文件保存到指定位置\n    with open(file_final_path, 'wb') as buffer_file:\n        content = await file.read()\n        buffer_file.write(content)\n\n    # 构建文件访问URL\n    url = f\"http://{HOST}:{PORT}/files/download?filename={unique_filename}\"\n    return Result.success(jsonable_encoder({\"url\": url}))\n\n\n@file_router.get(\"/download\")\nasync def download(filename: str):\n    file_save_path = Profile.get_files_path()\n    file_path = file_save_path.joinpath(filename)\n\n    if not file_path.exists():\n        raise FileNotFoundException(\"文件不存在\")\n    # 用于触发下载文件的\n    # return FileResponse(file_path, media_type='image/png', filename=filename)\n\n    mime_type, _ = mimetypes.guess_type(file_path)\n\n    # 创建一个StreamingResponse，以便流式传输大文件，同时设置正确的MIME类型\n    response = StreamingResponse(\n        open(file_path, 'rb'),\n        media_type=mime_type,\n    )\n    # 不设置Content-Disposition，避免浏览器触发下载\n    return response\n\n\napp.include_router(file_router)\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler, courseApi, studentApi, fileApi\n```\n\n### Profile\n\n在项目目录`/common`下创建一个`profile.py`，用于获取项目目录路径\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom pathlib import Path\n\n\nclass Profile:\n    __file_path = None\n\n    @staticmethod\n    def get_files_path():\n        project_path = Path(__file__).parent.parent  # 获取项目根目录\n        file_path = project_path.joinpath(\"files\")\n        if not file_path.exists():\n            file_path.mkdir(parents=True)\n        Profile.__file_path = file_path\n        return file_path\n\n```\n\n### 自定义异常\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass UserExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass FileNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserExistException)\nasync def user_exist_exception_handler(request: Request, exc: UserExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(FileNotFoundException)\nasync def file_not_found_exception_handler(request: Request, exc: FileNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n```\n\n### 测试\n\n使用 postman 测试一下\n\n#### 上传\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710616492511-d448efde-cc0e-4231-925e-d04f54841c77.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710616565148-33a0b257-5782-41fb-8100-e9c5ccfeab65.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710616639614-cc34bcbc-102d-4887-9134-35122935f222.png)\n\n#### 下载\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710616608908-20c654d8-30b2-4645-aea1-490ab9428df0.png)\n\n## 完善图片上传\n\n修改一下`Student.vue`头像上传的功能\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.username\"\n        placeholder=\"请输入要查询的学生学号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的学生姓名\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-button\n          type=\"primary\"\n          style=\"margin-bottom: 5px\"\n          plain\n          @click=\"handleAdd\"\n          >新增</el-button\n        >\n      </div>\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"username\" label=\"学生学号\" />\n          <el-table-column prop=\"name\" label=\"学生姓名\" />\n          <el-table-column prop=\"gender\" label=\"性别\" />\n          <el-table-column prop=\"phone\" label=\"手机号\" />\n          <el-table-column prop=\"birthday\" label=\"出生日期\" />\n\n          <el-table-column prop=\"avatar\" label=\"头像\">\n            <template #default=\"scope\">\n              <el-image\n                v-if=\"scope.row.avatar\"\n                :src=\"scope.row.avatar\"\n                :preview-src-list=\"[scope.row.avatar]\"\n                style=\"width: 40px; height: 40px\"\n              ></el-image>\n            </template>\n          </el-table-column>\n\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                >编辑</el-button\n              >\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"handleDelete(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <el-dialog width=\"35%\" v-model=\"data.formVisible\" title=\"学生信息\">\n      <el-form\n        :model=\"data.form\"\n        :rules=\"rules\"\n        ref=\"formRef\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 45px\"\n      >\n        <el-form-item label=\"学生学号\" prop=\"username\">\n          <el-input v-model=\"data.form.username\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input v-model=\"data.form.password\" autocomplete=\"off\" disabled />\n        </el-form-item>\n        <el-form-item label=\"学生姓名\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"性别\">\n          <el-radio-group v-model=\"data.form.gender\">\n            <el-radio label=\"男\"></el-radio>\n            <el-radio label=\"女\"></el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"手机号\">\n          <el-input v-model=\"data.form.phone\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"出生日期\">\n          <el-date-picker\n            format=\"YYYY-MM-DD\"\n            value-format=\"YYYY-MM-DD\"\n            v-model=\"data.form.birthday\"\n          ></el-date-picker>\n        </el-form-item>\n        <el-form-item label=\"头像\">\n          <el-upload\n            action=\"http://localhost:9090/files/upload\"\n            list-type=\"picture\"\n            :on-success=\"handleImgUploadSuccess\"\n          >\n            <el-button type=\"primary\">上传头像 </el-button>\n          </el-upload>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"data.formVisible = false\" plain>取消</el-button>\n          <el-button type=\"primary\" @click=\"save\" plain>保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  username: \"\",\n  name: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  formVisible: false,\n  form: { password: \"123456\" },\n});\n\nconst load = () => {\n  request\n    .get(\"/student/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        username: data.username,\n        name: data.name,\n      },\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.username = \"\";\n  data.name = \"\";\n  load();\n};\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入学生学号\", trigger: \"blur\" }],\n  password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n});\n\nconst formRef = ref();\n\nconst handleAdd = () => {\n  data.formVisible = true;\n  data.form = { password: \"123456\" };\n};\n\nconst save = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      request\n        .request({\n          url: data.form.id ? \"/student/update\" : \"/student/add\",\n          method: data.form.id ? \"put\" : \"post\",\n          data: data.form,\n        })\n        .then((res) => {\n          if (res.code === \"200\") {\n            ElMessage.success(\"操作成功\");\n            data.formVisible = false;\n            load();\n          } else {\n            ElMessage.error(res.msg);\n          }\n        })\n        .catch((err) => {\n          if (err.response?.data?.code === \"401\") {\n            localStorage.removeItem(\"student-user\");\n          }\n          ElMessage.error(err.response?.data?.msg || err.message);\n        });\n    }\n  });\n};\n\nconst handleEdit = (row) => {\n  data.form = JSON.parse(JSON.stringify(row));\n  data.formVisible = true;\n  data.form.password = \"123456\";\n};\n\nconst handleDelete = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/student/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"删除成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\nconst handleImgUploadSuccess = (res) => {\n  data.form.avatar = res.data.url;\n};\n</script>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710617080504-595e3da2-e366-40a1-8c95-11cf4ac4715a.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710617244456-eed99781-03fc-4a41-94fe-1ac67ea49a5c.png)\n\n## 个人资料\n\n在项目目录`/manager`文件夹下面创建一个`Person.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"width: 50%; padding: 40px\">\n      <el-form\n        :model=\"data.form\"\n        ref=\"formRef\"\n        :rules=\"rules\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 40px\"\n      >\n        <el-form-item label=\"头像\">\n          <el-upload\n            class=\"avatar-uploader\"\n            action=\"http://localhost:9090/files/upload\"\n            :show-file-list=\"false\"\n            :on-success=\"handleImgUploadSuccess\"\n          >\n            <img\n              v-if=\"data.form.avatar\"\n              :src=\"data.form.avatar\"\n              class=\"avatar\"\n            />\n            <el-icon v-else class=\"avatar-uploader-icon\">\n              <Plus />\n            </el-icon>\n          </el-upload>\n        </el-form-item>\n        <el-form-item label=\"学生学号\" prop=\"username\">\n          <el-input v-model=\"data.form.username\" autocomplete=\"off\" disabled />\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input\n            show-password\n            v-model=\"data.form.password\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n        <el-form-item label=\"学生姓名\">\n          <el-input v-model=\"data.form.name\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"性别\">\n          <el-radio-group v-model=\"data.form.gender\">\n            <el-radio label=\"男\"></el-radio>\n            <el-radio label=\"女\"></el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"手机号\">\n          <el-input v-model=\"data.form.phone\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"出生日期\">\n          <el-date-picker\n            format=\"YYYY-MM-DD\"\n            value-format=\"YYYY-MM-DD\"\n            v-model=\"data.form.birthday\"\n          ></el-date-picker>\n        </el-form-item>\n        <el-form-item style=\"padding-left: 60%\">\n          <el-button type=\"primary\" @click=\"update\">保存</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive } from \"vue\";\nimport { Plus } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage } from \"element-plus\";\nimport router from \"@/router\";\n\nconst data = reactive({\n  form: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n});\n\nif (data.form) {\n  data.form.password = \"\";\n}\n\nconst rules = reactive({\n  username: [{ required: true, message: \"请输入账号\", trigger: \"blur\" }],\n  password: [\n    {\n      required: true,\n      message: \"修改个人资料必须重新输入密码\",\n      trigger: \"blur\",\n    },\n  ],\n});\n\nconst update = () => {\n  request\n    .put(\"/student/update\", data.form)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        router.push(\"/login\");\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\nconst handleImgUploadSuccess = (res) => {\n  data.form.avatar = res.data;\n};\n</script>\n\n<style>\n.avatar-uploader .el-upload {\n  border: 1px dashed #d9d9d9;\n  border-radius: 6px;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n}\n\n.avatar-uploader .el-upload:hover {\n  border-color: #409eff;\n}\n\n.el-icon.avatar-uploader-icon {\n  font-size: 28px;\n  color: #8c939d;\n  width: 100px;\n  height: 100px;\n  line-height: 100px;\n  text-align: center;\n}\n\n.avatar {\n  width: 100px;\n  height: 100px;\n  display: block;\n}\n</style>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"student\",\n          name: \"Student\",\n          component: () => import(\"@/views/manager/Student.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"person\",\n          name: \"Person\",\n          component: () => import(\"@/views/manager/Person.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          :src=\"\n            user.avatar ||\n            'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'\n          \"\n          alt=\"\"\n          style=\"width: 40px; height: 40px; border-radius: 50%\"\n        />\n        <span style=\"margin-left: 5px\">{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\" v-if=\"user.role === 'STUDENT'\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710617861421-2875f037-9f2c-4363-8e02-c60dc3e8df63.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710619302880-4b22bf47-85be-4ba5-aa25-68c49b706f28.png)\n\n---\n\n# 学生选课功能\n\n## 数据库\n\n新增一张学生选课表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710661868105-c089191b-2c9a-4bcd-a48a-de4fb53fa15f.png)\n\n## 前端\n\n学生选课页面，把 Course 页面复制粘贴一份，命名为`CourseList.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.teacher\"\n        placeholder=\"请输入任课老师\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" width=\"180\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" width=\"180\" />\n          <el-table-column prop=\"description\" label=\"课程描述\" width=\"240\" />\n          <el-table-column prop=\"periods\" label=\"课时\" width=\"180\" />\n          <el-table-column prop=\"teacher\" label=\"任课教师\" />\n          <el-table-column label=\"操作\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"selectCourse(scope.row)\"\n                >选课</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  teacher: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 5,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n});\n\nconst load = () => {\n  request\n    .get(\"/course/selectPage\", {\n      params: {\n        pageNum: data.pageNum,\n        pageSize: data.pageSize,\n        name: data.name,\n        number: data.number,\n        teacher: data.teacher,\n      },\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取课程数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  data.teacher = \"\";\n  load();\n};\n\nconst selectCourse = (row) => {\n  request\n    .post(\"/studentCourse/add\", {\n      studentId: data.user.id,\n      name: row.name,\n      number: row.number,\n      courseId: row.id,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"选课成功\");\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"student\",\n          name: \"Student\",\n          component: () => import(\"@/views/manager/Student.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"person\",\n          name: \"Person\",\n          component: () => import(\"@/views/manager/Person.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"courseList\",\n          name: \"CourseList\",\n          component: () => import(\"@/views/manager/CourseList.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          :src=\"\n            user.avatar ||\n            'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'\n          \"\n          alt=\"\"\n          style=\"width: 40px; height: 40px; border-radius: 50%\"\n        />\n        <span style=\"margin-left: 5px\">{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\" v-if=\"user.role === 'ADMIN'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n            <el-menu-item index=\"/courseList\" v-if=\"user.role === 'STUDENT'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>学生选课</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\" v-if=\"user.role === 'STUDENT'\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710663024513-c0ac7ae4-706a-47b6-85cc-4056c92c95a7.png)\n\n## 后端\n\n### 选课实体类定义\n\n在项目目录`/model`下创建一个`studentCourse.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom model import Base\nfrom model.student import Student\n\n\nclass StudentCourse(Base):\n    __tablename__ = \"student_course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, nullable=False)\n```\n\n### 学生选课\n\n接着实现学生选课的 api 部分，在`/api`下创建一个`studentCourseApi.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import APIRouter, Depends\n\nfrom api import app\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.studentCourse import StudentCourseCreate\nfrom service.studentCourseService import StudentCourseService\n\nstudent_course_router = APIRouter(prefix=\"/studentCourse\")\n\n\n@student_course_router.post(\"/add\", response_model=ResultModel)\nasync def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)):\n    StudentCourseService.add_student_course(student_course, db_session)\n    return Result.success()\n\n\napp.include_router(student_course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler, courseApi, studentApi, fileApi, studentCourseApi\n```\n\n在`/servie`下创建一个`studentCourseService.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_\n\nfrom common.utils import set_attrs\nfrom exception.customException import StudentCourseExistException\nfrom model import Session\nfrom model.studentCourse import StudentCourseCreate, StudentCourse\n\n\nclass StudentCourseService:\n\n    @staticmethod\n    def add_student_course(student_course: StudentCourseCreate, db_session: Session):\n        query = select(StudentCourse).where(\n            and_(StudentCourse.studentId == student_course.studentId,\n                 StudentCourse.courseId == student_course.courseId))\n        exist_student_course: StudentCourse = db_session.execute(query).scalar()\n        if exist_student_course:\n            raise StudentCourseExistException(\"课程已选过\")\n        new_student_course = StudentCourse()\n        set_attrs(new_student_course, jsonable_encoder(student_course))\n        db_session.add(new_student_course)\n        db_session.commit()\n        return new_student_course\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom model import Base\nfrom model.student import Student\n\n\nclass StudentCourse(Base):\n    __tablename__ = \"student_course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, nullable=False)\n\n\n\nclass StudentCourseBase(BaseModel):\n    name: str\n    number: str\n    studentId: int\n    courseId: int\n\n\nclass StudentCourseCreate(StudentCourseBase):\n    pass\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass UserExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass FileNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass StudentCourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\\n    StudentCourseExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserExistException)\nasync def user_exist_exception_handler(request: Request, exc: UserExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(FileNotFoundException)\nasync def file_not_found_exception_handler(request: Request, exc: FileNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(StudentCourseExistException)\nasync def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710664237416-830483ff-a709-499c-9d8f-f2f60a902e86.png)\n\n查看数据库有无数据插入\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710664237390-1da0ccbf-e229-4afe-87a8-487bff6f3074.png)\n\n## 管理员/学生查看已选课程\n\n这个需要做到：\n\n- 学生只看自己的\n- 管理员看全部的\n\n### 前端\n\n学生选课页面，将`CourseList.vue`复制粘贴一下作为`StudentCourse.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    name: data.name,\n    number: data.number,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/studentCourse/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  load();\n};\n\nconst del = (id) => {};\n</script>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"student\",\n          name: \"Student\",\n          component: () => import(\"@/views/manager/Student.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"person\",\n          name: \"Person\",\n          component: () => import(\"@/views/manager/Person.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"courseList\",\n          name: \"CourseList\",\n          component: () => import(\"@/views/manager/CourseList.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"studentCourse\",\n          name: \"StudentCourse\",\n          component: () => import(\"@/views/manager/StudentCourse.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          :src=\"\n            user.avatar ||\n            'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'\n          \"\n          alt=\"\"\n          style=\"width: 40px; height: 40px; border-radius: 50%\"\n        />\n        <span style=\"margin-left: 5px\">{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\" v-if=\"user.role === 'ADMIN'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n            <el-menu-item index=\"/courseList\" v-if=\"user.role === 'STUDENT'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>学生选课</span>\n            </el-menu-item>\n            <el-menu-item index=\"/studentCourse\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>选课记录</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\" v-if=\"user.role === 'STUDENT'\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.studentCourse import StudentCourseCreate, StudentCourseSearch\nfrom service.studentCourseService import StudentCourseService\n\nstudent_course_router = APIRouter(prefix=\"/studentCourse\")\n\n\n@student_course_router.post(\"/add\", response_model=ResultModel)\nasync def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)):\n    StudentCourseService.add_student_course(student_course, db_session)\n    return Result.success()\n\n\n@student_course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Student name\"),\n                      number: Optional[str] = Query(None, description=\"Student number\"),\n                      studentId: Optional[str] = Query(None, description=\"Student id\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    student_course_search = StudentCourseSearch(name=name, number=number, studentId=studentId)\n    student_list = StudentCourseService.select_page(student_course_search, db_session)\n    return Result.success(pageInfo.of(student_list))\n\n\napp.include_router(student_course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_, asc\n\nfrom common.utils import set_attrs\nfrom exception.customException import StudentCourseExistException\nfrom model import Session\nfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearch\n\n\nclass StudentCourseService:\n\n    @staticmethod\n    def add_student_course(student_course: StudentCourseCreate, db_session: Session):\n        query = select(StudentCourse).where(\n            and_(StudentCourse.studentId == student_course.studentId,\n                 StudentCourse.courseId == student_course.courseId))\n        exist_student_course: StudentCourse = db_session.execute(query).scalar()\n        if exist_student_course:\n            raise StudentCourseExistException(\"课程已选过\")\n        new_student_course = StudentCourse()\n        set_attrs(new_student_course, jsonable_encoder(student_course))\n        db_session.add(new_student_course)\n        db_session.commit()\n        return new_student_course\n\n    @staticmethod\n    def select_page(student_course_search: StudentCourseSearch, db_session: Session):\n        query = select(StudentCourse).order_by(asc(StudentCourse.id))\n        if student_course_search.name:\n            query = query.where(StudentCourse.name.like(f\"%{student_course_search.name}%\"))\n        if student_course_search.number:\n            query = query.where(StudentCourse.number.like(f\"%{student_course_search.number}%\"))\n        if student_course_search.studentId:\n            query = query.where(StudentCourse.studentId == student_course_search.studentId)\n        result = db_session.execute(query).scalars().all()\n        return result\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\nfrom model.student import Student\n\n\nclass StudentCourse(Base):\n    __tablename__ = \"student_course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, nullable=False)\n\n\n\nclass StudentCourseBase(BaseModel):\n    name: str\n    number: str\n    studentId: int\n    courseId: int\n\n\nclass StudentCourseCreate(StudentCourseBase):\n    pass\n\n\nclass StudentCourseSearch(BaseModel):\n    name: str | None\n    number: str | None\n    studentId: int | None\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710665807707-fc4d3521-f29e-4877-84af-54403312cd59.png)\n\n从学生用户这里来看是挺好的，但是如果，多插入几个学生选课\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710665844621-a038df5d-50fd-4645-83c4-baa6528d179c.png)\n\n从管理员的角度来看是这样的，并不能直接看出是哪位学生选了这门课\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710665872322-80597b11-2899-4281-991d-8ad3e6be1187.png)\n\n### 修改\n\n我们给显示选课记录的这个表格，加一列`学生姓名`\n\n学生选课表就需要追加一个表的关联，去关联一下学生表获取学生姓名\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom model import Base\nfrom model.student import Student\n\n\nclass StudentCourse(Base):\n    __tablename__ = \"student_course\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(255), nullable=False)\n    number: Mapped[str] = mapped_column(String(255), nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, ForeignKey('student.id'), nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, nullable=False)\n\n    student: Mapped[Student] = relationship(lazy=False, backref=\"student_course\")\n\n\nclass StudentCourseBase(BaseModel):\n    name: str\n    number: str\n    studentId: int\n    courseId: int\n\n\nclass StudentCourseCreate(StudentCourseBase):\n    pass\n\n\nclass StudentCourseSearch(BaseModel):\n    name: str | None\n    number: str | None\n    studentId: int | None\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_, asc\n\nfrom common.utils import set_attrs\nfrom exception.customException import StudentCourseExistException\nfrom model import Session\nfrom model.student import Student\nfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearch\n\n\nclass StudentCourseService:\n\n    @staticmethod\n    def add_student_course(student_course: StudentCourseCreate, db_session: Session):\n        query = select(StudentCourse).where(\n            and_(StudentCourse.studentId == student_course.studentId,\n                 StudentCourse.courseId == student_course.courseId))\n        exist_student_course: StudentCourse = db_session.execute(query).scalar()\n        if exist_student_course:\n            raise StudentCourseExistException(\"课程已选过\")\n        new_student_course = StudentCourse()\n        set_attrs(new_student_course, jsonable_encoder(student_course))\n        db_session.add(new_student_course)\n        db_session.commit()\n        return new_student_course\n\n    @staticmethod\n    def select_page(student_course_search: StudentCourseSearch, db_session: Session):\n        query = select(StudentCourse, Student).join(StudentCourse.student).order_by(asc(StudentCourse.id))\n        if student_course_search.name:\n            query = query.where(StudentCourse.name.like(f\"%{student_course_search.name}%\"))\n        if student_course_search.number:\n            query = query.where(StudentCourse.number.like(f\"%{student_course_search.number}%\"))\n        if student_course_search.studentId:\n            query = query.where(StudentCourse.studentId == student_course_search.studentId)\n        result = db_session.execute(query).scalars().all()\n        return result\n```\n\n然后给前端这块 数据显示加一列，同时得是管理员的时候才显示这么一列\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    name: data.name,\n    number: data.number,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/studentCourse/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  load();\n};\n\nconst del = (id) => {};\n</script>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710666586302-ce81afa4-106c-421b-8862-bb589eabdc2b.png)\n\n## 学生选课删除\n\n现在实现删除学生所选课程\n\n### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    name: data.name,\n    number: data.number,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/studentCourse/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  load();\n};\n\nconst del = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/studentCourse/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"操作成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.studentCourse import StudentCourseCreate, StudentCourseSearch\nfrom service.studentCourseService import StudentCourseService\n\nstudent_course_router = APIRouter(prefix=\"/studentCourse\")\n\n\n@student_course_router.post(\"/add\", response_model=ResultModel)\nasync def add(student_course: StudentCourseCreate, db_session: Session = Depends(get_db_session)):\n    StudentCourseService.add_student_course(student_course, db_session)\n    return Result.success()\n\n\n@student_course_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      name: Optional[str] = Query(None, description=\"Student name\"),\n                      number: Optional[str] = Query(None, description=\"Student number\"),\n                      studentId: Optional[str] = Query(None, description=\"Student id\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    student_course_search = StudentCourseSearch(name=name, number=number, studentId=studentId)\n    student_list = StudentCourseService.select_page(student_course_search, db_session)\n    return Result.success(pageInfo.of(student_list))\n\n\n@student_course_router.delete(\"/delete/{id}\", response_model=ResultModel)\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    StudentCourseService.delete_by_id(id, db_session)\n    return Result.success()\n\n\napp.include_router(student_course_router)\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_, asc\n\nfrom common.utils import set_attrs\nfrom exception.customException import StudentCourseExistException\nfrom model import Session\nfrom model.student import Student\nfrom model.studentCourse import StudentCourseCreate, StudentCourse, StudentCourseSearch\n\n\nclass StudentCourseService:\n\n    @staticmethod\n    def add_student_course(student_course: StudentCourseCreate, db_session: Session):\n        query = select(StudentCourse).where(\n            and_(StudentCourse.studentId == student_course.studentId,\n                 StudentCourse.courseId == student_course.courseId))\n        exist_student_course: StudentCourse = db_session.execute(query).scalar()\n        if exist_student_course:\n            raise StudentCourseExistException(\"课程已选过\")\n        new_student_course = StudentCourse()\n        set_attrs(new_student_course, jsonable_encoder(student_course))\n        db_session.add(new_student_course)\n        db_session.commit()\n        return new_student_course\n\n    @staticmethod\n    def select_page(student_course_search: StudentCourseSearch, db_session: Session):\n        query = select(StudentCourse, Student).join(StudentCourse.student).order_by(asc(StudentCourse.id))\n        if student_course_search.name:\n            query = query.where(StudentCourse.name.like(f\"%{student_course_search.name}%\"))\n        if student_course_search.number:\n            query = query.where(StudentCourse.number.like(f\"%{student_course_search.number}%\"))\n        if student_course_search.studentId:\n            query = query.where(StudentCourse.studentId == student_course_search.studentId)\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def delete_by_id(id, db_session):\n        exist_student_course: StudentCourse = check_student_course_exist(id, db_session)\n        db_session.delete(exist_student_course)\n        db_session.commit()\n        return exist_student_course\n\n\ndef check_student_course_exist(student_course_id: int, db_session: Session):\n    query = select(StudentCourse).where(StudentCourse.id == student_course_id)\n    exist_student_course: StudentCourse = db_session.execute(query).scalar()\n    if not exist_student_course:\n        raise StudentCourseNotExistException(\"选课记录不存在\")\n    return exist_student_course\n```\n\n这种写法很冗余，大家自己想想可以怎么优化，我就不改了，或者后面有空改\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass UserExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass FileNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass StudentCourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass StudentCourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\\n    StudentCourseExistException, StudentCourseNotExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserExistException)\nasync def user_exist_exception_handler(request: Request, exc: UserExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(FileNotFoundException)\nasync def file_not_found_exception_handler(request: Request, exc: FileNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(StudentCourseExistException)\nasync def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(StudentCourseNotExistException)\nasync def student_course_not_exist_exception_handler(request: Request, exc: StudentCourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n```\n\n### 测试\n\n管理员删除\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710667558071-b682345f-f090-48e5-9525-c8457b288a29.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710667586667-08596238-c09f-4451-87ab-d7e2916f3641.png)\n\n学生自己删除\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710667608790-265986c5-0fc2-436f-b690-f6c20b7fd3ce.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710667626926-b7a0eb77-cc59-47cb-a367-70740cd6d6a1.png)\n\n---\n\n# 学生成绩管理\n\n## 成绩表设计\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710672515547-06744996-10e2-4629-895f-049353a26c84.png)\n\n## 管理员课程打分\n\n### 前端\n\n添加课程打分弹窗\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.name\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.number\"\n        placeholder=\"请输入课程编号\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"name\" label=\"课程名称\" />\n          <el-table-column prop=\"number\" label=\"课程编号\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"addGrade(scope.row)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >评分\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                >删除</el-button\n              >\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <!--    评分表单-->\n    <el-dialog v-model=\"data.formVisible\" title=\"成绩信息\" width=\"35%\">\n      <el-form\n        :model=\"data.gradeForm\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 40px\"\n      >\n        <el-form-item label=\"课程名称\">\n          <el-input v-model=\"data.gradeForm.name\" autocomplete=\"off\" disabled />\n        </el-form-item>\n        <el-form-item label=\"分数\">\n          <el-input v-model=\"data.gradeForm.score\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"评语\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.gradeForm.comment\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button plain @click=\"data.formVisible = false\">取消</el-button>\n          <el-button type=\"primary\" plain @click=\"save\">保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  name: \"\",\n  number: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n  gradeForm: {},\n  formVisible: false,\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    name: data.name,\n    number: data.number,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/studentCourse/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.name = \"\";\n  data.number = \"\";\n  load();\n};\n\nconst del = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/studentCourse/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"操作成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 打分函数，弹窗\nconst addGrade = (row) => {\n  // 弹窗\n  data.formVisible = true;\n  data.gradeForm.name = row.name;\n  data.gradeForm.studentId = row.studentId;\n  data.gradeForm.courseId = row.courseId;\n  data.gradeForm.score = \"\";\n  data.gradeForm.comment = \"\";\n};\n\nconst save = () => {\n  request\n    .post(\"/grade/add\", data.gradeForm)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n### 后端\n\n依次创建上：`gradeApi.py`、`gradeService.py`、`grade.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi import APIRouter, Depends\n\nfrom api import app\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.grade import GradeCreate\nfrom service.gradeService import GradeService\n\ngrade_router = APIRouter(prefix=\"/grade\")\n\n\n@grade_router.post(\"/add\", response_model=ResultModel)\nasync def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)):\n    GradeService.add_grade(grade, db_session)\n    return Result.success()\n\n\napp.include_router(grade_router)\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# 跨域问题\norigins = [\"http://localhost:5173\", \"http://127.0.0.1:5173\"]  # 替换为你的前端应用的实际地址\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # 允许跨域访问的来源域名列表\n    allow_credentials=True,  # 是否允许携带cookie\n    allow_methods=[\"*\"],  # 允许的方法，默认包含常见的GET、POST等，\"*\"表示所有方法\n    allow_headers=[\"*\"],  # 允许的请求头，默认包含常见的Content-Type等，\"*\"表示所有请求头\n)\n\nfrom api import adminApi, exceptionHandler, courseApi, studentApi, fileApi, studentCourseApi, gradeApi\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_\n\nfrom common.utils import set_attrs\nfrom exception.customException import GradeExistException\nfrom model import Session\nfrom model.grade import GradeCreate, Grade\n\n\nclass GradeService:\n\n    @staticmethod\n    def add_grade(grade: GradeCreate, db_session: Session):\n        query = select(Grade).where(\n            and_(Grade.studentId == grade.studentId,\n                 Grade.courseId == grade.courseId))\n        exist_grade: Grade = db_session.execute(query).scalar()\n        if exist_grade:\n            raise GradeExistException(\"课程已打分\")\n        new_grade = Grade()\n        set_attrs(new_grade, jsonable_encoder(grade))\n        db_session.add(new_grade)\n        db_session.commit()\n        return new_grade\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, Double, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom model import Base\nfrom model.course import Course\nfrom model.student import Student\n\n\nclass Grade(Base):\n    __tablename__ = \"grade\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, nullable=False)\n    score: Mapped[str] = mapped_column(Double, nullable=False)\n    comment: Mapped[str] = mapped_column(String(255), nullable=False)\n    feedback: Mapped[str] = mapped_column(String(255), nullable=False)\n\n\n\nclass GradeBase(BaseModel):\n    courseId: int\n    studentId: int\n    score: Optional[float] = None\n    comment: Optional[str] = None\n    feedback: Optional[str] = None\n\n\nclass GradeCreate(GradeBase):\n    pass\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nclass UserNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass UserExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass PasswordNotMatchException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass TokenException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass CourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass FileNotFoundException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass StudentCourseExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass StudentCourseNotExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n\n\nclass GradeExistException(Exception):\n    def __init__(self, message: str):\n        self.message = message\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import JSONResponse\n\nfrom api import app\nfrom fastapi import Request\n\nfrom common.result import Result\nfrom exception.customException import UserNotFoundException, PasswordNotMatchException, TokenException, \\\n    CourseExistException, CourseNotExistException, UserExistException, FileNotFoundException, \\\n    StudentCourseExistException, StudentCourseNotExistException, GradeExistException\n\n\n@app.exception_handler(Exception)\nasync def exception_handler(request: Request, exc: Exception):\n    result = Result.error(code=\"500\", msg=str(exc))\n    return JSONResponse(status_code=500, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_fount_exception_handler(request: Request, exc: UserNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(PasswordNotMatchException)\nasync def password_not_fount_exception_handler(request: Request, exc: PasswordNotMatchException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(TokenException)\nasync def token_exception_handler(request: Request, exc: TokenException):\n    result = Result.error(code=\"401\", msg=exc.message)\n    return JSONResponse(status_code=401, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseExistException)\nasync def course_exist_exception_handler(request: Request, exc: CourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(CourseNotExistException)\nasync def course_not_exist_exception_handler(request: Request, exc: CourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(UserExistException)\nasync def user_exist_exception_handler(request: Request, exc: UserExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(FileNotFoundException)\nasync def file_not_found_exception_handler(request: Request, exc: FileNotFoundException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(StudentCourseExistException)\nasync def student_course_exist_exception_handler(request: Request, exc: StudentCourseExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n\n@app.exception_handler(StudentCourseNotExistException)\nasync def student_course_not_exist_exception_handler(request: Request, exc: StudentCourseNotExistException):\n    result = Result.error(code=\"404\", msg=exc.message)\n    return JSONResponse(status_code=404, content=jsonable_encoder(result))\n\n\n@app.exception_handler(GradeExistException)\nasync def grade_exist_exception_handler(request: Request, exc: GradeExistException):\n    result = Result.error(code=\"400\", msg=exc.message)\n    return JSONResponse(status_code=400, content=jsonable_encoder(result))\n\n```\n\n### 测试\n\n管理员评分\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710675251367-8006657d-70b1-4466-827e-8b6b2224e83d.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710675277634-bae53b43-899d-4c13-bbdf-6618caaf77c6.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710675286983-171e5613-910d-43d8-ab55-d340d24eda54.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710675316480-e70f1dc4-2dc2-4d27-8587-9c41b08b2f95.png)\n\n## 显示课程分数\n\n### 前端\n\n复制`StudentCourse.vue`重命名为`Grade.vue`\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.courseName\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.studentName\"\n        placeholder=\"请输入要查询的学生名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"course.name\" label=\"课程名称\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column prop=\"score\" label=\"成绩\" />\n          <el-table-column prop=\"comment\" label=\"教师评语\" />\n          <el-table-column prop=\"feedback\" label=\"学生评价\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >删除\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"setFeedback(scope.row)\"\n                v-if=\"data.user.role === 'STUDENT'\"\n                >评价\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <!--    评分表单-->\n    <el-dialog v-model=\"data.formVisible\" title=\"反馈信息\" width=\"35%\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 40px\"\n      >\n        <el-form-item label=\"反馈\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.form.feedback\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button plain @click=\"data.formVisible = false\">取消</el-button>\n          <el-button type=\"primary\" plain @click=\"save\">保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  form: {},\n  courseName: \"\",\n  studentName: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n  formVisible: false,\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    courseName: data.courseName,\n    studentName: data.studentName,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/grade/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.courseName = \"\";\n  data.studentName = \"\";\n  load();\n};\n\nconst del = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/studentCourse/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"操作成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 打分\nconst setFeedback = (row) => {\n  // 弹窗\n  data.formVisible = true;\n  data.form = JSON.parse(JSON.stringify(row));\n};\n\nconst save = () => {\n  request\n    .post(\"/grade/update\", data.form)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n```javascript\nimport { createRouter, createWebHistory } from \"vue-router\";\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: \"/\",\n      name: \"Manager\",\n      component: () => import(\"@/views/Manager.vue\"),\n      redirect: \"/home\",\n      children: [\n        {\n          path: \"home\",\n          name: \"Home\",\n          component: () => import(\"@/views/manager/Home.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"course\",\n          name: \"Course\",\n          component: () => import(\"@/views/manager/Course.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"student\",\n          name: \"Student\",\n          component: () => import(\"@/views/manager/Student.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"person\",\n          name: \"Person\",\n          component: () => import(\"@/views/manager/Person.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"courseList\",\n          name: \"CourseList\",\n          component: () => import(\"@/views/manager/CourseList.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"studentCourse\",\n          name: \"StudentCourse\",\n          component: () => import(\"@/views/manager/StudentCourse.vue\"),\n          meta: { requiresAuth: true },\n        },\n        {\n          path: \"grade\",\n          name: \"Grade\",\n          component: () => import(\"@/views/manager/Grade.vue\"),\n          meta: { requiresAuth: true },\n        },\n      ],\n    },\n    {\n      path: \"/login\",\n      name: \"Login\",\n      component: () => import(\"@/views/Login.vue\"),\n    },\n    {\n      path: \"/register\",\n      name: \"Register\",\n      component: () => import(\"@/views/Register.vue\"),\n    },\n  ],\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const user = JSON.parse(localStorage.getItem(\"student-user\"));\n  if (requiresAuth && !user) {\n    // 如果目标路由需要认证,并且用户未登录\n    next(\"/login\"); // 跳转到登录页面\n  } else {\n    next(); // 如果目标路由不需要认证,或者用户已登录,则正常导航到目标路由\n  }\n});\n\nexport default router;\n```\n\n```vue\n<template>\n  <div>\n    <div\n      style=\"height: 60px; background-color: #eae8e8; display: flex; align-items: center; border-bottom: 1px solid #c4c2c2\"\n    >\n      <div style=\"flex: 1\">\n        <div style=\"padding-left: 20px; display: flex; align-items: center\">\n          <img src=\"@/assets/imgs/logo.png\" alt=\"\" style=\"width: 40px\" />\n          <div style=\"font-weight: bold; font-size: 24px; margin-left: 5px\">\n            学生信息管理系统\n          </div>\n        </div>\n      </div>\n      <div\n        style=\"width: fit-content; padding-right: 10px; display: flex; align-items: center;\"\n      >\n        <img\n          :src=\"\n            user.avatar ||\n            'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'\n          \"\n          alt=\"\"\n          style=\"width: 40px; height: 40px; border-radius: 50%\"\n        />\n        <span style=\"margin-left: 5px\">{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div style=\"display: flex\">\n      <div\n        style=\"width: 200px; border-right: 1px solid #f3eeee; min-height: calc(100vh - 60px)\"\n      >\n        <el-menu\n          router\n          style=\"border: none\"\n          :default-active=\"$route.path\"\n          :default-openeds=\"['/home', '2', '3', '4']\"\n        >\n          <el-menu-item index=\"/home\">\n            <el-icon>\n              <HomeFilled />\n            </el-icon>\n            <span>系统首页</span>\n          </el-menu-item>\n\n          <el-sub-menu index=\"2\" v-if=\"user.role === 'ADMIN'\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>学生管理</span>\n            </template>\n            <el-menu-item index=\"/student\">\n              <el-icon>\n                <UserFilled />\n              </el-icon>\n              <span>学生信息</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"3\">\n            <template #title>\n              <el-icon>\n                <Memo />\n              </el-icon>\n              <span>课程管理</span>\n            </template>\n            <el-menu-item index=\"/course\" v-if=\"user.role === 'ADMIN'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>课程信息</span>\n            </el-menu-item>\n            <el-menu-item index=\"/courseList\" v-if=\"user.role === 'STUDENT'\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>学生选课</span>\n            </el-menu-item>\n            <el-menu-item index=\"/studentCourse\">\n              <el-icon>\n                <Document />\n              </el-icon>\n              <span>选课记录</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-sub-menu index=\"4\">\n            <template #title>\n              <el-icon>\n                <Management />\n              </el-icon>\n              <span>成绩信息</span>\n            </template>\n            <el-menu-item index=\"/grade\">\n              <el-icon>\n                <List />\n              </el-icon>\n              <span>学生成绩</span>\n            </el-menu-item>\n          </el-sub-menu>\n\n          <el-menu-item index=\"/person\" v-if=\"user.role === 'STUDENT'\">\n            <el-icon>\n              <User />\n            </el-icon>\n            <span>个人资料</span>\n          </el-menu-item>\n          <el-menu-item index=\"/login\" @click=\"logout\">\n            <el-icon>\n              <SwitchButton />\n            </el-icon>\n            <span>退出系统</span>\n          </el-menu-item>\n        </el-menu>\n      </div>\n\n      <div style=\"flex: 1; width: 0; background-color: #eaeaee; padding: 10px\">\n        <router-view />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute } from \"vue-router\";\n\nconst $route = useRoute();\nconsole.log($route.path);\n\nconst logout = () => {\n  localStorage.removeItem(\"student-user\");\n};\n\nconst user = JSON.parse(localStorage.getItem(\"student-user\") || \"{}\");\n</script>\n\n<style scoped>\n.el-menu-item.is-active {\n  background-color: #c3d7d3 !important;\n}\n\n.el-menu-item:hover {\n  color: #0c98d5;\n}\n\n:deep(th) {\n  color: #333;\n}\n</style>\n```\n\n### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.grade import GradeCreate, GradeSearch, GradeUpdate\nfrom service.gradeService import GradeService\n\ngrade_router = APIRouter(prefix=\"/grade\")\n\n\n@grade_router.post(\"/add\", response_model=ResultModel)\nasync def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)):\n    GradeService.add_grade(grade, db_session)\n    return Result.success()\n\n\n@grade_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      studentName: Optional[str] = Query(None, description=\"Student name\"),\n                      courseName: Optional[str] = Query(None, description=\"Course name\"),\n                      studentId: Optional[str] = Query(None, description=\"Student id\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    grade_search: GradeSearch = GradeSearch(studentName=studentName, courseName=courseName, studentId=studentId)\n    grade_list = GradeService.select_page(grade_search, db_session)\n    return Result.success(pageInfo.of(grade_list))\n\n\n@grade_router.put(\"/update\", response_model=ResultModel)\nasync def update(grade: GradeUpdate, db_session: Session = Depends(get_db_session)):\n    GradeService.update_by_id(grade, db_session)\n    return Result.success()\n\n\napp.include_router(grade_router)\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_, asc\n\nfrom common.utils import set_attrs\nfrom exception.customException import GradeExistException\nfrom model import Session\nfrom model.course import Course\nfrom model.grade import GradeCreate, Grade, GradeSearch, GradeUpdate\nfrom model.student import Student\n\n\nclass GradeService:\n\n    @staticmethod\n    def add_grade(grade: GradeCreate, db_session: Session):\n        query = select(Grade).where(\n            and_(Grade.studentId == grade.studentId,\n                 Grade.courseId == grade.courseId))\n        exist_grade: Grade = db_session.execute(query).scalar()\n        if exist_grade:\n            raise GradeExistException(\"课程已打分\")\n        new_grade = Grade()\n        set_attrs(new_grade, jsonable_encoder(grade))\n        db_session.add(new_grade)\n        db_session.commit()\n        return new_grade\n\n    @staticmethod\n    def select_page(grade_search: GradeSearch, db_session: Session):\n        query = select(Grade, Student, Course).outerjoin(Grade.student).outerjoin(Grade.course).order_by(asc(Grade.id))\n        if grade_search.courseName:\n            query = query.where(Course.name.like(f\"%{grade_search.courseName}%\"))\n        if grade_search.studentName:\n            query = query.where(Student.name.like(f\"%{grade_search.studentName}%\"))\n        if grade_search.studentId:\n            query = query.where(Grade.studentId == grade_search.studentId)\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def update_by_id(grade: GradeUpdate, db_session: Session):\n        exist_grade: Grade = check_grade_exist(grade.id, db_session)\n        set_attrs(exist_grade, jsonable_encoder(grade))\n        db_session.commit()\n        return exist_grade\n\n\ndef check_grade_exist(grade_id: int, db_session: Session):\n    query = select(Grade).where(Grade.id == grade_id)\n    exist_grade: Grade = db_session.execute(query).scalar()\n    if not exist_grade:\n        raise GradeExistException(\"成绩记录不存在\")\n    return exist_grade\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom pydantic import BaseModel\nfrom sqlalchemy import Integer, Double, ForeignKey, String\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom model import Base\nfrom model.course import Course\nfrom model.student import Student\n\n\nclass Grade(Base):\n    __tablename__ = \"grade\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)\n    courseId: Mapped[int] = mapped_column(\"course_id\", Integer, ForeignKey('course.id'), nullable=False)\n    studentId: Mapped[int] = mapped_column(\"student_id\", Integer, ForeignKey('student.id'), nullable=False)\n    score: Mapped[str] = mapped_column(Double, nullable=False)\n    comment: Mapped[str] = mapped_column(String(255), nullable=False)\n    feedback: Mapped[str] = mapped_column(String(255), nullable=False)\n\n    student: Mapped[Student] = relationship(lazy=False, backref=\"grade\")\n    course: Mapped[Course] = relationship(lazy=False, backref=\"grade\")\n\n\nclass GradeBase(BaseModel):\n    courseId: int\n    studentId: int\n    score: Optional[float] = None\n    comment: Optional[str] = None\n    feedback: Optional[str] = None\n\n\nclass GradeCreate(GradeBase):\n    pass\n\n\nclass GradeSearch(BaseModel):\n    courseName: str | None\n    studentName: str | None\n    studentId: str | None\n\n\nclass GradeUpdate(GradeBase):\n    id: int\n\n```\n\n### 测试\n\n管理员\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710677201407-3b1dcc5f-5d41-482a-8a92-00848a7df6fa.png)\n\n## 课程分数编辑\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.courseName\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.studentName\"\n        placeholder=\"请输入要查询的学生名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"course.name\" label=\"课程名称\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column prop=\"score\" label=\"成绩\" />\n          <el-table-column prop=\"comment\" label=\"教师评语\" />\n          <el-table-column prop=\"feedback\" label=\"学生评价\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >编辑\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >删除\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                v-if=\"data.user.role === 'STUDENT'\"\n                >评价\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <!--    评分表单-->\n    <el-dialog v-model=\"data.formVisible\" title=\"反馈信息\" width=\"35%\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 40px\"\n      >\n        <el-form-item label=\"分数\" v-if=\"data.user.role === 'ADMIN'\">\n          <el-input v-model=\"data.form.score\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"教师评语\" v-if=\"data.user.role === 'ADMIN'\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.form.comment\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n        <el-form-item label=\"学生评价\" v-if=\"data.user.role === 'STUDENT'\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.form.feedback\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button plain @click=\"data.formVisible = false\">取消</el-button>\n          <el-button type=\"primary\" plain @click=\"save\">保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  form: {},\n  courseName: \"\",\n  studentName: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n  formVisible: false,\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    courseName: data.courseName,\n    studentName: data.studentName,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/grade/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.courseName = \"\";\n  data.studentName = \"\";\n  load();\n};\n\nconst del = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/studentCourse/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"操作成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 打分\nconst handleEdit = (row) => {\n  // 弹窗\n  data.formVisible = true;\n  data.form = JSON.parse(JSON.stringify(row));\n};\n\nconst save = () => {\n  request\n    .post(\"/grade/update\", data.form)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n学生：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710677951814-7b1991b2-8113-4f85-963c-d8387ba996b0.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710677959948-2638843d-3be8-468b-ac69-340f5748173f.png)\n\n管理员：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710678028780-780c5ab0-4be8-4d3e-86b7-64dcad143cb9.png)![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710678035811-c86a8508-8c75-48cb-b543-767be4bcc735.png)\n\n## 课程分数删除\n\n### 前端\n\n```vue\n<template>\n  <div>\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <el-input\n        @input=\"load\"\n        style=\"width: 260px\"\n        v-model=\"data.courseName\"\n        placeholder=\"请输入要查询的课程名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-input\n        @input=\"load\"\n        style=\"margin-left:10px; width: 260px\"\n        v-model=\"data.studentName\"\n        placeholder=\"请输入要查询的学生名称\"\n        :prefix-icon=\"Search\"\n      />\n      <el-button type=\"info\" plain style=\"margin: 0 0 0 10px\" @click=\"reset\"\n        >重置</el-button\n      >\n    </div>\n\n    <div class=\"card\" style=\"margin-bottom: 10px\">\n      <div>\n        <el-table :data=\"data.tableData\" stripe style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"ID\" />\n          <el-table-column prop=\"course.name\" label=\"课程名称\" />\n          <el-table-column prop=\"student.name\" label=\"学生名称\" />\n          <el-table-column prop=\"score\" label=\"成绩\" />\n          <el-table-column prop=\"comment\" label=\"教师评语\" />\n          <el-table-column prop=\"feedback\" label=\"学生评价\" />\n          <el-table-column label=\"操作\" align=\"center\" width=\"180px\">\n            <template #default=\"scope\">\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >编辑\n              </el-button>\n              <el-button\n                type=\"danger\"\n                size=\"small\"\n                plain\n                @click=\"del(scope.row.id)\"\n                v-if=\"data.user.role === 'ADMIN'\"\n                >删除\n              </el-button>\n              <el-button\n                type=\"primary\"\n                size=\"small\"\n                plain\n                @click=\"handleEdit(scope.row)\"\n                v-if=\"data.user.role === 'STUDENT'\"\n                >评价\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <el-pagination\n        v-model:current-page=\"data.pageNum\"\n        v-model:page-size=\"data.pageSize\"\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"data.total\"\n      />\n    </div>\n\n    <!--    评分表单-->\n    <el-dialog v-model=\"data.formVisible\" title=\"反馈信息\" width=\"35%\">\n      <el-form\n        :model=\"data.form\"\n        label-width=\"100px\"\n        label-position=\"right\"\n        style=\"padding-right: 40px\"\n      >\n        <el-form-item label=\"分数\" v-if=\"data.user.role === 'ADMIN'\">\n          <el-input v-model=\"data.form.score\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"教师评语\" v-if=\"data.user.role === 'ADMIN'\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.form.comment\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n        <el-form-item label=\"学生评价\" v-if=\"data.user.role === 'STUDENT'\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"data.form.feedback\"\n            autocomplete=\"off\"\n          />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button plain @click=\"data.formVisible = false\">取消</el-button>\n          <el-button type=\"primary\" plain @click=\"save\">保存</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { reactive } from \"vue\";\nimport { Search } from \"@element-plus/icons-vue\";\nimport request from \"@/utils/request\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\nconst data = reactive({\n  form: {},\n  courseName: \"\",\n  studentName: \"\",\n  tableData: [],\n  total: 0,\n  pageNum: 1,\n  pageSize: 10,\n  user: JSON.parse(localStorage.getItem(\"student-user\") || \"{}\"),\n  formVisible: false,\n});\n\nconst load = () => {\n  let params = {\n    pageNum: data.pageNum,\n    pageSize: data.pageSize,\n    courseName: data.courseName,\n    studentName: data.studentName,\n  };\n  if (data.user.role === \"STUDENT\") {\n    params.studentId = data.user.id;\n  }\n\n  request\n    .get(\"/grade/selectPage\", {\n      params: params,\n    })\n    .then((res) => {\n      if (res.code === \"200\") {\n        data.tableData = res.data?.list || [];\n        data.total = res.data?.total || 0;\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 加载一次 获取学生选课数据\nload();\n\nconst handleCurrentChange = () => {\n  // 当翻页的时候重新加载数据\n  load();\n};\n\nconst reset = () => {\n  data.courseName = \"\";\n  data.studentName = \"\";\n  load();\n};\n\nconst del = (id) => {\n  ElMessageBox.confirm(\"删除后内容将无法恢复，您确认删除嘛？\", \"删除确认\", {\n    type: \"warning\",\n  })\n    .then((res) => {\n      request.delete(\"/grade/delete/\" + id).then((res) => {\n        if (res.code === \"200\") {\n          ElMessage.success(\"操作成功\");\n          load();\n        } else {\n          ElMessage.error(res.msg);\n        }\n      });\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n\n// 打分\nconst handleEdit = (row) => {\n  // 弹窗\n  data.formVisible = true;\n  data.form = JSON.parse(JSON.stringify(row));\n};\n\nconst save = () => {\n  request\n    .put(\"/grade/update\", data.form)\n    .then((res) => {\n      if (res.code === \"200\") {\n        ElMessage.success(\"操作成功\");\n        data.formVisible = false;\n        load();\n      } else {\n        ElMessage.error(res.msg);\n      }\n    })\n    .catch((err) => {\n      if (err.response?.data?.code === \"401\") {\n        localStorage.removeItem(\"student-user\");\n      }\n      ElMessage.error(err.response?.data?.msg || err.message);\n    });\n};\n</script>\n```\n\n### 后端\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom api import app\nfrom common.pageHelper import PageHelper\nfrom common.result import ResultModel, Result\nfrom model import Session, get_db_session\nfrom model.grade import GradeCreate, GradeSearch, GradeUpdate\nfrom service.gradeService import GradeService\n\ngrade_router = APIRouter(prefix=\"/grade\")\n\n\n@grade_router.post(\"/add\", response_model=ResultModel)\nasync def add(grade: GradeCreate, db_session: Session = Depends(get_db_session)):\n    GradeService.add_grade(grade, db_session)\n    return Result.success()\n\n\n@grade_router.get(\"/selectPage\", response_model=ResultModel)\nasync def select_page(page: int = Query(1, ge=1, alias=\"pageNum\", description=\"Page number\"),\n                      size: int = Query(5, gt=0, le=100, alias=\"pageSize\", description=\"Page size\"),\n                      studentName: Optional[str] = Query(None, description=\"Student name\"),\n                      courseName: Optional[str] = Query(None, description=\"Course name\"),\n                      studentId: Optional[str] = Query(None, description=\"Student id\"),\n                      db_session: Session = Depends(get_db_session)):\n    pageInfo = PageHelper.startPage(page, size)\n    grade_search: GradeSearch = GradeSearch(studentName=studentName, courseName=courseName, studentId=studentId)\n    grade_list = GradeService.select_page(grade_search, db_session)\n    return Result.success(pageInfo.of(grade_list))\n\n\n@grade_router.put(\"/update\", response_model=ResultModel)\nasync def update(grade: GradeUpdate, db_session: Session = Depends(get_db_session)):\n    GradeService.update_by_id(grade, db_session)\n    return Result.success()\n\n\n@grade_router.delete(\"/delete/{id}\", response_model=ResultModel)\nasync def delete(id: int, db_session: Session = Depends(get_db_session)):\n    GradeService.delete_by_id(id, db_session)\n    return Result.success()\n\n\napp.include_router(grade_router)\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy import select, and_, asc\n\nfrom common.utils import set_attrs\nfrom exception.customException import GradeExistException\nfrom model import Session\nfrom model.course import Course\nfrom model.grade import GradeCreate, Grade, GradeSearch, GradeUpdate\nfrom model.student import Student\n\n\nclass GradeService:\n\n    @staticmethod\n    def add_grade(grade: GradeCreate, db_session: Session):\n        query = select(Grade).where(\n            and_(Grade.studentId == grade.studentId,\n                 Grade.courseId == grade.courseId))\n        exist_grade: Grade = db_session.execute(query).scalar()\n        if exist_grade:\n            raise GradeExistException(\"课程已打分\")\n        new_grade = Grade()\n        set_attrs(new_grade, jsonable_encoder(grade))\n        db_session.add(new_grade)\n        db_session.commit()\n        return new_grade\n\n    @staticmethod\n    def select_page(grade_search: GradeSearch, db_session: Session):\n        query = select(Grade, Student, Course).outerjoin(Grade.student).outerjoin(Grade.course).order_by(asc(Grade.id))\n        if grade_search.courseName:\n            query = query.where(Course.name.like(f\"%{grade_search.courseName}%\"))\n        if grade_search.studentName:\n            query = query.where(Student.name.like(f\"%{grade_search.studentName}%\"))\n        if grade_search.studentId:\n            query = query.where(Grade.studentId == grade_search.studentId)\n        result = db_session.execute(query).scalars().all()\n        return result\n\n    @staticmethod\n    def update_by_id(grade: GradeUpdate, db_session: Session):\n        exist_grade: Grade = check_grade_exist(grade.id, db_session)\n        set_attrs(exist_grade, jsonable_encoder(grade))\n        db_session.commit()\n        return exist_grade\n\n    @staticmethod\n    def delete_by_id(id: int, db_session: Session):\n        exist_grade: Grade = check_grade_exist(id, db_session)\n        db_session.delete(exist_grade)\n        db_session.commit()\n        return exist_grade\n\n\ndef check_grade_exist(grade_id: int, db_session: Session):\n    query = select(Grade).where(Grade.id == grade_id)\n    exist_grade: Grade = db_session.execute(query).scalar()\n    if not exist_grade:\n        raise GradeExistException(\"成绩记录不存在\")\n    return exist_grade\n\n```\n\n### 测试\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710678715152-35dd8383-9e4c-4d96-b75f-56eda2266de6.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1710678731077-6041b07e-bae2-413a-89cb-c08681df37ba.png)\n\n# i\n\n> 更新: 2024-05-26 21:19:26  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/ka7buim7w1uxo6pg>\n","tags":["Vue3","FastAPI","Python Web","RESTful API","SQLAlchemy","Element-plus","项目"],"categories":["Python Web"]},{"title":"FastAPI日志系统","url":"/blog/1086041718/","content":"\n# FastAPI 日志系统\n\n```python\nimport os\nimport sys\nimport time\nimport logging\nfrom types import FrameType\nfrom typing import cast\nfrom loguru import logger\nfrom .path_conf import LogPath\n\n\nclass Logger:\n    \"\"\"输出日志到文件和控制台\"\"\"\n\n    def __init__(self):\n        # 文件的命名\n        log_name = f\"Fast_{time.strftime('%Y-%m-%d', time.localtime()).replace('-', '_')}.log\"\n        log_path = os.path.join(LogPath, \"Fast_{time:YYYY-MM-DD}.log\")\n        self.logger = logger\n        # 清空所有设置\n        self.logger.remove()\n        # 判断日志文件夹是否存在，不存则创建\n        if not os.path.exists(LogPath):\n            os.makedirs(LogPath)\n        # 日志输出格式\n        formatter = \"{time:YYYY-MM-DD HH:mm:ss} | {level}: {message}\"\n        # 添加控制台输出的格式,sys.stdout为输出到屏幕;关于这些配置还需要自定义请移步官网查看相关参数说明\n        self.logger.add(sys.stdout,\n                        format=\"<green>{time:YYYYMMDD HH:mm:ss}</green> | \"  # 颜色>时间\n                               \"{process.name} | \"  # 进程名\n                               \"{thread.name} | \"  # 进程名\n                               \"<cyan>{module}</cyan>.<cyan>{function}</cyan>\"  # 模块名.方法名\n                               \":<cyan>{line}</cyan> | \"  # 行号\n                               \"<level>{level}</level>: \"  # 等级\n                               \"<level>{message}</level>\",  # 日志内容\n                        )\n        # 日志写入文件\n        self.logger.add(log_path,  # 写入目录指定文件\n                        format='{time:YYYYMMDD HH:mm:ss} - '  # 时间\n                               \"{process.name} | \"  # 进程名\n                               \"{thread.name} | \"  # 进程名\n                               '{module}.{function}:{line} - {level} -{message}',  # 模块名.方法名:行号\n                        encoding='utf-8',\n                        retention='7 days',  # 设置历史保留时长\n                        backtrace=True,  # 回溯\n                        diagnose=True,  # 诊断\n                        enqueue=True,  # 异步写入\n                        rotation=\"00:00\",  # 每日更新时间\n                        # rotation=\"5kb\",  # 切割，设置文件大小，rotation=\"12:00\"，rotation=\"1 week\"\n                        # filter=\"my_module\"  # 过滤模块\n                        # compression=\"zip\"   # 文件压缩\n                        )\n\n    def init_config(self):\n        LOGGER_NAMES = (\"uvicorn.asgi\", \"uvicorn.access\", \"uvicorn\")\n\n        # change handler for default uvicorn logger\n        logging.getLogger().handlers = [InterceptHandler()]\n        for logger_name in LOGGER_NAMES:\n            logging_logger = logging.getLogger(logger_name)\n            logging_logger.handlers = [InterceptHandler()]\n\n    def get_logger(self):\n        return self.logger\n\n\nclass InterceptHandler(logging.Handler):\n    def emit(self, record: logging.LogRecord) -> None:  # pragma: no cover\n        # Get corresponding Loguru level if it exists\n        try:\n            level = logger.level(record.levelname).name\n        except ValueError:\n            level = str(record.levelno)\n\n        # Find caller from where originated the logged message\n        frame, depth = logging.currentframe(), 2\n        while frame.f_code.co_filename == logging.__file__:  # noqa: WPS609\n            frame = cast(FrameType, frame.f_back)\n            depth += 1\n\n        logger.opt(depth=depth, exception=record.exc_info).log(\n            level, record.getMessage(),\n        )\n\n\nLoggers = Logger()\nlog = Loggers.get_logger()\n```\n\n```python\nimport uvicorn\nfrom fastapi import FastAPI\nfrom log import log, Loggers\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef index():\n    log.error(\"/index\")\n    return \"Hello, World.\"\n\n\nif __name__ == '__main__':\n    config = uvicorn.Config(\"test7:app\", host='0.0.0.0', port=9999)\n    server = uvicorn.Server(config)\n    # 将uvicorn输出的全部让loguru管理\n    Loggers.init_config()\n    server.run()\n```\n\n> 更新: 2024-03-12 03:37:43  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/fcy7e77xzlh1offr>\n","tags":["FastAPI","Python Web","Python日志"],"categories":["Python Web"]},{"title":"FastAPI","url":"/blog/3889409409/","content":"\n# FastAPI\n\nFast API 是一个快速、高效、简单、标准化的 Web 框架\n\n基于 Python3.8+进行使用\n\n# Hello FastAPI\n\n接下来新建一个项目带领进入 FastAPI 的世界\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706970454931-c11af857-da68-4137-87d8-539c0b800330.png)\n\n## 依赖包安装\n\n- `pip install fastapi[all]`\n\n```plain\nfastapi[all]\n```\n\n## 实现 api\n\n创建一个`hellofastapi.py`文件\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def hello():\n    return {\"message\": \"Hello World\"}\n\n```\n\n## 运行\n\n需要使用 fastapi 提供的一个`uvicorn`ASGI 网关服务器来启动 api 服务\n\n- `uvicorn hellofastapi:app --reload`\n\n```shell\n(venv) ➜  fastApiProject uvicorn hellofastapi:app --reload\nINFO:     Will watch for changes in these directories: ['/Users/zachary/Documents/PythonCode/fastApiProject']\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [2378] using WatchFiles\nINFO:     Started server process [2382]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706970974195-0c9136e7-ac32-4940-a477-e54641ee3b47.png)\n\n直接在浏览器输入下方的地址：`http://127.0.0.1:8000`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706971032623-845ef2fe-ddc0-463d-96a8-aaff2436ee8d.png)\n\n我们再额外加一个 api\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def hello():\n    return {\"message\": \"Hello World\"}\n\n\n@app.get(\"/hello/{user}\")\nasync def hello_user(user):\n    return {\"message\": f\"Hello {user}\"}\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706971153151-39f44a1a-93b2-484e-88cb-b71b071733d4.png)\n\n## 文档\n\n直接在浏览器键入：[http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs) 就有已经自动帮我们生成好的 swagger 文档\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706971248197-8d00ccf1-089e-4e04-9c80-46e9f56f0d15.png)\n\n## 快速运行\n\n当然也可以不使用命令行运行我们的 api 项目\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def hello():\n    return {\"message\": \"Hello World\"}\n\n\n@app.get(\"/hello/{user}\")\nasync def hello_user(user):\n    return {\"message\": f\"Hello {user}\"}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"hellofastapi:app\", reload=True)\n```\n\n# 路径参数\n\n## 路径参数在 URL 中\n\n在 URL 中可以存在参数作为变量使用到程序中\n\n重新建立一个目录`/path_params`在其中新建一个文件`main.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/user/{user_id}\")\nasync def get_user(user_id):\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    return {\"user\": user}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706972329725-85b4b9a1-7e45-4db3-9aaf-06d6b0c2b80e.png)\n\n## 路径参数的校验\n\n如果给路径参数指定类型，例如`int`，那么在进行 api 调用的时候 swagger 文档会自动帮我们进行一个校验\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/user/{user_id}\")\nasync def get_user(user_id: int):\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    return {\"user\": user}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706972410901-8b66fe6b-e4c5-4a0f-966a-337189a9acb4.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706972437474-66f0b627-7eb5-4132-a5ff-4ddf1620d30e.png)\n\n## api 定义的顺序\n\n假定我现在需要访问这么两个 api：`/users/current`和`/users/1`\n\n分别用于获取当前用户和 user_id 为 1 的用户\n\n那么定义的时候顺序是很重要的\n\n- 第一种顺序\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int):\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    return {\"user\": user}\n\n\n@app.get(\"/users/current\")\nasync def get_current_user():\n    user = {\n        \"id\": 2,\n        \"name\": \"Jane Guilherme\",\n        \"gender\": \"female\"\n    }\n    return {\"user\": user}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n访问`/users/current`会出问题\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706972898739-6091edca-4529-488d-9f37-aaa4fe98e743.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706972904110-2fa3a15b-3d2b-4592-9239-f61e24d1f1e8.png)\n\n- 第二种顺序\n\n需要调换一下 current 和 user_id 的定义顺序\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users/current\")\nasync def get_current_user():\n    user = {\n        \"id\": 2,\n        \"name\": \"Jane Guilherme\",\n        \"gender\": \"female\"\n    }\n    return {\"user\": user}\n\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int):\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    return {\"user\": user}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706973000885-071fc9dc-d439-411a-9f97-e1d32c8eee39.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706972985346-fe45f637-b1c5-43ad-88e2-d7622e988ed0.png)\n\n这样都可以成功访问到\n\n## 枚举定义选择项\n\n目前在 swagger-UI 中的一些参数都是需要手动键入的\n\n但有时候一些参数可能是一些固定选项，例如性别（男、女）这时候如果能实现选择项输入就更好了\n\n使用枚举类实现选择项的定义\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\n\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\nclass Gender(str, Enum):\n    male = \"男性\"\n    female = \"女性\"\n\n\n@app.get(\"/students/{gender}\")\nasync def get_student(gender: Gender):\n    student = {\n        \"id\": 1,\n        \"name\": \"Tony Stark\",\n        \"gender\": gender\n    }\n    return {\"student\": student}\n\n\n@app.get(\"/users/current\")\nasync def get_current_user():\n    user = {\n        \"id\": 2,\n        \"name\": \"Jane Guilherme\",\n        \"gender\": \"female\"\n    }\n    return {\"user\": user}\n\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int):\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    return {\"user\": user}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706974478510-4e7e030f-59c6-4fb6-adee-c4841ac236cb.png)\n\n# 查询参数\n\n什么是查询参数，类似于`http://127.0.0.1:8000/users?page_index=1&page_size=10`\n\n其中的 page_index 和 page_size 都是查询参数\n\n来个实例看看怎么做，先创建一个`/query_params`目录，然后目录下面创建`main.py`\n\n## 查询参数在方法参数中\n\n- 在注解处 就可以不用声明这两个查询参数了\n- 直接在方法的参数中声明\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\n\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users\")\nasync def get_current_user(page_index: int, page_size: int):\n    user = {\n        \"id\": 2,\n        \"name\": \"Jane Guilherme\",\n        \"gender\": \"female\"\n    }\n    page_info = {\n        \"page_index\": page_index,\n        \"page_size\": page_size\n    }\n    return {\"user\": user, \"page_info\": page_info}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n运行代码后直接在浏览器键入：[http://127.0.0.1:8000/users?page_index=2&page_size=10](http://127.0.0.1:8000/users?page_index=2&page_size=10)\n\n可以查看到结果\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707045162992-1bef0135-d752-4f97-ba83-c02279323ba3.png)\n\n## 查询参数的校验\n\n- 同样，在方法中的类型声明，会自动帮我们做类型验证，如果输入的类型与声明类型不符，会报错\n\n如果键入：[http://127.0.0.1:8000/users?page_index=2&page_size=a](http://127.0.0.1:8000/users?page_index=2&page_size=a)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707045310082-94901e0b-a96c-42ea-b3d9-49e774695eb1.png)\n\n使用 swagger-UI 也会帮我们做参数类型校验\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707045530971-44dee988-4786-4acd-b1c4-182381abbed8.png)\n\n## 配置可选查询参数\n\n- 使用`Optional`声明可选查询参数，若查询参数不传值，希望有一个默认值\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users\")\nasync def get_current_user(page_index: int, page_size: Optional[int] = 10):\n    user = {\n        \"id\": 2,\n        \"name\": \"Jane Guilherme\",\n        \"gender\": \"female\"\n    }\n    page_info = {\n        \"page_index\": page_index,\n        \"page_size\": page_size\n    }\n    return {\"user\": user, \"page_info\": page_info}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707045815334-ea4a2029-1f18-45d2-bec8-ebe9bab5ac60.png)\n\n## 路径参数与查询参数混用\n\n结合上一节的路径参数，可以与查询参数混合使用，并且在方法参数中的顺序是没有要求的\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users\")\nasync def get_current_user(page_index: int, page_size: Optional[int] = 10):\n    user = {\n        \"id\": 2,\n        \"name\": \"Jane Guilherme\",\n        \"gender\": \"female\"\n    }\n    page_info = {\n        \"page_index\": page_index,\n        \"page_size\": page_size\n    }\n    return {\"user\": user, \"page_info\": page_info}\n\n\n@app.get(\"/users/{user_id}/friends\")\nasync def get_user_friends(user_id: int, page_index: int, page_size: Optional[int] = 10):\n    user_friends = {\n        \"id\": user_id + 1,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    page_info = {\n        \"page_index\": page_index,\n        \"page_size\": page_size\n    }\n    return {\"user_friends\": user_friends, \"page_info\": page_info}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707046682903-a73317e2-1d79-421b-a995-a0d9e2e8bc67.png)\n\n# 请求体\n\n## 什么是请求体\n\n请求体是用于发送数据给 API\n\n- `不能`使用`GET`请求发送请求体\n- 发送请求体的类型应该是`POST`、`PUT`、`DELETE`或者`PATCH`\n\n## 定义请求体中数据的模型\n\n- 使用`pydantic`模块下的`BaseModel`\n\n在项目目录下创建一个`/request_body`目录，然后创建一个`main.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass UserModel(BaseModel):\n    id: Optional[int] = 1\n    name: str\n    description: Optional[str] = \"No description\"\n\n\n@app.post(\"/users\")\nasync def create_user(user: UserModel):\n    # 做一些创建用户的数据库操作\n    user = user.model_dump()\n    return user\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n\n```\n\n只传入非 Optional 的参数：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707048070716-44763888-00cc-40fc-9ffe-477331ae5c4c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707048090712-348bc5a6-4394-40fd-8452-23870059f0e6.png)\n\n给可选参数传入值\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707048141091-1db22a27-6b46-4e00-96fb-7a9adf05d7f0.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707048147968-e7fcc52e-16a7-48b1-9c8b-0751e7c895bb.png)\n\n不给非可选参数传值，会报错，指出缺少的参数信息\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707048177095-56623673-2c5b-4ceb-8cf9-b2e0f5091ebe.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707048195592-4d019080-91f0-476b-ae8e-8ec383643a2e.png)\n\n## 请求体中定义枚举选择项\n\n在前面的路径参数中，对一些参数可以使用选择项进行输入，那么同样在请求体中的某些参数也可以配置为枚举类进行选择项输入\n\n- 枚举类定义选择项\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Gender(str, Enum):\n    male = \"男性\"\n    female = \"女性\"\n\n\nclass UserModel(BaseModel):\n    id: Optional[int] = 1\n    name: str\n    gender: Gender\n    description: Optional[str] = \"No description\"\n\n\n@app.post(\"/users\")\nasync def create_user(user: UserModel):\n    # 做一些创建用户的数据库操作\n    user = user.model_dump()\n    return user\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707048572427-2f033902-4fad-4629-ba34-97f464170a4c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707048608299-5128c520-5f93-436f-b3f1-091f00ed80ce.png)\n\n- 会对枚举选择项，自动做内容校验\n\n输入错误的枚举类型，结果会报错，具体错误信息\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707048649367-08ae01ec-dba3-467f-a50f-e2eb4edb5a2a.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707048654880-0699ff76-da49-4122-9a80-24794bb35800.png)\n\n## 请求体与路径参数混用\n\n这块逻辑需要先改一下\n\n因为对于更新数据而言，我们可能请求体发送的时候只是发送要更新的数据，我们一般不会知道 id 是多少，所以 UserModel 先去掉 id，然后在修改完之后给他从路径参数中把 id 加过来\n\n实际上在开发的时候这些 User 类就要做一下区分：如 UserVO，User，UserDTO 等等\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Gender(str, Enum):\n    male = \"男性\"\n    female = \"女性\"\n\n\nclass UserModel(BaseModel):\n    name: str\n    gender: Gender\n    description: Optional[str] = \"No description\"\n\n\n@app.post(\"/users\")\nasync def create_user(user: UserModel):\n    # 做一些创建用户的数据库操作\n    user = user.model_dump()\n    user.update({\"id\": 1})\n\n    return user\n\n\n@app.put(\"/users/{user_id}\")\nasync def update_user(user_id: int, user: UserModel):\n    # 做一些更新用户的数据库操作\n    user = user.model_dump()\n    user.update({\"id\": user_id})\n    return user\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707049286137-3ab2b411-2654-45e1-88d5-81e0c414171c.png)![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707049307115-b356f9eb-7ec2-4406-a587-ed13f8c9e076.png)\n\n## 函数的参数识别规则\n\n- FastAPI 如何区分方法中的路径参数、查询参数、请求体对象\n  - 如果在路径参数中定义了，函数的参数会匹配为路径参数\n  - 如果路径参数中没有定义，然后函数的参数定义为 int、str 等基础类型，会匹配为查询参数\n  - 如果是 pydantic 模型类（继承 BaseModel），则匹配为请求体\n\n# 参数验证\n\n目录路径下创建一个`/params_validation`目录，然后创建一个`main.py`\n\n## 路径参数的验证\n\n- 使用`fastapi.Path`类实现\n- `路径参数都是必须项`\n- 格式：\n  - `...`表示该路径参数必填\n  - `title`表示对该路径参数的名称\n  - `ge`值大于等于，`gt`大于\n  - `le`值小于等于，`lt`小于\n  - `min_length` 字符串最小长度\n  - `max_length` 字符串最大长度\n  - `regex`正则表达式验证 常用格式`r\"^[正则内容]$\"`\n\n```python\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int = Path(...,\n                                       title=\"The ID of the user to get\",\n                                       ge=1,\n                                       le=200)):\n```\n\n下面看一下具体实例\n\n### 整数类型验证\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nimport uvicorn\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int = Path(..., title=\"The ID of the user to get\", ge=1, le=200)):\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    return {\"user\": user}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707050391425-d8504338-b4e5-4f0d-a625-bb5e29c97167.png)\n\n路径参数会显示最大值最小值范围，若输入不在范围，则会报错\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707050426921-03e10477-0fa1-4f93-bb04-ef05a30be97e.png)\n\n上面这个例子是一个整数的类型，下面来一个字符串类型的验证\n\n### 字符串类型验证\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nimport uvicorn\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int = Path(..., title=\"The ID of the user to get\", ge=1, le=200)):\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    return {\"user\": user}\n\n\n@app.get(\"/books/{book_name}\")\nasync def get_book(book_name: str = Path(..., title=\"The name of the book to get\", min_length=3, max_length=10)):\n    book = {\n        \"id\": 1,\n        \"name\": book_name,\n        \"description\": \"The description of the book...\"\n    }\n    return {\"book\": book}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707050907070-6427adc9-a378-4aeb-b5ec-0bf0b0d94686.png)\n\n### 正则表达式验证\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nimport uvicorn\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int = Path(..., title=\"The ID of the user to get\", ge=1, le=200)):\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    return {\"user\": user}\n\n\n@app.get(\"/books/{book_name}\")\nasync def get_book(book_name: str = Path(..., title=\"The name of the book to get\", min_length=3, max_length=10)):\n    book = {\n        \"id\": 1,\n        \"name\": book_name,\n        \"description\": \"The description of the book...\"\n    }\n    return {\"book\": book}\n\n\n@app.get(\"/milkteas/{milktea_name}\")\nasync def get_milktea(\n        milktea_name: str = Path(..., title=\"The name of the milktea to get\", regex=r\"^.*茶$\", min_length=2)):\n    milktea = {\n        \"id\": 1,\n        \"name\": milktea_name,\n        \"description\": \"The description of the milktea...\"\n    }\n    return {\"milktea\": milktea}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n实现了一个查询奶茶的 api，其中要求奶茶名必须是茶结尾，并且字符串长度大于等于 2\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707051497644-98ca4598-2b08-4111-850e-dd73c3d39cc1.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707051517045-ed3a752d-3a49-4bc7-a7a4-bbf882dfbccf.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707051528566-76ad558c-837e-4752-b0b0-65ea0d29ec00.png)\n\n## 查询参数的验证\n\n- 使用`fastapi.Query`类实现\n- 使用方法与`Path`大体一致\n- 区别在于：\n  - `Query(..., )`表示该查询参数为`必选项`\n  - `Query(None, )`表示该查询参数为 `可选项`，其中`None可以是任何内容`表示默认值\n  - `Query(alias=\"[别名]\")`设置查询参数别名，起了别名之后原先参数名`失效`\n\n### 整数类型验证\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nimport uvicorn\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"/users/current\")\nasync def get_current_user(page_index: int = Query(1, ge=1, le=100),\n                           page_size: int = Query(10, ge=1, le=100)):\n    user = {\n        \"id\": 2,\n        \"name\": \"Jane Guilherme\",\n        \"gender\": \"female\"\n    }\n    page_info = {\n        \"page_index\": page_index,\n        \"page_size\": page_size\n    }\n    return {\"user\": user, \"page_info\": page_info}\n\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int = Path(..., title=\"The ID of the user to get\", ge=1, le=200)):\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    return {\"user\": user}\n\n\n@app.get(\"/books/{book_name}\")\nasync def get_book(book_name: str = Path(..., title=\"The name of the book to get\", min_length=3, max_length=10)):\n    book = {\n        \"id\": 1,\n        \"name\": book_name,\n        \"description\": \"The description of the book...\"\n    }\n    return {\"book\": book}\n\n\n@app.get(\"/milkteas/{milktea_name}\")\nasync def get_milktea(\n        milktea_name: str = Path(..., title=\"The name of the milktea to get\", regex=r\"^.*茶$\", min_length=2)):\n    milktea = {\n        \"id\": 1,\n        \"name\": milktea_name,\n        \"description\": \"The description of the milktea...\"\n    }\n    return {\"milktea\": milktea}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707052014833-3ce44098-4ea2-44f4-9e9a-c8e9e5e35608.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707052914753-60b26e2f-3865-4b2b-85b7-3418d9c1e2c0.png)\n\n### 查询参数别名\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nimport uvicorn\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"/users/current\")\nasync def get_current_user(page_index: int = Query(1, alias=\"page-index\", ge=1, le=100),\n                           page_size: int = Query(10, alias=\"page-size\", ge=1, le=100)):\n    user = {\n        \"id\": 2,\n        \"name\": \"Jane Guilherme\",\n        \"gender\": \"female\"\n    }\n    page_info = {\n        \"page_index\": page_index,\n        \"page_size\": page_size\n    }\n    return {\"user\": user, \"page_info\": page_info}\n\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int = Path(..., title=\"The ID of the user to get\", ge=1, le=200)):\n    user = {\n        \"id\": user_id,\n        \"name\": \"John Doe\",\n        \"gender\": \"male\"\n    }\n    return {\"user\": user}\n\n\n@app.get(\"/books/{book_name}\")\nasync def get_book(book_name: str = Path(..., title=\"The name of the book to get\", min_length=3, max_length=10)):\n    book = {\n        \"id\": 1,\n        \"name\": book_name,\n        \"description\": \"The description of the book...\"\n    }\n    return {\"book\": book}\n\n\n@app.get(\"/milkteas/{milktea_name}\")\nasync def get_milktea(\n        milktea_name: str = Path(..., title=\"The name of the milktea to get\", regex=r\"^.*茶$\", min_length=2)):\n    milktea = {\n        \"id\": 1,\n        \"name\": milktea_name,\n        \"description\": \"The description of the milktea...\"\n    }\n    return {\"milktea\": milktea}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n起了查询参数别名之后，可以键入：[http://127.0.0.1:8000/users/current?page-index=2&page-size=10](http://127.0.0.1:8000/users/current?page-index=2&page-size=10)\n\n这时如果还使用原先的查询参数就会失效啦，会使用默认值而不是传入的值\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707053331667-69b228ae-c6d5-492d-aa3c-b494cfb0bc3e.png)\n\n# 请求体-进阶\n\n创建一个`/request_body_advance`目录，然后创建一个`main.py`\n\n## 多个请求体参数\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass User(BaseModel):\n    name: str\n    description: Optional[str] = \"No description\"\n\n\nclass Order(BaseModel):\n    number: int\n    goods: str\n\n\n@app.put(\"/carts/{cart_id}\")\nasync def update_cart(cart_id: int, user: User, order: Order):\n    # 做一些更新购物车的数据库操作\n    result = {\n        \"cart_id\": cart_id,\n        \"user_name\": user.name,\n        \"order_good\": order.goods\n    }\n    return result\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707054123353-c69769ae-253a-4877-aecc-b70515a4d798.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707054143792-f8f3c6d0-3cd9-450b-8a84-eca2844cc6b6.png)\n\n## 单一数据类型作为请求体参数\n\n当函数参数列表中有一个 int 或者 str 类型的单一数据类型时，API 会默认将它作为一个查询参数，那么我们应该怎么做让其声明为一个请求体参数呢\n\n- 使用`fastapi.Body`类声明，使用方法与上面的 Path、Query 大体相同\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass User(BaseModel):\n    name: str\n    description: Optional[str] = \"No description\"\n\n\nclass Order(BaseModel):\n    number: int\n    goods: str\n\n\n@app.put(\"/carts/{cart_id}\")\nasync def update_cart(cart_id: int, user: User, order: Order,\n                      total_price: float = Body(...)):\n    # 做一些更新购物车的数据库操作\n    result = {\n        \"cart_id\": cart_id,\n        \"user_name\": user.name,\n        \"order_good\": order.goods,\n        \"total_price\": total_price\n    }\n    return result\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n这时 total_price 可以作为请求体参数发给 API\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707054461374-7cef6692-b992-4621-9780-1624838070d5.png)\n\n## 请求体模型中的属性验证\n\n- 使用`pydantic.Field`进行验证\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass User(BaseModel):\n    name: str = Field(..., min_length=4)\n    description: Optional[str] = Field(\"No description\", min_length=10)\n\n\nclass Order(BaseModel):\n    number: int = Field(..., ge=1)\n    goods: str\n\n\n@app.put(\"/carts/{cart_id}\")\nasync def update_cart(cart_id: int, user: User, order: Order,\n                      total_price: float = Body(...)):\n    # 做一些更新购物车的数据库操作\n    result = {\n        \"cart_id\": cart_id,\n        \"user_name\": user.name,\n        \"order_good\": order.goods,\n        \"total_price\": total_price\n    }\n    return result\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n错误的参数：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707054970993-265c30c5-71c4-474e-ac10-dbaac3e702ab.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707054983373-38c1ed93-5389-493c-938b-b2464dfff5c3.png)\n\n正确的参数：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707055064014-36335deb-d13c-478d-b577-443b933c1e37.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707055074715-b30a5587-75e9-4691-8f0c-dd63ed9960e7.png)\n\n## 请求体模型嵌套\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Address(BaseModel):\n    province: str\n    city: str\n\n\nclass User(BaseModel):\n    name: str = Field(..., min_length=4)\n    description: Optional[str] = Field(\"No description\", min_length=10)\n\n\nclass Order(BaseModel):\n    number: int = Field(..., ge=1)\n    goods: str\n    address: Address\n\n\n@app.put(\"/carts/{cart_id}\")\nasync def update_cart(cart_id: int, user: User, order: Order,\n                      total_price: float = Body(...)):\n    # 做一些更新购物车的数据库操作\n    result = {\n        \"cart_id\": cart_id,\n        \"user_name\": user.name,\n        \"order_good\": order.goods,\n        \"total_price\": total_price\n    }\n    return result\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707056351769-ea6c7b5d-3a68-4b68-a4a4-634ced8f15f4.png)\n\n## 模型内使用 list、set 等数据结构\n\n- `goods: List[str]`\n- `goods: list`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\nfrom typing import Optional, List\n\nimport uvicorn\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Address(BaseModel):\n    province: str\n    city: str\n\n\nclass User(BaseModel):\n    name: str = Field(..., min_length=4)\n    description: Optional[str] = Field(\"No description\", min_length=10)\n\n\nclass Order(BaseModel):\n    number: int = Field(..., ge=1)\n    goods: List[str] = Field(..., min_items=1)\n    address: Address\n\n\n@app.put(\"/carts/{cart_id}\")\nasync def update_cart(cart_id: int, user: User, order: Order,\n                      total_price: float = Body(...)):\n    # 做一些更新购物车的数据库操作\n    result = {\n        \"cart_id\": cart_id,\n        \"user_name\": user.name,\n        \"order_good\": order.goods,\n        \"total_price\": total_price\n    }\n    return result\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707057788248-93702cb0-b467-4ef3-aaa8-a645d298f698.png)\n\n# 示例数据\n\n在 swagger-UI 中每一个 API 会有一个默认的示例数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707058017114-77e5318e-0116-42fa-8813-9f8b45e95cc0.png)\n\n示例数据是显示在文档中的例子，可以给使用者提供示例数据格式，可视化更直接，更便于使用者理解 API 如何使用\n\n`Body > model_config > Field`\n\n但是更推荐使用`Field`，因为如果请求体数据模型有修改，会更便利\n\n## 通过 Field 定义示例数据\n\n- `Field(..., examples=[\"具体数据\"])`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\nfrom typing import Optional, List\n\nimport uvicorn\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Address(BaseModel):\n    province: str = Field(..., examples=[\"广东省\"])\n    city: str = Field(..., examples=[\"深圳市\"])\n\n\nclass User(BaseModel):\n    name: str = Field(..., min_length=4, examples=[\"Zachary\"])\n    description: Optional[str] = Field(\"No description\", min_length=10, examples=[\"该用户是新人，拥有新人优惠券\"])\n\n\nclass Order(BaseModel):\n    number: int = Field(..., ge=1, examples=[1])\n    goods: List[str] = Field(..., min_items=1, examples=[[\"苹果\", \"香蕉\"]])\n    address: Address\n\n\n@app.put(\"/carts/{cart_id}\")\nasync def update_cart(cart_id: int, user: User, order: Order,\n                      total_price: float = Body(...)):\n    # 做一些更新购物车的数据库操作\n    result = {\n        \"cart_id\": cart_id,\n        \"user_name\": user.name,\n        \"order_good\": order.goods,\n        \"total_price\": total_price\n    }\n    return result\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707058646445-50ff0b60-e27f-4411-8704-a4e10694fb45.png)\n\n## 通过定义模型属性 model_config\n\n- `model_config`优先级更高\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\nfrom typing import Optional, List\n\nimport uvicorn\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Address(BaseModel):\n    province: str = Field(...)\n    city: str = Field(...)\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [{\n                \"province\": \"江苏省\",\n                \"city\": \"南京市\"\n            }]\n        }\n    }\n\n\nclass User(BaseModel):\n    name: str = Field(..., min_length=4)\n    description: Optional[str] = Field(\"No description\", min_length=10)\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [{\n                \"name\": \"Zachary\",\n                \"description\": \"该用户是新人，拥有新人优惠券\"\n            }]\n        }\n    }\n\n\nclass Order(BaseModel):\n    number: int = Field(..., ge=1, examples=[1])\n    goods: List[str] = Field(..., min_items=1, examples=[[\"苹果\", \"香蕉\"]])\n    address: Address\n\n\n@app.put(\"/carts/{cart_id}\")\nasync def update_cart(cart_id: int, user: User, order: Order,\n                      total_price: float = Body(...)):\n    # 做一些更新购物车的数据库操作\n    result = {\n        \"cart_id\": cart_id,\n        \"user_name\": user.name,\n        \"order_good\": order.goods,\n        \"total_price\": total_price\n    }\n    return result\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707059248961-cb053a74-2212-4674-95fc-5b8dfdce59ec.png)\n\n## 通过 Body 定义示例数据\n\n- `Body`主要是定义单一数据类型作为请求体参数时用的，但同时请求体数据模型也适用`Body`进行配置\n- `Body`优先级最高\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom enum import Enum\nfrom typing import Optional, List\n\nimport uvicorn\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Address(BaseModel):\n    province: str = Field(...)\n    city: str = Field(...)\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [{\n                \"province\": \"江苏省\",\n                \"city\": \"南京市\"\n            }]\n        }\n    }\n\n\nclass User(BaseModel):\n    name: str = Field(..., min_length=4)\n    description: Optional[str] = Field(\"No description\", min_length=10)\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [{\n                \"name\": \"Zachary\",\n                \"description\": \"该用户是新人，拥有新人优惠券\"\n            }]\n        }\n    }\n\n\nclass Order(BaseModel):\n    number: int = Field(..., ge=1, examples=[1])\n    goods: List[str] = Field(..., min_items=1, examples=[[\"苹果\", \"香蕉\"]])\n    address: Address\n\n\n@app.put(\"/carts/{cart_id}\")\nasync def update_cart(cart_id: int, user: User, order: Order,\n                      total_price: float = Body(..., examples=[188888.88])):\n    # 做一些更新购物车的数据库操作\n    result = {\n        \"cart_id\": cart_id,\n        \"user_name\": user.name,\n        \"order_good\": order.goods,\n        \"total_price\": total_price\n    }\n    return result\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707059378150-713230a0-363b-446b-990a-05bbcdfa55f8.png)\n\n这里提及一个小技巧\n\n- 对方法来说，如果`def func(*, num1, num2)`参数列表的第一个`*`把所有位置参数占了，后面的所有参数都是关键字参数，并且没有顺序\n\n# Cookie 与 Header 参数\n\n创建一个目录`/cookie_header`，然后在这其中创建一个`main.py`\n\n- 放在 cookie 中的键值对数据，常用的键不使用`_`连接，常用`-`，但是用`-`不符合 Python 编程规范，因此可以设置别名\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional, Union\n\nimport uvicorn\nfrom fastapi import FastAPI, Cookie, Header\n\napp = FastAPI()\n\n\n@app.put(\"/cookieAndHeader\")\nasync def cookie_and_header(*,\n                            favorite_schema: Optional[str] = Cookie(default=None, alias=\"favorite-schema\"),\n                            api_token: Union[str, None] = Header(default=None, alias=\"api-token\")):\n    result_dict = {\n        \"favorite_schema\": favorite_schema,\n        \"api_token\": api_token\n    }\n    return result_dict\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707406513044-c5cb7f20-5642-4b03-9b01-ee0b69af1357.png)\n\n但是尝试测试可以发现，在 swagger-UI 里面无法显示 cookie 的内容\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707406815558-1bba0927-e00f-484b-8e11-3f146fc58f36.png)\n\n这是由于浏览器的原因，需要使用 postman 来测试，设置好 header 和 cookie\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707406933913-8184d61f-fd00-4ea8-abcf-daeda9b40331.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707407046247-e62a249d-fbeb-412c-8dd4-0742ef533e37.png)\n\n这时，可以获得完整的 cookie\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707407101023-77730316-fd43-4e55-9f63-b530504a4b01.png)\n\n如果一定想要通过 swagger-UI 来实现 cookie 的查看，需要设置一下 cookie\n\n- 通过`Response`来设置 cookie 的内容，实际上这个 Response 就是发送给客户端结果的\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional, Union\n\nimport uvicorn\nfrom fastapi import FastAPI, Cookie, Header, Response\n\napp = FastAPI()\n\n\n@app.put(\"/cookieAndHeader\")\nasync def cookie_and_header(*,\n                            response: Response,\n                            favorite_schema: Optional[str] = Cookie(default=None, alias=\"favorite-schema\"),\n                            api_token: Union[str, None] = Header(default=None, alias=\"api-token\")):\n    result_dict = {\n        \"favorite_schema\": favorite_schema,\n        \"api_token\": api_token\n    }\n\n    response.set_cookie(key=\"favorite-schema\", value=\"black\")\n    return result_dict\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n之后再去 swagger-UI 查看的时候，第一次调用仍旧没有 cookie，但是服务端进行了设置，第二次调用的时候，就能看到服务端所设置的 cookie 了\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707409204328-7972b14d-d8d3-4550-ace0-a09e94e92f90.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707409212045-76ef60f0-cb6f-4597-b6ea-62378dab797b.png)\n\n# 响应模型\n\n在 swagger-UI 中，我们只能得到一个响应模型的精简例子，只能知道返回的内容是什么类型，不能知道一个具体格式\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707409407269-da3b51fc-0aa4-4dd1-b8b2-f37272dca11e.png)\n\n在项目路径下创建一个`/response_model`，然后创建一个`main.py`\n\n## 定义响应模型\n\n- `response_model`指定响应模型\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nusers = {\n    \"s\": {\"id\": 0},\n    \"a\": {\"id\": 1, \"username\": \"a\"},\n    \"b\": {\"id\": 2, \"username\": \"b\", \"password\": \"bbb\"},\n    \"c\": {\"id\": 3, \"username\": \"c\", \"password\": \"ccc\", \"description\": \"default\"},\n    \"d\": {\"id\": 4, \"username\": \"d\", \"password\": \"ddd\", \"description\": \"it's user d\"},\n    \"e\": {\"id\": 5, \"username\": \"e\", \"password\": \"eee\", \"description\": \"it's user e\", \"fullname\": \"Tony Stark\"}\n}\n\napp = FastAPI()\n\n\nclass UserOut(BaseModel):\n    id: int\n    username: str\n    password: Optional[str] = \"default\"\n    description: Optional[str] = \"default\"\n    fullname: Optional[str] = \"default\"\n\n\n@app.get(\"/users/{username}\", response_model=UserOut)\nasync def get_user(username: str):\n    return users.get(username, {})\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n这时查看一下 responses，就能看出来返回结果具体包括的内容\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707410720903-929a6d12-acde-4a3e-8e50-7b68fd0afe09.png)\n\n- `resoinse_model_include`可以指定响应模型只输出的内容\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nusers = {\n    \"s\": {\"id\": 0},\n    \"a\": {\"id\": 1, \"username\": \"a\"},\n    \"b\": {\"id\": 2, \"username\": \"b\", \"password\": \"bbb\"},\n    \"c\": {\"id\": 3, \"username\": \"c\", \"password\": \"ccc\", \"description\": \"default\"},\n    \"d\": {\"id\": 4, \"username\": \"d\", \"password\": \"ddd\", \"description\": \"it's user d\"},\n    \"e\": {\"id\": 5, \"username\": \"e\", \"password\": \"eee\", \"description\": \"it's user e\", \"fullname\": \"Tony Stark\"}\n}\n\napp = FastAPI()\n\n\nclass UserOut(BaseModel):\n    id: int\n    username: str\n    password: Optional[str] = \"default\"\n    description: Optional[str] = \"default\"\n    fullname: Optional[str] = \"default\"\n\n\n@app.get(\"/users/{username}\", response_model=UserOut, response_model_include={\"id\", \"username\", \"description\"})\nasync def get_user(username: str):\n    return users.get(username, {})\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n这样的话 response 只有指定的\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707411019679-caaecaa3-e85a-4385-814c-ff4bda8a05a8.png)\n\n- `response_model_exclude`也是同样的用法\n- `response_model_exclude_unset`如果数据包含这个值，就显示出来\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nusers = {\n    \"s\": {\"id\": 0},\n    \"a\": {\"id\": 1, \"username\": \"a\"},\n    \"b\": {\"id\": 2, \"username\": \"b\", \"password\": \"bbb\"},\n    \"c\": {\"id\": 3, \"username\": \"c\", \"password\": \"ccc\", \"description\": \"default\"},\n    \"d\": {\"id\": 4, \"username\": \"d\", \"password\": \"ddd\", \"description\": \"it's user d\"},\n    \"e\": {\"id\": 5, \"username\": \"e\", \"password\": \"eee\", \"description\": \"it's user e\", \"fullname\": \"Tony Stark\"}\n}\n\napp = FastAPI()\n\n\nclass UserOut(BaseModel):\n    id: int\n    username: str\n    password: Optional[str] = \"default\"\n    description: Optional[str] = \"default\"\n    fullname: Optional[str] = \"default\"\n\n\n@app.get(\"/users/{username}\", response_model=UserOut, response_model_exclude_unset=True)\nasync def get_user(username: str):\n    return users.get(username, {})\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707411247326-30800534-f931-4ab2-8bfe-17a305cd239f.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707411241304-8a3d43d7-5032-4558-bbc4-da74937fb43c.png)\n\n## 响应模型列表\n\n- `response_model=List[User]`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional, List\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nusers = {\n    # \"s\": {\"id\": 0},\n    \"a\": {\"id\": 1, \"username\": \"a\"},\n    \"b\": {\"id\": 2, \"username\": \"b\", \"password\": \"bbb\"},\n    \"c\": {\"id\": 3, \"username\": \"c\", \"password\": \"ccc\", \"description\": \"default\"},\n    \"d\": {\"id\": 4, \"username\": \"d\", \"password\": \"ddd\", \"description\": \"it's user d\"},\n    \"e\": {\"id\": 5, \"username\": \"e\", \"password\": \"eee\", \"description\": \"it's user e\", \"fullname\": \"Tony Stark\"}\n}\n\napp = FastAPI()\n\n\nclass UserOut(BaseModel):\n    id: int\n    username: str\n    password: Optional[str] = \"default\"\n    description: Optional[str] = \"default\"\n    fullname: Optional[str] = \"default\"\n\n\n@app.get(\"/users/{username}\", response_model=UserOut, response_model_exclude_unset=True)\nasync def get_user(username: str):\n    return users.get(username, {})\n\n\n@app.get(\"/users\", response_model=List[UserOut])\nasync def get_users():\n    return users.values()\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707411609525-144aa301-bf87-4489-ace9-95bde9962edc.png)\n\n# 状态码与异常处理\n\n创建一个`/exception_handler`目录，然后创建`main.py`\n\n## 状态码\n\n### 返回指定状态码\n\n- `status_code=`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nusers = {\n    \"a\": {\"id\": 1, \"username\": \"a\"},\n    \"b\": {\"id\": 2, \"username\": \"b\", \"password\": \"bbb\"},\n    \"c\": {\"id\": 3, \"username\": \"c\", \"password\": \"ccc\", \"description\": \"default\"},\n    \"d\": {\"id\": 4, \"username\": \"d\", \"password\": \"ddd\", \"description\": \"it's user d\"},\n    \"e\": {\"id\": 5, \"username\": \"e\", \"password\": \"eee\", \"description\": \"it's user e\", \"fullname\": \"Tony Stark\"}\n}\n\n\nclass UserBase(BaseModel):\n    id: Optional[int] = None\n    username: str\n    description: Optional[str] = \"default\"\n    fullname: Optional[str] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\n@app.post(\"/users\", status_code=201, response_model=UserOut)\nasync def create_user(user: UserIn):\n    user_dict = user.model_dump()\n    user_dict.update({\"id\": 6})\n    return user_dict\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707412478635-de8669e6-171b-4825-8c39-659ac7828f5e.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707412492955-d9d43006-1e3f-4bfa-94f3-20e1bc3ebbba.png)\n\n## 异常处理\n\n### 通过异常返回错误\n\n- 通过抛出`HTTPException`来获得错误返回\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Path, HTTPException, status\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nusers = {\n    \"a\": {\"id\": 1, \"username\": \"a\"},\n    \"b\": {\"id\": 2, \"username\": \"b\", \"password\": \"bbb\"},\n    \"c\": {\"id\": 3, \"username\": \"c\", \"password\": \"ccc\", \"description\": \"default\"},\n    \"d\": {\"id\": 4, \"username\": \"d\", \"password\": \"ddd\", \"description\": \"it's user d\"},\n    \"e\": {\"id\": 5, \"username\": \"e\", \"password\": \"eee\", \"description\": \"it's user e\", \"fullname\": \"Tony Stark\"}\n}\n\n\nclass UserBase(BaseModel):\n    id: Optional[int] = None\n    username: str\n    description: Optional[str] = \"default\"\n    fullname: Optional[str] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\n@app.post(\"/users\", status_code=201, response_model=UserOut)\nasync def create_user(user: UserIn):\n    user_dict = user.model_dump()\n    user_dict.update({\"id\": 6})\n    return user_dict\n\n\n@app.get(\"/users/{username}\", status_code=200, response_model=UserOut)\nasync def get_user(username: str = Path(..., min_length=1)):\n    user = users.get(username, None)\n    if user:\n        return user\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"{username} not found\")\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707413131989-2c0ed914-de13-455c-a70c-810b078ed1dc.png)\n\n### 自定义异常\n\n- 通过使用`@app.exception_handler()`进行异常处理\n- 通过`JSONResponse`返回异常结果\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Path, HTTPException, status, Request\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nusers = {\n    \"a\": {\"id\": 1, \"username\": \"a\"},\n    \"b\": {\"id\": 2, \"username\": \"b\", \"password\": \"bbb\"},\n    \"c\": {\"id\": 3, \"username\": \"c\", \"password\": \"ccc\", \"description\": \"default\"},\n    \"d\": {\"id\": 4, \"username\": \"d\", \"password\": \"ddd\", \"description\": \"it's user d\"},\n    \"e\": {\"id\": 5, \"username\": \"e\", \"password\": \"eee\", \"description\": \"it's user e\", \"fullname\": \"Tony Stark\"}\n}\n\n\nclass UserBase(BaseModel):\n    id: Optional[int] = None\n    username: str\n    description: Optional[str] = \"default\"\n    fullname: Optional[str] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserNotFoundException(Exception):\n    def __init__(self, username: str):\n        self.username = username\n\n\n@app.post(\"/users\", status_code=201, response_model=UserOut)\nasync def create_user(user: UserIn):\n    user_dict = user.model_dump()\n    user_dict.update({\"id\": 6})\n    return user_dict\n\n\n@app.get(\"/users/{username}\", status_code=200, response_model=UserOut)\nasync def get_user(username: str = Path(..., min_length=1)):\n    user = users.get(username, None)\n    if user:\n        return user\n    raise UserNotFoundException(username)\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_found_exception_handler(request: Request, exc: UserNotFoundException):\n    return JSONResponse(status_code=404,\n                        content={\n                            \"error_code\": 404,\n                            \"message\": f\"user: {exc.username} not found\"})\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707413765023-e619af15-7030-472e-91e8-002514b1f77a.png)\n\n### 处理多种返回\n\n- 通过`responses=`参数指定会包含的多种异常返回响应模型\n  - 但是这块需要注意一点：responses 中的异常响应模型，并不会对 return 的内容做格式化，所以需要自己处理一下返回的内容\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Path, HTTPException, status, Request\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nusers = {\n    \"a\": {\"id\": 1, \"username\": \"a\"},\n    \"b\": {\"id\": 2, \"username\": \"b\", \"password\": \"bbb\"},\n    \"c\": {\"id\": 3, \"username\": \"c\", \"password\": \"ccc\", \"description\": \"default\"},\n    \"d\": {\"id\": 4, \"username\": \"d\", \"password\": \"ddd\", \"description\": \"it's user d\"},\n    \"e\": {\"id\": 5, \"username\": \"e\", \"password\": \"eee\", \"description\": \"it's user e\", \"fullname\": \"Tony Stark\"}\n}\n\n\nclass UserBase(BaseModel):\n    id: Optional[int] = None\n    username: str\n    description: Optional[str] = \"default\"\n    fullname: Optional[str] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass ErrorMessage(BaseModel):\n    error_code: int\n    message: str\n\n\nclass UserNotFoundException(Exception):\n    def __init__(self, username: str):\n        self.username = username\n\n\n@app.post(\"/users\", status_code=201, response_model=UserOut, responses={\n    400: {\n        \"model\": ErrorMessage,\n    },\n    401: {\n        \"model\": ErrorMessage,\n    }\n})\nasync def create_user(user: UserIn):\n    if users.get(user.username, None):\n        error_message = ErrorMessage(error_code=400, message=f\"user: {user.username} already exists\")\n        return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content=error_message.model_dump())\n    user_dict = user.model_dump()\n    user_dict.update({\"id\": 6})\n    return user_dict\n\n\n@app.get(\"/users/{username}\", status_code=200, response_model=UserOut)\nasync def get_user(username: str = Path(..., min_length=1)):\n    user = users.get(username, None)\n    if user:\n        return user\n    raise UserNotFoundException(username)\n\n\n@app.exception_handler(UserNotFoundException)\nasync def user_not_found_exception_handler(request: Request, exc: UserNotFoundException):\n    return JSONResponse(status_code=404,\n                        content={\n                            \"error_code\": 404,\n                            \"message\": f\"user: {exc.username} not found\"})\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n\n```\n\n这会儿看结果就会有响应模型 400、401 的\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707414563542-a0c93efe-0efd-4de7-b5f2-fcb5c7b7a1d6.png)\n\n同时重复创建用户的话\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707414614798-7aa31869-8b89-4e05-8d98-d29f3cd56e5d.png)\n\n# 依赖注入\n\n- 依赖注入用于对依赖项的参数进行调用/引用，便于代码的复用，如分页功能\n\n创建一个`/depends`目录，然后在下面创建`main.py`\n\n## 函数作为依赖项\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n\ndef pageinfo_params(page_index: Optional[int] = 1, page_size: Optional[int] = 10):\n    return {\"page_index\": page_index, \"page_size\": page_size}\n\n\n@app.get(\"/items\")\nasync def get_items(page_info: dict = Depends(pageinfo_params)):\n    return page_info\n\n\n@app.get(\"/users\")\nasync def get_users(page_info: dict = Depends(pageinfo_params)):\n    return page_info\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707415487646-90251fe1-f485-4157-bcb0-e66fb4b4402f.png)\n\n## 类作为依赖项\n\n- 类作为依赖项时，以下两个表达效果一致\n  - `page_info: PageInfo = Depends(PageInfo)`\n  - `page_info: PageInfo = Depends()`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n\ndef pageinfo_params(page_index: Optional[int] = 1, page_size: Optional[int] = 10):\n    return {\"page_index\": page_index, \"page_size\": page_size}\n\n\nclass PageInfo:\n    def __init__(self, page_index: Optional[int] = 1, page_size: Optional[int] = 10):\n        self.page_index = page_index\n        self.page_size = page_size\n\n\n@app.get(\"/items\")\nasync def get_items(page_info: dict = Depends(pageinfo_params)):\n    return page_info\n\n\n@app.get(\"/users\")\nasync def get_users(page_info: PageInfo = Depends(PageInfo)):\n    return page_info\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n## 子依赖项\n\n子依赖项其实就是 依赖项中某项具有依赖项\n\n增加一个总页码的项\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n\ndef total_pages_params(total_page: Optional[int] = 1):\n    return total_page\n\n\ndef pageinfo_params(page_index: Optional[int] = 1, page_size: Optional[int] = 10,\n                    total: Optional[int] = Depends(total_pages_params)):\n    return {\"page_index\": page_index, \"page_size\": page_size, \"total\": total}\n\n\nclass PageInfo:\n    def __init__(self, page_index: Optional[int] = 1, page_size: Optional[int] = 10,\n                 total: Optional[int] = Depends(total_pages_params)):\n        self.page_index = page_index\n        self.page_size = page_size\n        self.total = total\n\n\n@app.get(\"/items\")\nasync def get_items(page_info: dict = Depends(pageinfo_params)):\n    return page_info\n\n\n@app.get(\"/users\")\nasync def get_users(page_info: PageInfo = Depends(PageInfo)):\n    return page_info\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707416127796-fa634dd4-bdba-40e1-9eda-d42a4fea7e49.png)\n\n## 通过依赖注解使用 dependencies\n\n给 get_users 加上一个鉴权的功能\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Depends, Header, HTTPException\n\napp = FastAPI()\n\n\nasync def auth_verify(api_token: Optional[str] = Header(default=None, alias=\"api-token\")):\n    if not api_token:\n        raise HTTPException(status_code=401, detail=\"No API token provided,Unauthorized\")\n\n\ndef total_pages_params(total_page: Optional[int] = 1):\n    return total_page\n\n\ndef pageinfo_params(page_index: Optional[int] = 1, page_size: Optional[int] = 10,\n                    total: Optional[int] = Depends(total_pages_params)):\n    return {\"page_index\": page_index, \"page_size\": page_size, \"total\": total}\n\n\nclass PageInfo:\n    def __init__(self, page_index: Optional[int] = 1, page_size: Optional[int] = 10,\n                 total: Optional[int] = Depends(total_pages_params)):\n        self.page_index = page_index\n        self.page_size = page_size\n        self.total = total\n\n\n@app.get(\"/items\")\nasync def get_items(page_info: dict = Depends(pageinfo_params)):\n    return page_info\n\n\n@app.get(\"/users\", dependencies=[Depends(auth_verify)])\nasync def get_users(page_info: PageInfo = Depends(PageInfo)):\n    return page_info\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707416843600-2f9e01ae-9aff-4efa-99a2-95ac473f101f.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707416858120-a773d67f-0797-488c-934b-ca2fc108b622.png)\n\n## 全局依赖注入\n\n如果不只是 get_user 需要鉴权，所有 api 都需要鉴权，这是可以在构造 app 的时候传入 dependencies\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Optional\n\nimport uvicorn\nfrom fastapi import FastAPI, Depends, Header, HTTPException\n\n\nasync def auth_verify(api_token: Optional[str] = Header(default=None, alias=\"api-token\")):\n    if not api_token:\n        raise HTTPException(status_code=401, detail=\"No API token provided,Unauthorized\")\n\n\napp = FastAPI(dependencies=[Depends(auth_verify)])\n\n\ndef total_pages_params(total_page: Optional[int] = 1):\n    return total_page\n\n\ndef pageinfo_params(page_index: Optional[int] = 1, page_size: Optional[int] = 10,\n                    total: Optional[int] = Depends(total_pages_params)):\n    return {\"page_index\": page_index, \"page_size\": page_size, \"total\": total}\n\n\nclass PageInfo:\n    def __init__(self, page_index: Optional[int] = 1, page_size: Optional[int] = 10,\n                 total: Optional[int] = Depends(total_pages_params)):\n        self.page_index = page_index\n        self.page_size = page_size\n        self.total = total\n\n\n@app.get(\"/items\")\nasync def get_items(page_info: dict = Depends(pageinfo_params)):\n    return page_info\n\n\n@app.get(\"/users\")\nasync def get_users(page_info: PageInfo = Depends(PageInfo)):\n    return page_info\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707417048757-7b8d825b-ea8f-4a99-887c-70cb899545ca.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707417054185-859dd14a-4b2d-4c79-a5f9-cdc81ddcddaf.png)\n\n# API 的身份认证\n\n## 插件准备\n\n- `python-multipart==0.0.6`\n- `PyJWT==2.8.0`\n\n```plain\nfastapi[all]\npython-multipart==0.0.6\nPyJWT==2.8.0\n```\n\n## 用户登录的 API\n\n创建一个目录`/security`然后创建一个`main.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime, timezone, timedelta\n\nimport jwt\nimport uvicorn\nfrom fastapi import FastAPI, Depends, HTTPException\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel\n\nSECURITY_KEY = \"zacharysecret\"\nALGORITHMS = \"HS256\"\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/token\")\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\napp = FastAPI()\n\n\ndef validate_user(username: str, password: str):\n    if username == \"zachary\" and password == \"123456\":\n        return username\n    return None\n\n\ndef get_current_user(token: str = Depends(oauth2_scheme)):\n    unauth_exp = HTTPException(status_code=401, detail=\"Unauthorized\")\n    try:\n        username = None\n        token_data = jwt.decode(token, SECURITY_KEY, ALGORITHMS)\n        if token_data:\n            username = token_data.get(\"username\", None)\n    except Exception as e:\n        raise unauth_exp\n\n    if not username:\n        raise unauth_exp\n\n    return username\n\n\n@app.post(\"/token\")\nasync def login(login_form: OAuth2PasswordRequestForm = Depends()):\n    username = validate_user(login_form.username, login_form.password)\n    if not username:\n        raise HTTPException(status_code=401, detail=\"Incorrect username or password\",\n                            headers={\"WWW-Authenticate\": \"Bearer\"})\n    token_expires = datetime.now(timezone.utc) + timedelta(minutes=30)\n    token_data = {\"username\": username, \"exp\": token_expires}\n\n    token = jwt.encode(token_data, SECURITY_KEY, ALGORITHMS)\n    return Token(access_token=token, token_type=\"bearer\")\n\n\n@app.get(\"/items\")\nasync def get_items(username: str = Depends(get_current_user)):\n    return {\"current_user\": username}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707419077885-f3f421bc-91d9-48a6-89d5-62fbf98a0f30.png)\n\n可以点击小锁头 先进行一个登录\n\n然后再实现需要登录的 api\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707419212468-c6af1473-be92-43bc-ae42-7db93a1961ec.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707419215956-67b9085d-d7a8-44e6-ac82-3a748d5992d4.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707419221433-f370ecaf-378d-41f0-99e7-ee1ae5ebeb07.png)\n\n# 连接数据库\n\n## 插件准备\n\n- `mysqlclient`\n- `SQLAlchemy`\n\n```plain\nfastapi[all]\npython-multipart==0.0.6\nPyJWT==2.8.0\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\n```\n\n## 定义数据库表映射类\n\n创建一个`/db_process`目录，然后创建一个`main.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport uvicorn\nfrom fastapi import FastAPI\nfrom sqlalchemy import create_engine, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nengine = create_engine(\"mysql+mysqldb://root:980226@localhost:3306/testApi\", echo=True)\n\n\n# 定义数据库映射类\nclass StudentEntity(Base):\n    __tablename__ = \"students\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(String(128), unique=True, nullable=False)\n    gender: Mapped[str] = mapped_column(String(10), nullable=False)\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\napp = FastAPI()\n\n\n# 定义API内容\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n如果现在运行一下这个代码，就会生成 students 这张表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707421041848-6b3e99ab-b2dd-4e40-b137-8408aeb88f2d.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707421065251-6c28ff1a-a450-4ff3-8aa3-798edbd65f44.png)运行后\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707421097785-130041d9-36d8-4546-8dfa-6f2b6f4f6a0d.png)\n\n## 准备 API 的输入输出 schema 类\n\n```python\n...\n# 定义API模型\nclass StudentBase(BaseModel):\n    name: str\n    gender: str\n\n\nclass StudentCreate(StudentBase):\n    pass\n\n\nclass StudentOut(StudentBase):\n    id: int\n```\n\n## 准备用户数据库连接的 depends 依赖项\n\n```python\ndef get_bd_session():\n    session = Session()\n    try:\n        yield session\n    finally:\n        session.close()\n```\n\n## 创建和查看所有用户 API\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import List\n\nimport uvicorn\nfrom fastapi import FastAPI, Depends, HTTPException\nfrom pydantic import BaseModel\nfrom sqlalchemy import create_engine, Integer, String, select, asc\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nengine = create_engine(\"mysql+mysqldb://root:980226@localhost:3306/testApi\", echo=True)\n\n\n# 定义数据库映射类\nclass StudentEntity(Base):\n    __tablename__ = \"students\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(String(128), unique=True, nullable=False)\n    gender: Mapped[str] = mapped_column(String(10), nullable=False)\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\napp = FastAPI()\n\n\n# 定义API模型\nclass StudentBase(BaseModel):\n    name: str\n    gender: str\n\n\nclass StudentCreate(StudentBase):\n    pass\n\n\nclass StudentOut(StudentBase):\n    id: int\n\n\ndef get_bd_session():\n    session = Session()\n    try:\n        yield session\n    finally:\n        session.close()\n\n\n@app.post('/students', response_model=StudentOut)\nasync def create_student(student: StudentCreate, db_session: Session = Depends(get_bd_session)):\n    query = select(StudentEntity).where(StudentEntity.name == student.name)\n    result = db_session.execute(query).scalars().all()\n    if result:\n        raise HTTPException(status_code=400, detail=f\"该学生({student.name})已存在\")\n\n    student = StudentEntity(name=student.name, gender=student.gender)\n    db_session.add(student)\n    db_session.commit()\n    return student\n\n\n@app.get('/students', response_model=List[StudentOut])\nasync def get_students(db_session: Session = Depends(get_bd_session)):\n    query = select(StudentEntity).order_by(asc(StudentEntity.name))\n    return db_session.execute(query).scalars().all()\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n创建一个不存在的用户：成功\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707422311208-d0f91372-6412-48c6-8024-4013eb6fdfa1.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707422337029-8d9f600c-1c90-4606-b969-07147901d691.png)\n\n查看所有学生列表：成功\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707422382141-228e4281-9581-41b4-bc26-1cb459805c5d.png)\n\n创建一个已经存在的学生：异常\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707422411346-a70623a9-0b58-4a2a-813f-9db973b2e5f8.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707422431330-37d4b304-37ce-47c2-b8e1-5d5991a2f247.png)\n\n# 实现更新与删除\n\n在`/db_process/main.py`中做修改\n\n## 更新\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import List\n\nimport uvicorn\nfrom fastapi import FastAPI, Depends, HTTPException, Path\nfrom pydantic import BaseModel\nfrom sqlalchemy import create_engine, Integer, String, select, asc\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nengine = create_engine(\"mysql+mysqldb://root:980226@localhost:3306/testApi\", echo=True)\n\n\n# 定义数据库映射类\nclass StudentEntity(Base):\n    __tablename__ = \"students\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(String(128), unique=True, nullable=False)\n    gender: Mapped[str] = mapped_column(String(10), nullable=False)\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\napp = FastAPI()\n\n\n# 定义API模型\nclass StudentBase(BaseModel):\n    name: str\n    gender: str\n\n\nclass StudentCreate(StudentBase):\n    pass\n\n\nclass StudentUpdate(StudentBase):\n    pass\n\n\nclass StudentOut(StudentBase):\n    id: int\n\n\ndef get_bd_session():\n    session = Session()\n    try:\n        yield session\n    finally:\n        session.close()\n\n\n@app.post('/students', response_model=StudentOut)\nasync def create_student(student: StudentCreate, db_session: Session = Depends(get_bd_session)):\n    query = select(StudentEntity).where(StudentEntity.name == student.name)\n    result = db_session.execute(query).scalars().all()\n    if result:\n        raise HTTPException(status_code=400, detail=f\"该学生({student.name})已存在\")\n\n    student = StudentEntity(name=student.name, gender=student.gender)\n    db_session.add(student)\n    db_session.commit()\n    return student\n\n\n@app.get('/students', response_model=List[StudentOut])\nasync def get_students(db_session: Session = Depends(get_bd_session)):\n    query = select(StudentEntity).order_by(asc(StudentEntity.name))\n    return db_session.execute(query).scalars().all()\n\n\n@app.put('/students/{student_id}', response_model=StudentOut)\nasync def update_student(*, student_id: int = Path(...), student: StudentUpdate,\n                         db_session: Session = Depends(get_bd_session)):\n    query = select(StudentEntity).where(StudentEntity.id == student_id)\n    exist_student = db_session.execute(query).scalar()\n    if not exist_student:\n        raise HTTPException(status_code=404, detail=f\"该学生({student_id})不存在\")\n    exist_student.name = student.name\n    exist_student.gender = student.gender\n    db_session.commit()\n    return exist_student\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707423177226-54b19804-376e-4c50-9d1f-863796ff4f09.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707423328489-86c01df3-20e8-4a15-85ac-b01105a108cb.png)\n\n更新已经可以实现了，但是这块仍旧会有些问题：\n\n- 如果 StudentUpdate 有更新的话，就会需要修改字段更新的部分\n- 如果字段比较多的话需要写的内容也比较多\n- 虽然 SQLAlchemy 提供了 update 方法可以直接更新，但是更新的内容不能直接返回，还需要重新查一次数据库才行\n\n这块列出三种更新方法\n\n```python\ndef set_attrs(obj, data: dict):\n    if data:\n        for key, value in data.items():\n            setattr(obj, key, value)\n\n# 更新方法1，缺点：无法直接获取返回的对象，需要再查一次库，优点：很方便\n# update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(**student.dict())\nupdate_query = update(StudentEntity).where(StudentEntity.id == student_id).values(student.model_dump())\ndb_session.execute(update_query)\n\n# 更新方法2，缺点：如果字段很多，需要一个一个写很麻烦，如果实体类改变字段也需要改 优点：可以直接修改内存中的对象，修改后可以返回\nexist_student.name = student.name\nexist_student.gender = student.gender\n\n# 更新方法3 优点：可以获取内存中的对象，便于返回；同时如果实体类改变，也会对应修改\nset_attrs(exist_student, student.dict())\n```\n\n完整代码\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import List\n\nimport uvicorn\nfrom fastapi import FastAPI, Depends, HTTPException, Path\nfrom pydantic import BaseModel\nfrom sqlalchemy import create_engine, Integer, String, select, asc, update\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker\n\n\ndef set_attrs(obj, data: dict):\n    if data:\n        for key, value in data.items():\n            setattr(obj, key, value)\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nengine = create_engine(\"mysql+mysqldb://root:980226@localhost:3306/testApi\", echo=True)\n\n\n# 定义数据库映射类\nclass StudentEntity(Base):\n    __tablename__ = \"students\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(String(128), unique=True, nullable=False)\n    gender: Mapped[str] = mapped_column(String(10), nullable=False)\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\napp = FastAPI()\n\n\n# 定义API模型\nclass StudentBase(BaseModel):\n    name: str\n    gender: str\n\n\nclass StudentCreate(StudentBase):\n    pass\n\n\nclass StudentUpdate(StudentBase):\n    pass\n\n\nclass StudentOut(StudentBase):\n    id: int\n\n\ndef get_bd_session():\n    session = Session()\n    try:\n        yield session\n    finally:\n        session.close()\n\n\n@app.post('/students', response_model=StudentOut)\nasync def create_student(student: StudentCreate, db_session: Session = Depends(get_bd_session)):\n    query = select(StudentEntity).where(StudentEntity.name == student.name)\n    result = db_session.execute(query).scalars().all()\n    if result:\n        raise HTTPException(status_code=400, detail=f\"该学生({student.name})已存在\")\n\n    student = StudentEntity(name=student.name, gender=student.gender)\n    db_session.add(student)\n    db_session.commit()\n    return student\n\n\n@app.get('/students', response_model=List[StudentOut])\nasync def get_students(db_session: Session = Depends(get_bd_session)):\n    query = select(StudentEntity).order_by(asc(StudentEntity.name))\n    return db_session.execute(query).scalars().all()\n\n\n@app.put('/students/{student_id}', response_model=StudentOut)\nasync def update_student(*, student_id: int = Path(...), student: StudentUpdate,\n                         db_session: Session = Depends(get_bd_session)):\n    query = select(StudentEntity).where(StudentEntity.id == student_id)\n    exist_student = db_session.execute(query).scalar()\n    if not exist_student:\n        raise HTTPException(status_code=404, detail=f\"该学生({student_id})不存在\")\n\n    # # 更新方法1，缺点：无法直接获取返回的对象，需要再查一次库，优点：很方便\n    # # update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(**student.dict())\n    # update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(student.model_dump())\n    # db_session.execute(update_query)\n    #\n    # # 更新方法2，缺点：如果字段很多，需要一个一个写很麻烦，如果实体类改变字段也需要改 优点：可以直接修改内存中的对象，修改后可以返回\n    # exist_student.name = student.name\n    # exist_student.gender = student.gender\n\n    # 更新方法3 优点：可以获取内存中的对象，便于返回；同时如果实体类改变，也会对应修改\n    set_attrs(exist_student, student.dict())\n\n    db_session.commit()\n    return exist_student\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n## 删除\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import List\n\nimport uvicorn\nfrom fastapi import FastAPI, Depends, HTTPException, Path\nfrom pydantic import BaseModel\nfrom sqlalchemy import create_engine, Integer, String, select, asc, update\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker\n\n\ndef set_attrs(obj, data: dict):\n    if data:\n        for key, value in data.items():\n            setattr(obj, key, value)\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nengine = create_engine(\"mysql+mysqldb://root:980226@localhost:3306/testApi\", echo=True)\n\n\n# 定义数据库映射类\nclass StudentEntity(Base):\n    __tablename__ = \"students\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(String(128), unique=True, nullable=False)\n    gender: Mapped[str] = mapped_column(String(10), nullable=False)\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\napp = FastAPI()\n\n\n# 定义API模型\nclass StudentBase(BaseModel):\n    name: str\n    gender: str\n\n\nclass StudentCreate(StudentBase):\n    pass\n\n\nclass StudentUpdate(StudentBase):\n    pass\n\n\nclass StudentOut(StudentBase):\n    id: int\n\n\ndef get_bd_session():\n    session = Session()\n    try:\n        yield session\n    finally:\n        session.close()\n\n\n@app.post('/students', response_model=StudentOut)\nasync def create_student(student: StudentCreate, db_session: Session = Depends(get_bd_session)):\n    query = select(StudentEntity).where(StudentEntity.name == student.name)\n    result = db_session.execute(query).scalars().all()\n    if result:\n        raise HTTPException(status_code=400, detail=f\"该学生({student.name})已存在\")\n\n    student = StudentEntity(name=student.name, gender=student.gender)\n    db_session.add(student)\n    db_session.commit()\n    return student\n\n\n@app.get('/students', response_model=List[StudentOut])\nasync def get_students(db_session: Session = Depends(get_bd_session)):\n    query = select(StudentEntity).order_by(asc(StudentEntity.name))\n    return db_session.execute(query).scalars().all()\n\n\ndef check_student_exist(student_id: int, db_session: Session) -> StudentEntity:\n    query = select(StudentEntity).where(StudentEntity.id == student_id)\n    exist_student = db_session.execute(query).scalar()\n    if not exist_student:\n        raise HTTPException(status_code=404, detail=f\"该学生({student_id})不存在\")\n    return exist_student\n\n\n@app.put('/students/{student_id}', response_model=StudentOut)\nasync def update_student(*, student_id: int = Path(...), student: StudentUpdate,\n                         db_session: Session = Depends(get_bd_session)):\n    exist_student = check_student_exist(student_id, db_session)\n\n    # # 更新方法1，缺点：无法直接获取返回的对象，需要再查一次库，优点：很方便\n    # # update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(**student.dict())\n    # update_query = update(StudentEntity).where(StudentEntity.id == student_id).values(student.model_dump())\n    # db_session.execute(update_query)\n    #\n    # # 更新方法2，缺点：如果字段很多，需要一个一个写很麻烦，如果实体类改变字段也需要改 优点：可以直接修改内存中的对象，修改后可以返回\n    # exist_student.name = student.name\n    # exist_student.gender = student.gender\n\n    # 更新方法3 优点：可以获取内存中的对象，便于返回；同时如果实体类改变，也会对应修改\n    set_attrs(exist_student, student.dict())\n\n    db_session.commit()\n    return exist_student\n\n\n@app.delete('/students/{student_id}')\nasync def delete_student(student_id: int = Path(...), db_session: Session = Depends(get_bd_session)):\n    exist_student = check_student_exist(student_id, db_session)\n\n    db_session.delete(exist_student)\n    db_session.commit()\n    return exist_student\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707424308639-93cdaa3e-4b2f-491b-9bf3-5275318cdcd9.png)\n\n# 后台任务\n\n## 为什么需要后台任务\n\n当一个 API 执行任务的时间较长时，调用者不希望一直等待任务完成\n\n创建一个目录`/background_task`，然后创建一个`main.py`\n\n## 任务函数\n\n- 任务函数是一个普通的带参数或者无参数的函数\n- 可以是 async 函数或者普通函数\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport time\n\nimport uvicorn\nfrom fastapi import FastAPI, BackgroundTasks\n\napp = FastAPI()\n\n\ndef send_message(message: str):\n    print(f\"start sending message: {message}\")\n    time.sleep(5)\n    print(f\"finish sending message: {message}\")\n    return True\n\n\n@app.post(\"/notify\")\nasync def send_notification(message: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(send_message, message=message)\n    return {\"message\": f\"Sending notification: {message} in background\"}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707425151901-85e57af0-d3fa-4f4f-bc34-9786bd12df63.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707425161955-ccf19b5c-215d-44d1-b4e0-ff606af4467a.png)\n\n# 元数据与文档 URL\n\n## 标题、描述和版本信息\n\n- `title`\n- `description`\n- `version`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707425477457-91d642ad-e9d7-43ec-aa74-9e24da6d1e87.png)\n\n目前默认的 swagger-UI 的标题和版本信息都是默认的，没有描述\n\n上面这些内容都可以在构造 app 的时候设置\n\n项目目录下创建一个`/metadata_api`，然后创建一个`main.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI(title=\"My API about query\",\n              description=\"All this API is some query api use to zachary's blog\",\n              version=\"1.0.0\")\n\n\n@app.get(\"/books\")\nasync def get_books():\n    return {\"books\": [\"book1\", \"book2\", \"book3\"]}\n\n\n@app.get(\"/users\")\nasync def get_users():\n    return {\"users\": [\"user1\", \"user2\", \"user3\"]}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707425591522-5d97d68d-a5f7-43a3-956b-fb89102b115e.png)\n\n## 服务条款与协议信息\n\n- `terms_of_service`服务条款\n- `contact`联系信息\n  - `name`姓名\n  - `url`连接\n  - `email`邮箱\n- `license_info`协议信息\n  - `name`协议名称\n  - `url`协议地址\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nimport uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI(title=\"My API about query\",\n              description=\"All this API is some query api use to zachary's blog\",\n              version=\"1.0.0\",\n              terms_of_service=\"https://zachary.com\",\n              contact={\n                  \"name\": \"zachary\",\n                  \"url\": \"https://zachary.com\",\n                  \"email\": \"zachary@qq.com\"\n              },\n              license_info={\n                  \"name\": \"Apache 2.0\",\n                  \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n              })\n\n\n@app.get(\"/books\")\nasync def get_books():\n    return {\"books\": [\"book1\", \"book2\", \"book3\"]}\n\n\n@app.get(\"/users\")\nasync def get_users():\n    return {\"users\": [\"user1\", \"user2\", \"user3\"]}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707426376829-0be775c8-50b4-4b3b-b778-2be2bc7e063e.png)\n\n## 标签\n\n- `openapi_tags=tags_metadata`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nimport uvicorn\nfrom fastapi import FastAPI\n\ntags_metadata = [\n    {\n        \"name\": \"books\",\n        \"description\": \"All this API for books management\",\n        \"externalDocs\": {\n            \"description\": \"Books external docs\",\n            \"url\": \"https://www.baidu.com\"\n        }\n    },\n    {\n        \"name\": \"users\",\n        \"description\": \"All this API for users management\",\n    }\n]\n\napp = FastAPI(title=\"My API about query\",\n              description=\"All this API is some query api use to zachary's blog\",\n              version=\"1.0.0\",\n              terms_of_service=\"https://zachary.com\",\n              contact={\n                  \"name\": \"zachary\",\n                  \"url\": \"https://zachary.com\",\n                  \"email\": \"zachary@qq.com\"\n              },\n              license_info={\n                  \"name\": \"Apache 2.0\",\n                  \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n              },\n              openapi_tags=tags_metadata)\n\n\n@app.get(\"/books\", tags=[\"books\", \"users\"])\nasync def get_books():\n    return {\"books\": [\"book1\", \"book2\", \"book3\"]}\n\n\n@app.get(\"/users\", tags=[\"users\"])\nasync def get_users():\n    return {\"users\": [\"user1\", \"user2\", \"user3\"]}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707426434467-6a5d23d6-2336-4545-a023-130977d43e77.png)\n\n## openapiURL\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707426455579-45f8ff2d-2860-4513-8240-e2d0eb4ded4b.png)\n\n- `openapi_url=\"/api/v1/openapi.json\"`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nimport uvicorn\nfrom fastapi import FastAPI\n\ntags_metadata = [\n    {\n        \"name\": \"books\",\n        \"description\": \"All this API for books management\",\n        \"externalDocs\": {\n            \"description\": \"Books external docs\",\n            \"url\": \"https://www.baidu.com\"\n        }\n    },\n    {\n        \"name\": \"users\",\n        \"description\": \"All this API for users management\",\n    }\n]\n\napp = FastAPI(title=\"My API about query\",\n              description=\"All this API is some query api use to zachary's blog\",\n              version=\"1.0.0\",\n              terms_of_service=\"https://zachary.com\",\n              contact={\n                  \"name\": \"zachary\",\n                  \"url\": \"https://zachary.com\",\n                  \"email\": \"zachary@qq.com\"\n              },\n              license_info={\n                  \"name\": \"Apache 2.0\",\n                  \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n              },\n              openapi_tags=tags_metadata,\n              openapi_url=\"/api/v1/openapi.json\")\n\n\n@app.get(\"/books\", tags=[\"books\", \"users\"])\nasync def get_books():\n    return {\"books\": [\"book1\", \"book2\", \"book3\"]}\n\n\n@app.get(\"/users\", tags=[\"users\"])\nasync def get_users():\n    return {\"users\": [\"user1\", \"user2\", \"user3\"]}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n## 文档 URL\n\n- `docs_url=\"/xxx\"`\n- `redoc_url=\"/xxx\"`\n- 如果设置为 None 为禁用\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nimport uvicorn\nfrom fastapi import FastAPI\n\ntags_metadata = [\n    {\n        \"name\": \"books\",\n        \"description\": \"All this API for books management\",\n        \"externalDocs\": {\n            \"description\": \"Books external docs\",\n            \"url\": \"https://www.baidu.com\"\n        }\n    },\n    {\n        \"name\": \"users\",\n        \"description\": \"All this API for users management\",\n    }\n]\n\napp = FastAPI(title=\"My API about query\",\n              description=\"All this API is some query api use to zachary's blog\",\n              version=\"1.0.0\",\n              terms_of_service=\"https://zachary.com\",\n              contact={\n                  \"name\": \"zachary\",\n                  \"url\": \"https://zachary.com\",\n                  \"email\": \"zachary@qq.com\"\n              },\n              license_info={\n                  \"name\": \"Apache 2.0\",\n                  \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n              },\n              openapi_tags=tags_metadata,\n              openapi_url=\"/api/v1/openapi.json\",\n              redoc_url=\"/r\",\n              docs_url=\"/swagger\")\n\n\n@app.get(\"/books\", tags=[\"books\", \"users\"])\nasync def get_books():\n    return {\"books\": [\"book1\", \"book2\", \"book3\"]}\n\n\n@app.get(\"/users\", tags=[\"users\"])\nasync def get_users():\n    return {\"users\": [\"user1\", \"user2\", \"user3\"]}\n\n\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", reload=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707426867289-d6bbab62-371c-4a2a-b6e4-0f7a71a6f47c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1707426909576-540635ef-8619-4908-8f45-b5ceee5bd6e4.png)\n\n> 更新: 2024-02-09 05:17:11  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/ifnigya72ztak2tr>\n","tags":["FastAPI","Python Web","RESTful API","SQLAlchemy"],"categories":["Python Web"]},{"title":"RESTful API","url":"/blog/586091050/","content":"\n# RESTful API\n\n# 初识 RESTful API\n\n## 什么是 RESTful API\n\n- REST（Representational State Transfer）表现层状态转换\n  - 软件架构风格定义\n  - 无状态交互的客户端-服务器架构\n  - 基于 HTTP 格式的请求规范\n  - 使用 JSON 携带数据\n\n## RESTful API 的组成要素\n\n- 端点（EndPoint）- URL\n- 请求方法（Method）\n  - GET：获取服务器上保存的资源\n  - POST：将新的资源保存到服务器上\n  - PUT：更新服务器上现有的资源\n  - DELETE：删除服务器上现有的资源\n- 头部信息（Headers）- Request、Response\n- 请求数据 - 需要发送给服务器的具体数据\n\n## 实现第一个 RESTful API\n\n基于 Python3.10 实现的 flask 项目\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706728112592-91543df6-9b17-4b52-bdfb-e07aca0e71cd.png)\n\n准备一个`requirements.txt`\n\n```plain\nflask==3.0.0\n```\n\n新建一个`/routes`的 package\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\nfrom routes import student_api\n```\n\n接着创建一个`/routes/student_api.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import jsonify\nfrom routes import app\n\n\n@app.route('/student/<student_id>', method='GET')\ndef get_student(student_id):\n    student = {\n        'id': student_id,\n        'name': 'Zachary',\n        'gender': 'male'\n    }\n    return jsonify(student)\n```\n\n修改`app.py`中的内容\n\n```python\nfrom routes import app\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n打开 debug 模式\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706728743000-b8db2aa9-049e-4f90-8fb5-021bcefc1ed3.png)\n\n运行项目之后，使用 postman 调试，新建一个`RESTful API`集\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706728981446-f2fc9712-a51c-4f6d-9a70-1d601ba354c2.png)\n\n然后新建一个`GET`请求，命名为`Get Student by ID`，在请求地址输入：`http://127.0.0.1:5000/students/1`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706730717802-f6b2478c-e621-4332-a39f-136b65f3b34e.png)\n\n# 使用 flask-restful 开发 API(\\*)\n\n## 安装 flask-restful\n\n- 使用 `pip install flask-restful==0.3.10`\n- 在`requirements.txt`中添加\n\n```plain\nflask==3.0.0\nflask-restful==0.3.10\n```\n\n## 创建 resources\n\n在 flask 中之前的路由管理都放在了 routes 中，在 restful api 中使用`/resources`进行管理\n\n在项目路径下创建一个`/resources`的包\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import Flask\nfrom flask_restful import Api\n\napp = Flask(__name__)\napi = Api(app)\n```\n\n## 创建资源类\n\n在包`/resources`下创建一个`student_resource.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask_restful import Resource\n\nfrom resources import api\n\n\nclass StudentResource(Resource):\n    def get(self, student_id: int):\n        student = {\n            'id': student_id,\n            'name': 'Zachary',\n            'gender': 'male'\n        }\n        return student\n\n\napi.add_resource(StudentResource, '/students/<int:student_id>')\n```\n\n然后给**init**.py 添加一下这个 student_resource\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import Flask\nfrom flask_restful import Api\n\napp = Flask(__name__)\napi = Api(app)\n\nfrom resources import student_resource\n```\n\n最后改一下 app.py 中的 app 对象\n\n```python\nfrom resources import app\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706731951602-e180fc60-460a-4d69-ab47-067ad75c03d0.png)\n\n## 增加新请求\n\n这块暂时模拟一下实现了一个 `PUT`请求\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask_restful import Resource\n\nfrom resources import api\n\n\nclass StudentResource(Resource):\n    def get(self, student_id: int):\n        student = {\n            'id': student_id,\n            'name': 'Zachary',\n            'gender': 'male'\n        }\n        return student\n\n    def put(self, student_id: int):\n        student = {\n            'id': student_id,\n            'name': 'Michael',\n            'gender': 'male'\n        }\n        return student\n\n\napi.add_resource(StudentResource, '/students/<int:student_id>')\n```\n\n然后在 postman 新增一个请求\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706732469151-40a730d4-8fff-4214-9d19-ea07b1ca1030.png)\n\n## 加入状态码\n\n有时候的请求会有正确结果的响应，但有时候响应式错误的，因此需要一个用于告诉浏览器，该响应结果是正确的还是错误的这样一个标识符，所以使用状态码，200 默认可以不填\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask_restful import Resource\n\nfrom resources import api\n\n\nclass StudentResource(Resource):\n    def get(self, student_id: int):\n        student = {\n            'id': student_id,\n            'name': 'Zachary',\n            'gender': 'male'\n        }\n        if student_id == 1:\n            return student, 200\n        else:\n            return {'error': 'Student not found'}, 404\n\n    def put(self, student_id: int):\n        student = {\n            'id': student_id,\n            'name': 'Michael',\n            'gender': 'male'\n        }\n        return student\n\n\napi.add_resource(StudentResource, '/students/<int:student_id>')\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706732731158-918ad3b1-89b1-4f50-b86d-e06ce5ba085e.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706732711569-e8bdabf6-e4d3-46ab-9cc7-512edaf8a8b2.png)\n\n# 连接数据库\n\n## 数据库准备\n\n先准备一下数据库，创建一个名为`restful_db`的数据库，然后准备一个`books`的表\n\n```sql\ncreate database restful_db;\n\nuse restful_db;\n\ncreate TABLE `books`(\n    `id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    `title` VARCHAR(255) NOT NULL UNIQUE,\n    `author` VARCHAR(255) NOT NULL,\n    `publish_time` TIMESTAMP NOT NULL\n);\n```\n\n直接在 IDE 操作\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706795488367-c23dd0ce-2fa7-452d-9e2b-87a01d2efda7.png)\n\n然后随便准备点数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706799516232-bf2adcff-b2a7-4d92-b8bd-1b55072f0c5a.png)\n\n## 相关包准备\n\n```plain\nflask==3.0.0\nflask-restful==0.3.10\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\nflask-SQLAlchemy==3.1.1\n```\n\n## 数据库连接初始化\n\n在`/resources`的`__init__.py`中添加数据库的相关配置\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import Flask\nfrom flask_restful import Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napi = Api(app)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqldb://root:980226@localhost:3306/restful_db'\ndb = SQLAlchemy(app)\n\nfrom resources import student_resource\n\n```\n\n## 实体类映射\n\n在项目目录下创建一个`/models`的 package\n\n然后创建一个`book.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nfrom sqlalchemy import Integer, String, TIMESTAMP\nfrom sqlalchemy.orm import mapped_column, Mapped\n\nfrom resources import db\n\n\nclass Book(db.Model):\n    __tablename__ = 'books'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    title: Mapped[str] = mapped_column(String(255), unique=True, nullable=False)\n    author:Mapped[str] = mapped_column(String(255), nullable=False)\n    publish_time:Mapped[datetime] = mapped_column(TIMESTAMP, nullable=False)\n\n```\n\n## 定义 BookService\n\n在项目目录下创建一个`/services`，在其中新建一个`book_service.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom models.book import Book\nfrom resources import db\n\n\nclass BookService:\n\n    def get_book_by_id(self, book_id: int):\n        return db.session.get(Book, book_id)\n```\n\n## 定义 BookResources\n\n在`/resources`目录下新建一个`book_resource.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask_restful import Resource\n\nfrom resources import api\nfrom services.book_service import BookService\n\n\nclass BookResource(Resource):\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book, 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\n```\n\n然后引入一下 book_resource\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import Flask\nfrom flask_restful import Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napi = Api(app)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqldb://root:980226@localhost:3306/restful_db'\ndb = SQLAlchemy(app)\n\nfrom resources import student_resource, book_resource\n```\n\n这时候如果尝试去测试一下会报错\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706799644876-5089001b-83ac-47d1-94f6-fff23352fe0f.png)\n\n```shell\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type Book is not JSON serializable\n```\n\n解决方法：使用一个序列化方法，返回对象，定义了一个`serialize`方法，其中 publish_time 也需要再进一步序列化，使用`isoformat()`将其转换为字符串\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nfrom sqlalchemy import Integer, String, TIMESTAMP\nfrom sqlalchemy.orm import mapped_column, Mapped\n\nfrom resources import db\n\n\nclass Book(db.Model):\n    __tablename__ = 'books'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    title: Mapped[str] = mapped_column(String(255), unique=True, nullable=False)\n    author: Mapped[str] = mapped_column(String(255), nullable=False)\n    publish_time: Mapped[datetime] = mapped_column(TIMESTAMP, nullable=False)\n\n    def serialize(self):\n        return {\n            'id': self.id,\n            'title': self.title,\n            'author': self.author,\n            'publish_time': self.publish_time.isoformat()\n        }\n\n```\n\n然后`book_resource`也稍微修改\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask_restful import Resource\n\nfrom resources import api\nfrom services.book_service import BookService\n\n\nclass BookResource(Resource):\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\n```\n\n结果：\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706800066994-85b3e4df-07ac-46f3-9e25-b5baf9c67f15.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706800079415-bfd6b988-2ea3-418f-9e99-5e8d7d4c7dc1.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706802442844-9ac99534-4ffc-4fa8-8adf-d78944dbd69c.png)\n\n# 新增与修改 API\n\n## 新增数据 API\n\n### 定义资源类\n\n新增数据需要使用`POST`来实现，考虑到新增的时候 URL 路径不需要传递参数\n\n但是为了区分先前定义的资源，同时可以把查找所有书籍也实现一下\n\n重新定义一个资源类`BookListResource`\n\n- 获取所有书籍列表\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask_restful import Resource\n\nfrom resources import api\nfrom services.book_service import BookService\n\n\nclass BookResource(Resource):\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n```\n\n同时得实现相关的 Service，包括查询所有书籍\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import asc, Select\n\nfrom models.book import Book\nfrom resources import db\n\n\nclass BookService:\n\n    def get_book_by_id(self, book_id: int):\n        return db.session.get(Book, book_id)\n\n    def get_all_books(self):\n        query = Select(Book).order_by(asc(Book.title))\n        return db.session.scalars(query).all()\n```\n\n测试一下获取所有书籍\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706801292125-33b06bd5-3a98-4c63-b4fe-0732ed94825b.png)\n\n- 新增一个书籍\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nfrom flask import request\nfrom flask_restful import Resource\n\nfrom models.book import Book\nfrom resources import api\nfrom services.book_service import BookService\n\n\nclass BookResource(Resource):\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    def post(self):\n        request_json = request.json\n        if request_json:\n            title = request_json.get('title', None)\n            author = request_json.get('author', None)\n            publish_time = datetime.fromisoformat(request_json.get('publish_time', None))\n            book = Book(title=title, author=author, publish_time=publish_time)\n\n            if title and author and publish_time:\n                book = BookService().create_book(book)\n                return book.serialize(), 200\n        else:\n            return {'error': 'Invalid request, please provide book info as json'}, 400\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import asc, Select\n\nfrom models.book import Book\nfrom resources import db\n\n\nclass BookService:\n\n    def get_book_by_id(self, book_id: int):\n        return db.session.get(Book, book_id)\n\n    def get_all_books(self):\n        query = Select(Book).order_by(asc(Book.title))\n        return db.session.scalars(query).all()\n\n    def create_book(self, book: Book):\n        db.session.add(book)\n        db.session.commit()\n        return book\n```\n\n测试一下 新增一本书籍\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706802373214-bcca1af3-8fbd-47a1-bb95-ae750a29ebb8.png)\n\n再使用获取书籍 获取全部书籍\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706802399868-e261ec92-1f6b-4812-995e-747c50ae64fc.png)\n\n### 修复重复提交错误显示\n\n但是如果现在重复提交的话，由于书名不允许重复就会出现这样的错误\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706802843211-56e17b0d-199c-4393-8d62-4667e0dde1ec.png)\n\n应该修改地 显示更加直观\n\n其实就是在新增的时候先查一下 该 title 是不是在数据库中存在 然后做个判断\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nfrom flask import request\nfrom flask_restful import Resource\n\nfrom models.book import Book\nfrom resources import api\nfrom services.book_service import BookService\n\n\nclass BookResource(Resource):\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time = datetime.fromisoformat(request_json.get('publish_time', None))\n                book = Book(title=title, author=author, publish_time=publish_time)\n\n                if title and author and publish_time:\n                    book = BookService().create_book(book)\n                    return book.serialize(), 200\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import asc, Select\n\nfrom models.book import Book\nfrom resources import db\n\n\nclass BookService:\n\n    def get_book_by_id(self, book_id: int):\n        return db.session.get(Book, book_id)\n\n    def get_all_books(self):\n        query = Select(Book).order_by(asc(Book.title))\n        return db.session.scalars(query).all()\n\n    def get_book_by_title(self, title: str):\n        query = Select(Book).where(Book.title == title)\n        return db.session.scalar(query)\n\n    def create_book(self, book: Book):\n        existed_book = self.get_book_by_title(book.title)\n        if existed_book:\n            raise Exception(f'Book(title:{book.title}) already exists')\n        db.session.add(book)\n        db.session.commit()\n        return book\n```\n\n这时 如果再重复提交会\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706803431739-1bb632bb-4a26-42ca-85e0-ee6e62e3fdd8.png)\n\n## 修改数据 API\n\n修改数据这块的逻辑其实和上面新增数据差不多，代码大多可以复用\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nfrom flask import request\nfrom flask_restful import Resource\n\nfrom models.book import Book\nfrom resources import api\nfrom services.book_service import BookService\n\n\nclass BookResource(Resource):\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n    def put(self, book_id: int):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n                book = Book(id=book_id, title=title, author=author, publish_time=publish_time)\n\n                book = BookService().update_book(book)\n                return book.serialize(), 200\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n\n                if title and author and publish_time:\n                    book = Book(title=title, author=author, publish_time=publish_time)\n                    book = BookService().create_book(book)\n                    return book.serialize(), 200\n                else:\n                    return {'error': 'Invalid request, please provide complete book info'}, 400\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import asc, Select, and_\n\nfrom models.book import Book\nfrom resources import db\n\n\nclass BookService:\n\n    def get_book_by_id(self, book_id: int):\n        return db.session.get(Book, book_id)\n\n    def get_all_books(self):\n        query = Select(Book).order_by(asc(Book.title))\n        return db.session.scalars(query).all()\n\n    def get_book_by_title(self, title: str):\n        query = Select(Book).where(Book.title == title)\n        return db.session.scalar(query)\n\n    def create_book(self, book: Book):\n        existed_book = self.get_book_by_title(book.title)\n        if existed_book:\n            raise Exception(f'Book(title:{book.title}) already exists')\n        db.session.add(book)\n        db.session.commit()\n        return book\n\n    def get_book_by_title_and_not_id(self, title: str, book_id: int):\n        query = Select(Book).where(and_(Book.title == title, Book.id != book_id))\n        return db.session.scalar(query)\n\n    def update_book(self, book: Book):\n        existed_book = self.get_book_by_id(book.id)\n        if not existed_book:\n            raise Exception(f'Book(id:{book.id}) not found')\n        existed_same_title_book = self.get_book_by_title_and_not_id(book.title, book.id)\n        if existed_same_title_book:\n            raise Exception(f'Book(title:{book.title}) already exists')\n        if book.title:\n            existed_book.title = book.title\n        if book.author:\n            existed_book.author = book.author\n        if book.publish_time:\n            existed_book.publish_time = book.publish_time\n        db.session.commit()\n        return existed_book\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706805807280-5f076b02-7821-4add-9cc6-3aad1fd84a58.png)\n\n# API 身份认证\n\n## 为什么需要做身份认证\n\n通常情况，开发出来的 API 肯定是给特定客户才能使用的，比如注册过的用户、会员等，只有符合身份或者权限的客户才能调用 API，并不希望谁都可以使用\n\n如何实现的身份认证：\n\n![画板](https://cdn.nlark.com/yuque/0/2024/jpeg/38881094/1706807086181-2354d737-c043-4dd9-8f24-f57534e9ec51.jpeg)\n\n## 包准备工作\n\n需要使用到`PyJWT`\n\n```plain\nflask==3.0.0\nflask-restful==0.3.10\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\nflask-SQLAlchemy==3.1.1\nPyJWT==2.8.0\n```\n\n## 准备用户表\n\n首先创建一张`users`表\n\n```sql\ncreate TABLE `users`(\n    `id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    `username` VARCHAR(128) NOT NULL UNIQUE,\n    `password` VARCHAR(128) NOT NULL\n);\n```\n\n然后随便准备一条数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706807468259-1075f3ce-abfb-45fd-83dd-db5abff64602.png)\n\n## 实体类映射\n\n在`/models`下创建一个`user.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom resources import db\n\n\nclass User(db.Model):\n    __tablename__ = 'users'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    username: Mapped[str] = mapped_column(String(128), unique=True, nullable=False)\n    password: Mapped[str] = mapped_column(String(128), nullable=False)\n\n    def serialize(self):\n        return {\n            'id': self.id,\n            'username': self.username\n        }\n\n```\n\n## 定义 UserService\n\n在`/services`下创建一个`user_service.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Select, and_\n\nfrom models.user import User\nfrom resources import db\n\n\nclass UserService:\n    def login(self, username: str, password: str):\n        query = Select(User).where(and_(User.username == username, User.password == password))\n        return db.session.scalar(query)\n```\n\n## 定义 UserResource\n\n在`/resources`下创建一个`user_resource.py`\n\n- 登录一般多用的是`POST`请求，虽然感觉是像是去查数据库应该用 GET\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import request\nfrom flask_restful import Resource\n\nfrom resources import api\nfrom services.user_service import UserService\n\n\nclass LoginResource(Resource):\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                username = request_json.get('username', None)\n                password = request_json.get('password', None)\n\n                if username and password:\n                    user = UserService().login(username, password)\n                    if user:\n                        return user.serialize(), 200\n                    else:\n                        return {'error': 'Invalid username or password'}, 401\n                else:\n                    return {'error': 'Invalid request, please provide complete username and password'}, 400\n            else:\n                return {'error': 'Invalid request, please provide username and password info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(LoginResource, '/login')\n```\n\n同时还有 user_resource 需要添加一下\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import Flask\nfrom flask_restful import Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napi = Api(app)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqldb://root:980226@localhost:3306/restful_db'\ndb = SQLAlchemy(app)\n\nfrom resources import student_resource, book_resource, user_resource\n```\n\n写到这里可以尝试测试一下登录的功能\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706808543627-fd103314-c0b3-4368-9e3b-fd1970062f6f.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706808549078-29aaced9-58a5-4232-8a94-23518ed56789.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706808589326-1173af90-3653-4799-9dc0-10b2601649a2.png)\n\n## 返回加密 token\n\n### 登录秘钥\n\n先在项目目录下创建一个`/common`的 package，然后在其中添加一个`constants.py`，用于保存常量\n\n创建一个`LOGIN_SECRET`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nLOGIN_SECRET = 'zacharyloginsecret'\n```\n\n### 加入 token\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport jwt\nfrom flask import request\nfrom flask_restful import Resource\n\nfrom common.constants import LOGIN_SECRET\nfrom resources import api\nfrom services.user_service import UserService\n\n\nclass LoginResource(Resource):\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                username = request_json.get('username', None)\n                password = request_json.get('password', None)\n\n                if username and password:\n                    user = UserService().login(username, password)\n                    if user:\n                        user_json = user.serialize()\n                        jwt_token = jwt.encode(user_json, LOGIN_SECRET, algorithm='HS256')\n                        user_json['token'] = jwt_token\n                        return user_json, 200\n                    else:\n                        return {'error': 'Invalid username or password'}, 401\n                else:\n                    return {'error': 'Invalid request, please provide complete username and password'}, 400\n            else:\n                return {'error': 'Invalid request, please provide username and password info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(LoginResource, '/login')\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706810016303-444dec1a-3787-48e6-a749-3e0e616f0b99.png)\n\n### 添加书籍需授权才可操作\n\n现在应用一下上面生成的这个 token\n\n现在用户需要登录了才可以使用 添加书籍 功能\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nimport jwt\nfrom flask import request\nfrom flask_restful import Resource\n\nfrom common.constants import LOGIN_SECRET\nfrom models.book import Book\nfrom resources import api\nfrom services.book_service import BookService\n\n\nclass BookResource(Resource):\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n    def put(self, book_id: int):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n                book = Book(id=book_id, title=title, author=author, publish_time=publish_time)\n\n                book = BookService().update_book(book)\n                return book.serialize(), 200\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    def post(self):\n        # 添加鉴权的部分\n        jwt_token = request.headers.get('token', None)\n        if not jwt_token:\n            return {'error': 'Unauthorized, please provide token'}, 401\n        try:\n            user_info = jwt.decode(jwt_token, LOGIN_SECRET, algorithms=['HS256'])\n            if not user_info or not user_info.get('username', None):\n                raise Exception('Unauthorized, invalid token')\n        except Exception as e:\n            return {'error': 'Unauthorized, invalid token'}, 401\n\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n\n                if title and author and publish_time:\n                    book = Book(title=title, author=author, publish_time=publish_time)\n                    book = BookService().create_book(book)\n                    return book.serialize(), 200\n                else:\n                    return {'error': 'Invalid request, please provide complete book info'}, 400\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n```\n\n测试一下\n\n需要在 request 的 headers 中添加上 token\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706818407894-cb822b06-6cb1-4ecc-8e48-04ad49a7364a.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706818423793-c2f06d83-7e6d-4416-b119-a84885420902.png)\n\n如果不提供\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706818484172-57abb524-49d9-490e-a6aa-8a9c96ce4266.png)\n\n### 装饰器复用加密授权\n\n上面的代码可以看出 如果要加密授权需要在每一个 resource 代码的前面写上校验的代码，如果一直复制粘贴也很复杂；\n\n使用装饰器进行一个代码复用\n\n在`/common`的包下创建一个`api_tools.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom functools import wraps\n\nimport jwt\nfrom flask import request\n\nfrom common.constants import LOGIN_SECRET\n\n\ndef token_required():\n    def check_token(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            token = request.headers.get('token', None)\n            if not token:\n                return {'error': 'Unauthorized, please provide token'}, 401\n            try:\n                user_info = jwt.decode(token, LOGIN_SECRET, algorithms=['HS256'])\n                if not user_info or not user_info.get('username', None):\n                    raise Exception('Unauthorized, invalid token')\n            except Exception as e:\n                return {'error': 'Unauthorized, invalid token'}, 401\n            result = f(*args, **kwargs)\n            return result\n\n        return wrapper\n\n    return check_token\n```\n\n需要使用身份验证的代码 打上这个装饰器就可以了，并且尝试着给修改书籍信息也加上这个身份验证\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nimport jwt\nfrom flask import request\nfrom flask_restful import Resource\n\nfrom common.api_tools import token_required\nfrom common.constants import LOGIN_SECRET\nfrom models.book import Book\nfrom resources import api\nfrom services.book_service import BookService\n\n\nclass BookResource(Resource):\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n    @token_required()\n    def put(self, book_id: int):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n                book = Book(id=book_id, title=title, author=author, publish_time=publish_time)\n\n                book = BookService().update_book(book)\n                return book.serialize(), 200\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    @token_required()\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n\n                if title and author and publish_time:\n                    book = Book(title=title, author=author, publish_time=publish_time)\n                    book = BookService().create_book(book)\n                    return book.serialize(), 200\n                else:\n                    return {'error': 'Invalid request, please provide complete book info'}, 400\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n\n```\n\n测试修改书籍信息\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706819839824-f244521c-2df9-490e-8cab-1020b91f6d2e.png)\n\n# 操作文件 API\n\n## 文件上传\n\n### RequestParser 处理请求参数输入\n\n- `parser = reqparse.RequestParser`\n  - `parser.add_argument(\"请求参数\", required=True, type=FileStorage, location=\"files\", help=\"please provide file\")`\n    - `\"请求参数\"` - 放置的是 resource 的请求参数\n    - `required` - 请求参数是否是必须得\n    - `type` - 要将请求参数转换成的的数据类型\n    - `location` - 请求分析器从哪里提取参数\n      - `files` - 文件\n      - `headers` - 请求头\n      - `args` - 请求参数\n    - `help` - 如果请求不包含`\"请求参数\"`会提示的报错信息\n\n### 定义 Resource\n\n首先在`/resources`下创建一个`attachment_resource.py`\n\n然后需要在`__init__()`里面使用`reqparse`模块的语法分析器进行请求分析，自动处理请求中的参数\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask_restful import Resource, reqparse\nfrom werkzeug.datastructures import FileStorage\n\nfrom common.utils import get_attachment_path\nfrom resources import api\n\n\nclass AttachmentListResource(Resource):\n    def __init__(self):\n        self.parser = reqparse.RequestParser()\n        self.parser.add_argument('attachment', required=True, type=FileStorage, location='files',\n                                 help='please provide attachment file')\n\n    def post(self):\n        attachment_file = self.parser.parse_args().get('attachment')\n        file_path = get_attachment_path()\n        file_save_path = file_path.joinpath(attachment_file.filename)\n        attachment_file.save(file_save_path)\n        return {'message': 'attachment uploaded'}\n\n\napi.add_resource(AttachmentListResource, '/attachments')\n```\n\n设置上传的文件存储的位置，`/common`下创建`utils.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pathlib import Path\n\n\ndef get_attachment_path():\n    \"\"\"\n    获得项目目录下的attachements文件夹的路径\n    该文件夹用于存储所上传的附件\n    :return:\n    \"\"\"\n    project_path = Path(__file__).parent.parent\n    attachment_path = project_path.joinpath('attachments')\n\n    if not attachment_path.exists():\n        attachment_path.mkdir(parents=True)\n\n    return attachment_path\n```\n\n并且要将`attachment_resource`加入配置\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import Flask\nfrom flask_restful import Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napi = Api(app)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqldb://root:980226@localhost:3306/restful_db'\ndb = SQLAlchemy(app)\n\nfrom resources import student_resource, book_resource, user_resource, attachment_resource\n\n```\n\n测试一下 上传文件\n\n需要在 body - from-data - 设置 key-value 记住选择 File\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706822706503-7742f29e-f1f8-4ac7-9291-0659f6d4e5aa.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706822719687-2e8022c9-da76-42ab-af70-837dcf5bc78b.png)\n\n可以看到成功上传了\n\n## 文件下载\n\n仅需使用`send_file()`即可\n\n### 定义 Resource\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import send_file\nfrom flask_restful import Resource, reqparse\nfrom werkzeug.datastructures import FileStorage\n\nfrom common.utils import get_attachment_path\nfrom resources import api\n\n\nclass AttachmentListResource(Resource):\n    def __init__(self):\n        self.parser = reqparse.RequestParser()\n        self.parser.add_argument('attachment', required=True, type=FileStorage, location='files',\n                                 help='please provide attachment file')\n\n    def post(self):\n        attachment_file = self.parser.parse_args().get('attachment')\n        file_path = get_attachment_path()\n        file_save_path = file_path.joinpath(attachment_file.filename)\n        attachment_file.save(file_save_path)\n        return {'message': 'attachment uploaded'}\n\n\nclass AttachmentResource(Resource):\n    def get(self, filename):\n        file_path = get_attachment_path()\n        file_save_path = file_path.joinpath(filename)\n        return send_file(file_save_path)\n\n\napi.add_resource(AttachmentListResource, '/attachments')\napi.add_resource(AttachmentResource, '/attachments/<str:filename>')\n\n```\n\n这块新上传一张图片测试一下\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706823465234-2570002f-12f3-4b04-b339-459464e238fa.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706823492054-6af12a57-9237-4d61-8903-7ff7e074b603.png)\n\n上传和下载都测试成功\n\n# Swagger 文档\n\n## 生成文档\n\n### 所需插件\n\n- `apispec`\n- `flask-_apispec`\n- `PyYAML`\n\n```plain\nflask==3.0.0\nflask-restful==0.3.10\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\nflask-SQLAlchemy==3.1.1\nPyJWT==2.8.0\napispec==6.3.1\nflask_apispec==0.11.4\nPyYAML==6.0.1\nflask_restful_swagger==0.20.2\n```\n\n### 初始化组件\n\n在构建 api 对象的时候，进行一个配置\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom apispec import APISpec\nfrom apispec.ext.marshmallow import MarshmallowPlugin\nfrom flask import Flask\nfrom flask_apispec import FlaskApiSpec\nfrom flask_restful import Api\nfrom flask_restful_swagger import swagger\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napi = swagger.docs(Api(app), apiVersion='0.1')  # swagger docs\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqldb://root:980226@localhost:3306/restful_db'\napp.config.update(\n    {\n        'APISPEC_SPEC': APISpec(\n            title='RESTful API Swagger Docs',\n            version='v1',\n            plugins=[MarshmallowPlugin()],\n            openapi_version='2.0.0'\n        ),\n        'APISPEC_SWAGGER_URL': '/swagger/',\n        'APISPEC_SWAGGER_UI_URL': '/swagger-ui/'\n    }\n)\ndb = SQLAlchemy(app)\ndocs = FlaskApiSpec(app)\n\nfrom resources import student_resource, book_resource, user_resource, attachment_resource\n```\n\n### 给 Resource 增加 doc 注解\n\n要给相应的 resource 下的 api 增加 doc 文档，\n\n- 首先 resource 类需要 继承一个`MethodResource`\n- 给需要生成 doc 的 api 方法 增加一个`@doc()`注解\n  - `description` 该 api 的一个描述\n  - `tags` 分组\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nimport jwt\nfrom flask import request\nfrom flask_apispec import MethodResource, doc\nfrom flask_restful import Resource\n\nfrom common.api_tools import token_required\nfrom common.constants import LOGIN_SECRET\nfrom models.book import Book\nfrom resources import api, docs\nfrom services.book_service import BookService\n\n\nclass BookResource(MethodResource, Resource):\n    @doc(description='Get book by id', tags=['Book Requests'])\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n    @token_required()\n    def put(self, book_id: int):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n                book = Book(id=book_id, title=title, author=author, publish_time=publish_time)\n\n                book = BookService().update_book(book)\n                return book.serialize(), 200\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    @token_required()\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n\n                if title and author and publish_time:\n                    book = Book(title=title, author=author, publish_time=publish_time)\n                    book = BookService().create_book(book)\n                    return book.serialize(), 200\n                else:\n                    return {'error': 'Invalid request, please provide complete book info'}, 400\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n\ndocs.register(BookResource)\n```\n\n在浏览器输入\n\n- `127.0.0.1:5000/swagger/`\n- `127.0.0.1:5000/swagger-ui/`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706896019415-06effb86-c195-4d1f-8b50-8b4abb8c059c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706896118426-bdedb8a6-2b3c-48cc-85eb-60ca91eb103c.png)\n\ntags 分组\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nimport jwt\nfrom flask import request\nfrom flask_apispec import MethodResource, doc\nfrom flask_restful import Resource\n\nfrom common.api_tools import token_required\nfrom common.constants import LOGIN_SECRET\nfrom models.book import Book\nfrom resources import api, docs\nfrom services.book_service import BookService\n\n\nclass BookResource(MethodResource, Resource):\n    @doc(description='Get a book by book id', tags=['Book Requests'])\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n    @doc(description='Update a book by book id', tags=['Book Requests'])\n    @token_required()\n    def put(self, book_id: int):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n                book = Book(id=book_id, title=title, author=author, publish_time=publish_time)\n\n                book = BookService().update_book(book)\n                return book.serialize(), 200\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    @token_required()\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n\n                if title and author and publish_time:\n                    book = Book(title=title, author=author, publish_time=publish_time)\n                    book = BookService().create_book(book)\n                    return book.serialize(), 200\n                else:\n                    return {'error': 'Invalid request, please provide complete book info'}, 400\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n\ndocs.register(BookResource)\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706896574622-c87f28f6-63f1-45b1-aa08-3381bc22e22e.png)\n\n### 使用 YAML 格式\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nimport jwt\nfrom flask import request, Response\nfrom flask_apispec import MethodResource, doc\nfrom flask_restful import Resource\n\nfrom common.api_tools import token_required\nfrom common.constants import LOGIN_SECRET\nfrom models.book import Book\nfrom resources import api, docs, app\nfrom services.book_service import BookService\n\n\nclass BookResource(MethodResource, Resource):\n    @doc(description='Get a book by book id', tags=['Book Requests'])\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n    @doc(description='Update a book by book id', tags=['Book Requests'])\n    @token_required()\n    def put(self, book_id: int):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n                book = Book(id=book_id, title=title, author=author, publish_time=publish_time)\n\n                book = BookService().update_book(book)\n                return book.serialize(), 200\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    @token_required()\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n\n                if title and author and publish_time:\n                    book = Book(title=title, author=author, publish_time=publish_time)\n                    book = BookService().create_book(book)\n                    return book.serialize(), 200\n                else:\n                    return {'error': 'Invalid request, please provide complete book info'}, 400\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n\ndocs.register(BookResource)\n\n\n@app.route('/swagger.yaml')\ndef generate_swagger_yaml():\n    yaml_doc = docs.spec.to_yaml()\n    return Response(yaml_doc, mimetype='text/yaml')\n\n```\n\n在浏览器访问 `127.0.0.1:5000/swagger.yaml`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706896795585-f4eabff1-2639-48ef-8a56-3c25b169e5c1.png)\n\n## Swagger 中的请求与响应\n\n### 定义 request 中的参数（schema 类）\n\n对之前所做的 book_resource 中的修改书籍信息的 put 方法为例\n\n#### body 参数\n\n- 在`book_resource.py`中定义一个类`BookRequestSchema\u0000`，用于指定请求所需要的参数\n\n```python\nclass BookRequestSchema(Schema):\n    title = fields.String(required=True)\n    author = fields.String(requird=True)\n    publish_time = fields.DateTime(required=True)\n```\n\n- 然后还需要使用`@use_kwargs()`注解，来代替之前通过 request.json 获取的请求参数\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nimport jwt\nfrom flask import request, Response\nfrom flask_apispec import MethodResource, doc, use_kwargs\nfrom flask_restful import Resource\nfrom marshmallow import Schema, fields\n\nfrom common.api_tools import token_required\nfrom common.constants import LOGIN_SECRET\nfrom models.book import Book\nfrom resources import api, docs, app\nfrom services.book_service import BookService\n\n\nclass BookRequestSchema(Schema):\n    title = fields.String(required=True)\n    author = fields.String(requird=True)\n    publish_time = fields.DateTime(required=True)\n\n\nclass BookResource(MethodResource, Resource):\n    @doc(description='Get a book by book id', tags=['Book Requests'])\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n    @doc(description='Update a book by book id', tags=['Book Requests'])\n    @use_kwargs(BookRequestSchema, location='json')\n    @token_required()\n    def put(self, book_id: int, **kwargs):\n        try:\n            title = kwargs.get('title', None)\n            author = kwargs.get('author', None)\n            publish_time = kwargs.get('publish_time', None)\n            book = Book(id=book_id, title=title, author=author, publish_time=publish_time)\n\n            book = BookService().update_book(book)\n            return book.serialize(), 200\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    @token_required()\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n\n                if title and author and publish_time:\n                    book = Book(title=title, author=author, publish_time=publish_time)\n                    book = BookService().create_book(book)\n                    return book.serialize(), 200\n                else:\n                    return {'error': 'Invalid request, please provide complete book info'}, 400\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n\ndocs.register(BookResource)\n\n\n@app.route('/swagger.yaml')\ndef generate_swagger_yaml():\n    yaml_doc = docs.spec.to_yaml()\n    return Response(yaml_doc, mimetype='text/yaml')\n\n```\n\n可以直观地看到请求体所需要的参数是什么\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706897937001-5f05d8fe-f285-464c-b4c9-b8bbc419995f.png)\n\n但是由于这个`PUT`是需要身份验证的，如果这时候测试一下会报错\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706898022446-9111ab38-d0b7-456d-9765-be506748a394.png)\n\n#### headers 参数\n\n所以还需要单独给身份验证，即 headers 中的参数做一个类\n\n- 对于 headers 中的 token 也需要单独定义一个`TokenSchema`类\n\n```python\nclass TokenSchema(Schema):\n    token = fields.String(required=True)\n```\n\n- 同样为了在 resource 中的 api 中实现对应参数，可以再一次使用`@use_kwargs()`注解\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nimport jwt\nfrom flask import request, Response\nfrom flask_apispec import MethodResource, doc, use_kwargs\nfrom flask_restful import Resource\nfrom marshmallow import Schema, fields\n\nfrom common.api_tools import token_required\nfrom common.constants import LOGIN_SECRET\nfrom models.book import Book\nfrom resources import api, docs, app\nfrom services.book_service import BookService\n\n\nclass TokenSchema(Schema):\n    token = fields.String(required=True)\n\n\nclass BookRequestSchema(Schema):\n    title = fields.String(required=True)\n    author = fields.String(requird=True)\n    publish_time = fields.DateTime(required=True)\n\n\nclass BookResource(MethodResource, Resource):\n    @doc(description='Get a book by book id', tags=['Book Requests'])\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book.serialize(), 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n    @doc(description='Update a book by book id', tags=['Book Requests'])\n    @use_kwargs(TokenSchema, location='headers')\n    @use_kwargs(BookRequestSchema, location='json')\n    @token_required()\n    def put(self, book_id: int, **kwargs):\n        try:\n            title = kwargs.get('title', None)\n            author = kwargs.get('author', None)\n            publish_time = kwargs.get('publish_time', None)\n            book = Book(id=book_id, title=title, author=author, publish_time=publish_time)\n\n            book = BookService().update_book(book)\n            return book.serialize(), 200\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    @token_required()\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n\n                if title and author and publish_time:\n                    book = Book(title=title, author=author, publish_time=publish_time)\n                    book = BookService().create_book(book)\n                    return book.serialize(), 200\n                else:\n                    return {'error': 'Invalid request, please provide complete book info'}, 400\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n\ndocs.register(BookResource)\n\n\n@app.route('/swagger.yaml')\ndef generate_swagger_yaml():\n    yaml_doc = docs.spec.to_yaml()\n    return Response(yaml_doc, mimetype='text/yaml')\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706898388104-3e7ef110-6b38-4f8c-863a-79f52e05905b.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706898397556-0b7b9662-0fc9-4098-8e67-3ca21fbcc1c5.png)\n\n#### response 内容\n\n- 同样，需要为 response 定义一个 schema 类 `BookSchema`,由于这个响应结果是对应的`Book`实体类；\n- 所以可以使用一个`SQLAlchemyAutoSchema`来实现返回数据库对应的实体类对象作为 response 结果；\n- 当然如果继续使用上面 RequestSchema 的形式是依旧可以实现的\n\n```python\nclass BookSchema(SQLAlchemyAutoSchema):\n    class Meta:\n        model = Book\n        load_instance = True\n```\n\n```python\nflask==3.0.0\nflask-restful==0.3.10\nmysqlclient==2.1.1\nSQLAlchemy==2.0.23\nflask-SQLAlchemy==3.1.1\nPyJWT==2.8.0\napispec==6.3.1\nflask_apispec==0.11.4\nPyYAML==6.0.1\nflask_restful_swagger==0.20.2\nmarshmallow\nmarshmallow_sqlalchemy\n```\n\n- 在 api 中使用这个类的时候，需要使用`@marshal_with`来使用上面的`BookSchema`\n  - 使用`@marshal_with` 就可以直接返回实体类对象了，不需要再自己实现 serialized 序列化方法了\n  - 同时，在 swagger 里面也会出现 response 的结果\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nimport jwt\nfrom flask import request, Response\nfrom flask_apispec import MethodResource, doc, use_kwargs, marshal_with\nfrom flask_restful import Resource\nfrom marshmallow import Schema, fields\nfrom marshmallow_sqlalchemy import SQLAlchemyAutoSchema\n\nfrom common.api_tools import token_required\nfrom common.constants import LOGIN_SECRET\nfrom models.book import Book\nfrom resources import api, docs, app\nfrom services.book_service import BookService\n\n\nclass TokenSchema(Schema):\n    token = fields.String(required=True)\n\n\nclass BookRequestSchema(Schema):\n    title = fields.String(required=True)\n    author = fields.String(requird=True)\n    publish_time = fields.DateTime(required=True)\n\n\nclass BookSchema(SQLAlchemyAutoSchema):\n    class Meta:\n        model = Book\n        load_instance = True\n\n\nclass BookResource(MethodResource, Resource):\n    @doc(description='Get a book by book id', tags=['Book Requests'])\n    @marshal_with(BookSchema, 200)\n    def get(self, book_id: int):\n        book = BookService().get_book_by_id(book_id)\n        if book:\n            return book, 200\n        else:\n            return {'error': f'Book(book_id:{book_id}) not found'}, 404\n\n    @doc(description='Update a book by book id', tags=['Book Requests'])\n    @use_kwargs(TokenSchema, location='headers')\n    @use_kwargs(BookRequestSchema, location='json')\n    @marshal_with(BookSchema, 200)\n    @token_required()\n    def put(self, book_id: int, **kwargs):\n        try:\n            title = kwargs.get('title', None)\n            author = kwargs.get('author', None)\n            publish_time = kwargs.get('publish_time', None)\n            book = Book(id=book_id, title=title, author=author, publish_time=publish_time)\n\n            book = BookService().update_book(book)\n            return book, 200\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\nclass BookListResource(Resource):\n    def get(self):\n        book_list = BookService().get_all_books()\n        return [book.serialize() for book in book_list]\n\n    @token_required()\n    def post(self):\n        try:\n            request_json = request.json\n            if request_json:\n                title = request_json.get('title', None)\n                author = request_json.get('author', None)\n                publish_time_str = request_json.get('publish_time', None)\n                publish_time = datetime.fromisoformat(publish_time_str) if publish_time_str else None\n\n                if title and author and publish_time:\n                    book = Book(title=title, author=author, publish_time=publish_time)\n                    book = BookService().create_book(book)\n                    return book.serialize(), 200\n                else:\n                    return {'error': 'Invalid request, please provide complete book info'}, 400\n            else:\n                return {'error': 'Invalid request, please provide book info as json'}, 400\n        except Exception as e:\n            return {'error': f'{e}'}, 500\n\n\napi.add_resource(BookResource, '/books/<int:book_id>')\napi.add_resource(BookListResource, '/books')\n\ndocs.register(BookResource)\n\n\n@app.route('/swagger.yaml')\ndef generate_swagger_yaml():\n    yaml_doc = docs.spec.to_yaml()\n    return Response(yaml_doc, mimetype='text/yaml')\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706904282093-2f7b0590-7714-48b1-93bf-63faca3a60a3.png)\n\n> 更新: 2024-02-10 23:22:16  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/ugubtklpuczalctm>\n","tags":["Python Web","RESTful API","Flask"],"categories":["Python Web"]},{"title":"docker-ERROR: Version in \"./docker-compose.yaml\" is unsupported.","url":"/blog/3658250431/","content":"\n# docker-ERROR: Version in \"./docker-compose.yaml\" is unsupported.\n\n```shell\nroot@ubuntu-server:~/dockerProject/myWebSite# docker-compose up\nERROR: Version in \"./docker-compose.yaml\" is unsupported. You might be seeing this error because you're using the wrong Compose file version. Either specify a supported version (e.g \"2.2\" or \"3.3\") and place your service definitions under the `services` key, or omit the `version` key and place your service definitions at the root of the file to use version 1.\nFor more on the Compose file format versions, see https://docs.docker.com/compose/compose-file/\n```\n\n拉起 docker-compose 多容器的时候出现了这个错误，原因似乎是 docker 版本和 docker-compose 版本过低导致\n\n执行一下以下命令升级一下试试：\n\n```shell\nroot@ubuntu-server:~# cd /usr/local/bin && sudo rm -rf docker-compose\nroot@ubuntu-server:/usr/local/bin# curl -SL https://github.com/docker/compose/releases/download/v2.1.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:01:26 --:--:--     0\n  0     0    0     0    0     0      0      0 --:--:--  0:01:29 --:--:--     0^C\nroot@ubuntu-server:/usr/local/bin# chmod +x docker-compose\nroot@ubuntu-server:/usr/local/bin# docker-compose --version\nDocker Compose version v2.1.1\nroot@ubuntu-server:/usr/local/bin#\n```\n\n> 更新: 2024-01-27 20:54:42  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/kh6sxrnthfdul5au>\n","tags":["Docker"],"categories":["Docker"]},{"title":"docker-启动 wordpress 和 mysql 容器连接出错","url":"/blog/647255678/","content":"\n# docker-启动 wordpress 和 mysql 容器连接出错\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706294880480-a52d3b6c-7e17-4b11-a705-6c362247d098.png)\n\n首先去给 mysql 数据库创建对应的库\n\n```shell\nroot@ubuntu-server:~# docker inspect 6b07fc530884 | grep \"IPAddress\"\n            \"SecondaryIPAddresses\": null,\n            \"IPAddress\": \"\",\n                    \"IPAddress\": \"172.18.0.2\",\n\nroot@ubuntu-server:~# mysql -h 172.18.0.2 -u root -p 123456\nEnter password:\nERROR 1049 (42000): Unknown database '123456'\nroot@ubuntu-server:~# mysql -h 172.18.0.2 -u root -p123456\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 81\nServer version: 8.3.0 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| db_in_opt          |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.03 sec)\n\nmysql> create database wordpressdb;\nQuery OK, 1 row affected (0.02 sec)\n\nmysql> exit;\nBye\nroot@ubuntu-server:~#\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706296701188-e7443444-3ca1-4ab3-99e7-08c0b9d4712d.png)\n\n如果还有问题：\n\n检查这个 wp-config.php 文件手动改成这样子\n\n```shell\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                               NAMES\nfe7e697cc62f   wordpress   \"docker-entrypoint.s…\"   9 minutes ago    Up 9 minutes    0.0.0.0:82->80/tcp, :::82->80/tcp   hungry_dirac\n6b07fc530884   mysql       \"docker-entrypoint.s…\"   10 minutes ago   Up 10 minutes   3306/tcp, 33060/tcp                 flamboyant_lichterman\nroot@ubuntu-server:~# docker inspect fe7e697cc62f | grep -A 10 \"Mounts\"\n        \"Mounts\": [\n            {\n                \"Type\": \"volume\",\n                \"Name\": \"a5071bea0ad386159c64d54a3353b6614fe4cef2de943ed1d2c9b55f87ef4c59\",\n                \"Source\": \"/var/lib/docker/volumes/a5071bea0ad386159c64d54a3353b6614fe4cef2de943ed1d2c9b55f87ef4c59/_data\",\n                \"Destination\": \"/var/www/html\",\n                \"Driver\": \"local\",\n                \"Mode\": \"\",\n                \"RW\": true,\n                \"Propagation\": \"\"\n            }\nroot@ubuntu-server:~# cd /var/lib/docker/volumes/a5071bea0ad386159c64d54a3353b6614fe4cef2de943ed1d2c9b55f87ef4c59/_data/\nroot@ubuntu-server:/var/lib/docker/volumes/a5071bea0ad386159c64d54a3353b6614fe4cef2de943ed1d2c9b55f87ef4c59/_data# ll\ntotal 260\ndrwxr-xr-x  5 www-data www-data  4096 Jan 26 18:44 ./\ndrwx-----x  3 root     root      4096 Jan 26 18:44 ../\n-rw-r--r--  1 www-data www-data   261 Jan 20 00:51 .htaccess\n-rw-r--r--  1 www-data www-data   405 Feb  6  2020 index.php\n-rw-r--r--  1 www-data www-data 19915 Jan  1  2023 license.txt\n-rw-r--r--  1 www-data www-data  7399 Jul  5  2023 readme.html\n-rw-r--r--  1 www-data www-data  7211 May 12  2023 wp-activate.php\ndrwxr-xr-x  9 www-data www-data  4096 Dec  6 16:25 wp-admin/\n-rw-r--r--  1 www-data www-data   351 Feb  6  2020 wp-blog-header.php\n-rw-r--r--  1 www-data www-data  2323 Jun 14  2023 wp-comments-post.php\n-rw-r--r--  1 www-data www-data  5491 Jan 20 00:49 wp-config-docker.php\n-rw-r--r--  1 www-data www-data  5595 Jan 26 18:44 wp-config.php\n-rw-r--r--  1 www-data www-data  3013 Nov 15 17:47 wp-config-sample.php\ndrwxr-xr-x  5 www-data www-data  4096 Dec  6 16:25 wp-content/\n-rw-r--r--  1 www-data www-data  5638 May 30  2023 wp-cron.php\ndrwxr-xr-x 27 www-data www-data 16384 Dec  6 16:25 wp-includes/\n-rw-r--r--  1 www-data www-data  2502 Nov 26  2022 wp-links-opml.php\n-rw-r--r--  1 www-data www-data  3927 Jul 16  2023 wp-load.php\n-rw-r--r--  1 www-data www-data 50924 Sep 29 22:01 wp-login.php\n-rw-r--r--  1 www-data www-data  8525 Sep 16 06:50 wp-mail.php\n-rw-r--r--  1 www-data www-data 26409 Oct 10 14:05 wp-settings.php\n-rw-r--r--  1 www-data www-data 34385 Jun 19  2023 wp-signup.php\n-rw-r--r--  1 www-data www-data  4885 Jun 22  2023 wp-trackback.php\n-rw-r--r--  1 www-data www-data  3154 Sep 30 07:39 xmlrpc.php\nroot@ubuntu-server:/var/lib/docker/volumes/a5071bea0ad386159c64d54a3353b6614fe4cef2de943ed1d2c9b55f87ef4c59/_data# nano wp-config.php\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706296250115-8c044b95-8b1e-4c98-9708-f85f391958df.png)\n\n> 更新: 2024-01-27 03:19:08  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/tag9c4g1eq7g2v17>\n","tags":["Docker"],"categories":["Docker"]},{"title":"docker-创建 mysql 容器后自动停止","url":"/blog/2964403529/","content":"\n# docker-创建 mysql 容器后自动停止\n\n在创建一个 mysql 容器的时候，创建完立刻就停止了\n\n```shell\nroot@ubuntu-server:~# docker run -d --rm --network nw_test --network-alias mysql_server -v /opt/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=wordpress_db mysql:8.0\n36fa0e5c02c7bbab08191501bef5d9ce20fb332100ae14b2f3ab3464cdb0042a\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS        PORTS                 NAMES\n36fa0e5c02c7   mysql:8.0   \"docker-entrypoint.s…\"   2 seconds ago   Up 1 second   3306/tcp, 33060/tcp   youthful_almeida\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nroot@ubuntu-server:~#\n```\n\n目前来看是只有 mysql:8.0 镜像会产生这个问题\n\n> 更新: 2024-01-27 01:52:13  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/gbnf784n3x1agomd>\n","tags":["Docker"],"categories":["Docker"]},{"title":"Flask","url":"/blog/4144374205/","content":"\n# Flask\n\n# 项目创建及安装 Flask\n\n## 创建一个 Flask\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706204862563-d59defc0-5b3f-4e0f-99e8-c3d4f1cced1f.png)\n\n点击创建 Create 后，就得到 Flask 项目\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706204976062-a61a79fc-d867-4fbb-b992-ce96b7db6689.png)\n\n## requirements 文件\n\n由于集成开发环境帮我们已经安装好了 Flask 包，所以可以使用`pip freeze > ./requirements.txt`命令，直接生成一个 requirements.txt 文件\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706205526876-f23cd8ca-83e8-4501-a1c3-45d5e11f1e53.png)\n\n## 运行\n\n尝试运行一下这个 app.py\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706205694732-adf0d952-e74e-445a-8c54-62734c2c80b3.png)\n\n通过浏览器访问一下 [http://127.0.0.1:5000/](http://127.0.0.1:5000/)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706205747607-246b4801-ce00-41a1-97c7-0d196194fd4b.png)\n\n之后的项目扩展 就在这个项目文件夹的基础上进行开发\n\n## 路由管理\n\n项目为了区分角色：如用户、管理员的权限，需要区分一下不同权限用户的访问路由，为了方便管理路由，在项目文件夹中创建一个`/routes`的 package 进行路由管理，并将原先的代码进行一下整理\n\n```python\nfrom routes import app\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    return 'Home Page!'\n\n\n@app.route('/about')\ndef about_page():\n    return 'About Page!'\n```\n\n```python\nfrom routes import app\n\n\n@app.route('/create_article')\ndef create_article():\n    return 'Create Article!'\n```\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\nfrom routes import user_routes\nfrom routes import admin_routes\n```\n\n然后再修改一下 app.py 就可以运行啦\n\n```python\nfrom routes import app\n\n\nif __name__ == '__main__':\n    app.run()\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706207646428-6009e64f-58c9-40a9-8fd6-8ba2e5312706.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706207672452-4c4c7020-843d-42cc-8d6c-9ff151112de5.png)\n\n## Debug 模式\n\n如果给`user_routes`新增一个路由，但是不重启项目\n\n```python\nfrom routes import app\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    return 'Home Page!'\n\n\n@app.route('/about')\ndef about_page():\n    return 'About Page!'\n\n\n@app.route('/login')\ndef login_page():\n    return 'Login Page!'\n```\n\n这时候在浏览器上访问，无法找到\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706208025531-94816e05-e4a7-4149-abaf-0f9ee28a2486.png)\n\n为了解决这个问题，可以重新启动一下项目；但是在开发过程中，需要逐次修改、增加和验证功能，总是频繁重启项目会显得很繁琐，那么 debug 模式就可以很方便地帮我们做到修改的同时，动态地根据代码是否修改来重启项目\n\n- 通过`app.run(debug=True)`实现\n\n```python\nfrom routes import app\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706208316844-43e1a97f-d91d-4037-8803-d264109d51e2.png)\n\n这时候如果，对代码进行调整 无需重启项目就可以看到效果\n\n- 修改运行文件配置\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706208656372-3aca60d0-7acd-4ad6-8f7f-821ddef29c6c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706208671674-d408417f-6d50-4de9-b372-91d17b0bcb88.png)\n\n---\n\n# 模板 templates\n\n## render_template\n\n前一节我们通过浏览器访问路由 可以获得一些简单的文字页面\n\n而模板可以给我们提供更多便捷的页面内容展示和继承使用\n\n- 结合 flask 的`render_template()`以及`html`文件进行页面内容的渲染\n\n在`/templates`目录下创建 index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Home Page</title>\n  </head>\n  <body>\n    This is content of the home page\n  </body>\n</html>\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import render_template\n\nfrom routes import app\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    return render_template('index.html')\n\n\n@app.route('/about')\ndef about_page():\n    return 'About Page!'\n\n\n@app.route('/login')\ndef login_page():\n    return 'Login Page!'\n```\n\n编写完这两个代码还不够，由于对 app 对象来说，它并不知道 index.html 的位置，所以这时候直接运行会报找不到模板\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706209995171-1e551d68-8e69-4d71-b848-71fc10fe830e.png)\n\n给`/routes/__init__.py`添加`template_folder='../templates`\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__, template_folder='../templates')\n\nfrom routes import user_routes\nfrom routes import admin_routes\n```\n\n刷新项目后可以看到\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706210103952-0cb24945-54b0-4644-a824-95409c560611.png)\n\n## 渲染传参\n\n如果希望前端展示的内容，可以通过后端来传递的这时候就需要用到 render_template 的参数渲染\n\n使用一对花括号 `{{ }}`将其抱起来的内容作为一个变量/参数，其具体的值，通过后端的 render_template 方法来传递\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>{{ my_title }}</title>\n  </head>\n  <body>\n    This is content of the home page\n  </body>\n</html>\n```\n\n```python\nfrom flask import render_template\n\nfrom routes import app\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    return render_template('index.html', my_title='Home Page')\n\n\n@app.route('/about')\ndef about_page():\n    return 'About Page!'\n\n\n@app.route('/login')\ndef login_page():\n    return 'Login Page!'\n\n```\n\n运行后就会通过`my_title='Home Page'`将内容传递给前端模板上的对应参数\n\n## base 模板\n\n随着开发的持续，html 页面也会随之越来越多\n\n不少页面之间肯定存在着相同内容，如标题，导航栏等；如果每个页面都重复编写这些相同的内容，后期若出现功能的修改或者内容的增加，将会是一项巨大的工程，因此引入`base.html`作为所有 html 模板的基础模板，并通过继承（extends）`{% extends 'base.html' %}`来对 base 模板的内容进行共享\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Base Template</title>\n  </head>\n  <body>\n    this is base template content\n  </body>\n</html>\n```\n\n创建两个 html 文件 index 和 about\n\n```html\n{% extends 'base.html' %}\n```\n\n然后修改一下 user_routes\n\n```python\nfrom flask import render_template\n\nfrom routes import app\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    return render_template('index.html')\n\n\n@app.route('/about')\ndef about_page():\n    return render_template('about.html')\n\n\n@app.route('/login')\ndef login_page():\n    return 'Login Page!'\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706211394577-e10c1f61-40d5-4ba6-8161-b9a8850ea262.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706211406084-17a1208e-bf6b-436a-b4ec-826a1bb938a6.png)\n\n通过两个路由 都可以访问到 base 模板\n\n## block 标签\n\n但是有时候并不是全都需要一样的模板，有可能需要对 base 的模板内容进行修改\n\n可以使用 block 标签，起到一个占位符的作用\n\n- `% block 标签名 %`标签起始\n- `% endblock %`标签结束\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>{% block title %} {% endblock %}</title>\n  </head>\n  <body>\n    {% block content %} {% endblock %}\n  </body>\n</html>\n```\n\n```html\n{% extends 'base.html' %} {% block title %} index page {% endblock %} {% block\ncontent %} this is a index content {% endblock %}\n```\n\n```html\n{% extends 'base.html' %} {% block title %} about page {% endblock %} {% block\ncontent %} this is a about content {% endblock %}\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706211934001-f19a5a3f-a018-4280-a71b-1308e1a072fc.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706211946316-47680e17-537a-475e-8491-327ae3949afc.png)\n\n## Bootstrap&jQuery\n\n[https://getbootstrap.com/](https://getbootstrap.com/)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706212853982-bfbb155a-f5e4-44c6-a5eb-15253721459d.png)\n\n[https://jquery.com/download/](https://jquery.com/download/)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706212967047-11d0fa8c-4c25-4833-a520-5ed81bce8880.png)\n\n### 下载\n\nBootstrap 和 jQuery 提供了一系列好用的前端渲染效果，可以做出比较美观的页面内容\n\n- [https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css](https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css)\n  - 将内容复制到浏览器然后右键保存为`bootstrap.min.css`放到项目路径的`/static/plugins/bootstrap-5.3.2/`下\n  - ![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706212336638-df2baf50-6153-42b0-91ad-e9bad0b3ebb4.png)\n- [https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js ](https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\")\n  - 同样，`bootstrap.bundle.min.js`放到项目路径的`/static/plugins/bootstrap-5.3.2/`下\n  - ![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706212829011-722df364-be5d-4e1e-81c8-97ddce52490f.png)\n- [https://code.jquery.com/jquery-3.7.1.min.js](https://code.jquery.com/jquery-3.7.1.min.js)\n  - 将内容复制到浏览器然后右键保存为`jquery.min.js`放到项目路径的`/static/plugins/jquery-3.7.1/`下\n  - ![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706213023938-be924022-dc9d-4e33-92c9-79e09ae04175.png)\n\n下载好后的整体项目目录结构\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706213162254-e4e28f99-b521-454c-96e7-5de91063470a.png)\n\n### 使用\n\n前面有讲到 base 模板，所以可以很方便地用在 base 上 其他模板仅需 extends 就可以使用同样效果\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <!-- Bootstrap CSS -->\n    <link\n      rel=\"stylesheet\"\n      href=\"/static/plugins/bootstrap-5.3.2/bootstrap.min.css\"\n    />\n    <script src=\"/static/plugins/bootstrap-5.3.2/bootstrap.bundle.min.js\"></script>\n    <script src=\"/static/plugins/jquery-3.7.1/jquery.min.js\"></script>\n\n    <title>{% block title %} {% endblock %}</title>\n  </head>\n  <body>\n    <nav\n      class=\"navbar navbar-expand-md navbar-dark bg-dark\"\n      style=\"background-color: #1976d2; color: #ffffff;\"\n    >\n      <a class=\"navbar-brand\" href=\"#\" style=\"font-size: 20px; padding: 10px;\"\n        >Zachary的记事本</a\n      >\n      <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarNav\"\n        style=\"border: none; background-color: transparent; padding: 5px 10px;\"\n      >\n        <span\n          class=\"navbar-toggler-icon\"\n          style=\"background-color: #1976d2;\"\n        ></span>\n      </button>\n      <div\n        class=\"collapse navbar-collapse\"\n        id=\"navbarNav\"\n        style=\"width: 80%; margin: auto; border-radius: 10px;\"\n      >\n        <ul class=\"navbar-nav me-auto\" style=\"margin-top: 20px;\">\n          <li class=\"nav-item active\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('home_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >主页</a\n            >\n          </li>\n          <li class=\"nav-item\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('about_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >关于</a\n            >\n          </li>\n        </ul>\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('login_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >登录</a\n            >\n          </li>\n        </ul>\n      </div>\n    </nav>\n\n    {% block content %} {% endblock %}\n  </body>\n</html>\n```\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__,\n            template_folder='../templates',\n            static_folder='../static',\n            static_url_path='/static')\n\nfrom routes import user_routes\nfrom routes import admin_routes\n```\n\n```html\n{% extends 'base.html' %} {% block title %} login page {% endblock %} {% block\ncontent %} this is a login content {% endblock %}\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import render_template\n\nfrom routes import app\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    return render_template('index.html')\n\n\n@app.route('/about')\ndef about_page():\n    return render_template('about.html')\n\n\n@app.route('/login')\ndef login_page():\n    return render_template('login.html')\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706214376371-740253f9-7798-4b78-aa69-fbfa51ffa042.png)\n\n可以看到页面文字和内容些许不同了，同时在控制台上可以看到资源加载到了，上面的按钮也可以试着点按\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706214033283-e1a271ed-b266-417f-9858-0bfc27640295.png)\n\n### 调整\n\n可以根据文档来进行一些间距的调整，比如 [https://getbootstrap.com/docs/5.3/utilities/spacing/](https://getbootstrap.com/docs/5.3/utilities/spacing/)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706215110352-14fbe062-b6af-4855-ab2b-3c44509b55f5.png)\n\n# 连接 MySQL\n\n## 安装包\n\n之前已经有了 SQLAlchemy 的基础，那么这块可以通过对 Flask 与 SQLAlchemy 进行结合进行数据库的操作\n\n需要的包有：\n\n- `mysqlclient==2.1.1`\n- `SQLAlchemy==2.0.25`\n- `Flask-SQLAlchemy==3.0.0`\n\n可以直接添加到`requirements.txt`，点击一键安装\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706215519595-330d40b2-a794-4ad0-b023-a37d85612207.png)\n\n## 配置连接\n\n需要给 app 添加一个\n\n`app.config['SQLAlchemy_DATABASE_URI'] = 'mysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>'`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__, template_folder='../templates', static_folder='../static', static_url_path='/static')\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqldb://root:980226@localhost/mynotebook_db'\ndb = SQLAlchemy(app)\n\nfrom routes import user_routes\nfrom routes import admin_routes\n\n```\n\n## 定义数据库表对应映射类\n\n### 初始化数据库\n\n现在 MySQL 中准备一个数据库`mynotebook_db`\n\n```shell\nmysql> create database mynotebook_db;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mynotebook_db      |\n| mysql              |\n| performance_schema |\n| sys                |\n| test-zach          |\n| testSql            |\n| userCenter         |\n+--------------------+\n8 rows in set (0.00 sec)\n```\n\n### 初始化数据表\n\n先在数据库里面准备一张 article 表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706216776139-620b7d9c-be86-40f9-81d5-6cb944f7a650.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706216801107-706ca6a6-f4b4-4cef-a978-7c1e1b168000.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706216964026-874d320d-c357-45e6-8395-8e1d7993645b.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706217830736-3c3a3b95-5da9-4bad-be4d-5e6240357036.png)\n\n这块 title 记得做唯一性约束 上面图忘记了\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706217865744-97991e99-f20b-49c4-a3c2-fcfb61ce15cd.png)\n\n然后准备一些数据插入进去\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706220128428-acf1a2d9-0edf-4601-9345-0e66960de27d.png)\n\n### 创建 models\n\n在项目下创建一个`/models`的包，然后创建一个`article.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nfrom sqlalchemy import Integer, String, BLOB, TIMESTAMP\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom routes import db\n\n\nclass Article(db.Model):\n    __tablename__ = 'articles'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    title: Mapped[str] = mapped_column(String(255), unique=True, nullable=False)\n    __content: Mapped[bytes] = mapped_column(BLOB, name='content', nullable=False)\n    create_time: Mapped[datetime] = mapped_column(TIMESTAMP, nullable=False)\n    update_time: Mapped[datetime] = mapped_column(TIMESTAMP, nullable=True)\n\n    @property\n    def content(self):\n        return self.__content.decode('utf-8')\n\n```\n\n### 创建 services\n\n在项目下创建一个`/services`的包，然后创建一个`article_service.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom models.article import Article\nfrom routes import db\n\n\nclass ArticleService:\n    def get_article_by_id(self, article_id):\n        return db.session.get(Article, article_id)\n\n```\n\n然后定义一个查询文章的路由\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import render_template, abort\n\nfrom routes import app\nfrom services.article_service import ArticleService\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    return render_template('index.html')\n\n\n@app.route('/article/<article_id>')\ndef article_page(article_id):\n    article = ArticleService().get_article_by_id(article_id)\n    if article:\n        return render_template('article.html', article=article)\n    abort(404)\n\n\n@app.route('/about')\ndef about_page():\n    return render_template('about.html')\n\n\n@app.route('/login')\ndef login_page():\n    return render_template('login.html')\n\n```\n\n还需要新增一个`article.html`\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - {{ article.title\n}} {% endblock %} {% block content %}\n<h1>{{ article.title }}</h1>\n<p>发布于：{{ article.create_time }}</p>\n<p>{{ article.content }}</p>\n{% endblock %}\n```\n\n尝试通过浏览器通过 url 去获取一条数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706221410629-4d97f07d-2a93-497d-8d78-005c814986c5.png)\n\n### 实现多结果查询\n\n添加一个 service 查询\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Select\n\nfrom models.article import Article\nfrom routes import db\n\n\nclass ArticleService:\n    def get_article_by_id(self, article_id):\n        return db.session.get(Article, article_id)\n\n    def get_articles(self):\n        query = Select(Article)\n        return db.session.scalars(query).all()\n\n```\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import render_template, abort\n\nfrom routes import app\nfrom services.article_service import ArticleService\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    articles = ArticleService().get_articles()\n    return render_template('index.html', articles=articles)\n\n\n@app.route('/article/<article_id>')\ndef article_page(article_id):\n    article = ArticleService().get_article_by_id(article_id)\n    if article:\n        return render_template('article.html', article=article)\n    abort(404)\n\n\n@app.route('/about')\ndef about_page():\n    return render_template('about.html')\n\n\n@app.route('/login')\ndef login_page():\n    return render_template('login.html')\n\n```\n\n然后修改 index.html 显示所有文章即可\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - 主页 {% endblock\n%} {% block content %}\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">No.</th>\n      <th scope=\"col\">记事标题</th>\n      <th scope=\"col\">发布时间</th>\n    </tr>\n  </thead>\n  <tbody class=\"table-group-divider\">\n    {% for article in articles %}\n    <tr>\n      <th scope=\"row\">{{ article.id }}</th>\n      <td>\n        <a href=\"{{ url_for('article_page', article_id=article.id) }}\"\n          >{{ article.title }}</a\n        >\n      </td>\n      <td>{{ article.create_time }}</td>\n    </tr>\n    {% endfor %}\n  </tbody>\n</table>\n{% endblock %}\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706222958833-4fe67860-7fd9-4491-954a-9f773b587972.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706222294530-8630e987-f359-4621-99f4-2fa105a1d134.png)\n\n# 用户登录\n\n## 创建用户表\n\n首先需要创建一个 users 表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706456959147-535f154f-6d68-4180-b45e-9ed2b37d826a.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706459298631-81d912b6-aeba-4b30-b2de-2a0b191cc4a6.png)\n\n然后适当地准备上数据\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706459453795-3d777977-b351-4d80-9489-e040133e6e9b.png)\n\n## 创建用户映射类\n\n然后在`/models`创建`user.py`用于创建 users 表的映射类\n\n```python\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom routes import db\n\n\nclass User(db.Model):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    account: Mapped[str] = mapped_column(String(128), unique=True, nullable=False)\n    password: Mapped[str] = mapped_column(String(64), nullable=False)\n    username: Mapped[str] = mapped_column(String(128), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=True)\n```\n\n## 准备与登录相关的包\n\n```plain\nFlask-WTF==1.1.1\nflask-login==0.6.3\n```\n\n## 创建登录管理 login_manager 对象\n\n在 routes 下的**init**中添加对 login_manager 的初始化\n\n```python\nfrom flask import Flask\nfrom flask_login import LoginManager\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__, template_folder='../templates', static_folder='../static', static_url_path='/static')\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqldb://root:980226@localhost/mynotebook_db'\napp.config['SECRET_KEY'] = 'zachary123456'\n\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager(app)\n\nfrom routes import user_routes\nfrom routes import admin_routes\n```\n\n给 User 类增加 user.load 支持并增加密码验证\n\n给 User 类继承 UserMixin，为了实现一些方法如 is_active 等\n\n```python\nfrom flask_login import UserMixin\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom routes import db, login_manager\n\n\n@login_manager.user_loader\ndef load_manager_user(user_id: int):\n    return db.session.get(User, user_id)\n\n\nclass User(db.Model, UserMixin):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    account: Mapped[str] = mapped_column(String(128), unique=True, nullable=False)\n    password: Mapped[str] = mapped_column(String(64), nullable=False)\n    username: Mapped[str] = mapped_column(String(128), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=True)\n\n    def password_check(self, password):\n        return self.password == password\n```\n\n## 创建表单类\n\n为了便于管理表单，在项目目录下面创建一个`/forms`包\n\n然后创建一个`login_form.py`，用于实现登录的表单类（包括数据的验证，对应数据项必须输入数据）\n\n```python\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired\n\n\nclass LoginForm(FlaskForm):\n    account = StringField(label='账号', validators=[DataRequired()])\n    password = PasswordField(label='密码', validators=[DataRequired()])\n    submit = SubmitField(label='登录')\n```\n\n## 修改 login 的前端代码\n\n修改在`/templates`下的`login.html`\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - 登录 {% endblock\n%} {% block content %}\n<div class=\"container-xl\">\n  <form method=\"POST\" class=\"form-signin\">\n    {{ form.hidden_tag() }}\n    <h1 class=\"h3 mb-3 font-weight-normal\">记事本管理员登录</h1>\n    <br />\n    {{ form.account.label }} {{ form.account(class=\"form-control\",\n    placeholder=\"请输入账号\") }} {{ form.password.label }} {{\n    form.password(class=\"form-control\", placeholder=\"请输入密码\") }}\n    <br />\n    {{ form.submit(class=\"btn btn-lg btn-primary btn-block\") }}\n  </form>\n</div>\n{% endblock %}\n```\n\n## 修改 login 的后端逻辑\n\n先实现一下`UserService`，在`/services`下创建一个`user_service.py`\n\n```python\nfrom flask_login import login_user\nfrom sqlalchemy import Select\n\nfrom models.user import User\nfrom routes import db\n\n\nclass UserService:\n\n    def do_login(self, account: str, password: str) -> bool:\n        query = Select(User).where(User.account == account)\n        user = db.session.scalar(query)\n        if user and user.password_check(password):\n            login_user(user)\n            return True\n        return False\n```\n\n修改`/routes/user_routes.py`中的`login_page`方法\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import render_template, abort, flash, redirect, url_for\n\nfrom forms.login_form import LoginForm\nfrom routes import app\nfrom services.article_service import ArticleService\nfrom services.user_service import UserService\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    articles = ArticleService().get_articles()\n    return render_template('index.html', articles=articles)\n\n\n@app.route('/article/<article_id>')\ndef article_page(article_id):\n    article = ArticleService().get_article_by_id(article_id)\n    if article:\n        return render_template('article.html', article=article)\n    abort(404)\n\n\n@app.route('/about')\ndef about_page():\n    return render_template('about.html')\n\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login_page():\n    form = LoginForm()\n    if form.validate_on_submit():\n        result = UserService().do_login(form.account.data, form.password.data)\n        if result:\n            flash(f'{form.account.data}登录成功, 正在跳转...', category='success')\n            return redirect(url_for('home_page'))\n        else:\n            flash(f'{form.account.data}登录失败， 请检查账号密码', category='danger')\n    return render_template('login.html', form=form)\n```\n\n启动一下项目，然后点击 登录 按钮，跳转到登录页面\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706459509114-ecea13f8-7002-4eeb-8d3b-79f22a014bba.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706459862745-753abf37-7433-407e-b56c-ae554d67a229.png)\n\n登录成功后自动跳转至 homepage\n\n## 修改标题栏登录按钮\n\n在用户登录前后，登录按钮一直都是登录，这并不符合登录后的一些选项，为了实现这一点，`base.html`进行一点修改\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <!-- Bootstrap CSS -->\n    <link\n      rel=\"stylesheet\"\n      href=\"/static/plugins/bootstrap-5.3.2/bootstrap.min.css\"\n    />\n    <script src=\"/static/plugins/bootstrap-5.3.2/bootstrap.bundle.min.js\"></script>\n    <script src=\"/static/plugins/jquery-3.7.1/jquery.min.js\"></script>\n\n    <title>{% block title %} {% endblock %}</title>\n  </head>\n  <body>\n    <nav\n      class=\"navbar navbar-expand-md navbar-dark bg-dark ps-4 pe-4\"\n      style=\"background-color: #1976d2; color: #ffffff;\"\n    >\n      <a class=\"navbar-brand\" href=\"#\" style=\"font-size: 20px; padding: 10px;\"\n        >Zachary的记事本</a\n      >\n      <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarNav\"\n        style=\"border: none; background-color: transparent; padding: 5px 10px;\"\n      >\n        <span\n          class=\"navbar-toggler-icon\"\n          style=\"background-color: #1976d2;\"\n        ></span>\n      </button>\n      <div\n        class=\"collapse navbar-collapse\"\n        id=\"navbarNav\"\n        style=\"width: 80%; margin: auto; border-radius: 10px;\"\n      >\n        <ul class=\"navbar-nav me-auto\" style=\"margin-top: 20px;\">\n          <li class=\"nav-item active\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('home_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >主页</a\n            >\n          </li>\n          <li class=\"nav-item\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('about_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >关于</a\n            >\n          </li>\n        </ul>\n        {% if current_user.is_authenticated %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\" style=\"color: #ffffff; padding: 10px;\"\n              >发布新文章</a\n            >\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\" style=\"color: #ffffff; padding: 10px;\"\n              >退出</a\n            >\n          </li>\n        </ul>\n        {% else %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#}\" style=\"color: #ffffff; padding: 10px;\"\n              >登录</a\n            >\n          </li>\n        </ul>\n        {% endif %}\n      </div>\n    </nav>\n\n    {% block content %} {% endblock %}\n  </body>\n</html>\n```\n\n只是发布新文章和退出按钮的功能 暂时还没有实现\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706462946082-ce76d3f3-7db6-432c-92a1-f562f7ab78eb.png)\n\n# 登录错误信息处理\n\n在官网中去找到自己想要使用的信息提示样式\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706464868086-f064e053-0db7-44a4-a53e-0d652c59bfa9.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706464876083-60c944dc-571e-4325-a8c9-bc0ac03cc5e9.png)\n\n然后在相应部分进行编写\n\n首先为了能让信息提示都能复用上，需要将信息提示的前端部分写到 base.html 里面\n\n```html\n{% with messages = get_flashed_messages(with_categories=true) %} {% if messages\n%} {% for category, message in messages %}\n<div\n  class=\"alert alert-{{ category }} alert-dismissible fade show\"\n  role=\"alert\"\n>\n  {{ message }}\n  <button\n    type=\"button\"\n    class=\"btn-close\"\n    data-bs-dismiss=\"alert\"\n    aria-label=\"Close\"\n  ></button>\n</div>\n{% endfor %} {% endif %} {% endwith %}\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <!-- Bootstrap CSS -->\n    <link\n      rel=\"stylesheet\"\n      href=\"/static/plugins/bootstrap-5.3.2/bootstrap.min.css\"\n    />\n    <script src=\"/static/plugins/bootstrap-5.3.2/bootstrap.bundle.min.js\"></script>\n    <script src=\"/static/plugins/jquery-3.7.1/jquery.min.js\"></script>\n\n    <title>{% block title %} {% endblock %}</title>\n  </head>\n  <body>\n    <nav\n      class=\"navbar navbar-expand-md navbar-dark bg-dark ps-4 pe-4\"\n      style=\"background-color: #1976d2; color: #ffffff;\"\n    >\n      <a class=\"navbar-brand\" href=\"#\" style=\"font-size: 20px; padding: 10px;\"\n        >Zachary的记事本</a\n      >\n      <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarNav\"\n        style=\"border: none; background-color: transparent; padding: 5px 10px;\"\n      >\n        <span\n          class=\"navbar-toggler-icon\"\n          style=\"background-color: #1976d2;\"\n        ></span>\n      </button>\n      <div\n        class=\"collapse navbar-collapse\"\n        id=\"navbarNav\"\n        style=\"width: 80%; margin: auto; border-radius: 10px;\"\n      >\n        <ul class=\"navbar-nav me-auto\" style=\"margin-top: 20px;\">\n          <li class=\"nav-item active\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('home_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >主页</a\n            >\n          </li>\n          <li class=\"nav-item\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('about_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >关于</a\n            >\n          </li>\n        </ul>\n        {% if current_user.is_authenticated %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\" style=\"color: #ffffff; padding: 10px;\"\n              >发布新文章</a\n            >\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\" style=\"color: #ffffff; padding: 10px;\"\n              >退出</a\n            >\n          </li>\n        </ul>\n        {% else %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('login_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >登录</a\n            >\n          </li>\n        </ul>\n        {% endif %}\n      </div>\n    </nav>\n    {% with messages = get_flashed_messages(with_categories=true) %} {% if\n    messages %} {% for category, message in messages %}\n    <div\n      class=\"alert alert-{{ category }} alert-dismissible fade show\"\n      role=\"alert\"\n    >\n      {{ message }}\n      <button\n        type=\"button\"\n        class=\"btn-close\"\n        data-bs-dismiss=\"alert\"\n        aria-label=\"Close\"\n      ></button>\n    </div>\n    {% endfor %} {% endif %} {% endwith %} {% block content %} {% endblock %}\n  </body>\n</html>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706465298880-a19c4940-6fff-4b1b-916f-77bf376fc848.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706465737084-fad9c3df-72a0-4798-a965-c9ce76de331f.png)\n\n# 退出登录\n\n给退出按钮指定一下 url，这里给退出指定的是`logout_page`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <!-- Bootstrap CSS -->\n    <link\n      rel=\"stylesheet\"\n      href=\"/static/plugins/bootstrap-5.3.2/bootstrap.min.css\"\n    />\n    <script src=\"/static/plugins/bootstrap-5.3.2/bootstrap.bundle.min.js\"></script>\n    <script src=\"/static/plugins/jquery-3.7.1/jquery.min.js\"></script>\n\n    <title>{% block title %} {% endblock %}</title>\n  </head>\n  <body>\n    <nav\n      class=\"navbar navbar-expand-md navbar-dark bg-dark ps-4 pe-4\"\n      style=\"background-color: #1976d2; color: #ffffff;\"\n    >\n      <a class=\"navbar-brand\" href=\"#\" style=\"font-size: 20px; padding: 10px;\"\n        >Zachary的记事本</a\n      >\n      <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarNav\"\n        style=\"border: none; background-color: transparent; padding: 5px 10px;\"\n      >\n        <span\n          class=\"navbar-toggler-icon\"\n          style=\"background-color: #1976d2;\"\n        ></span>\n      </button>\n      <div\n        class=\"collapse navbar-collapse\"\n        id=\"navbarNav\"\n        style=\"width: 80%; margin: auto; border-radius: 10px;\"\n      >\n        <ul class=\"navbar-nav me-auto\" style=\"margin-top: 20px;\">\n          <li class=\"nav-item active\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('home_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >主页</a\n            >\n          </li>\n          <li class=\"nav-item\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('about_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >关于</a\n            >\n          </li>\n        </ul>\n        {% if current_user.is_authenticated %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\" style=\"color: #ffffff; padding: 10px;\"\n              >发布新文章</a\n            >\n          </li>\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('logout_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >退出</a\n            >\n          </li>\n        </ul>\n        {% else %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('login_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >登录</a\n            >\n          </li>\n        </ul>\n        {% endif %}\n      </div>\n    </nav>\n    {% with messages = get_flashed_messages(with_categories=true) %} {% if\n    messages %} {% for category, message in messages %}\n    <div\n      class=\"alert alert-{{ category }} alert-dismissible fade show\"\n      role=\"alert\"\n    >\n      {{ message }}\n      <button\n        type=\"button\"\n        class=\"btn-close\"\n        data-bs-dismiss=\"alert\"\n        aria-label=\"Close\"\n      ></button>\n    </div>\n    {% endfor %} {% endif %} {% endwith %} {% block content %} {% endblock %}\n  </body>\n</html>\n```\n\n接着在 user_routes.py 中实现一下这个方法\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import render_template, abort, flash, redirect, url_for\nfrom flask_login import current_user, logout_user\n\nfrom forms.login_form import LoginForm\nfrom routes import app\nfrom services.article_service import ArticleService\nfrom services.user_service import UserService\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    articles = ArticleService().get_articles()\n    return render_template('index.html', articles=articles)\n\n\n@app.route('/article/<article_id>')\ndef article_page(article_id):\n    article = ArticleService().get_article_by_id(article_id)\n    if article:\n        return render_template('article.html', article=article)\n    abort(404)\n\n\n@app.route('/about')\ndef about_page():\n    return render_template('about.html')\n\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login_page():\n    form = LoginForm()\n    if form.validate_on_submit():\n        result = UserService().do_login(form.account.data, form.password.data)\n        if result:\n            flash(f'{form.account.data}登录成功, 正在跳转...', category='success')\n            return redirect(url_for('home_page'))\n        else:\n            flash(f'{form.account.data}登录失败， 请检查账号密码', category='danger')\n    return render_template('login.html', form=form)\n\n\n@app.route('/logout')\ndef logout_page():\n    logout_user()\n\n    return redirect(url_for('home_page'))\n\n```\n\n# 发布新文章\n\n接下来开始实现 发布新文章 按钮的功能\n\n## 创建表单类\n\n首先在`artilce_form.py`中创建表单类`ArticleForm`\n\n```python\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, TextAreaField, SubmitField\nfrom wtforms.validators import DataRequired\n\n\nclass ArticleForm(FlaskForm):\n    title = StringField(label='标题', validators=[DataRequired()])\n    content = TextAreaField(label='内容', validators=[DataRequired()])\n    submit = SubmitField(label='提交')\n```\n\n## 实现新增文章前端代码\n\n在`/templates`下面创建一个`create_article.html`\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - 发布新文章 {%\nendblock %} {% block content %}\n<style>\n  .content_height {\n    height: 550px;\n  }\n</style>\n<div class=\"container-fluid px-4 py-4\">\n  <form method=\"POST\" class=\"form-signin\">\n    {{ form.hidden_tag() }}\n    <h1 class=\"h3 mb-3 font-weight-normal\">发布新文章</h1>\n    <br />\n    {{ form.title.label }} {{ form.title(class=\"form-control\",\n    placeholder=\"请输入标题\") }} {{ form.content.label }} {{\n    form.content(class=\"form-control content_height\", placeholder=\"请输入内容\")\n    }}\n    <br />\n    {{ form.submit(class=\"btn btn-lg btn-primary btn-block\") }}\n  </form>\n</div>\n{% endblock %}\n```\n\n将`发布新文章`按钮指向一个 url `{{ url_for('create_article_page') }}`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <!-- Bootstrap CSS -->\n    <link\n      rel=\"stylesheet\"\n      href=\"/static/plugins/bootstrap-5.3.2/bootstrap.min.css\"\n    />\n    <script src=\"/static/plugins/bootstrap-5.3.2/bootstrap.bundle.min.js\"></script>\n    <script src=\"/static/plugins/jquery-3.7.1/jquery.min.js\"></script>\n\n    <title>{% block title %} {% endblock %}</title>\n  </head>\n  <body>\n    <nav\n      class=\"navbar navbar-expand-md navbar-dark bg-dark ps-4 pe-4\"\n      style=\"background-color: #1976d2; color: #ffffff;\"\n    >\n      <a class=\"navbar-brand\" href=\"#\" style=\"font-size: 20px; padding: 10px;\"\n        >Zachary的记事本</a\n      >\n      <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarNav\"\n        style=\"border: none; background-color: transparent; padding: 5px 10px;\"\n      >\n        <span\n          class=\"navbar-toggler-icon\"\n          style=\"background-color: #1976d2;\"\n        ></span>\n      </button>\n      <div\n        class=\"collapse navbar-collapse\"\n        id=\"navbarNav\"\n        style=\"width: 80%; margin: auto; border-radius: 10px;\"\n      >\n        <ul class=\"navbar-nav me-auto\" style=\"margin-top: 20px;\">\n          <li class=\"nav-item active\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('home_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >主页</a\n            >\n          </li>\n          <li class=\"nav-item\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('about_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >关于</a\n            >\n          </li>\n        </ul>\n        {% if current_user.is_authenticated %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('create_article_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >发布新文章</a\n            >\n          </li>\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('logout_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >退出</a\n            >\n          </li>\n        </ul>\n        {% else %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('login_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >登录</a\n            >\n          </li>\n        </ul>\n        {% endif %}\n      </div>\n    </nav>\n    {% with messages = get_flashed_messages(with_categories=true) %} {% if\n    messages %} {% for category, message in messages %}\n    <div\n      class=\"alert alert-{{ category }} alert-dismissible fade show\"\n      role=\"alert\"\n    >\n      {{ message }}\n      <button\n        type=\"button\"\n        class=\"btn-close\"\n        data-bs-dismiss=\"alert\"\n        aria-label=\"Close\"\n      ></button>\n    </div>\n    {% endfor %} {% endif %} {% endwith %} {% block content %} {% endblock %}\n  </body>\n</html>\n```\n\n## 实现新增文章后端逻辑\n\n先编写一个新增文章的 service 方法\n\n```python\n    def add_article(self, article: Article):\n        # 先查询是否已经存在\n        query = Select(Article).where(Article.title == article.title)\n        if db.session.scalar(query):\n            # 抛出异常\n            raise Exception('该标题文章已经存在，请重新编辑')\n        db.session.add(article)\n        db.session.commit()\n        return article\n```\n\n然后在`admin_routes.py`新增一个`create_article_page`\n\n```python\nfrom flask import flash, redirect, url_for, render_template\nfrom flask_login import login_required\n\nfrom forms.article_form import ArticleForm\nfrom models.article import Article\nfrom routes import app\nfrom services.article_service import ArticleService\n\n\n@app.route('/create_article', methods=['GET', 'POST'])\n@login_required\ndef create_article_page():\n    form = ArticleForm()\n    if form.validate_on_submit():\n        article = Article()\n        article.title = form.title.data\n        article.content = form.content.data\n\n        try:\n            ArticleService().add_article(article)\n            flash(f'文章《{article.title}》创建成功', category='success')\n            return redirect(url_for('home_page'))\n        except Exception as e:\n            flash(f'文章《{article.title}》创建失败: {e}', category='danger')\n    return render_template('create_article.html', form=form)\n```\n\n需要给`Article`类 添加上对`content`的 setter 方法\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom datetime import datetime\n\nfrom sqlalchemy import Integer, String, BLOB, TIMESTAMP\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom routes import db\n\n\nclass Article(db.Model):\n    __tablename__ = 'articles'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    title: Mapped[str] = mapped_column(String(255), unique=True, nullable=False)\n    __content: Mapped[bytes] = mapped_column(BLOB, name='content', nullable=False)\n    create_time: Mapped[datetime] = mapped_column(TIMESTAMP, nullable=False)\n    update_time: Mapped[datetime] = mapped_column(TIMESTAMP, nullable=True)\n\n    @property\n    def content(self):\n        return self.__content.decode('utf-8')\n\n    @content.setter\n    def content(self, content: str):\n        self.__content = content.encode()\n\n\n```\n\n运行效果\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706468616490-4ead33f4-773b-44af-8b98-2cff84532134.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706468722636-5925afb7-fe89-43f9-bce6-27fc003c6416.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706468731934-cb38eeae-4912-4a73-8862-f1a06bb790ec.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706468823707-bbd69e4d-42a5-43e0-a5ce-b6ae7a0f7487.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706468843662-c60150b9-9bb9-4a79-9762-3289d808f36d.png)\n\n# 编辑文章\n\n为了更方便地实现编辑这一功能，我们先修改一下`index.html`的显示效果\n\n## 修改编辑文章前端效果\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - 主页 {% endblock\n%} {% block content %}\n<div class=\"container-xl\">\n  {% for article in articles %}\n  <div class=\"card m-4\" style=\"background-color: #bcd0c7\">\n    <div class=\"card-header\">\n      <ul class=\"nav\">\n        <li class=\"nav-item me-auto\">\n          <a\n            class=\"btn fs-5 fw-bold\"\n            href=\"{{ url_for('article_page', article_id=article.id) }}\"\n            >{{ article.title }}</a\n          >\n        </li>\n        {% if current_user.is_authenticated %}\n        <li class=\"nav-item px-1\">\n          <small class=\"text-body-secondary\">\n            <a\n              class=\"btn\"\n              href=\"{{ url_for('edit_article_page', article_id=article.id) }}\"\n              >编辑</a\n            >\n          </small>\n        </li>\n        {% endif %}\n      </ul>\n    </div>\n    <div class=\"card-body\">\n      <p class=\"card-text\">\n        <a\n          class=\"btn fs-6\"\n          href=\"{{ url_for('article_page', article_id=article.id) }}\"\n          >{{ article.content }}</a\n        >\n      </p>\n      <ul class=\"nav\">\n        <li class=\"nav-item me-auto\">\n          <small class=\"text-body-secondary\"\n            >发布时间：{{ article.create_time }}</small\n          >\n        </li>\n      </ul>\n    </div>\n  </div>\n  {% endfor %}\n</div>\n{% endblock %}\n```\n\n为了能先看一下 index 的内容样式，需要在`admin_routes.py`中添加一个新的路由\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import flash, redirect, url_for, render_template\n\nfrom forms.article_form import ArticleForm\nfrom models.article import Article\nfrom routes import app\nfrom services.article_service import ArticleService\n\n\n@app.route('/create_article', methods=['GET', 'POST'])\ndef create_article_page():\n    form = ArticleForm()\n    if form.validate_on_submit():\n        article = Article()\n        article.title = form.title.data\n        article.content = form.content.data\n\n        try:\n            ArticleService().add_article(article)\n            flash(f'文章《{article.title}》创建成功', category='success')\n            return redirect(url_for('home_page'))\n        except Exception as e:\n            flash(f'文章《{article.title}》创建失败: {e}', category='danger')\n    return render_template('create_article.html', form=form)\n\n\n@app.route('/edit_article/<article_id>', methods=['GET', 'POST'])\ndef edit_article_page():\n    pass\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706471729513-4668b7a7-4625-410d-b5d4-8b3484c39016.png)\n\n同时为了复用当使用 `发布新文章`、`编辑`的时候用同一个`create_article.html`页面编辑或者发布，做一个小修改\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - {% if isEdit %}\n编辑文章 {% else %} 发布新文章 {% endif %} {% endblock %} {% block content %}\n<style>\n  .content_height {\n    height: 550px;\n  }\n</style>\n<div class=\"container-fluid px-4 py-4\">\n  <form method=\"POST\" class=\"form-signin\">\n    {{ form.hidden_tag() }}\n    <h1 class=\"h3 mb-3 font-weight-normal\">\n      {% if isEdit %} 编辑文章 {% else %} 发布新文章 {% endif %}\n    </h1>\n    <br />\n    {{ form.title.label }} {{ form.title(class=\"form-control\",\n    placeholder=\"请输入标题\") }} {{ form.content.label }} {{\n    form.content(class=\"form-control content_height\", placeholder=\"请输入内容\")\n    }}\n    <br />\n    {{ form.submit(class=\"btn btn-lg btn-primary btn-block\") }}\n  </form>\n</div>\n{% endblock %}\n```\n\n## 实现编辑文章后端逻辑\n\n首先实现编辑的 service 代码\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Select, func, and_\n\nfrom models.article import Article\nfrom routes import db\n\n\nclass ArticleService:\n    def get_article_by_id(self, article_id):\n        return db.session.get(Article, article_id)\n\n    def get_articles(self):\n        query = Select(Article)\n        return db.session.scalars(query).all()\n\n    def add_article(self, article: Article):\n        # 先查询是否已经存在\n        query = Select(Article).where(Article.title == article.title)\n        if db.session.scalar(query):\n            # 抛出异常\n            raise Exception('该标题文章已经存在，请重新编辑')\n        db.session.add(article)\n        db.session.commit()\n        return article\n\n    def update_article(self, article: Article):\n        # 先查询是否已经存在\n        existed_article = self.get_article_by_id(article.id)\n        if not existed_article:\n            raise Exception('该文章不存在')\n        # 查询要更新的文章标题是否已经存在\n        query = Select(Article).where(and_(Article.title == article.title, Article.id != article.id))\n        if db.session.scalar(query):\n            raise Exception('该标题文章已经存在，请重新编辑')\n        # 更新\n        existed_article.title = article.title\n        existed_article.content = article.content\n        existed_article.update_time = func.now()\n\n        db.session.commit()\n        return article\n\n```\n\n实现编辑的路由，其中需要实现两个\n\n- 点击编辑按钮后，跳转到当前该文章的信息页面\n- 修改信息之后，点击提交按钮进行更新\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import flash, redirect, url_for, render_template, request\nfrom flask_login import login_required\n\nfrom forms.article_form import ArticleForm\nfrom models.article import Article\nfrom routes import app\nfrom services.article_service import ArticleService\n\n\n@app.route('/create_article', methods=['GET', 'POST'])\n@login_required\ndef create_article_page():\n    form = ArticleForm()\n    if form.validate_on_submit():\n        article = Article()\n        article.title = form.title.data\n        article.content = form.content.data\n\n        try:\n            ArticleService().add_article(article)\n            flash(f'文章《{article.title}》创建成功', category='success')\n            return redirect(url_for('home_page'))\n        except Exception as e:\n            flash(f'文章《{article.title}》创建失败: {e}', category='danger')\n    return render_template('create_article.html', form=form, isEdit=False)\n\n\n@app.route('/edit_article/<article_id>', methods=['GET', 'POST'])\n@login_required\ndef edit_article_page(article_id: str):\n    form = ArticleForm()\n    # 点击编辑后 回显数据\n    if request.method == 'GET':\n        try:\n            article = ArticleService().get_article_by_id(article_id)\n            if not article:\n                flash(\"文章不存在\", category='danger')\n                return redirect(url_for('home_page'))\n            else:\n                form.title.data = article.title\n                form.content.data = article.content\n        except Exception as e:\n            flash(f'文章获取失败: {e}', category='danger')\n            return redirect(url_for('home_page'))\n\n    # 更新数据后 保存\n    if form.validate_on_submit():\n        article = Article()\n        try:\n            article.id = int(article_id)\n            article.title = form.title.data\n            article.content = form.content.data\n\n            ArticleService().update_article(article)\n            flash(f'文章《{article.title}》更新成功', category='success')\n            return redirect(url_for('home_page'))\n        except Exception as e:\n            flash(f'文章《{article.title}》更新失败: {e}', category='danger')\n    return render_template('create_article.html', form=form, isEdit=True)\n\n```\n\n## 效果\n\n修改这个 python 的输入语句 修改成 python 输入语句\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706473425169-2f250ca4-6041-4f0c-b736-d5aa6927b6b9.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706474438354-1f031d2a-4eba-44e0-baed-5b785fb9d237.png)![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706475246719-e15a5c34-089a-47e3-b807-2c4bd54609e9.png)\n\n# 删除文章\n\n实现对页面中的文章进行删除\n\n## 删除按钮的前端实现\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - 主页 {% endblock\n%} {% block content %}\n<div class=\"container-xl\">\n  {% for article in articles %}\n  <div class=\"card m-4\" style=\"background-color: #bcd0c7\">\n    <div class=\"card-header\">\n      <ul class=\"nav\">\n        <li class=\"nav-item me-auto\">\n          <a\n            class=\"btn fs-5 fw-bold\"\n            href=\"{{ url_for('article_page', article_id=article.id) }}\"\n            >{{ article.title }}</a\n          >\n        </li>\n        {% if current_user.is_authenticated %}\n        <li class=\"nav-item px-1\">\n          <small class=\"text-body-secondary\">\n            <a\n              class=\"btn\"\n              href=\"{{ url_for('edit_article_page', article_id=article.id) }}\"\n              >编辑</a\n            >\n          </small>\n        </li>\n        <li class=\"nav-item px-1\">\n          <small class=\"text-body-secondary\">\n            <button\n              class=\"btn\"\n              data-bs-toggle=\"modal\"\n              data-bs-target=\"#Modal-DeleteConfirm-{{ article.id }}\"\n            >\n              删除\n            </button>\n          </small>\n        </li>\n        {% endif %}\n      </ul>\n    </div>\n    <div class=\"card-body\">\n      <p class=\"card-text\">\n        <a\n          class=\"btn fs-6\"\n          href=\"{{ url_for('article_page', article_id=article.id) }}\"\n          >{{ article.content }}</a\n        >\n      </p>\n      <ul class=\"nav\">\n        <li class=\"nav-item me-auto\">\n          <small class=\"text-body-secondary\"\n            >发布时间：{{ article.create_time }}</small\n          >\n        </li>\n      </ul>\n    </div>\n  </div>\n  {% endfor %}\n</div>\n{% endblock %}\n```\n\n## 实现删除文章后端逻辑\n\n- 创建 删除文章的表单类，`article_delete_form.py`\n  - `article_id`并不需要用户输入，所以是一个隐藏字段\n\n```python\nfrom flask_wtf import FlaskForm\nfrom wtforms import HiddenField, SubmitField\nfrom wtforms.validators import DataRequired\n\n\nclass ArticleDeleteForm(FlaskForm):\n    article_id = HiddenField(validators=[DataRequired()])\n    submit = SubmitField(label='删除')\n```\n\n- 创建一个`确认删除`对话框，为了便捷地复用这个对话框，单独编写一个 html\n\n在`/templates`下创建一个`/includes`文件夹，然后创建一个`article_modals.html`用于存放与文章相关的 html\n\n```html\n<!-- Delete Article Confirm -->\n<div\n  class=\"modal fade\"\n  id=\"Modal-DeleteConfirm-{{ article.id }}\"\n  tabindex=\"-1\"\n  aria-labelledby=\"deleteModalLabel\"\n  aria-hidden=\"true\"\n>\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title fs-5\" id=\"deleteModalLabel\">\n          {{ article.title }}\n        </h5>\n        <button\n          type=\"button\"\n          class=\"btn-close\"\n          data-bs-dismiss=\"modal\"\n          aria-label=\"Close\"\n        ></button>\n      </div>\n      <form method=\"POST\">\n        {{ article_delete_form.csrf_token }} {{\n        article_delete_form.article_id(value=article.id) }}\n        <div class=\"modal-body\">\n          <h4>您确定要删除《{{ article.title }}》这篇文章吗？</h4>\n        </div>\n        <div class=\"modal-footer\">\n          <button\n            type=\"button\"\n            class=\"btn btn-secondary\"\n            data-bs-dismiss=\"modal\"\n          >\n            取消\n          </button>\n          <button type=\"submit\" class=\"btn btn-primary\">删除</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n```\n\n- 在`index.html`中引入上面定义的对话框\n\n```html\n{% if current_user.is_authenticated %} {% include 'includes/article_modals.html'\n%} {% endif %}\n```\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - 主页 {% endblock\n%} {% block content %}\n<div class=\"container-xl\">\n  {% for article in articles %} {% if current_user.is_authenticated %} {%\n  include 'includes/article_modals.html' %} {% endif %}\n  <div class=\"card m-4\" style=\"background-color: #bcd0c7\">\n    <div class=\"card-header\">\n      <ul class=\"nav\">\n        <li class=\"nav-item me-auto\">\n          <a\n            class=\"btn fs-5 fw-bold\"\n            href=\"{{ url_for('article_page', article_id=article.id) }}\"\n            >{{ article.title }}</a\n          >\n        </li>\n        {% if current_user.is_authenticated %}\n        <li class=\"nav-item px-1\">\n          <small class=\"text-body-secondary\">\n            <a\n              class=\"btn\"\n              href=\"{{ url_for('edit_article_page', article_id=article.id) }}\"\n              >编辑</a\n            >\n          </small>\n        </li>\n        <li class=\"nav-item px-1\">\n          <small class=\"text-body-secondary\">\n            <button\n              class=\"btn\"\n              data-bs-toggle=\"modal\"\n              data-bs-target=\"#Modal-DeleteConfirm-{{ article.id }}\"\n            >\n              删除\n            </button>\n          </small>\n        </li>\n        {% endif %}\n      </ul>\n    </div>\n    <div class=\"card-body\">\n      <p class=\"card-text\">\n        <a\n          class=\"btn fs-6\"\n          href=\"{{ url_for('article_page', article_id=article.id) }}\"\n          >{{ article.content }}</a\n        >\n      </p>\n      <ul class=\"nav\">\n        <li class=\"nav-item me-auto\">\n          <small class=\"text-body-secondary\"\n            >发布时间：{{ article.create_time }}</small\n          >\n        </li>\n      </ul>\n    </div>\n  </div>\n  {% endfor %}\n</div>\n{% endblock %}\n```\n\n- 在`user_routes.py`中的 home_page 需要渲染一下表单，否则会出错\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import render_template, abort, flash, redirect, url_for\nfrom flask_login import current_user, logout_user\n\nfrom forms.article_delete_form import ArticleDeleteForm\nfrom forms.login_form import LoginForm\nfrom routes import app\nfrom services.article_service import ArticleService\nfrom services.user_service import UserService\n\n\n@app.route('/')\n@app.route('/index')\ndef home_page():\n    articles = ArticleService().get_articles()\n    article_delete_form = ArticleDeleteForm()\n    return render_template('index.html', articles=articles, article_delete_form=article_delete_form)\n\n\n@app.route('/article/<article_id>')\ndef article_page(article_id):\n    article = ArticleService().get_article_by_id(article_id)\n    if article:\n        return render_template('article.html', article=article)\n    abort(404)\n\n\n@app.route('/about')\ndef about_page():\n    return render_template('about.html')\n\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login_page():\n    form = LoginForm()\n    if form.validate_on_submit():\n        result = UserService().do_login(form.account.data, form.password.data)\n        if result:\n            flash(f'{form.account.data}登录成功, 正在跳转...', category='success')\n            return redirect(url_for('home_page'))\n        else:\n            flash(f'{form.account.data}登录失败， 请检查账号密码', category='danger')\n    return render_template('login.html', form=form)\n\n\n@app.route('/logout')\ndef logout_page():\n    logout_user()\n    return redirect(url_for('home_page'))\n\n```\n\n- 新增一个`delete_article`的 service\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom sqlalchemy import Select, func, and_\n\nfrom models.article import Article\nfrom routes import db\n\n\nclass ArticleService:\n    def get_article_by_id(self, article_id):\n        return db.session.get(Article, article_id)\n\n    def get_articles(self):\n        query = Select(Article)\n        return db.session.scalars(query).all()\n\n    def add_article(self, article: Article):\n        # 先查询是否已经存在\n        query = Select(Article).where(Article.title == article.title)\n        if db.session.scalar(query):\n            # 抛出异常\n            raise Exception('该标题文章已经存在，请重新编辑')\n        db.session.add(article)\n        db.session.commit()\n        return article\n\n    def update_article(self, article: Article):\n        # 先查询是否已经存在\n        existed_article = self.get_article_by_id(article.id)\n        if not existed_article:\n            raise Exception('该文章不存在')\n        # 查询要更新的文章标题是否已经存在\n        query = Select(Article).where(and_(Article.title == article.title, Article.id != article.id))\n        if db.session.scalar(query):\n            raise Exception('该标题文章已经存在，请重新编辑')\n        # 更新\n        existed_article.title = article.title\n        existed_article.content = article.content\n        existed_article.update_time = func.now()\n\n        db.session.commit()\n        return article\n\n    def delete_article(self, article_id: int):\n        article = self.get_article_by_id(article_id)\n        if not article:\n            raise Exception('该文章不存在')\n        db.session.delete(article_id)\n        db.session.commit()\n        return article\n\n```\n\n- 然后修改`user_routes.py`中的`home_page`的逻辑\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import render_template, abort, flash, redirect, url_for\nfrom flask_login import current_user, logout_user\n\nfrom forms.article_delete_form import ArticleDeleteForm\nfrom forms.login_form import LoginForm\nfrom routes import app\nfrom services.article_service import ArticleService\nfrom services.user_service import UserService\n\n\n@app.route('/', methods=['GET', 'POST'])\n@app.route('/index', methods=['GET', 'POST'])\ndef home_page():\n    articles = ArticleService().get_articles()\n    if current_user.is_authenticated:\n        article_delete_form = ArticleDeleteForm()\n        if article_delete_form.validate_on_submit():\n            try:\n                ArticleService().delete_article(int(article_delete_form.article_id.data))\n                flash(f'文章删除成功', category='success')\n                return redirect(url_for('home_page'))\n            except Exception as e:\n                flash(f'文章删除失败: {e}', category='danger')\n        return render_template('index.html', articles=articles, article_delete_form=article_delete_form)\n    return render_template('index.html', articles=articles)\n\n\n@app.route('/article/<article_id>')\ndef article_page(article_id):\n    article = ArticleService().get_article_by_id(article_id)\n    if article:\n        return render_template('article.html', article=article)\n    abort(404)\n\n\n@app.route('/about')\ndef about_page():\n    return render_template('about.html')\n\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login_page():\n    form = LoginForm()\n    if form.validate_on_submit():\n        result = UserService().do_login(form.account.data, form.password.data)\n        if result:\n            flash(f'{form.account.data}登录成功, 正在跳转...', category='success')\n            return redirect(url_for('home_page'))\n        else:\n            flash(f'{form.account.data}登录失败， 请检查账号密码', category='danger')\n    return render_template('login.html', form=form)\n\n\n@app.route('/logout')\ndef logout_page():\n    logout_user()\n    return redirect(url_for('home_page'))\n\n```\n\n## 效果\n\n新建一个要删除的文章\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706642334541-95310814-40ea-4e84-b73a-b318d361fd01.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706642347001-9e40cb9a-dd50-421f-8503-214071e71908.png)\n\n点击删除按钮\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706642360501-bacd5e74-3403-4c6e-8c66-a4a8a749ddee.png)\n\n#![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706642433511-169f1e3e-3170-4bb4-9327-a8ac355085ee.png)\n\n# 引入 markdown 显示\n\n为了让记事本的内容更加丰富，引入 markdown 语法，是的文本内容显示得更加美观些\n\n## markdown 资源下载\n\n- [https://github.com/showdownjs/showdown/tree/master/dist](https://github.com/showdownjs/showdown/tree/master/dist)\n  - 下载`showdown.min.js`\n  - 下载`showdown.min.js.map`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706642908464-31344977-7d9d-4d0c-b790-8d4d9777ba45.png)\n\n- 将上述两个资源存储至 ☞`/static/plugins/showdownjs-2.0.0`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706643215433-2da0b64b-9802-4632-96d9-ecca4a58080e.png)\n\n## 引入 markdown 资源\n\n- 在`base.html`中引入添加的 markdown 资源\n  - `<script src=\"/static/plugins/showdownjs-2.0.0/showdown.min.js\"></script>`\n- 并添加上 markdown 的预定义样式 `<style>`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <!-- Bootstrap CSS -->\n    <link\n      rel=\"stylesheet\"\n      href=\"/static/plugins/bootstrap-5.3.2/bootstrap.min.css\"\n    />\n    <script src=\"/static/plugins/bootstrap-5.3.2/bootstrap.bundle.min.js\"></script>\n    <script src=\"/static/plugins/jquery-3.7.1/jquery.min.js\"></script>\n    <script src=\"/static/plugins/showdownjs-2.0.0/showdown.min.js\"></script>\n\n    <style>\n      pre {\n        white-space: pre-wrap; /* css-3 */\n        white-space: -moz-pre-wrap; /* Mozilla, since 1999 */\n        white-space: -pre-wrap; /* Opera 4-6 */\n        white-space: -o-pre-wrap; /* Opera 7 */\n        word-wrap: break-word; /* Internet Explorer 5.5+ */\n        background-color: #f8f8f8;\n        border: 1px solid #e7e7e7;\n        margin-top: 1.5em;\n        margin-bottom: 1.5em;\n        padding: 0.125em 0.3125em 0.0625em;\n      }\n\n      pre code {\n        background-color: transparent;\n        border: 0;\n        padding: 0;\n      }\n    </style>\n\n    <title>{% block title %} {% endblock %}</title>\n  </head>\n  <body>\n    <nav\n      class=\"navbar navbar-expand-md navbar-dark bg-dark ps-4 pe-4\"\n      style=\"background-color: #1976d2; color: #ffffff;\"\n    >\n      <a class=\"navbar-brand\" href=\"#\" style=\"font-size: 20px; padding: 10px;\"\n        >Zachary的记事本</a\n      >\n      <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarNav\"\n        style=\"border: none; background-color: transparent; padding: 5px 10px;\"\n      >\n        <span\n          class=\"navbar-toggler-icon\"\n          style=\"background-color: #1976d2;\"\n        ></span>\n      </button>\n      <div\n        class=\"collapse navbar-collapse\"\n        id=\"navbarNav\"\n        style=\"width: 80%; margin: auto; border-radius: 10px;\"\n      >\n        <ul class=\"navbar-nav me-auto\" style=\"margin-top: 20px;\">\n          <li class=\"nav-item active\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('home_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >主页</a\n            >\n          </li>\n          <li class=\"nav-item\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('about_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >关于</a\n            >\n          </li>\n        </ul>\n        {% if current_user.is_authenticated %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('create_article_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >发布新文章</a\n            >\n          </li>\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('logout_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >退出</a\n            >\n          </li>\n        </ul>\n        {% else %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('login_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >登录</a\n            >\n          </li>\n        </ul>\n        {% endif %}\n      </div>\n    </nav>\n    {% with messages = get_flashed_messages(with_categories=true) %} {% if\n    messages %} {% for category, message in messages %}\n    <div\n      class=\"alert alert-{{ category }} alert-dismissible fade show\"\n      role=\"alert\"\n    >\n      {{ message }}\n      <button\n        type=\"button\"\n        class=\"btn-close\"\n        data-bs-dismiss=\"alert\"\n        aria-label=\"Close\"\n      ></button>\n    </div>\n    {% endfor %} {% endif %} {% endwith %} {% block content %} {% endblock %}\n  </body>\n</html>\n```\n\n## 修改文章内容显示\n\n首先修改`article.html`,让显示的内容更加美观\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - {{ article.title\n}} {% endblock %} {% block content %}\n\n<textarea id=\"article_content\" style=\"display: none\">\n{{ article.content }}</textarea\n>\n<div class=\"container-xl\">\n  <h4>\n    <p class=\"text-center\" style=\"margin-top: 20px;\">{{ article.title }}</p>\n  </h4>\n  <p class=\"text-center\" style=\"margin-top: 10px;\">\n    发布于：{{ article.create_time }} 更新于：{{ article.update_time }}\n  </p>\n  <p id=\"article_viewer\"></p>\n</div>\n\n<script src=\"/static/js/article.js\"></script>\n{% endblock %}\n```\n\n然后创建 js，用于使用资源渲染文章内容 作为 markdown 显示出来，在`/static/js/`下新增`article.js`\n\n```javascript\n$(function () {\n  var converter = new showdown.Converter();\n  var article_html = converter.makeHtml($(\"#article_content\").val());\n  $(\"#article_viewer\").html(article_html);\n});\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706644787420-90ecea64-b833-48f3-a5af-8f269b9e33c3.png)\n\n# 编辑文章时可预览 markdown\n\n首先修改一下编辑/新增时的界面\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - {% if isEdit %}\n编辑文章 {% else %} 发布新文章 {% endif %} {% endblock %} {% block content %}\n<style>\n  .content_height {\n    height: 550px;\n  }\n</style>\n<div class=\"container-fluid px-4 py-4\">\n  <form method=\"POST\" class=\"form-signin\">\n    {{ form.hidden_tag() }}\n    <h1 class=\"h3 mb-3 font-weight-normal\">\n      {% if isEdit %} 编辑文章 {% else %} 发布新文章 {% endif %}\n    </h1>\n    <br />\n    {{ form.title.label }} {{ form.title(class=\"form-control\",\n    placeholder=\"请输入标题\") }}\n    <div class=\"row\">\n      <div class=\"col\">\n        {{ form.content.label }} {{ form.content(class=\"form-control\n        content_height\", placeholder=\"请输入内容\") }}\n        <br />\n        {{ form.submit(class=\"btn btn-lg btn-primary btn-block\") }}\n        <a\n          href=\"#\"\n          id=\"article_previewer_btn\"\n          class=\"btn btn-lg btn-primary btn-block\"\n          >预览</a\n        >\n      </div>\n      <div class=\"col\">\n        内容预览\n        <div class=\"container-fluid border border-success\">\n          <div\n            id=\"article_previewer\"\n            class=\"content_height overflow-auto\"\n          ></div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<script src=\"/static/js/create_article.js\"></script>\n{% endblock %}\n```\n\n然后给这个`预览`按钮实现 js 功能，点击后用 markdown 对文字内容渲染然后显示\n\n在`/static/js/`下创建一个`create_article.js`\n\n```javascript\n$(function () {\n  $(\"#article_previewer_btn\").click(function () {\n    var converter = new showdown.Converter();\n    var article_html = converter.makeHtml($(\"#content\").val());\n    $(\"#article_previewer\").html(article_html);\n  });\n});\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706646097043-ea58a5e7-2d2b-4058-b9f5-9ca7d8a1e544.png)\n\n# 消除数据库中 password 的明文显示\n\n需要使用到一个库 `bcrypt 4.1.1`\n\n```plain\nclick==8.1.7\nFlask==2.2.5\nimportlib-metadata==6.7.0\nitsdangerous==2.1.2\nJinja2==3.1.3\nMarkupSafe==2.1.4\ntyping_extensions==4.7.1\nWerkzeug==2.2.3\nzipp==3.15.0\nmysqlclient==2.1.1\nSQLAlchemy==2.0.25\nFlask-SQLAlchemy==3.0.0\nFlask-WTF==1.1.1\nflask-login==0.6.3\nbcrypt==4.1.1\n```\n\n- bcrypt 的两种基础使用\n  - `hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())` 依据生成的盐值，生成 hash 后的密码值，结果是字节码\n  - `bcrypt.check(check_pw.encode(), hashed_pw)`返回值结果即为密码是否匹配\n- 将数据库中的明文密码 进行一个手动替换（实际这个步骤应该是在注册的时候操作，这里省略）\n  - 将这块你生成的密码值 （我的是 `$2b$12$VSVvNnaGZbQLspsbKosC9e4cLdh/Rrq8uviwSKT7DlUagITHZsuMi`）替换到数据库中的`users`表中\n\n```shell\n(venv) ➜  flaskProjectInitial python3\nPython 3.7.7 (v3.7.7:d7c567b08f, Mar 10 2020, 02:56:16)\n[Clang 6.0 (clang-600.0.57)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import bcrypt\n>>> password = '123456'\n>>> hashed_pw = bcrypt.hashpw(password.encode(),bcrypt.gensalt())\n>>> print(hashed_pw.decode('utf-8'))\n$2b$12$VSVvNnaGZbQLspsbKosC9e4cLdh/Rrq8uviwSKT7DlUagITHZsuMi\n>>>\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706647298605-50eab2bd-063d-4fd4-921d-eb0e2f32c660.png)\n\n- 修改`user.py`中实体类`User`的密码检查方法\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport crypt\n\nimport bcrypt\nfrom flask_login import UserMixin\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom routes import db, login_manager\n\n\n@login_manager.user_loader\ndef load_manager_user(user_id: int):\n    return db.session.get(User, user_id)\n\n\nclass User(db.Model, UserMixin):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    account: Mapped[str] = mapped_column(String(128), unique=True, nullable=False)\n    password: Mapped[str] = mapped_column(String(64), nullable=False)\n    username: Mapped[str] = mapped_column(String(128), nullable=False)\n    description: Mapped[str] = mapped_column(String(255), nullable=True)\n\n    def password_check(self, password):\n        return bcrypt.checkpw(password.encode(), self.password.encode())\n\n```\n\n错误密码的登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706647380941-e8f00439-ae7e-4c25-9eb8-5d3ddf5da130.png)\n\n正确密码的登录\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706647393008-f41cccc7-d748-41d1-b9e2-9de826974ca4.png)\n\n# 实现图片功能\n\n## 图片上传\n\n### 图片上传表单\n\n在`/forms`下新增一个`image_upload_form.py`\n\n```python\nfrom flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileRequired\nfrom wtforms import SubmitField\n\n\nclass ImageUploadForm(FlaskForm):\n    image = FileField(label='上传图片', validators=[FileRequired()])\n    submit = SubmitField(label='上传')\n```\n\n### 图片上传的前端\n\n在`/templates`下创建一个`images.html`\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - 图片管理 {%\nendblock %} {% block content %}\n<div class=\"container-xl\">\n  <form method=\"POST\" class=\"form-signin\" enctype=\"multipart/form-data\">\n    {{ form.hidden_tag() }}\n    <h1 class=\"h3 mb-3 font-weight-normal\">上传图片</h1>\n    <br />\n    {{ form.image.label }} {{ form.image(class=\"form-control\") }} {{\n    form.submit(class=\"btn btn-lg btn-primary btn-block\") }}\n  </form>\n</div>\n{% endblock %}\n```\n\n其中 `enctype=\"multipart/form-data\"`是用于需要上传文件的表单\n\n### 图片上传目录\n\n为了保存所上传的图片，需要准备一个目录用于存储上传的图片\n\n- 在项目目录下创建一个`/data`项目文件夹，其中上传的图片都保存在`/data/image`目录下\n- 同时，为了让代码中能方便地获取到这个路径，即项目部署后的一个绝对路径，做一个准备工作：在项目目录下创建一个`/common`文件夹，创建一个`profile.py`\n\n```python\nfrom pathlib import Path\n\n\nclass Profile:\n    __image_path = None\n\n    @staticmethod\n    def get_image_path():\n        project_path = Path(__file__).parent.parent  # 获取项目根目录\n        images_path = project_path.joinpath(\"data/images\")\n        if not images_path.exists():\n            images_path.mkdir(parents=True)\n        Profile.__image_path = images_path\n        return images_path\n```\n\n### 图片上传的路由定义\n\n在`admin_routes.py`中新增`images_page`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import flash, redirect, url_for, render_template, request\nfrom flask_login import login_required\nfrom werkzeug.utils import secure_filename\n\nfrom common.profile import Profile\nfrom forms.article_form import ArticleForm\nfrom forms.image_upload_form import ImageUploadForm\nfrom models.article import Article\nfrom routes import app\nfrom services.article_service import ArticleService\n\n\n@app.route('/create_article', methods=['GET', 'POST'])\n@login_required\ndef create_article_page():\n    form = ArticleForm()\n    if form.validate_on_submit():\n        article = Article()\n        article.title = form.title.data\n        article.content = form.content.data\n\n        try:\n            ArticleService().add_article(article)\n            flash(f'文章《{article.title}》创建成功', category='success')\n            return redirect(url_for('home_page'))\n        except Exception as e:\n            flash(f'文章《{article.title}》创建失败: {e}', category='danger')\n    return render_template('create_article.html', form=form, isEdit=False)\n\n\n@app.route('/edit_article/<article_id>', methods=['GET', 'POST'])\n@login_required\ndef edit_article_page(article_id: str):\n    form = ArticleForm()\n    # 点击编辑后 回显数据\n    if request.method == 'GET':\n        try:\n            article = ArticleService().get_article_by_id(article_id)\n            if not article:\n                flash(\"文章不存在\", category='danger')\n                return redirect(url_for('home_page'))\n            else:\n                form.title.data = article.title\n                form.content.data = article.content\n        except Exception as e:\n            flash(f'文章获取失败: {e}', category='danger')\n            return redirect(url_for('home_page'))\n\n    # 更新数据后 保存\n    if form.validate_on_submit():\n        article = Article()\n        try:\n            article.id = int(article_id)\n            article.title = form.title.data\n            article.content = form.content.data\n\n            ArticleService().update_article(article)\n            flash(f'文章《{article.title}》更新成功', category='success')\n            return redirect(url_for('home_page'))\n        except Exception as e:\n            flash(f'文章《{article.title}》更新失败: {e}', category='danger')\n    return render_template('create_article.html', form=form, isEdit=True)\n\n\n@app.route('/images', methods=['GET', 'POST'])\n@login_required\ndef images_page():\n    form = ImageUploadForm()\n    if form.validate_on_submit():\n        image_file = form.image.data\n        image_path = Profile.get_image_path()\n        image_filename = secure_filename(image_file.filename)\n        image_full_path = image_path.joinpath(image_filename)\n        image_file.save(image_full_path)\n        flash(f'图片上传成功, 保存至 {image_full_path}', category='success')\n    return render_template('images.html', form=form)\n\n```\n\n尝试一下直接访问路由，是可以的\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706707281359-df8bea74-ffbd-4281-a4ed-823f74b9e4e0.png)\n\n接下来还需要做两件事，一个是当上传重复名称图片时，是否要覆盖的问题；另一个是主页需要有一个按钮跳转至图片上传页面\n\n### 给命名冲突图片重命名\n\n在`/common`下新建一个`utils.py`\n\n现在需要实现的是，通过输入路径和文件名，先判断图片存储路径下是否有这个文件，如果没有直接返回；如果有这个文件，修改成一个文件名\\_1 这样的格式返回\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom pathlib import Path\n\n\ndef get_file_name_patrs(filename):\n    pos = filename.rfind('.')\n    if pos == -1:\n        return filename, ''\n    return filename[:pos], filename[pos + 1:]\n\n\ndef get_save_filepath(filePath: Path, filename: str):\n    save_file = filePath.joinpath(filename)\n    if not save_file.exists():\n        return save_file\n\n    name, ext = get_file_name_patrs(filename)\n    index = 1\n    while True:\n        save_file = filePath.joinpath(f'{name}_{index}.{ext}')\n        if not save_file.exists():\n            return save_file\n        index += 1\n```\n\n然后修改一下`admin_routes.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import flash, redirect, url_for, render_template, request\nfrom flask_login import login_required\nfrom werkzeug.utils import secure_filename\n\nfrom common import utils\nfrom common.profile import Profile\nfrom forms.article_form import ArticleForm\nfrom forms.image_upload_form import ImageUploadForm\nfrom models.article import Article\nfrom routes import app\nfrom services.article_service import ArticleService\n\n\n@app.route('/create_article', methods=['GET', 'POST'])\n@login_required\ndef create_article_page():\n    form = ArticleForm()\n    if form.validate_on_submit():\n        article = Article()\n        article.title = form.title.data\n        article.content = form.content.data\n\n        try:\n            ArticleService().add_article(article)\n            flash(f'文章《{article.title}》创建成功', category='success')\n            return redirect(url_for('home_page'))\n        except Exception as e:\n            flash(f'文章《{article.title}》创建失败: {e}', category='danger')\n    return render_template('create_article.html', form=form, isEdit=False)\n\n\n@app.route('/edit_article/<article_id>', methods=['GET', 'POST'])\n@login_required\ndef edit_article_page(article_id: str):\n    form = ArticleForm()\n    # 点击编辑后 回显数据\n    if request.method == 'GET':\n        try:\n            article = ArticleService().get_article_by_id(article_id)\n            if not article:\n                flash(\"文章不存在\", category='danger')\n                return redirect(url_for('home_page'))\n            else:\n                form.title.data = article.title\n                form.content.data = article.content\n        except Exception as e:\n            flash(f'文章获取失败: {e}', category='danger')\n            return redirect(url_for('home_page'))\n\n    # 更新数据后 保存\n    if form.validate_on_submit():\n        article = Article()\n        try:\n            article.id = int(article_id)\n            article.title = form.title.data\n            article.content = form.content.data\n\n            ArticleService().update_article(article)\n            flash(f'文章《{article.title}》更新成功', category='success')\n            return redirect(url_for('home_page'))\n        except Exception as e:\n            flash(f'文章《{article.title}》更新失败: {e}', category='danger')\n    return render_template('create_article.html', form=form, isEdit=True)\n\n\n@app.route('/images', methods=['GET', 'POST'])\n@login_required\ndef images_page():\n    form = ImageUploadForm()\n    if form.validate_on_submit():\n        image_file = form.image.data\n        image_path = Profile.get_image_path()\n        image_filename = secure_filename(image_file.filename)\n        image_full_path = utils.get_save_filepath(image_path, image_filename)\n        image_file.save(image_full_path)\n        flash(f'图片上传成功, 保存至 {image_full_path}', category='success')\n    return render_template('images.html', form=form)\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706708552488-52ceb6ce-6c1c-48ed-adbb-90441fd2b7ac.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706708567670-89ea636d-d4c6-41c1-936b-f18e86a07857.png)\n\n### 上传图片跳转按钮\n\n- 在`base.html`处添加一下`图片管理`按钮\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- Required meta tags -->\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <!-- Bootstrap CSS -->\n    <link\n      rel=\"stylesheet\"\n      href=\"/static/plugins/bootstrap-5.3.2/bootstrap.min.css\"\n    />\n    <script src=\"/static/plugins/bootstrap-5.3.2/bootstrap.bundle.min.js\"></script>\n    <script src=\"/static/plugins/jquery-3.7.1/jquery.min.js\"></script>\n    <script src=\"/static/plugins/showdownjs-2.0.0/showdown.min.js\"></script>\n\n    <style>\n      pre {\n        white-space: pre-wrap; /* css-3 */\n        white-space: -moz-pre-wrap; /* Mozilla, since 1999 */\n        white-space: -pre-wrap; /* Opera 4-6 */\n        white-space: -o-pre-wrap; /* Opera 7 */\n        word-wrap: break-word; /* Internet Explorer 5.5+ */\n        background-color: #f8f8f8;\n        border: 1px solid #e7e7e7;\n        margin-top: 1.5em;\n        margin-bottom: 1.5em;\n        padding: 0.125em 0.3125em 0.0625em;\n      }\n\n      pre code {\n        background-color: transparent;\n        border: 0;\n        padding: 0;\n      }\n    </style>\n\n    <title>{% block title %} {% endblock %}</title>\n  </head>\n  <body>\n    <nav\n      class=\"navbar navbar-expand-md navbar-dark bg-dark ps-4 pe-4\"\n      style=\"background-color: #1976d2; color: #ffffff;\"\n    >\n      <a class=\"navbar-brand\" href=\"#\" style=\"font-size: 20px; padding: 10px;\"\n        >Zachary的记事本</a\n      >\n      <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarNav\"\n        style=\"border: none; background-color: transparent; padding: 5px 10px;\"\n      >\n        <span\n          class=\"navbar-toggler-icon\"\n          style=\"background-color: #1976d2;\"\n        ></span>\n      </button>\n      <div\n        class=\"collapse navbar-collapse\"\n        id=\"navbarNav\"\n        style=\"width: 80%; margin: auto; border-radius: 10px;\"\n      >\n        <ul class=\"navbar-nav me-auto\" style=\"margin-top: 20px;\">\n          <li class=\"nav-item active\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('home_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >主页</a\n            >\n          </li>\n          <li class=\"nav-item\" style=\"border-bottom: 2px solid #4caf50;\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('about_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >关于</a\n            >\n          </li>\n        </ul>\n        {% if current_user.is_authenticated %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('images_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >图片管理</a\n            >\n          </li>\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('create_article_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >发布新文章</a\n            >\n          </li>\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('logout_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >退出</a\n            >\n          </li>\n        </ul>\n        {% else %}\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a\n              class=\"nav-link\"\n              href=\"{{ url_for('login_page') }}\"\n              style=\"color: #ffffff; padding: 10px;\"\n              >登录</a\n            >\n          </li>\n        </ul>\n        {% endif %}\n      </div>\n    </nav>\n    {% with messages = get_flashed_messages(with_categories=true) %} {% if\n    messages %} {% for category, message in messages %}\n    <div\n      class=\"alert alert-{{ category }} alert-dismissible fade show\"\n      role=\"alert\"\n    >\n      {{ message }}\n      <button\n        type=\"button\"\n        class=\"btn-close\"\n        data-bs-dismiss=\"alert\"\n        aria-label=\"Close\"\n      ></button>\n    </div>\n    {% endfor %} {% endif %} {% endwith %} {% block content %} {% endblock %}\n  </body>\n</html>\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706708822633-0d6c09c6-8513-4d71-945a-1a8df384a71d.png)\n\n## 图片下载\n\n### 访问图片的路由定义\n\n图片下载的权限是普通用户也可以 不需要登录\n\n所以在`/routes/user_routes.py`下实现\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import render_template, abort, flash, redirect, url_for, send_from_directory\nfrom flask_login import current_user, logout_user\n\nfrom common.profile import Profile\nfrom forms.article_delete_form import ArticleDeleteForm\nfrom forms.login_form import LoginForm\nfrom routes import app\nfrom services.article_service import ArticleService\nfrom services.user_service import UserService\n\n\n@app.route('/', methods=['GET', 'POST'])\n@app.route('/index', methods=['GET', 'POST'])\ndef home_page():\n    articles = ArticleService().get_articles()\n    if current_user.is_authenticated:\n        article_delete_form = ArticleDeleteForm()\n        if article_delete_form.validate_on_submit():\n            try:\n                ArticleService().delete_article(int(article_delete_form.article_id.data))\n                flash(f'文章删除成功', category='success')\n                return redirect(url_for('home_page'))\n            except Exception as e:\n                flash(f'文章删除失败: {e}', category='danger')\n        return render_template('index.html', articles=articles, article_delete_form=article_delete_form)\n    return render_template('index.html', articles=articles)\n\n\n@app.route('/article/<article_id>')\ndef article_page(article_id):\n    article = ArticleService().get_article_by_id(article_id)\n    if article:\n        return render_template('article.html', article=article)\n    abort(404)\n\n\n@app.route('/about')\ndef about_page():\n    return render_template('about.html')\n\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login_page():\n    form = LoginForm()\n    if form.validate_on_submit():\n        result = UserService().do_login(form.account.data, form.password.data)\n        if result:\n            flash(f'{form.account.data}登录成功, 正在跳转...', category='success')\n            return redirect(url_for('home_page'))\n        else:\n            flash(f'{form.account.data}登录失败， 请检查账号密码', category='danger')\n    return render_template('login.html', form=form)\n\n\n@app.route('/logout')\ndef logout_page():\n    logout_user()\n    return redirect(url_for('home_page'))\n\n\n@app.route('/image/<image_filename>')\ndef download_image(image_filename: str):\n    image_path = Profile.get_image_path()\n    image_filepath = image_path.joinpath(image_filename)\n    if not image_filepath.exists():\n        abort(404)\n    return send_from_directory(directory=image_path, path=image_filename)\n```\n\n这样可以获取到对应文件名的图片\n\n### 显示所有图片的前端\n\n在`images.html`处新增一个显示所有图片信息的功能\n\n```html\n{% extends 'base.html' %} {% block title %} zachary的记事本 - 图片管理 {%\nendblock %} {% block content %}\n<div class=\"container-xl\">\n  <form method=\"POST\" class=\"form-signin\" enctype=\"multipart/form-data\">\n    {{ form.hidden_tag() }}\n    <h1 class=\"h3 mb-3 font-weight-normal\">上传图片</h1>\n    <br />\n    {{ form.image.label }} {{ form.image(class=\"form-control\") }} {{\n    form.submit(class=\"btn btn-lg btn-primary btn-block\") }}\n  </form>\n  <hr />\n\n  <div class=\"row\">\n    {% if image_filenames %} {% for image_filename in image_filenames %}\n    <div class=\"col-md-3\">\n      <b>/image/{{ image_filename }}</b>\n      <img\n        src=\"/image/{{ image_filename }}\"\n        alt=\"\"\n        class=\"img-thumbnail my-2\"\n        style=\"width: 300px; height: 300px\"\n      />\n    </div>\n    {% endfor %} {% endif %}\n  </div>\n</div>\n{% endblock %}\n```\n\n### 获取所有图片列表\n\n为了给前端返回所有图片的路径名称，需要一个 service，在`/services`下创建一个`image_service.py`\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom common.profile import Profile\n\n\nclass ImageService:\n\n    def get_image_filename_list(self):\n        image_path = Profile.get_image_path()\n        filename_list = []\n        if image_path.exists():\n            for filename in image_path.iterdir():\n                if filename.is_file():\n                    filename_list.append(filename.name)\n        return filename_list\n```\n\n然后再去修改一下`admin_routes.py`中`images_page`的渲染结果\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import flash, redirect, url_for, render_template, request\nfrom flask_login import login_required\nfrom werkzeug.utils import secure_filename\n\nfrom common import utils\nfrom common.profile import Profile\nfrom forms.article_form import ArticleForm\nfrom forms.image_upload_form import ImageUploadForm\nfrom models.article import Article\nfrom routes import app\nfrom services.article_service import ArticleService\nfrom services.image_service import ImageService\n\n\n@app.route('/create_article', methods=['GET', 'POST'])\n@login_required\ndef create_article_page():\n    form = ArticleForm()\n    if form.validate_on_submit():\n        article = Article()\n        article.title = form.title.data\n        article.content = form.content.data\n\n        try:\n            ArticleService().add_article(article)\n            flash(f'文章《{article.title}》创建成功', category='success')\n            return redirect(url_for('home_page'))\n        except Exception as e:\n            flash(f'文章《{article.title}》创建失败: {e}', category='danger')\n    return render_template('create_article.html', form=form, isEdit=False)\n\n\n@app.route('/edit_article/<article_id>', methods=['GET', 'POST'])\n@login_required\ndef edit_article_page(article_id: str):\n    form = ArticleForm()\n    # 点击编辑后 回显数据\n    if request.method == 'GET':\n        try:\n            article = ArticleService().get_article_by_id(article_id)\n            if not article:\n                flash(\"文章不存在\", category='danger')\n                return redirect(url_for('home_page'))\n            else:\n                form.title.data = article.title\n                form.content.data = article.content\n        except Exception as e:\n            flash(f'文章获取失败: {e}', category='danger')\n            return redirect(url_for('home_page'))\n\n    # 更新数据后 保存\n    if form.validate_on_submit():\n        article = Article()\n        try:\n            article.id = int(article_id)\n            article.title = form.title.data\n            article.content = form.content.data\n\n            ArticleService().update_article(article)\n            flash(f'文章《{article.title}》更新成功', category='success')\n            return redirect(url_for('home_page'))\n        except Exception as e:\n            flash(f'文章《{article.title}》更新失败: {e}', category='danger')\n    return render_template('create_article.html', form=form, isEdit=True)\n\n\n@app.route('/images', methods=['GET', 'POST'])\n@login_required\ndef images_page():\n    form = ImageUploadForm()\n    if form.validate_on_submit():\n        image_file = form.image.data\n        image_path = Profile.get_image_path()\n        image_filename = secure_filename(image_file.filename)\n        image_full_path = utils.get_save_filepath(image_path, image_filename)\n        image_file.save(image_full_path)\n        flash(f'图片上传成功, 保存至 {image_full_path}', category='success')\n\n    image_filenames = ImageService().get_image_filename_list()\n    return render_template('images.html', form=form, image_filenames=image_filenames)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706710734559-759d53a9-0097-4aff-b863-76551ffd6f3b.png)\n\n### 在文章中使用图片\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706710807118-258a751f-d305-4cd8-8ea5-c4fe0be5b23f.png)\n\n在图片管理的页面可以看到每一张图片上方的文字，在记事本中可以使用 markdown 语法显示该图片\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706710897552-ba5e7e8c-2b1b-42ba-b664-38b08328bdad.png)\n\n这样上传的记事内容也可以看到图片了\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706710947668-fa8ba066-a954-425c-98e7-97e0596d3cb4.png)\n\n同时也支持 html 语法格式，这样可以很方便地对图片做格式限定\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706711085201-f043d66c-3596-4cff-ab41-ce62d9bd3aa3.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706711123997-ec58e1a7-4eec-4032-bb8d-807d478e363d.png)\n\n# docker 部署\n\n## 准备工作\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport os\nfrom flask import Flask\nfrom flask_login import LoginManager\nfrom flask_sqlalchemy import SQLAlchemy\n\nMYSQL_HOST = os.getenv('MYSQL_HOST', 'localhost')\nMYSQL_PORT = os.getenv('MYSQL_PORT', 3306)\nMYSQL_USER = os.getenv('MYSQL_USER', 'root')\nMYSQL_PASSWORD = os.getenv('MYSQL_PASSWORD', '123456')\nMYSQL_DB = os.getenv('MYSQL_DB', 'mynotebook_db')\n\napp = Flask(__name__, template_folder='../templates', static_folder='../static', static_url_path='/static')\n\napp.config[\n    'SQLALCHEMY_DATABASE_URI'] = f'mysql+mysqldb://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOST}:{MYSQL_PORT}/{MYSQL_DB}'\napp.config['SECRET_KEY'] = 'zachary123456'\n\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager(app)\n\nfrom routes import user_routes\nfrom routes import admin_routes\n```\n\n```python\nfrom sqlalchemy import inspect\n\nfrom routes import app, db\nimport bcrypt\n\n\ndef init_db():\n    with app.app_context():\n        inspector = inspect(db.engine)\n        if not inspector.has_table('users'):\n            from models.user import User\n            from models.article import Article\n            db.create_all()\n            hashed_password = bcrypt.hashpw(\"123456\".encode(), bcrypt.gensalt())\n            user = User(account=\"zachary\", password=hashed_password.decode(), username=\"zachary\")\n            db.session.add(user)\n            db.session.commit()\n\n\nif __name__ == '__main__':\n    init_db()\n    app.run(host='0.0.0.0', debug=True, port=8080)\n\n```\n\n```dockerfile\nFROM ubuntu\n\nCOPY . /opt/mynotebook/\n\nWORKDIR /opt/mynotebook/\n\nRUN apt update\nRUN apt-get install -y python3 python3-pip\nRUN apt-get install -y pkg-config\nRUN apt-get install -y libmysqlclient-dev\n\nRUN pip3 install --upgrade pip\nRUN pip3 install -r requirements.txt\n\nENV PYTHONPATH=/opt/mynotebook/\n\nENTRYPOINT [\"python3\", \"app.py\"]\n```\n\n```yaml\nversion: \"3.8\"\nservices:\n  mynotebook_server:\n    build: .\n    image: mynotebook\n    container_name: mynotebook_server\n    ports:\n      - \"80:8080\"\n    links:\n      - mysql_server\n    environment:\n      MYSQL_HOST: mysql_server\n      MYSQL_PORT: 3306\n      MYSQL_USER: root\n      MYSQL_PASSWORD: 123456\n      MYSQL_DB: mynotebook_db\n    volumes:\n      - /opt/mynotebook_data:/opt/mynotebook/data\n    depends_on:\n      mysql_server:\n        condition: service_healthy\n\n  mysql_server:\n    image: mysql\n    container_name: mysql_server\n    volumes:\n      - /opt/mysql:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456\n      MYSQL_DATABASE: mynotebook_db\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      timeout: 20s\n      retries: 10\n```\n\n## 服务器准备代码\n\n完成上面四个部署准备文件后，将代码提交到 GitHub 上面\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706713988375-62c91c69-7fab-45b8-8730-a71782fd37e0.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706714011039-fdd9bcd7-c8e8-42e5-86a2-4c9502ba5bfc.png)\n\n拿到地址： [https://github.com/BlockZachary/mynotebook.git](https://github.com/BlockZachary/mynotebook.git)\n\n然后去服务器上 克隆一下\n\n```shell\nroot@ubuntu-server:~/pythonProject# ls\ncmdDockerSample  cmdEntrypointDockerSample  entrypointDockerSample  flaskDockerSample\nroot@ubuntu-server:~/pythonProject# git clone https://github.com/BlockZachary/mynotebook.git\nCloning into 'mynotebook'...\nremote: Enumerating objects: 61, done.\nremote: Counting objects: 100% (61/61), done.\nremote: Compressing objects: 100% (54/54), done.\nremote: Total 61 (delta 3), reused 61 (delta 3), pack-reused 0\nUnpacking objects: 100% (61/61), 447.81 KiB | 16.00 KiB/s, done.\nroot@ubuntu-server:~/pythonProject# ls\ncmdDockerSample  cmdEntrypointDockerSample  entrypointDockerSample  flaskDockerSample  mynotebook\nroot@ubuntu-server:~/pythonProject# cd mynotebook/\nroot@ubuntu-server:~/pythonProject/mynotebook# ls\napp.py  data                 Dockerfile  models            routes    static\ncommon  docker-compose.yaml  forms       requirements.txt  services  templates\nroot@ubuntu-server:~/pythonProject/mynotebook#\n```\n\n然后 build 一下镜像\n\n```shell\nroot@ubuntu-server:~/pythonProject/mynotebook# docker compose build\n[+] Building 50.1s (8/13)                                                                               docker:default\n => [mynotebook_server internal] load build definition from Dockerfile                                            0.0s\n => => transferring dockerfile: 372B                                                                              0.0s\n => [mynotebook_server internal] load metadata for docker.io/library/ubuntu:latest                                0.0s\n => [mynotebook_server internal] load .dockerignore                                                               0.0s\n => => transferring context: 2B                                                                                   0.0s\n => [mynotebook_server internal] load build context                                                               0.1s\n => => transferring context: 1.76MB                                                                               0.1s\n => CACHED [mynotebook_server 1/9] FROM docker.io/library/ubuntu:latest                                           0.0s\n => [mynotebook_server 2/9] COPY . /opt/mynotebook/                                                               0.1s\n => [mynotebook_server 3/9] WORKDIR /opt/mynotebook/                                                              0.0s\n => [mynotebook_server 4/9] RUN apt update                                                                       12.5s\n => [mynotebook_server 5/9] RUN apt-get install -y python3 python3-pip                                           37.3s\n => => # Get:15 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 perl-modules-5.34 all 5.34.0-3ubuntu1.3 [297\n => => # 6 kB]\n => => # Get:16 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgdbm6 amd64 1.23-1 [33.9 kB]\n => => # Get:17 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgdbm-compat4 amd64 1.23-1 [6606 B]\n => => # Get:18 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libperl5.34 amd64 5.34.0-3ubuntu1.3 [4820 kB\n => => # ]\n```\n\n```shell\nroot@ubuntu-server:~/pythonProject/mynotebook# docker compose build\n[+] Building 424.9s (14/14) FINISHED                                                                    docker:default\n => [mynotebook_server internal] load build definition from Dockerfile                                            0.0s\n => => transferring dockerfile: 525B                                                                              0.0s\n => [mynotebook_server internal] load metadata for docker.io/library/ubuntu:latest                                0.0s\n => [mynotebook_server internal] load .dockerignore                                                               0.0s\n => => transferring context: 2B                                                                                   0.0s\n => [mynotebook_server internal] load build context                                                               0.0s\n => => transferring context: 11.39kB                                                                              0.0s\n => CACHED [mynotebook_server 1/9] FROM docker.io/library/ubuntu:latest                                           0.0s\n => [mynotebook_server 2/9] COPY . /opt/mynotebook/                                                               0.1s\n => [mynotebook_server 3/9] WORKDIR /opt/mynotebook/                                                              0.0s\n => [mynotebook_server 4/9] RUN apt update                                                                      232.7s\n => [mynotebook_server 5/9] RUN apt-get install -y python3 python3-pip                                          128.8s\n => [mynotebook_server 6/9] RUN apt-get install -y pkg-config                                                    22.6s\n => [mynotebook_server 7/9] RUN apt-get install -y libmysqlclient-dev                                            11.1s\n => [mynotebook_server 8/9] RUN pip3 install --upgrade pip -i http://mirrors.aliyun.com/pypi/simple/ --trusted-h  6.2s\n => [mynotebook_server 9/9] RUN pip3 install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --tr  18.8s\n => [mynotebook_server] exporting to image                                                                        4.2s\n => => exporting layers                                                                                           4.2s\n => => writing image sha256:6faeda711c94d58d72fdc430d0304bd8ebe60fef277f2186aa20375fb5bd0133                      0.0s\n => => naming to docker.io/library/mynotebook                                                                     0.1s\nroot@ubuntu-server:~/pythonProject/mynotebook# docker images\nREPOSITORY                   TAG       IMAGE ID       CREATED          SIZE\nmynotebook                   latest    6faeda711c94   39 seconds ago   609MB\ndbmanager                    latest    8cea6473ccdd   4 days ago       584MB\nmyos                         latest    eb06c6d74ffa   5 days ago       127MB\nentrypointdockersample       latest    d3e54cbe8477   6 days ago       155MB\ncmddockersample              latest    153eeb8273c4   6 days ago       155MB\ncmdentrypointdockersample    latest    01ab92cd6837   6 days ago       155MB\nmyflasksample                latest    e4e6142e4b41   6 days ago       484MB\nzacharyblock/myflasksample   latest    e4e6142e4b41   6 days ago       484MB\nmysql                        8.0       b6188b3dc37c   12 days ago      603MB\nmysql                        latest    56b21e040954   12 days ago      632MB\nubuntu                       latest    e34e831650c1   2 weeks ago      77.9MB\nwordpress                    latest    14425bb2eae9   7 weeks ago      739MB\nnginx                        latest    a8758716bb6a   3 months ago     187MB\nhello-world                  latest    d2c94e258dcb   9 months ago     13.3kB\nnginx                        1.24.0    f373f7a623e7   9 months ago     142MB\n```\n\n## 启动\n\n```shell\nroot@ubuntu-server:~/pythonProject/mynotebook# docker compose up\n[+] Running 3/2\n ✔ Network mynotebook_default   Created                                                                           0.1s\n ✔ Container mysql_server       Created                                                                           0.1s\n ✔ Container mynotebook_server  Created                                                                           0.0s\nAttaching to mynotebook_server, mysql_server\nmysql_server       | 2024-01-31 17:32:56+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\nmysql_server       | 2024-01-31 17:32:57+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\nmysql_server       | 2024-01-31 17:32:57+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\nmysql_server       | '/var/lib/mysql/mysql.sock' -> '/var/run/mysqld/mysqld.sock'\nmysql_server       | 2024-01-31T17:32:57.518161Z 0 [System] [MY-015015] [Server] MySQL Server - start.\nmysql_server       | 2024-01-31T17:33:01.818805Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 1\nmysql_server       | 2024-01-31T17:33:01.971261Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.\nmysql_server       | 2024-01-31T17:33:04.004090Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.\nmysql_server       | 2024-01-31T17:33:04.899718Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.\nmysql_server       | 2024-01-31T17:33:04.899769Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.\nmysql_server       | 2024-01-31T17:33:04.902925Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location '/var/run/mysqld' in the path is accessible to all OS users. Consider choosing a different directory.\nmysql_server       | 2024-01-31T17:33:04.947686Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: '8.3.0'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server - GPL.\nmysql_server       | 2024-01-31T17:33:04.948714Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock\nmynotebook_server  |  * Serving Flask app 'routes'\nmynotebook_server  |  * Debug mode: on\nmynotebook_server  | WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\nmynotebook_server  |  * Running on all addresses (0.0.0.0)\nmynotebook_server  |  * Running on http://127.0.0.1:8080\nmynotebook_server  |  * Running on http://172.21.0.3:8080\nmynotebook_server  | Press CTRL+C to quit\nmynotebook_server  |  * Restarting with stat\nmynotebook_server  |  * Debugger is active!\nmynotebook_server  |  * Debugger PIN: 503-489-69\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706722427333-5b104971-5f39-485b-a544-2c4aaecd812f.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706722616378-132fd5ce-420d-4b61-b4e3-e2a9dddb54d8.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706722681181-a579316f-552a-4b94-987a-b6d78d4f94ca.png)\n\n> 更新: 2024-02-01 01:39:09  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/fuixlxluoen5prgg>\n","tags":["Python Web","Flask","项目"],"categories":["Python Web"]},{"title":"docker-apt-get 报错 E: Unable to locate package","url":"/blog/4282897083/","content":"\n# docker-apt-get 报错 E: Unable to locate package\n\n遇见的问题\n\n```shell\nroot@ubuntu-server:~/pythonProject/flaskDockerSample# docker build . -t myflasksample\n[+] Building 974.1s (7/10)                                                                              docker:default\n => [internal] load build definition from Dockerfile                                                              0.1s\n => => transferring dockerfile: 292B                                                                              0.0s\n => [internal] load .dockerignore                                                                                 0.1s\n => => transferring context: 2B                                                                                   0.0s\n => [internal] load metadata for docker.io/library/ubuntu:latest                                                817.0s\n => [1/6] FROM docker.io/library/ubuntu:latest@sha256:e6173d4dc55e76b87c4af8db8821b1feae4146dd47341e4d431118c7dd  7.3s\n => => resolve docker.io/library/ubuntu:latest@sha256:e6173d4dc55e76b87c4af8db8821b1feae4146dd47341e4d431118c7dd  0.0s\n => => sha256:e6173d4dc55e76b87c4af8db8821b1feae4146dd47341e4d431118c7dd060a74 1.13kB / 1.13kB                    0.0s\n => => sha256:cb2af41f42b9c9bc9bcdc7cf1735e3c4b3d95b2137be86fd940373471a34c8b0 424B / 424B                        0.0s\n => => sha256:e34e831650c1bb0be9b6f61c6755749cb8ea2053ba91c6cda27fded9e089811f 2.30kB / 2.30kB                    0.0s\n => => sha256:29202e855b2021a2d7f92800619ed5f5e8ac402e267cfbb3d29a791feb13c1ee 29.55MB / 29.55MB                  4.5s\n => => extracting sha256:29202e855b2021a2d7f92800619ed5f5e8ac402e267cfbb3d29a791feb13c1ee                         2.4s\n => [internal] load build context                                                                                 0.0s\n => => transferring context: 330B                                                                                 0.0s\n => [2/6] RUN apt-get update                                                                                    148.9s\n => ERROR [3/6] RUN apt-get install -y python3.7 python3-pip                                                      0.6s\n------\n > [3/6] RUN apt-get install -y python3.7 python3-pip:\n0.487 Reading package lists...\n0.514 Building dependency tree...\n0.515 Reading state information...\n0.517 E: Unable to locate package python3.7\n0.517 E: Couldn't find any package by glob 'python3.7'\n0.517 E: Couldn't find any package by regex 'python3.7'\n0.517 E: Unable to locate package python3-pip\n------\nDockerfile:5\n--------------------\n   3 |\n   4 |     RUN apt-get update\n   5 | >>> RUN apt-get install -y python3.7 python3-pip\n   6 |\n   7 |     COPY requirements.txt .\n--------------------\nERROR: failed to solve: process \"/bin/sh -c apt-get install -y python3.7 python3-pip\" did not complete successfully: exit code: 100\n```\n\n解决办法 ：\n\n- 换了镜像源 /etc/docker/daemon.json\n- <font style=\"background-color:#FBDE28;\">把 dockerfile 中的 apt-get update 换成 apt update 莫名发现这个很好用</font>\n\n> 更新: 2024-01-25 23:33:30  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/wraymddq9z9nodf4>\n","tags":["Docker"],"categories":["Docker"]},{"title":"git-GnuTLS recv error (-110): The TLS connection was non-properly terminated.","url":"/blog/3701004505/","content":"\n# git-GnuTLS recv error (-110): The TLS connection was non-properly terminated.\n\n```shell\nroot@ubuntu-server:~/pythonProject# git clone https://github.com/BlockZachary/flaskDockerSample.git\nCloning into 'flaskDockerSample'...\nfatal: unable to access 'https://github.com/BlockZachary/flaskDockerSample.git/': GnuTLS recv error (-110): The TLS connection was non-properly terminated.\n```\n\n在确保了 ubuntu 下没有代理的情况下，依次执行\n\n```shell\nroot@ubuntu-server:~/pythonProject# export GIT_TRACE_PACKET=1\nroot@ubuntu-server:~/pythonProject# export GIT_TRACE=1\nroot@ubuntu-server:~/pythonProject# export GIT_CURL_VERBOSE=1\n```\n\n再次尝试 clone 成功了\n\n```shell\nroot@ubuntu-server:~/pythonProject# git clone https://github.com/BlockZachary/flaskDockerSample.git\n19:10:50.593675 git.c:439               trace: built-in: git clone https://github.com/BlockZachary/flaskDockerSample.git\nCloning into 'flaskDockerSample'...\n19:10:50.598505 run-command.c:663       trace: run_command: git-remote-https origin https://github.com/BlockZachary/flaskDockerSample.git\n* Couldn't find host github.com in the .netrc file; using defaults\n*   Trying 140.82.113.4:443...\n* TCP_NODELAY set\n* Connected to github.com (140.82.113.4) port 443 (#0)\n* found 411 certificates in /etc/ssl/certs\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* SSL connection using TLS1.3 / ECDHE_RSA_AES_128_GCM_SHA256\n* \t server certificate verification OK\n```\n\n> 更新: 2024-01-25 03:13:50  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/mrus76t4yurrg5ee>\n","tags":["Git"],"categories":["Git"]},{"title":"解决“git-Failed to connect to 127.0.0.1 port 7890: 拒绝连接","url":"/blog/1915393917/","content":"\n# git-Failed to connect to 127.0.0.1 port 7890: 拒绝连接\n\n首先查看是否使用代理\n\n`git config --global http.proxy`\n\n将使用的代理取消掉\n\n`git config --global --unset http.proxy`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706108591517-237e4e2d-761e-453c-8b73-f6d8f63f9951.png)\n\n```shell\n➜  ~ git config --global http.proxy\n\n127.0.0.1:7890\n➜  ~ git config --global --unset http.proxy\n➜  ~\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706108600620-d507faf8-2a93-423e-befd-28c9d69a4e6d.png)\n\n> 更新: 2024-01-24 23:03:31  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/xv1hqiphn1w9xs7n>\n","tags":["Git"],"categories":["Git"]},{"title":"Docker 入门","url":"/blog/4203719214/","content":"\n# Docker 入门\n\n# 初识 Docker\n\n## 概念\n\n虚拟机的出现使得 同一台物理机上实现多个操作系统（OS）运行不同 App 达到目的 成为可能\n\n但是当虚拟机数量越来越多 或者所运行的 App 消耗的资源越来越大时 对物理机会产生极大消耗\n\n为了使得系统性能不被多个虚拟机中的 OS 所消耗，容器技术（Container）应运而生\n\n与虚拟机不同，容器技术依赖容器支持层，创建多个容器，用以运行多个 App\n\n优点是极大地降低了资源消耗，同时形成多个虚拟机的效果，其中最流行的容器技术就是 Docker\n\n## Docker 的特点\n\n- 基于 Linux 实现的虚拟技术\n- 依据进程隔离实现的\n- 体积小、占用资源少\n- 启动快\n\n## 作用\n\n- 用于解决软件开发中的环境配置，作用类似于 Python 的虚拟环境\n\n## 安装\n\n- MacOS 系统访问 [https://docs.docker.com/desktop/install/mac-install/](https://docs.docker.com/desktop/install/mac-install/)\n- Windows 系统访问 [https://docs.docker.com/desktop/install/windows-install/](https://docs.docker.com/desktop/install/windows-install/)\n- ubuntu 系统访问 [https://docs.docker.com/engine/install/ubuntu/](https://docs.docker.com/engine/install/ubuntu/)\n- centos 系统访问 [https://docs.docker.com/engine/install/centos/](https://docs.docker.com/engine/install/centos/)\n- 显示 docker 版本 `docker -v`\n\n```powershell\nroot@ubuntu-server:~# docker -v\nDocker version 24.0.6, build ed223bc\n```\n\n- 显示 docker 详细信息 `docker info`\n\n```shell\nroot@ubuntu-server:/# docker info\nClient: Docker Engine - Community\n Version:    24.0.6\n Context:    default\n Debug Mode: false\n Plugins:\n  buildx: Docker Buildx (Docker Inc.)\n    Version:  v0.11.2\n    Path:     /usr/libexec/docker/cli-plugins/docker-buildx\n  compose: Docker Compose (Docker Inc.)\n    Version:  v2.21.0\n    Path:     /usr/libexec/docker/cli-plugins/docker-compose\n```\n\n- 查看 docker 运行状态 `systemctl status docker`\n\n```shell\nroot@ubuntu-server:~# systemctl status docker\n● docker.service - Docker Application Container Engine\n     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n     Active: active (running) since Thu 2023-10-05 00:59:25 UTC; 3 months 18 days ago\nTriggeredBy: ● docker.socket\n       Docs: https://docs.docker.com\n   Main PID: 1049 (dockerd)\n      Tasks: 10\n     Memory: 277.2M\n     CGroup: /system.slice/docker.service\n             └─1049 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n\nOct 05 00:59:25 ubuntu-server dockerd[1049]: time=\"2023-10-05T00:59:25.580102143Z\" level=info msg=\"API listen>\nOct 05 00:59:25 ubuntu-server systemd[1]: Started Docker Application Container Engine.\nOct 05 01:17:12 ubuntu-server dockerd[1049]: time=\"2023-10-05T01:17:12.301687748Z\" level=info msg=\"ignoring e>\nOct 05 01:17:12 ubuntu-server dockerd[1049]: time=\"2023-10-05T01:17:12.322715268Z\" level=warning msg=\"failed >\nOct 05 01:24:34 ubuntu-server dockerd[1049]: time=\"2023-10-05T01:24:34.725731365Z\" level=error msg=\"stream co>\nOct 05 01:24:34 ubuntu-server dockerd[1049]: time=\"2023-10-05T01:24:34.725833604Z\" level=error msg=\"stream co>\nOct 05 01:24:59 ubuntu-server dockerd[1049]: time=\"2023-10-05T01:24:59.217576662Z\" level=error msg=\"Not conti>\nOct 05 02:09:18 ubuntu-server dockerd[1049]: time=\"2023-10-05T02:09:18.848121719Z\" level=info msg=\"Container >\nOct 05 02:09:18 ubuntu-server dockerd[1049]: time=\"2023-10-05T02:09:18.883004570Z\" level=info msg=\"ignoring e>\nOct 05 02:09:18 ubuntu-server dockerd[1049]: time=\"2023-10-05T02:09:18.900091164Z\" level=warning msg=\"failed >\nlines 1-21/21 (END)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1705967489620-0fd61fae-3fed-47cc-8029-66a8d8ed29be.png)\n\n- 设置 docker 开机自启动 `systemctl enable docker`\n\n# Docker 运行\n\n最初，刚安装好 docker 的机器不存在镜像因此没办法运行\n\n运行`docker run hello-world`的效果如下，由于设备上还没有拉取任何镜像，因此是从 library 上拉取的\n\n```shell\nroot@ubuntu-server:~# docker run hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\nc1ec31eb5944: Pull complete\nDigest: sha256:4bd78111b6914a99dbc560e6a20eab57ff6655aea4a80c50b0c5491968cbc2e6\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n```\n\n## 启动容器\n\n- `docker run [镜像名称]`，若该镜像不存在 则会默认拉取最新的\n\n```shell\nroot@ubuntu-server:~# docker run nginx\nUnable to find image 'nginx:latest' locally\nlatest: Pulling from library/nginx\n2f44b7a888fa: Pull complete\n8b7dd3ed1dc3: Pull complete\n35497dd96569: Pull complete\n36664b6ce66b: Pull complete\n2d455521f76c: Pull complete\ndc9c4fdb83d6: Pull complete\n8056d2bcf3b6: Pull complete\nDigest: sha256:4c0fdaa8b6341bfdeca5f18f7837462c80cff90527ee35ef185571e1c327beac\nStatus: Downloaded newer image for nginx:latest\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\n/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\n/docker-entrypoint.sh: Configuration complete; ready for start up\n2024/01/23 13:58:44 [notice] 1#1: using the \"epoll\" event method\n2024/01/23 13:58:44 [notice] 1#1: nginx/1.25.3\n2024/01/23 13:58:44 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)\n2024/01/23 13:58:44 [notice] 1#1: OS: Linux 5.4.0-163-generic\n2024/01/23 13:58:44 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576\n2024/01/23 13:58:44 [notice] 1#1: start worker processes\n2024/01/23 13:58:44 [notice] 1#1: start worker process 28\n2024/01/23 13:58:44 [notice] 1#1: start worker process 29\n2024/01/23 14:01:05 [notice] 1#1: signal 28 (SIGWINCH) received\n2024/01/23 14:01:06 [notice] 1#1: signal 28 (SIGWINCH) received\n2024/01/23 14:01:06 [notice] 1#1: signal 28 (SIGWINCH) received\n2024/01/23 14:01:06 [notice] 1#1: signal 28 (SIGWINCH) received\n2024/01/23 14:01:07 [notice] 1#1: signal 28 (SIGWINCH) received\n2024/01/23 14:01:07 [notice] 1#1: signal 28 (SIGWINCH) received\n2024/01/23 14:01:08 [notice] 1#1: signal 28 (SIGWINCH) received\n2024/01/23 14:01:09 [notice] 1#1: signal 28 (SIGWINCH) received\n2024/01/23 14:01:09 [notice] 1#1: signal 28 (SIGWINCH) received\n```\n\n会启动一个 nginx 服务，并且等待着\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706018523068-dbaa31b5-7044-4fe9-a99e-51a2500a82b5.png)\n\n## 查看当前容器\n\n- `docker ps` 查看正在运行中的或者创建了的容器\n- `docker ps -a` 查看所有容器\n\n```shell\nroot@ubuntu-server:~# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES\n8e1148f9c025   nginx     \"/docker-entrypoint.…\"   6 minutes ago   Up 6 minutes   80/tcp    reverent_wozniak\nroot@ubuntu-server:~#\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS                      PORTS     NAMES\n8e1148f9c025   nginx         \"/docker-entrypoint.…\"   6 minutes ago    Up 6 minutes                80/tcp    reverent_wozniak\n2d987d559739   hello-world   \"/hello\"                 30 minutes ago   Exited (0) 30 minutes ago             loving_lehmann\nroot@ubuntu-server:~#\n```\n\n- `docker inspect [容器ID]`，查看容器的信息\n\n```shell\nroot@ubuntu-server:~# docker inspect 8e1148f9c025\n[\n    {\n        \"Id\": \"8e1148f9c02527e90a80ca1f783404ffeb0b22e87a7d3331fef40354ca237c80\",\n        \"Created\": \"2024-01-23T13:58:44.354388314Z\",\n        \"Path\": \"/docker-entrypoint.sh\",\n        \"Args\": [\n            \"nginx\",\n            \"-g\",\n            \"daemon off;\"\n        ],\n        \"State\": {\n            \"Status\": \"running\",\n            \"Running\": true,\n            \"Paused\": false,\n            \"Restarting\": false,\n            \"OOMKilled\": false,\n            \"Dead\": false,\n            \"Pid\": 60563,\n            \"ExitCode\": 0,\n            \"Error\": \"\",\n            \"StartedAt\": \"2024-01-23T13:58:44.664498639Z\",\n            \"FinishedAt\": \"0001-01-01T00:00:00Z\"\n        },\n        \"Image\": \"sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6\",\n        ...\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706018930511-d164a632-ad95-4f73-95b4-f2bd9036a1ce.png)\n\n- `curl http://[IpAddress]:[Ports]`访问该 nginx 服务\n\n```shell\nroot@ubuntu-server:~# curl http://172.17.0.2:80\ncurl: (7) Failed to connect to 172.17.0.2 port 80: Connection refused\n\nroot@ubuntu-server:~# curl http://127.0.0.1:80\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n```\n\n这时候 我出现了一个问题，通过 IPAddress 访问不到，但是通过容器内部可以访问到，并且 ping 不通 172.17.0.2，解决方法如下\n\n```shell\nroot@ubuntu-server:/# cd /etc/docker/\nroot@ubuntu-server:/etc/docker# nano daemon.json\nroot@ubuntu-server:/etc/docker# cat daemon.json\n{\n \"bip\":\"172.17.0.1/24\"\n}\n\nroot@ubuntu-server:/etc/docker# ps -ef | grep dockerd\nroot       66939   64105  0 15:14 pts/0    00:00:00 dockerd\nroot       67596   64105  0 15:21 pts/0    00:00:00 grep --color=auto dockerd\n\nroot@ubuntu-server:/etc/docker# kill -9 66939\n\nroot@ubuntu-server:/etc/docker# sudo systemctl stop docker && sudo systemctl disable docker\nWarning: Stopping docker.service, but it can still be activated by:\n  docker.socket\n[1]+  Killed                  dockerd\nSynchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.\nExecuting: /lib/systemd/systemd-sysv-install disable docker\n\nroot@ubuntu-server:/etc/docker# ip link set dev docker0 down\n\nroot@ubuntu-server:~# dockerd &\n[2] 68637\nroot@ubuntu-server:~# INFO[2024-01-23T15:28:54.176224866Z] Starting up\nINFO[2024-01-23T15:28:54.177656625Z] detected 127.0.0.53 nameserver, assuming systemd-resolved, so using resolv.conf: /run/systemd/resolve/resolv.conf\nINFO[2024-01-23T15:28:54.205339444Z] [graphdriver] using prior storage driver: overlay2\nINFO[2024-01-23T15:28:54.207603223Z] Loading containers: start.\nINFO[2024-01-23T15:28:54.420248892Z] Loading containers: done.\nWARN[2024-01-23T15:28:54.435812794Z] WARNING: No swap limit support\nINFO[2024-01-23T15:28:54.436013678Z] Docker daemon                                 commit=1a79695 graphdriver=overlay2 version=24.0.6\nINFO[2024-01-23T15:28:54.436353042Z] Daemon has completed initialization\nINFO[2024-01-23T15:28:54.462870900Z] API listen on /var/run/docker.sock\n\nroot@ubuntu-server:~# ps -ef | grep dockerd\nroot       68637   64105  0 15:28 pts/0    00:00:00 dockerd\nroot       68836   64105  0 15:30 pts/0    00:00:00 grep --color=auto dockerd\n```\n\n之后尝试重新创建一个 nginx 容器\n\n```shell\nroot@ubuntu-server:~# docker run nginx\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\n/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\n/docker-entrypoint.sh: Configuration complete; ready for start up\n2024/01/23 15:31:01 [notice] 1#1: using the \"epoll\" event method\n2024/01/23 15:31:01 [notice] 1#1: nginx/1.25.3\n2024/01/23 15:31:01 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)\n2024/01/23 15:31:01 [notice] 1#1: OS: Linux 5.4.0-163-generic\n2024/01/23 15:31:01 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576\n2024/01/23 15:31:01 [notice] 1#1: start worker processes\n2024/01/23 15:31:01 [notice] 1#1: start worker process 29\n2024/01/23 15:31:01 [notice] 1#1: start worker process 30\n```\n\n然后使用`curl http://172.17.0.2:80`运行一下\n\n```shell\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS                   PORTS     NAMES\n9db02b830360   nginx         \"/docker-entrypoint.…\"   11 seconds ago   Up 10 seconds            80/tcp    heuristic_swanson\n2d987d559739   hello-world   \"/hello\"                 2 hours ago      Exited (0) 2 hours ago             loving_lehmann\nroot@ubuntu-server:~# docker inspect 9db02b830360\n[\n    {\n        \"Id\": \"9db02b830360af059797b0b17c9fb043c46d468aa9d4ac7edd4e1dbb0bcc5536\",\n        \"Created\": \"2024-01-23T15:31:01.321227908Z\",\n        \"Path\": \"/docker-entrypoint.sh\",\n        \"Args\": [\n            \"nginx\",\n            \"-g\",\n            \"daemon off;\"\n        ],\n        \"State\": {\n            \"Status\": \"running\",\n            \"Running\": true,\n            \"Paused\": false,\n            \"Restarting\": false,\n            \"OOMKilled\": false,\n            \"Dead\": false,\n            \"Pid\": 68908,\n            \"ExitCode\": 0,\n            \"Error\": \"\",\n            \"StartedAt\": \"2024-01-23T15:31:01.62045826Z\",\n            \"FinishedAt\": \"0001-01-01T00:00:00Z\"\n        },\n        \"Image\": \"sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6\",\n        ...\n\nroot@ubuntu-server:~# curl http://172.17.0.2:80\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n```\n\n并且在另一边的 nginx 服务上可以看到访问\n\n```shell\nroot@ubuntu-server:~# docker run nginx\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\n/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\n/docker-entrypoint.sh: Configuration complete; ready for start up\n2024/01/23 15:31:01 [notice] 1#1: using the \"epoll\" event method\n2024/01/23 15:31:01 [notice] 1#1: nginx/1.25.3\n2024/01/23 15:31:01 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)\n2024/01/23 15:31:01 [notice] 1#1: OS: Linux 5.4.0-163-generic\n2024/01/23 15:31:01 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576\n2024/01/23 15:31:01 [notice] 1#1: start worker processes\n2024/01/23 15:31:01 [notice] 1#1: start worker process 29\n2024/01/23 15:31:01 [notice] 1#1: start worker process 30\n172.17.0.1 - - [23/Jan/2024:15:31:41 +0000] \"GET / HTTP/1.1\" 200 615 \"-\" \"curl/7.68.0\" \"-\"\n```\n\n## 停止与删除容器\n\n- `docker stop [容器ID]` 停止一个容器\n- `docker <container> rm [容器ID]/[容器名:Tag]` 删除一个容器，一个容器必须先停止了 才能被删除\n- `docker run --rm [容器名称]`创建一个容器，容器停止时自动删除\n- `docker container prune`删除所有已经停止的容器\n\n```shell\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE         COMMAND                  CREATED             STATUS                   PORTS     NAMES\n9db02b830360   nginx         \"/docker-entrypoint.…\"   About an hour ago   Up About an hour         80/tcp    heuristic_swanson\n2d987d559739   hello-world   \"/hello\"                 3 hours ago         Exited (0) 3 hours ago             loving_lehmann\nroot@ubuntu-server:~# docker stop 9db02b830360\n9db02b830360\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE         COMMAND                  CREATED             STATUS                     PORTS     NAMES\n9db02b830360   nginx         \"/docker-entrypoint.…\"   About an hour ago   Exited (0) 3 seconds ago             heuristic_swanson\n2d987d559739   hello-world   \"/hello\"                 3 hours ago         Exited (0) 3 hours ago               loving_lehmann\nroot@ubuntu-server:~# docker rm 9db02b830360\n9db02b830360\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE         COMMAND    CREATED       STATUS                   PORTS     NAMES\n2d987d559739   hello-world   \"/hello\"   3 hours ago   Exited (0) 3 hours ago             loving_lehmann\nroot@ubuntu-server:~#\n```\n\n## 启动指定 Image 版本容器\n\n- `docker run [镜像名称]` 默认表示最新版本的镜像\n- `docker run [镜像名称]:[版本号]` 使用版本号指定的镜像\n- 查看官方维护的镜像版本号 [https://hub.docker.com/](https://hub.docker.com/)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706029729611-bde303ab-bc84-44e6-a420-4a91876a2332.png)\n\n```shell\nroot@ubuntu-server:~# docker run nginx:1.24.0\nUnable to find image 'nginx:1.24.0' locally\n1.24.0: Pulling from library/nginx\n0e0969fcaa82: Pull complete\n9cfddd3151d4: Pull complete\n0a14c9c58a70: Pull complete\n46aff079cc60: Pull complete\n93498c6629aa: Pull complete\na67e21d7eabc: Pull complete\nDigest: sha256:401bc2c812345a6c64a0fd5504db5e8b511c7c8e62855a827c57944280835703\nStatus: Downloaded newer image for nginx:1.24.0\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\n/docker-entrypoint.sh: Configuration complete; ready for start up\n2024/01/23 17:10:12 [notice] 1#1: using the \"epoll\" event method\n2024/01/23 17:10:12 [notice] 1#1: nginx/1.24.0\n2024/01/23 17:10:12 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6)\n2024/01/23 17:10:12 [notice] 1#1: OS: Linux 5.4.0-163-generic\n2024/01/23 17:10:12 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576\n2024/01/23 17:10:12 [notice] 1#1: start worker processes\n2024/01/23 17:10:12 [notice] 1#1: start worker process 29\n2024/01/23 17:10:12 [notice] 1#1: start worker process 30\n```\n\n其他的一些操作比如容器的停止与删除等都与之前一致\n\n```shell\nroot@ubuntu-server:~# curl http://172.17.0.2:80\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS                   PORTS     NAMES\nb29d1d06802e   nginx:1.24.0   \"/docker-entrypoint.…\"   4 minutes ago   Up 4 minutes             80/tcp    eloquent_bartik\n2d987d559739   hello-world    \"/hello\"                 4 hours ago     Exited (0) 4 hours ago             loving_lehmann\nroot@ubuntu-server:~# docker rm b29d1d06802e\nError response from daemon: You cannot remove a running container b29d1d06802ef51cf29a0f2fcf966f5b0b98f2d10781fe9a6b73663e2e001e08. Stop the container before attempting removal or force remove\nroot@ubuntu-server:~# docker stop b29d1d06802e\nINFO[2024-01-23T17:14:43.920238667Z] ignoring event                                container=b29d1d06802ef51cf29a0f2fcf966f5b0b98f2d10781fe9a6b73663e2e001e08 module=libcontainerd namespace=moby topic=/tasks/delete type=\"*events.TaskDelete\"\nb29d1d06802e\nroot@ubuntu-server:~# docker rm b29d1d06802e\nb29d1d06802e\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE         COMMAND    CREATED       STATUS                   PORTS     NAMES\n2d987d559739   hello-world   \"/hello\"   4 hours ago   Exited (0) 4 hours ago             loving_lehmann\n```\n\n## 创建交互式终端容器\n\n- `docker run -it <--name=[容器名称]> [镜像名称]<:[版本号]>` 启动后可在控制台打印输出与获取输入\n- `docker run -it <--name=[容器名称]> [镜像名称]<:[版本号]> bash` 启动后直接进入交互终端\n- `exit`退出交互式终端\n\n```shell\nroot@ubuntu-server:~# docker run -it --name=nginx_test1 nginx\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\n/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\n/docker-entrypoint.sh: Configuration complete; ready for start up\n2024/01/23 18:20:15 [notice] 1#1: using the \"epoll\" event method\n2024/01/23 18:20:15 [notice] 1#1: nginx/1.25.3\n2024/01/23 18:20:15 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)\n2024/01/23 18:20:15 [notice] 1#1: OS: Linux 5.4.0-163-generic\n2024/01/23 18:20:15 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576\n2024/01/23 18:20:15 [notice] 1#1: start worker processes\n2024/01/23 18:20:15 [notice] 1#1: start worker process 29\n2024/01/23 18:20:15 [notice] 1#1: start worker process 30\n\n\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS                   PORTS     NAMES\n550565930a6a   nginx         \"/docker-entrypoint.…\"   16 seconds ago   Up 15 seconds            80/tcp    nginx_test1\n2d987d559739   hello-world   \"/hello\"                 5 hours ago      Exited (0) 5 hours ago             loving_lehmann\nroot@ubuntu-server:~#\n```\n\n```shell\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS                   PORTS     NAMES\n550565930a6a   nginx         \"/docker-entrypoint.…\"   16 seconds ago   Up 15 seconds            80/tcp    nginx_test1\n2d987d559739   hello-world   \"/hello\"                 5 hours ago      Exited (0) 5 hours ago             loving_lehmann\nroot@ubuntu-server:~# docker run -it --name=nginx_test_bash nginx:1.24.0 bash\nroot@9dd09b818936:/# ll\nbash: ll: command not found\nroot@9dd09b818936:/# ls\nbin   dev\t\t   docker-entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  var\nboot  docker-entrypoint.d  etc\t\t\t lib   media  opt  root  sbin  sys  usr\nroot@9dd09b818936:/# ls -l\ntotal 72\ndrwxr-xr-x   2 root root 4096 Jan 10 00:00 bin\ndrwxr-xr-x   2 root root 4096 Sep 29 20:00 boot\ndrwxr-xr-x   5 root root  360 Jan 23 18:22 dev\ndrwxr-xr-x   1 root root 4096 Jan 12 00:22 docker-entrypoint.d\n-rwxr-xr-x   1 root root 1616 Jan 12 00:21 docker-entrypoint.sh\ndrwxr-xr-x   1 root root 4096 Jan 23 18:22 etc\ndrwxr-xr-x   2 root root 4096 Sep 29 20:00 home\ndrwxr-xr-x   1 root root 4096 Jan 10 00:00 lib\ndrwxr-xr-x   2 root root 4096 Jan 10 00:00 lib64\ndrwxr-xr-x   2 root root 4096 Jan 10 00:00 media\ndrwxr-xr-x   2 root root 4096 Jan 10 00:00 mnt\ndrwxr-xr-x   2 root root 4096 Jan 10 00:00 opt\ndr-xr-xr-x 291 root root    0 Jan 23 18:22 proc\ndrwx------   2 root root 4096 Jan 10 00:00 root\ndrwxr-xr-x   3 root root 4096 Jan 10 00:00 run\ndrwxr-xr-x   2 root root 4096 Jan 10 00:00 sbin\ndrwxr-xr-x   2 root root 4096 Jan 10 00:00 srv\ndr-xr-xr-x  13 root root    0 Jan 23 18:22 sys\ndrwxrwxrwt   2 root root 4096 Jan 10 00:00 tmp\ndrwxr-xr-x   1 root root 4096 Jan 10 00:00 usr\ndrwxr-xr-x   1 root root 4096 Jan 10 00:00 var\nroot@9dd09b818936:/# docker ps -a\nbash: docker: command not found\nroot@9dd09b818936:/# exit\nexit\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS                       PORTS     NAMES\n9dd09b818936   nginx:1.24.0   \"/docker-entrypoint.…\"   About a minute ago   Exited (127) 7 seconds ago             nginx_test_bash\n550565930a6a   nginx          \"/docker-entrypoint.…\"   3 minutes ago        Up 3 minutes                 80/tcp    nginx_test1\n2d987d559739   hello-world    \"/hello\"                 5 hours ago          Exited (0) 5 hours ago                 loving_lehmann\nroot@ubuntu-server:~#\n```\n\n## 启动映射端口的容器\n\n如果想要实现通过主机 ip 对 docker 的服务进行访问 需要执行端口映射\n\n- `docker run -p [主机端口]:[容器端口] [镜像名称]<:[版本号]>`\n\n```shell\nroot@ubuntu-server:~# docker run -p 8089:80 nginx\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\n/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\n/docker-entrypoint.sh: Configuration complete; ready for start up\n2024/01/23 18:38:34 [notice] 1#1: using the \"epoll\" event method\n2024/01/23 18:38:34 [notice] 1#1: nginx/1.25.3\n2024/01/23 18:38:34 [notice] 1#1: built by gcc 12.2.0 (Debian 12.2.0-14)\n2024/01/23 18:38:34 [notice] 1#1: OS: Linux 5.4.0-163-generic\n2024/01/23 18:38:34 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576\n2024/01/23 18:38:34 [notice] 1#1: start worker processes\n2024/01/23 18:38:34 [notice] 1#1: start worker process 29\n2024/01/23 18:38:34 [notice] 1#1: start worker process 30\n```\n\n然后获取主机的 ip 地址\n\n```shell\nroot@ubuntu-server:~# ifconfig\ndocker0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 172.17.0.1  netmask 255.255.255.0  broadcast 172.17.0.255\n        inet6 fe80::42:a1ff:fe46:815b  prefixlen 64  scopeid 0x20<link>\n        ether 02:42:a1:46:81:5b  txqueuelen 0  (Ethernet)\n        RX packets 28  bytes 4708 (4.7 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 86  bytes 7509 (7.5 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nens33: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.7.128  netmask 255.255.255.0  broadcast 192.168.7.255\n        inet6 fe80::20c:29ff:fe88:f308  prefixlen 64  scopeid 0x20<link>\n        ether 00:0c:29:88:f3:08  txqueuelen 1000  (Ethernet)\n        RX packets 543109  bytes 789811793 (789.8 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 45005  bytes 3778306 (3.7 MB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n```\n\n之后在浏览器通过访问主机 ip 地址+port 端口号 (192.168.7.128:8089)，访问刚才启动的 nginx 服务\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706035310119-2333c619-de03-4fa4-8e19-0d7ec7603028.png)\n\n## 启动容器时配置环境变量\n\n- `docker run mysql`启动一个 MySQL 容器\n\n```shell\nroot@ubuntu-server:~# docker run mysql\nUnable to find image 'mysql:latest' locally\nlatest: Pulling from library/mysql\n558b7d69a2e5: Pull complete\n2cb5a921059e: Pull complete\nb85878fb9bb2: Pull complete\nd16f3fd26a82: Pull complete\nafd51b5329cb: Pull complete\n374d2f7f3267: Pull complete\n4ea1bb2c9574: Pull complete\n1c9054053605: Pull complete\nd79cd2da03be: Pull complete\ne3a1aa788d17: Pull complete\nDigest: sha256:d7c20c5ba268c558f4fac62977f8c7125bde0630ff8946b08dde44135ef40df3\nStatus: Downloaded newer image for mysql:latest\n2024-01-23 18:45:20+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\n2024-01-23 18:45:21+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\n2024-01-23 18:45:21+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\n2024-01-23 18:45:21+00:00 [ERROR] [Entrypoint]: Database is uninitialized and password option is not specified\n    You need to specify one of the following as an environment variable:\n    - MYSQL_ROOT_PASSWORD\n    - MYSQL_ALLOW_EMPTY_PASSWORD\n    - MYSQL_RANDOM_ROOT_PASSWORD\n```\n\n提示需要执行以下任意一个命令\n\n> You need to specify one of the following as an environment variable:\n\n- MYSQL_ROOT_PASSWORD\n- MYSQL_ALLOW_EMPTY_PASSWORD\n- MYSQL_RANDOM_ROOT_PASSWORD\n  >\n\n这时候如果可以实现在启动容器的时候 就配置上环境变量，就可以实现\n\n- `docker run -e [变量名]=[变量值] [镜像名称]`\n\n```shell\nroot@ubuntu-server:~# docker run -e MYSQL_ROOT_PASSWORD=123456 mysql\n2024-01-23 18:49:31+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\n2024-01-23 18:49:31+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\n2024-01-23 18:49:31+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\n2024-01-23 18:49:31+00:00 [Note] [Entrypoint]: Initializing database files\n2024-01-23T18:49:31.790608Z 0 [System] [MY-015017] [Server] MySQL Server Initialization - start.\n2024-01-23T18:49:31.792861Z 0 [System] [MY-013169] [Server] /usr/sbin/mysqld (mysqld 8.3.0) initializing of server in progress as process 78\n2024-01-23T18:49:31.801893Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.\n2024-01-23T18:49:33.124408Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.\n2024-01-23T18:49:34.643504Z 6 [Warning] [MY-010453] [Server] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.\n2024-01-23T18:49:37.095006Z 0 [System] [MY-015018] [Server] MySQL Server Initialization - end.\n2024-01-23 18:49:37+00:00 [Note] [Entrypoint]: Database files initialized\n2024-01-23 18:49:37+00:00 [Note] [Entrypoint]: Starting temporary server\n2024-01-23T18:49:37.178985Z 0 [System] [MY-015015] [Server] MySQL Server - start.\n2024-01-23T18:49:37.938518Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 120\n2024-01-23T18:49:37.984832Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.\n2024-01-23T18:49:38.618882Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.\n2024-01-23T18:49:39.139280Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.\n2024-01-23T18:49:39.139356Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.\n2024-01-23T18:49:39.142832Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location '/var/run/mysqld' in the path is accessible to all OS users. Consider choosing a different directory.\n2024-01-23T18:49:39.222585Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Socket: /var/run/mysqld/mysqlx.sock\n2024-01-23T18:49:39.236461Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: '8.3.0'  socket: '/var/run/mysqld/mysqld.sock'  port: 0  MySQL Community Server - GPL.\n2024-01-23 18:49:39+00:00 [Note] [Entrypoint]: Temporary server started.\n'/var/lib/mysql/mysql.sock' -> '/var/run/mysqld/mysqld.sock'\nWarning: Unable to load '/usr/share/zoneinfo/iso3166.tab' as time zone. Skipping it.\nWarning: Unable to load '/usr/share/zoneinfo/leap-seconds.list' as time zone. Skipping it.\nWarning: Unable to load '/usr/share/zoneinfo/leapseconds' as time zone. Skipping it.\nWarning: Unable to load '/usr/share/zoneinfo/tzdata.zi' as time zone. Skipping it.\nWarning: Unable to load '/usr/share/zoneinfo/zone.tab' as time zone. Skipping it.\nWarning: Unable to load '/usr/share/zoneinfo/zone1970.tab' as time zone. Skipping it.\n\n2024-01-23 18:49:43+00:00 [Note] [Entrypoint]: Stopping temporary server\n2024-01-23T18:49:43.608667Z 10 [System] [MY-013172] [Server] Received SHUTDOWN from user root. Shutting down mysqld (Version: 8.3.0).\n2024-01-23T18:49:44.452345Z 0 [System] [MY-010910] [Server] /usr/sbin/mysqld: Shutdown complete (mysqld 8.3.0)  MySQL Community Server - GPL.\n2024-01-23T18:49:44.452374Z 0 [System] [MY-015016] [Server] MySQL Server - end.\n2024-01-23 18:49:44+00:00 [Note] [Entrypoint]: Temporary server stopped\n\n2024-01-23 18:49:44+00:00 [Note] [Entrypoint]: MySQL init process done. Ready for start up.\n\n2024-01-23T18:49:44.647019Z 0 [System] [MY-015015] [Server] MySQL Server - start.\n2024-01-23T18:49:44.932472Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 1\n2024-01-23T18:49:44.939342Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.\n2024-01-23T18:49:45.096752Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.\n2024-01-23T18:49:45.319462Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.\n2024-01-23T18:49:45.319508Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.\n2024-01-23T18:49:45.321697Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location '/var/run/mysqld' in the path is accessible to all OS users. Consider choosing a different directory.\n2024-01-23T18:49:45.347896Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock\n2024-01-23T18:49:45.348529Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: '8.3.0'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server - GPL.\n```\n\n服务启动之后可以尝试连接一下\n\n```shell\nroot@ubuntu-server:~# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                 NAMES\n2edfbe0997f3   mysql     \"docker-entrypoint.s…\"   2 minutes ago   Up 2 minutes   3306/tcp, 33060/tcp   gallant_cori\n\nroot@ubuntu-server:~# docker inspect 2edfbe0997f3 | grep \"IPAddress\"\n            \"SecondaryIPAddresses\": null,\n            \"IPAddress\": \"172.17.0.2\",\n                    \"IPAddress\": \"172.17.0.2\",\n\nroot@ubuntu-server:~# mysql -h 172.17.0.2 -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.3.0 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases\n    -> ;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.01 sec)\n\nmysql>\n\n```\n\n## 启动容器时配置路径映射\n\n当 docker 中的一个 mysql 服务容器删除之后，之前在这个容器中创建的数据库、表都会消失掉；\n\n那如果可以将主机的某个路径（磁盘卷）映射到容器中，使得数据库、表存储在主机中，就不会因为容器的删除而导致数据的丢失\n\n- `docker run -v [主机路径]:[容器路径] [镜像名称]`创建一个映射路径的容器\n\n先停掉之前的服务，然后创建 第一个 mysql 容器，然后在这个容器里面创建 一个数据库 之后删除掉这个容器\n\n```shell\nroot@ubuntu-server:~# docker run -e MYSQL_ROOT_PASSWORD=123456 -v /opt/mysql:/var/lib/mysql mysql\n2024-01-23 19:09:44+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\n2024-01-23 19:09:44+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\n2024-01-23 19:09:44+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\n2024-01-23 19:09:44+00:00 [Note] [Entrypoint]: Initializing database files\n2024-01-23T19:09:44.568209Z 0 [System] [MY-015017] [Server] MySQL Server Initialization - start.\n2024-01-23T19:09:44.570481Z 0 [System] [MY-013169] [Server] /usr/sbin/mysqld (mysqld 8.3.0) initializing of server in progress as process 80\n...\n\nroot@ubuntu-server:~# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS                 NAMES\n96a607ba155f   mysql     \"docker-entrypoint.s…\"   About a minute ago   Up About a minute   3306/tcp, 33060/tcp   zen_newton\nroot@ubuntu-server:~# mysql -h 172.17.0.2 -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.3.0 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> create database db_in_opt;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| db_in_opt          |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.01 sec)\n\nmysql> exit\nBye\nroot@ubuntu-server:~# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                 NAMES\n96a607ba155f   mysql     \"docker-entrypoint.s…\"   3 minutes ago   Up 3 minutes   3306/tcp, 33060/tcp   zen_newton\nroot@ubuntu-server:~# docker stop 96a607ba155f\nINFO[2024-01-23T19:12:59.513932769Z] ignoring event                                container=96a607ba155fb9f8095038725c3ecbc98aca97f8f2b85434790a50ce04e1d67e module=libcontainerd namespace=moby topic=/tasks/delete type=\"*events.TaskDelete\"\n96a607ba155f\nroot@ubuntu-server:~# docker rm 96a607ba155f\n96a607ba155f\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS                        PORTS     NAMES\n2edfbe0997f3   mysql          \"docker-entrypoint.s…\"   23 minutes ago   Exited (0) 5 minutes ago                gallant_cori\n23c63d5c74d7   mysql          \"docker-entrypoint.s…\"   27 minutes ago   Exited (1) 27 minutes ago               trusting_mccarthy\nf67b48039737   nginx          \"/docker-entrypoint.…\"   34 minutes ago   Exited (0) 24 minutes ago               friendly_babbage\n9dd09b818936   nginx:1.24.0   \"/docker-entrypoint.…\"   50 minutes ago   Exited (127) 49 minutes ago             nginx_test_bash\n550565930a6a   nginx          \"/docker-entrypoint.…\"   52 minutes ago   Exited (0) 36 minutes ago               nginx_test1\n2d987d559739   hello-world    \"/hello\"                 6 hours ago      Exited (0) 6 hours ago                  loving_lehmann\n```\n\n紧接着 再次执行 创建映射的 MySQL 容器 查看一下之前所创建的数据库是否存在\n\n```shell\nroot@ubuntu-server:~# docker run -e MYSQL_ROOT_PASSWORD=123456 -v /opt/mysql:/var/lib/mysql mysql\n2024-01-23 19:14:55+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\n2024-01-23 19:14:55+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\n2024-01-23 19:14:55+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\n'/var/lib/mysql/mysql.sock' -> '/var/run/mysqld/mysqld.sock'\n2024-01-23T19:14:55.912867Z 0 [System] [MY-015015] [Server] MySQL Server - start.\n...\n\nroot@ubuntu-server:~# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                 NAMES\n98c3aba2809e   mysql     \"docker-entrypoint.s…\"   44 seconds ago   Up 44 seconds   3306/tcp, 33060/tcp   peaceful_moser\nroot@ubuntu-server:~# mysql -h 172.17.0.2 -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.3.0 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| db_in_opt          |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.00 sec)\n```\n\n# 自定义 docker Image 镜像\n\n之前的操作都是在拉取官方的 image 运行的，若想实现一个自己的 image 需要如何操作\n\n## 查看已拉取镜像\n\n- `docker images`\n- `docker image ls`\n\n```shell\nroot@ubuntu-server:~# docker image ls\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nmysql         latest    56b21e040954   5 days ago     632MB\nnginx         latest    a8758716bb6a   3 months ago   187MB\nhello-world   latest    d2c94e258dcb   8 months ago   13.3kB\nnginx         1.24.0    f373f7a623e7   9 months ago   142MB\n\nroot@ubuntu-server:~# docker images\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nmysql         latest    56b21e040954   5 days ago     632MB\nnginx         latest    a8758716bb6a   3 months ago   187MB\nhello-world   latest    d2c94e258dcb   8 months ago   13.3kB\nnginx         1.24.0    f373f7a623e7   9 months ago   142MB\n```\n\n## 拉取镜像\n\n- `docker pull [镜像名称image_name]<:[版本号Tag]>` 不指定版本号默认拉取最新版本\n\n```shell\nroot@ubuntu-server:~# docker pull centos\nUsing default tag: latest\nlatest: Pulling from library/centos\na1d0c7532777: Pull complete\nDigest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177\nStatus: Downloaded newer image for centos:latest\ndocker.io/library/centos:latest\nroot@ubuntu-server:~# docker pull centos:7\n7: Pulling from library/centos\n2d473b07cdd5: Pull complete\nDigest: sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4\nStatus: Downloaded newer image for centos:7\ndocker.io/library/centos:7\nroot@ubuntu-server:~# docker images\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nmysql         latest    56b21e040954   5 days ago     632MB\nnginx         latest    a8758716bb6a   3 months ago   187MB\nhello-world   latest    d2c94e258dcb   8 months ago   13.3kB\nnginx         1.24.0    f373f7a623e7   9 months ago   142MB\ncentos        7         eeb6ee3f44bd   2 years ago    204MB\ncentos        latest    5d0da3dc9764   2 years ago    231MB\n```\n\n## 删除镜像\n\n- `docker image rm [镜像名称image_name]<:[版本号Tag]>` 不指定版本号默认删除最新版本\n- `docker rmi [镜像名称image_name]<:[版本号Tag]>`\n\n```shell\nroot@ubuntu-server:~# docker image rm centos\nUntagged: centos:latest\nUntagged: centos@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177\nDeleted: sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6\nDeleted: sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59\nroot@ubuntu-server:~# docker image rm centos:7\nUntagged: centos:7\nUntagged: centos@sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4\nDeleted: sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809ab675bb17ab3a16c517c9\nDeleted: sha256:174f5685490326fc0a1c0f5570b8663732189b327007e47ff13d2ca59673db02\nroot@ubuntu-server:~# docker images\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nmysql         latest    56b21e040954   5 days ago     632MB\nnginx         latest    a8758716bb6a   3 months ago   187MB\nhello-world   latest    d2c94e258dcb   8 months ago   13.3kB\nnginx         1.24.0    f373f7a623e7   9 months ago   142MB\n```\n\n## 编写 Dockerfile\n\n新建一个 Flask 项目并且创建 Dockerfile、app.py、requirements.txt\n\n```dockerfile\nFROM ubuntu:latest\nLABEL authors=\"zachary\"\n\nRUN apt update\nRUN apt-get install -y python3 python3-pip\n\nCOPY requirements.txt .\nRUN pip3 install -r requirements.txt\n\nCOPY app.py /opt/app.py\n\nENTRYPOINT FLASK_APP=/opt/app.py flask run --host=0.0.0.0\n```\n\n```plain\nflask\n```\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef hello_world():  # put application's code here\n    return 'Hello World!'\n\n\n@app.route('/index')\ndef index():\n    return 'Index Page!'\n\n\nif __name__ == '__main__':\n    app.run()\n```\n\n将上述代码打包放到 GitHub：[https://github.com/BlockZachary/flaskDockerSample](https://github.com/BlockZachary/flaskDockerSample)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706121719838-602b43bd-a754-4190-b607-cb196116331e.png)\n\n然后在服务器主机上面操作，先将代码克隆到主机上\n\n```shell\nroot@ubuntu-server:~/pythonProject# git clone https://github.com/BlockZachary/flaskDockerSample.git\n19:10:50.593675 git.c:439               trace: built-in: git clone https://github.com/BlockZachary/flaskDockerSample.git\nCloning into 'flaskDockerSample'...\n19:10:50.598505 run-command.c:663       trace: run_command: git-remote-https origin https://github.com/BlockZachary/flaskDockerSample.git\n* Couldn't find host github.com in the .netrc file; using defaults\n*   Trying 140.82.113.4:443...\n* TCP_NODELAY set\n* Connected to github.com (140.82.113.4) port 443 (#0)\n* found 411 certificates in /etc/ssl/certs\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* SSL connection using TLS1.3 / ECDHE_RSA_AES_128_GCM_SHA256\n* \t server certificate verification OK\n* \t server certificate status verification SKIPPED\n* \t common name: github.com (matched)\n* \t server certificate expiration date OK\n* \t server certificate activation date OK\n* \t certificate public key: EC/ECDSA\n* \t certificate version: #3\n* \t subject: C=US,ST=California,L=San Francisco,O=GitHub\\, Inc.,CN=github.com\n* \t start date: Tue, 14 Feb 2023 00:00:00 GMT\n* \t expire date: Thu, 14 Mar 2024 23:59:59 GMT\n* \t issuer: C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA384 2020 CA1\n* ALPN, server accepted to use h2\n* Using HTTP2, server supports multi-use\n* Connection state changed (HTTP/2 confirmed)\n* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0\n* Using Stream ID: 1 (easy handle 0x55691a2a4f80)\n> GET /BlockZachary/flaskDockerSample.git/info/refs?service=git-upload-pack HTTP/2\n...\n\nroot@ubuntu-server:~/pythonProject# ll\ntotal 12\ndrwxr-xr-x 3 root root 4096 Jan 24 19:10 ./\ndrwx------ 8 root root 4096 Jan 24 19:04 ../\ndrwxr-xr-x 3 root root 4096 Jan 24 19:10 flaskDockerSample/\n\nroot@ubuntu-server:~/pythonProject# cd flaskDockerSample\n\nroot@ubuntu-server:~/pythonProject/flaskDockerSample# ll\ntotal 24\ndrwxr-xr-x 3 root root 4096 Jan 24 19:10 ./\ndrwxr-xr-x 3 root root 4096 Jan 24 19:10 ../\n-rw-r--r-- 1 root root  245 Jan 24 19:10 app.py\n-rw-r--r-- 1 root root  253 Jan 24 19:10 Dockerfile\ndrwxr-xr-x 8 root root 4096 Jan 24 19:10 .git/\n-rw-r--r-- 1 root root    5 Jan 24 19:10 requirements.txt\n```\n\n## 构建自己的 Image\n\n- `docker build . -t [镜像名称]<:[版本号]>` 不填写版本号默认是一个 latest .指的是当前目录\n\n```shell\nroot@ubuntu-server:~/pythonProject/flaskDockerSample# docker build . -t myflasksample\n[+] Building 178.7s (11/11) FINISHED                                                                    docker:default\n => [internal] load build definition from Dockerfile                                                              0.0s\n => => transferring dockerfile: 258B                                                                              0.0s\n => [internal] load .dockerignore                                                                                 0.0s\n => => transferring context: 2B                                                                                   0.0s\n => [internal] load metadata for docker.io/library/ubuntu:latest                                                 33.7s\n => CACHED [1/6] FROM docker.io/library/ubuntu@sha256:e6173d4dc55e76b87c4af8db8821b1feae4146dd47341e4d431118c7dd  0.0s\n => [internal] load build context                                                                                 0.0s\n => => transferring context: 63B                                                                                  0.0s\n => [2/6] RUN apt update                                                                                         10.6s\n => [3/6] RUN apt-get install -y python3.6 python3-pip                                                           45.0s\n => [4/6] COPY requirements.txt .                                                                                 0.0s\n => [5/6] RUN pip3 install -r requirements.txt                                                                   86.7s\n => [6/6] COPY app.py /opt/app.py                                                                                 0.0s\n => exporting to image                                                                                            2.4s\n => => exporting layers                                                                                           2.4s\n => => writing image sha256:e4e6142e4b4159d2becbc57a7d298796fb7613727dafca902dec9f6f641cb39f                      0.0s\n => => naming to docker.io/library/myflasksample                                                                  0.0s\n\nroot@ubuntu-server:~/pythonProject/flaskDockerSample# docker images\nREPOSITORY      TAG       IMAGE ID       CREATED              SIZE\nmyflasksample   latest    e4e6142e4b41   About a minute ago   484MB\nmysql           latest    56b21e040954   6 days ago           632MB\nnginx           latest    a8758716bb6a   3 months ago         187MB\nhello-world     latest    d2c94e258dcb   8 months ago         13.3kB\nnginx           1.24.0    f373f7a623e7   9 months ago         142MB\nroot@ubuntu-server:~/pythonProject/flaskDockerSample#\n```\n\n## 启用自定义 Image 的容器\n\n因为这块用的例子是一个 flask 项目，端口号用的默认是 5000\n\n```shell\nroot@ubuntu-server:~/pythonProject/flaskDockerSample# docker run -p 8080:5000 myflasksample\n * Serving Flask app '/opt/app.py'\n * Debug mode: off\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on all addresses (0.0.0.0)\n * Running on http://127.0.0.1:5000\n * Running on http://172.17.0.2:5000\nPress CTRL+C to quit\n```\n\n```shell\nroot@ubuntu-server:~# docker ps\nCONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS          PORTS                                       NAMES\n2f5c78d92ee9   myflasksample   \"/bin/sh -c 'FLASK_A…\"   43 seconds ago   Up 41 seconds   0.0.0.0:8080->5000/tcp, :::8080->5000/tcp   busy_cori\nroot@ubuntu-server:~# docker inspect 2f5c78d92ee9 | grep \"IPAddress\"\n            \"SecondaryIPAddresses\": null,\n            \"IPAddress\": \"172.17.0.2\",\n                    \"IPAddress\": \"172.17.0.2\",\n\nroot@ubuntu-server:~# curl http://172.17.0.2:5000\nHello World!root@ubuntcurl http://172.17.0.2:5000/index\nIndex Page!root@ubuntu-server:~#\n```\n\n使用浏览器也可以正常访问\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706132499132-065f12de-d2c5-42f5-9aac-be888b35735e.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706132515824-b5465bcb-ba3f-43d7-8d27-a13e0c70d330.png)\n\n## 创建 docker 官方账号、登录\n\n首先在[https://hub.docker.com/](https://hub.docker.com/)，注册账号\n\n然后可以在主机中使用 `docker login`、`docker logout`进行登录、登出\n\n```shell\nroot@ubuntu-server:~# docker login\nLog in with your Docker ID or email address to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com/ to create one.\nYou can log in with your password or a Personal Access Token (PAT). Using a limited-scope PAT grants better security and is required for organizations using SSO. Learn more at https://docs.docker.com/go/access-tokens/\n\nUsername: zacharyblock\nPassword:\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\nroot@ubuntu-server:~#\n```\n\n然后再去官网创建一个仓库\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706133243473-d454141b-fe18-4764-a744-d98e1d9db0b1.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706133357108-7eb5dcf9-14c4-46c3-9552-3b9fc6960399.png)\n\n可以看到右侧有一段这样的命令：`docker push zacharyblock/myflasksample:tagname`,\n\n为了实现推送的，必须有一个名称为 `zacharyblock/myflasksample`的镜像，但是前一步操作，我们只构建了一个名称为`myflasksample`的镜像，因此我们还需要重新构建一次\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706133399584-243e093f-a831-4b30-baab-db58a7dc5d08.png)\n\n使用`docker build . -t zacharyblock/myflasksample`构建一下 image\n\n```shell\nroot@ubuntu-server:~/pythonProject/flaskDockerSample# docker build . -t zacharyblock/myflasksample\n[+] Building 34.8s (12/12) FINISHED                                                                                                docker:default\n => [internal] load build definition from Dockerfile                                                                                         0.0s\n => => transferring dockerfile: 258B                                                                                                         0.0s\n => [internal] load .dockerignore                                                                                                            0.0s\n => => transferring context: 2B                                                                                                              0.0s\n => [internal] load metadata for docker.io/library/ubuntu:latest                                                                            34.7s\n => [auth] library/ubuntu:pull token for registry-1.docker.io                                                                                0.0s\n => [1/6] FROM docker.io/library/ubuntu@sha256:e6173d4dc55e76b87c4af8db8821b1feae4146dd47341e4d431118c7dd060a74                              0.0s\n => [internal] load build context                                                                                                            0.0s\n => => transferring context: 63B                                                                                                             0.0s\n => CACHED [2/6] RUN apt update                                                                                                              0.0s\n => CACHED [3/6] RUN apt-get install -y python3.6 python3-pip                                                                                0.0s\n => CACHED [4/6] COPY requirements.txt .                                                                                                     0.0s\n => CACHED [5/6] RUN pip3 install -r requirements.txt                                                                                        0.0s\n => CACHED [6/6] COPY app.py /opt/app.py                                                                                                     0.0s\n => exporting to image                                                                                                                       0.0s\n => => exporting layers                                                                                                                      0.0s\n => => writing image sha256:e4e6142e4b4159d2becbc57a7d298796fb7613727dafca902dec9f6f641cb39f                                                 0.0s\n => => naming to docker.io/zacharyblock/myflasksample                                                                                        0.0s\n\nroot@ubuntu-server:~/pythonProject/flaskDockerSample# docker images\nREPOSITORY                   TAG       IMAGE ID       CREATED          SIZE\nmyflasksample                latest    e4e6142e4b41   30 minutes ago   484MB\nzacharyblock/myflasksample   latest    e4e6142e4b41   30 minutes ago   484MB\nmysql                        latest    56b21e040954   6 days ago       632MB\nnginx                        latest    a8758716bb6a   3 months ago     187MB\nhello-world                  latest    d2c94e258dcb   8 months ago     13.3kB\nnginx                        1.24.0    f373f7a623e7   9 months ago     142MB\nroot@ubuntu-server:~/pythonProject/flaskDockerSample#\n```\n\n## 推送镜像到远程仓库\n\n- `docker push [镜像名称]<:[版本号]>`\n\n```shell\nroot@ubuntu-server:~/pythonProject/flaskDockerSample# docker push zacharyblock/myflasksample\nUsing default tag: latest\nThe push refers to repository [docker.io/zacharyblock/myflasksample]\nfe70b6de3f96: Pushing [==================================================>]   2.56kB\ne30e40d2f01d: Pushing [==================================================>]  4.893MB\n79c28b0cc016: Pushed\nf9d63cb94619: Pushing [========>                                          ]  61.53MB/354.7MB\nf0fad7c9b1fd: Pushing [====================>                              ]  19.65MB/47.07MB\n8e87ff28f1b5: Waiting\n```\n\n推送好了之后，官网可以看到\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706134242798-626c6197-b1b8-43a0-b678-af559ec2a208.png)\n\n尝试一下拉取，先删除掉已经有的这个 image，然后再拉取\n\n```shell\nroot@ubuntu-server:~# docker images\nREPOSITORY                   TAG       IMAGE ID       CREATED          SIZE\nmyflasksample                latest    e4e6142e4b41   39 minutes ago   484MB\nzacharyblock/myflasksample   latest    e4e6142e4b41   39 minutes ago   484MB\nmysql                        latest    56b21e040954   6 days ago       632MB\nnginx                        latest    a8758716bb6a   3 months ago     187MB\nhello-world                  latest    d2c94e258dcb   8 months ago     13.3kB\nnginx                        1.24.0    f373f7a623e7   9 months ago     142MB\nroot@ubuntu-server:~# docker rmi zacharyblock/myflasksample\nUntagged: zacharyblock/myflasksample:latest\nUntagged: zacharyblock/myflasksample@sha256:ea37221e82fe285cd50ff202ae9c08d445a779e40cc3a9f8fbe897144ca2d304\nroot@ubuntu-server:~# docker images\nREPOSITORY      TAG       IMAGE ID       CREATED          SIZE\nmyflasksample   latest    e4e6142e4b41   39 minutes ago   484MB\nmysql           latest    56b21e040954   6 days ago       632MB\nnginx           latest    a8758716bb6a   3 months ago     187MB\nhello-world     latest    d2c94e258dcb   8 months ago     13.3kB\nnginx           1.24.0    f373f7a623e7   9 months ago     142MB\nroot@ubuntu-server:~# docker pull zacharyblock/myflasksample\nUsing default tag: latest\nlatest: Pulling from zacharyblock/myflasksample\nDigest: sha256:ea37221e82fe285cd50ff202ae9c08d445a779e40cc3a9f8fbe897144ca2d304\nStatus: Downloaded newer image for zacharyblock/myflasksample:latest\ndocker.io/zacharyblock/myflasksample:latest\nroot@ubuntu-server:~# docker images\nREPOSITORY                   TAG       IMAGE ID       CREATED          SIZE\nmyflasksample                latest    e4e6142e4b41   41 minutes ago   484MB\nzacharyblock/myflasksample   latest    e4e6142e4b41   41 minutes ago   484MB\nmysql                        latest    56b21e040954   6 days ago       632MB\nnginx                        latest    a8758716bb6a   3 months ago     187MB\nhello-world                  latest    d2c94e258dcb   8 months ago     13.3kB\nnginx                        1.24.0    f373f7a623e7   9 months ago     142MB\n```\n\n# Dockerfile 的 CMD 与 ENTRYPOINT\n\n## CMD\n\n为了可以使用命令或者参数在启动容器的时候启动一些我们需要的默认程序，可以使用 CMD\n\n- Dockerfile 中的 CMD 指令格式\n  - `CMD [shell命令]` 通过 sh 的形式\n  - `CMD [\"命令\",\"参数1\",\"参数2\",...]`\n- 如果 Dockerfile 中存在多条 CMD 最后一条生效\n- 可以通过在启动容器时，添加参数对 CMD 命令进行替换\n  - `docker run -it [镜像] [命令] [参数1] [参数2]`\n\n这块来一个例子\n\n仍旧是在 ubuntu 主机上面先创建一个项目目录，然后准备 Dockerfile 和 app.py\n\n```shell\nroot@ubuntu-server:~/pythonProject# mkdir cmdDockerSample\nroot@ubuntu-server:~/pythonProject# cd cmdDockerSample/\nroot@ubuntu-server:~/pythonProject/cmdDockerSample# pwd\n/root/pythonProject/cmdDockerSample\nroot@ubuntu-server:~/pythonProject/cmdDockerSample# nano Dockerfile\nroot@ubuntu-server:~/pythonProject/cmdDockerSample# cat Dockerfile\nFROM ubuntu\n\nRUN apt update\nRUN apt-get install -y python3\n\nCOPY app.py /opt/app.py\n\nWORKDIR /opt/\n\nCMD [\"python3\", \"app.py\", \"para1\", \"para2\"]\nroot@ubuntu-server:~/pythonProject/cmdDockerSample# nano app.py\nroot@ubuntu-server:~/pythonProject/cmdDockerSample# cat app.py\nimport sys\n\nprint(sys.argv)\n```\n\n然后对该项目进行镜像构建，构建一个容器后会打印出参数，也可以通过命令参数进行 CMD 替换\n\n```shell\nroot@ubuntu-server:~/pythonProject/cmdDockerSample# docker build . -t cmddockersample\n[+] Building 209.6s (10/10) FINISHED                                                                                                                         docker:default\n => [internal] load .dockerignore                                                                                                                                      0.0s\n => => transferring context: 2B                                                                                                                                        0.0s\n => [internal] load build definition from Dockerfile                                                                                                                   0.0s\n => => transferring dockerfile: 183B                                                                                                                                   0.0s\n => [internal] load metadata for docker.io/library/ubuntu:latest                                                                                                       0.0s\n => CACHED [1/5] FROM docker.io/library/ubuntu                                                                                                                         0.0s\n => [internal] load build context                                                                                                                                      0.0s\n => => transferring context: 27B                                                                                                                                       0.0s\n => [2/5] RUN apt update                                                                                                                                             198.6s\n => [3/5] RUN apt-get install -y python3                                                                                                                              10.6s\n => [4/5] COPY app.py /opt/app.py                                                                                                                                      0.1s\n => [5/5] WORKDIR /opt/                                                                                                                                                0.0s\n => exporting to image                                                                                                                                                 0.3s\n => => exporting layers                                                                                                                                                0.3s\n => => writing image sha256:153eeb8273c48d59c08f467e270a5f7518e02135fa32a758439409e0055b4f52                                                                           0.0s\n => => naming to docker.io/library/cmddockersample                                                                                                                     0.0s\n\nroot@ubuntu-server:~/pythonProject/cmdDockerSample# docker run -it cmddockersample\n['app.py', 'para1', 'para2']\n\nroot@ubuntu-server:~/pythonProject/cmdDockerSample# docker run -it cmddockersample sleep 5\nroot@ubuntu-server:~/pythonProject/cmdDockerSample#\n```\n\n## ENTRYPOINT\n\n用于指定启动容器时候默认运行的程序\n\n- Dockerfile 中的 ENTRYPOINT 指令格式\n  - `ENTRYPOINT [shell命令]` 通过 sh 的形式\n  - `ENTRYPOINT [\"命令\",\"参数1\",\"参数2\",...]`\n- 如果 Dockerfile 中只能定义一个 ENTRYPOINT\n- 在启动容器时，不可以对 ENTRYPOINT 命令进行替换\n- 可以用 CMD 给 ENTRYPOINT 指定参数\n\n来一个实例看看\n\n先创建一个 entrypointDockerSample 目录，然后还是创建 Dockerfile 和 app.py\n\n```shell\nroot@ubuntu-server:~/pythonProject# mkdir entrypointDockerSample\nroot@ubuntu-server:~/pythonProject# cd entrypointDockerSample/\n\nroot@ubuntu-server:~/pythonProject/entrypointDockerSample# nano Dockerfile\nroot@ubuntu-server:~/pythonProject/entrypointDockerSample# cat Dockerfile\nFROM ubuntu\n\nRUN apt update\nRUN apt-get install -y python3\n\nCOPY app.py /opt/app.py\n\nWORKDIR /opt/\n\nENTRYPOINT [\"python3\", \"app.py\", \"para1\", \"para2\"]\nroot@ubuntu-server:~/pythonProject/entrypointDockerSample# nano app.py\nroot@ubuntu-server:~/pythonProject/entrypointDockerSample# cat app.py\nimport sys\n\nprint(sys.argv)\nroot@ubuntu-server:~/pythonProject/entrypointDockerSample# docker build . -t entrypointdockersample\n[+] Building 0.1s (10/10) FINISHED                                                                                                                           docker:default\n => [internal] load build definition from Dockerfile                                                                                                                   0.0s\n => => transferring dockerfile: 190B                                                                                                                                   0.0s\n => [internal] load .dockerignore                                                                                                                                      0.0s\n => => transferring context: 2B                                                                                                                                        0.0s\n => [internal] load metadata for docker.io/library/ubuntu:latest                                                                                                       0.0s\n => [1/5] FROM docker.io/library/ubuntu                                                                                                                                0.0s\n => [internal] load build context                                                                                                                                      0.0s\n => => transferring context: 61B                                                                                                                                       0.0s\n => CACHED [2/5] RUN apt update                                                                                                                                        0.0s\n => CACHED [3/5] RUN apt-get install -y python3                                                                                                                        0.0s\n => CACHED [4/5] COPY app.py /opt/app.py                                                                                                                               0.0s\n => CACHED [5/5] WORKDIR /opt/                                                                                                                                         0.0s\n => exporting to image                                                                                                                                                 0.0s\n => => exporting layers                                                                                                                                                0.0s\n => => writing image sha256:d3e54cbe8477ec5f625fb675a14e5aa2ea3dc9b8be3b2b5efbd3d2a344c5be64                                                                           0.0s\n => => naming to docker.io/library/entrypointdockersample                                                                                                              0.0s\nroot@ubuntu-server:~/pythonProject/entrypointDockerSample# docker run -it entrypointdockersample\n['app.py', 'para1', 'para2']\nroot@ubuntu-server:~/pythonProject/entrypointDockerSample# docker run -it entrypointdockersample sleep 5\n['app.py', 'para1', 'para2', 'sleep', '5']\nroot@ubuntu-server:~/pythonProject/entrypointDockerSample#\n```\n\n通过上面的例子可以看出来，当使用了 entrypoint 的时候 在创建容器的时候命令行增加的参数并没有替换掉原先的参数 而是给原先的参数增加上了\n\n## CMD 结合 ENTRYPOINT\n\n通过上面两个例子，如果将 CMD 和 ENTRYPOINT 结合起来使用 可以实现对既定的命令保持不变 对某些参数进行替换的操作\n\n```shell\nroot@ubuntu-server:~/pythonProject# mkdir cmdEntrypointDockerSample\nroot@ubuntu-server:~/pythonProject# cd cmdEntrypointDockerSample/\nroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# nano Dockerfile\nroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# cat Dockerfile\nFROM ubuntu\n\nRUN apt update\nRUN apt-get install -y python3\n\nCOPY app.py /opt/app.py\n\nWORKDIR /opt/\n\nENTRYPOINT [\"python3\", \"app.py\"]\nCMD [\"para1\",\"para2\"]\n\nroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# nano app.py\nroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# cat app.py\nimport sys\n\nprint(sys.argv)\nroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# docker build . -t cmdEntrypointDockerSample\n[+] Building 0.0s (0/0)                                                                                                                                      docker:default\nERROR: invalid tag \"cmdEntrypointDockerSample\": repository name must be lowercase\nroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample#\nroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# docker build . -t cmdentrypointdockersample\n[+] Building 0.1s (10/10) FINISHED                                                                                                                           docker:default\n => [internal] load build definition from Dockerfile                                                                                                                   0.0s\n => => transferring dockerfile: 195B                                                                                                                                   0.0s\n => [internal] load .dockerignore                                                                                                                                      0.0s\n => => transferring context: 2B                                                                                                                                        0.0s\n => [internal] load metadata for docker.io/library/ubuntu:latest                                                                                                       0.0s\n => [1/5] FROM docker.io/library/ubuntu                                                                                                                                0.0s\n => [internal] load build context                                                                                                                                      0.0s\n => => transferring context: 61B                                                                                                                                       0.0s\n => CACHED [2/5] RUN apt update                                                                                                                                        0.0s\n => CACHED [3/5] RUN apt-get install -y python3                                                                                                                        0.0s\n => CACHED [4/5] COPY app.py /opt/app.py                                                                                                                               0.0s\n => CACHED [5/5] WORKDIR /opt/                                                                                                                                         0.0s\n => exporting to image                                                                                                                                                 0.0s\n => => exporting layers                                                                                                                                                0.0s\n => => writing image sha256:01ab92cd6837ea8381cf83e66a2214eb9de94a133b460584fe9a5bf4dc03433e                                                                           0.0s\n => => naming to docker.io/library/cmdentrypointdockersample                                                                                                           0.0s\n\nroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# docker run -it cmdentrypointdockersample\n['app.py', 'para1', 'para2']\nroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample# docker run -it cmdentrypointdockersample hello para3\n['app.py', 'hello', 'para3']\nroot@ubuntu-server:~/pythonProject/cmdEntrypointDockerSample#\n```\n\n# 多容器互联\n\n## 建立多容器互联网络\n\n- `docker network ls`查看当前所有网络\n- `docker network create [网络名称]` 创建一个新的网络\n- `docker network rm [网络名称]` 移除一个网络\n\n```shell\nroot@ubuntu-server:~# docker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\n0b6264c729e5   bridge    bridge    local\n3bef0fd15183   host      host      local\n270d5cbcbd9e   none      null      local\nroot@ubuntu-server:~# docker network create nw_test\n0a683526a3b9476ccba81290f2efd32f12bd04514c428ae6f838482533d663a5\nroot@ubuntu-server:~# docker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\n0b6264c729e5   bridge    bridge    local\n3bef0fd15183   host      host      local\n270d5cbcbd9e   none      null      local\n0a683526a3b9   nw_test   bridge    local\n```\n\n## 启动容器并加入互联网络\n\n- `docker run --network [要加入的网络名称] --network-alias [容器在网络中的别名] [镜像名称]`\n\n自己制作一个镜像\n\n```dockerfile\nFROM ubuntu\n\nRUN apt update\nRUN apt-get install -y iputils-ping\n\nCMD bash\n```\n\n```shell\nroot@ubuntu-server:~/dockerDIYImage/ubuntu_Ping# nano Dockerfile\nroot@ubuntu-server:~/dockerDIYImage/ubuntu_Ping# docker build . -t myos\n[+] Building 6.2s (7/7) FINISHED                                                                       docker:default\n => [internal] load .dockerignore                                                                                0.0s\n => => transferring context: 2B                                                                                  0.0s\n => [internal] load build definition from Dockerfile                                                             0.0s\n => => transferring dockerfile: 112B                                                                             0.0s\n => [internal] load metadata for docker.io/library/ubuntu:latest                                                 0.0s\n => [1/3] FROM docker.io/library/ubuntu                                                                          0.0s\n => CACHED [2/3] RUN apt update                                                                                  0.0s\n => [3/3] RUN apt-get install -y iputils-ping                                                                    6.1s\n => exporting to image                                                                                           0.1s\n => => exporting layers                                                                                          0.1s\n => => writing image sha256:eb06c6d74ffa1b4e55d02fd29677d262a031fb92985bc38a0e1eba69e784cb61                     0.0s\n => => naming to docker.io/library/myos                                                                          0.0s\nroot@ubuntu-server:~/dockerDIYImage/ubuntu_Ping#\n```\n\n首先在一个控制台创建一个容器并起别名\n\n```shell\nroot@ubuntu-server:~# docker run -it --rm --network nw_test --network-alias c1 myos\nroot@e1c90c8fc513:/#\n```\n\n然后在另一个控制台创建另一个容器\n\n```shell\nroot@ubuntu-server:~# docker run -it --rm --network nw_test --network-alias c2 myos\nroot@68be5a3af8a3:/#\n```\n\n然后分别在两个控制台中 ping 对方容器的别名\n\n```shell\nroot@ubuntu-server:~# docker run -it --rm --network nw_test --network-alias c1 myos\nroot@e1c90c8fc513:/# ping c2\nPING c2 (172.18.0.3) 56(84) bytes of data.\n64 bytes from c2.nw_test (172.18.0.3): icmp_seq=1 ttl=64 time=0.301 ms\n64 bytes from c2.nw_test (172.18.0.3): icmp_seq=2 ttl=64 time=0.101 ms\n64 bytes from c2.nw_test (172.18.0.3): icmp_seq=3 ttl=64 time=0.078 ms\n64 bytes from c2.nw_test (172.18.0.3): icmp_seq=4 ttl=64 time=0.098 ms\n64 bytes from c2.nw_test (172.18.0.3): icmp_seq=5 ttl=64 time=0.104 ms\n^C\n--- c2 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4007ms\nrtt min/avg/max/mdev = 0.078/0.136/0.301/0.082 ms\nroot@e1c90c8fc513:/#\n```\n\n```shell\nroot@ubuntu-server:~# docker run -it --rm --network nw_test --network-alias c2 myos\nroot@68be5a3af8a3:/# ping c1\nPING c1 (172.18.0.2) 56(84) bytes of data.\n64 bytes from c1.nw_test (172.18.0.2): icmp_seq=1 ttl=64 time=0.120 ms\n64 bytes from c1.nw_test (172.18.0.2): icmp_seq=2 ttl=64 time=0.102 ms\n64 bytes from c1.nw_test (172.18.0.2): icmp_seq=3 ttl=64 time=0.101 ms\n64 bytes from c1.nw_test (172.18.0.2): icmp_seq=4 ttl=64 time=0.101 ms\n64 bytes from c1.nw_test (172.18.0.2): icmp_seq=5 ttl=64 time=0.100 ms\n^C\n--- c1 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4070ms\nrtt min/avg/max/mdev = 0.100/0.104/0.120/0.007 ms\nroot@68be5a3af8a3:/#\n```\n\n### 创建一个 MySQL 容器并加入互联网络\n\n```shell\nroot@ubuntu-server:~# docker run -d --rm --network nw_test --network-alias mysql_server -v /opt/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=wordpressdb mysql\ne86fbcde931a1f8bf559980e6c015ff966426d185aeaab29e9b080042ed3ed5f\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS        PORTS                 NAMES\ne86fbcde931a   mysql     \"docker-entrypoint.s…\"   1 second ago   Up 1 second   3306/tcp, 33060/tcp   inspiring_roentgen\nroot@ubuntu-server:~#\n```\n\n### 创建一个 Wordpress 容器并加入互联网络\n\n```shell\nroot@ubuntu-server:~# docker run -d --rm -p 82:80 --network nw_test --network-alias wordpress_server -e WORDPRESS_DB_HOST=mysql_server -e WORDPRESS_DB_NAME=wordpressdb -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=123456 wordpress\ne742952bbaa9b3862850eb1afd97e0d4e5700c433025e5034f0ca466581011f2\n\nroot@ubuntu-server:~# docker ps -a\nCONTAINER ID   IMAGE       COMMAND                  CREATED              STATUS              PORTS                               NAMES\ne742952bbaa9   wordpress   \"docker-entrypoint.s…\"   About a minute ago   Up About a minute   0.0.0.0:82->80/tcp, :::82->80/tcp   kind_neumann\ne86fbcde931a   mysql       \"docker-entrypoint.s…\"   43 minutes ago       Up 43 minutes       3306/tcp, 33060/tcp                 inspiring_roentgen\nroot@ubuntu-server:~#\n```\n\n在浏览器输入主机 ip:82，可以进入 wordpress 页面\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706294843550-3883a64b-15a1-4b60-bafe-5267a559d62b.png)\n\n有这个问题 去解决一下，需要连接一下对应的 mysql 数据库创建一下这个库\n\n```shell\nroot@ubuntu-server:~# docker inspect 6b07fc530884 | grep \"IPAddress\"\n            \"SecondaryIPAddresses\": null,\n            \"IPAddress\": \"\",\n                    \"IPAddress\": \"172.18.0.2\",\n\nroot@ubuntu-server:~# mysql -h 172.18.0.2 -u root -p 123456\nEnter password:\nERROR 1049 (42000): Unknown database '123456'\nroot@ubuntu-server:~# mysql -h 172.18.0.2 -u root -p123456\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 81\nServer version: 8.3.0 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| db_in_opt          |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.03 sec)\n\nmysql> create database wordpressdb;\nQuery OK, 1 row affected (0.02 sec)\n\nmysql> exit;\nBye\nroot@ubuntu-server:~#\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706296763173-f9b11149-45c7-4eea-882b-db8d79429261.png)\n\n现在就可以啦，初步配置一下\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706296802789-27c558e7-aa3b-4295-8574-a6abca230fe8.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706296881539-64e2a848-dc59-4e7b-b609-a25956e25eeb.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706296912157-cb46da7d-583d-456d-a0fb-cc5b910b2cbe.png)\n\n用刚才的用户名和密码进行登录，就进入到后台\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706296946576-569ff0c2-4aa2-40e4-854b-124fb961fa76.png)\n\n比如我们修改一下外观\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706297072686-c126aeba-0467-4c4a-9738-117c49dd5c5c.png)\n\n这个时候用自己的服务器主机的 ip+82，可以访问到主页\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706297130840-3427c5bf-57fa-4a24-b823-e31ac9ab2052.png)\n\n可以对文章进行编辑\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706297227729-d97720ab-8084-4eb4-83d8-8c6ac590c742.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706297283369-47518c84-9ec4-45b9-a574-691e0286d759.png)\n\n然后可以查看到效果\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706297351367-01477c9e-918e-41aa-bdd1-2a8d2a959545.png)\n\n# Compose\n\n用于定义和运行多容器的工具，简化上一节中讲到的多容器互联复杂的命令输入环节\n\n- 通过 YAML 文件的格式定义多容器关系\n\n## 安装 docker compose\n\n- Mac 和 Windows 下的 docker 默认已经安装了 docker compose\n- Linux 下的 ubuntu 安装 docker compose\n  - `apt-get install docker-compose`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706352965049-66541969-972c-404d-8b14-e1c39d196365.png)\n\n```shell\nroot@ubuntu-server:~# docker-compose --version\ndocker-compose version 1.25.0, build unknown\n```\n\n## 定义 Docker Compose 多容器\n\n创建一个 docker-compose.yaml 文件\n\n```yaml\nversion: \"3.8\"\nservices:\n  wordpress_server:\n    image: wordpress\n    ports:\n      - \"82:80\"\n    links:\n      - mysql_server\n    environment:\n      WORDPRESS_DB_HOST: mysql_server\n      WORDPRESS_DB_NAME: wordpressdb\n      WORDPRESS_DB_USER: root\n      WORDPRESS_DB_PASSWORD: 123456\n\n  mysql_server:\n    image: mysql\n    volumes:\n      - /opt/mysql:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456\n      MYSQL_DATABASE: wordpressdb\n```\n\n```shell\nroot@ubuntu-server:~# ls\ndocker.cnf  dockerDIYImage  pythonProject  snap\nroot@ubuntu-server:~# mkdir dockerProject\nroot@ubuntu-server:~# cd dockerProject/\nroot@ubuntu-server:~/dockerProject# mkdir myWebSite\nroot@ubuntu-server:~/dockerProject# cd myWebSite/\n\nroot@ubuntu-server:~/dockerProject/myWebSite# nano docker-compose.yaml\nroot@ubuntu-server:~/dockerProject/myWebSite# cat docker-compose.yaml\nversion: '3.8'\nservices:\n  wordpress_server:\n    image: wordpress\n    ports:\n      - \"82:80\"\n    links:\n      - mysql_server\n    environment:\n      WORDPRESS_DB_HOST: mysql_server\n      WORDPRESS_DB_NAME: wordpressdb\n      WORDPRESS_DB_USER: root\n      WORDPRESS_DB_PASSWORD: 123456\n\n  mysql_server:\n    image: mysql\n    volumes:\n      - /opt/mysql:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456\n      MYSQL_DATABASE: wordpressdb\n```\n\n## 启动与停止 Docker Compose\n\n- `docker compose up` 启动\n- `docker compose down` 停止\n\n```shell\nroot@ubuntu-server:~/dockerProject/myWebSite# docker compose up\n[+] Running 2/0\n ✔ Container mywebsite-mysql_server-1      Created                                                                              0.0s\n ✔ Container mywebsite-wordpress_server-1  Created                                                                              0.0s\nAttaching to mywebsite-mysql_server-1, mywebsite-wordpress_server-1\nmywebsite-mysql_server-1      | 2024-01-27 13:00:05+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\nmywebsite-mysql_server-1      | 2024-01-27 13:00:05+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\nmywebsite-mysql_server-1      | 2024-01-27 13:00:05+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\nmywebsite-wordpress_server-1  | WordPress not found in /var/www/html - copying now...\nmywebsite-mysql_server-1      | '/var/lib/mysql/mysql.sock' -> '/var/run/mysqld/mysqld.sock'\nmywebsite-mysql_server-1      | 2024-01-27T13:00:06.091635Z 0 [System] [MY-015015] [Server] MySQL Server - start.\nmywebsite-mysql_server-1      | 2024-01-27T13:00:06.480419Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 1\nmywebsite-mysql_server-1      | 2024-01-27T13:00:06.491181Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.\nmywebsite-mysql_server-1      | 2024-01-27T13:00:07.542230Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.\nmywebsite-mysql_server-1      | 2024-01-27T13:00:08.337107Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.\nmywebsite-mysql_server-1      | 2024-01-27T13:00:08.338334Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.\nmywebsite-mysql_server-1      | 2024-01-27T13:00:08.342758Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location '/var/run/mysqld' in the path is accessible to all OS users. Consider choosing a different directory.\nmywebsite-mysql_server-1      | 2024-01-27T13:00:08.455139Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock\nmywebsite-mysql_server-1      | 2024-01-27T13:00:08.457193Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: '8.3.0'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server - GPL.\nmywebsite-wordpress_server-1  | Complete! WordPress has been successfully copied to /var/www/html\nmywebsite-wordpress_server-1  | No 'wp-config.php' found in /var/www/html, but 'WORDPRESS_...' variables supplied; copying 'wp-config-docker.php' (WORDPRESS_DB_HOST WORDPRESS_DB_NAME WORDPRESS_DB_PASSWORD WORDPRESS_DB_USER)\nmywebsite-wordpress_server-1  | AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.19.0.3. Set the 'ServerName' directive globally to suppress this message\nmywebsite-wordpress_server-1  | AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.19.0.3. Set the 'ServerName' directive globally to suppress this message\nmywebsite-wordpress_server-1  | [Sat Jan 27 13:00:10.346157 2024] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.57 (Debian) PHP/8.2.15 configured -- resuming normal operations\nmywebsite-wordpress_server-1  | [Sat Jan 27 13:00:10.347867 2024] [core:notice] [pid 1] AH00094: Command line: 'apache2 -D FOREGROUND'\n```\n\n启动之后可以直接使用浏览器访问服务器 ip+82，可以直接访问到上一节的服务，因为之前是映射了 mysql 数据到了服务器主机上面的，所以这次只要还是映射了，数据依然存在，当然如果删除掉了数据，就会重新创建\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706360564211-ea36369c-d206-4ae3-9583-ac20a5c872ca.png)\n\n```shell\nroot@ubuntu-server:~/dockerProject/myWebSite# docker compose down\n[+] Running 3/3\n ✔ Container mywebsite-wordpress_server-1  Removed                                                                              1.3s\n ✔ Container mywebsite-mysql_server-1      Removed                                                                              1.6s\n ✔ Network mywebsite_default               Removed                                                                              0.1s\nroot@ubuntu-server:~/dockerProject/myWebSite#\n```\n\n## 构建自己的镜像启动多容器\n\n```dockerfile\nFROM ubuntu\n\nRUN apt update\nRUN apt-get install -y python3 python3-pip\nRUN apt-get install -y pkg-config\nRUN apt-get install -y default-libmysqlclient-dev\n\nCOPY requirements.txt .\n\nRUN pip3 install -r requirements.txt\n\nCOPY app.py /opt/app.py\n\nWORKDIR /opt/\n\nENTRYPOINT [\"python3\",\"app.py\"]\n```\n\n```python\nimport sqlalchemy\nimport os\n\nDB_HOST = os.getenv(\"DB_HOST\")\nDB_USER = os.getenv(\"DB_USER\", \"root\")\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\nDB_PORT = os.getenv(\"DB_PORT\",\"3306\")\nDB_DATABASE = os.getenv(\"DB_DATABASE\",\"mydb\")\n\nengine = sqlalchemy.create_engine(f\"mysql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}/{DB_DATABASE}\")\nwith engine.connect() as conn:\n\tquery = sqlalchemy.text(\"SELECT @@version\")\n\tresult_set = conn.execute(query)\n\n\tprint(\"MySQL version:\")\n\tfor row in result_set:\n\t\tprint(row)\n\nengine.dispose()\n\n```\n\n```yaml\nversion: \"3.8\"\nservices:\n  dbmanager_server:\n    build: .\n    image: dbmanager\n    container_name: dbmanager_server\n    links:\n      - mysql_server\n    environment:\n      DB_HOST: mysql_server\n      DB_NAME: mydb\n      DB_USER: root\n      DB_PASSWORD: 123456\n    depends_on:\n      mysql_server:\n        condition: service_healthy\n\n  mysql_server:\n    image: mysql\n    container_name: mysql_server\n    volumes:\n      - /opt/mysql:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456\n      MYSQL_DATABASE: mydb\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      timeout: 20s\n      retries: 10\n```\n\n```plain\nmysqlclient==2.1.1\nSQLAlchemy==2.0.25\n```\n\n由于网络太慢了 修改一下 Dockerfile\n\n```dockerfile\nFROM ubuntu\n\nRUN apt update\nRUN apt-get install -y python3 python3-pip\nRUN apt-get install -y pkg-config\nRUN apt-get install -y default-libmysqlclient-dev\n\nRUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com mysqlclient==2.1.1\nRUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com SQLAlchemy==2.0.25\n\nCOPY app.py /opt/app.py\n\nWORKDIR /opt/\n\nENTRYPOINT [\"python3\",\"app.py\"]\n```\n\n但是这时候还是出了问题，定位到最后是因为没有初始化 mydb 这个数据库\n\n```shell\nroot@ubuntu-server:~/dockerProject/docker_dbmanager# docker compose up --build\n[+] Building 18.5s (14/14) FINISHED                                                                                   docker:default\n => [dbmanager_server internal] load build definition from Dockerfile                                                           0.0s\n => => transferring dockerfile: 492B                                                                                            0.0s\n => [dbmanager_server internal] load metadata for docker.io/library/ubuntu:latest                                               0.0s\n => [dbmanager_server internal] load .dockerignore                                                                              0.0s\n => => transferring context: 2B                                                                                                 0.0s\n => [dbmanager_server 1/9] FROM docker.io/library/ubuntu:latest                                                                 0.0s\n => [dbmanager_server internal] load build context                                                                              0.0s\n => => transferring context: 28B                                                                                                0.0s\n => CACHED [dbmanager_server 2/9] RUN apt update                                                                                0.0s\n => CACHED [dbmanager_server 3/9] RUN apt-get install -y python3 python3-pip                                                    0.0s\n => CACHED [dbmanager_server 4/9] RUN apt-get install -y pkg-config                                                             0.0s\n => CACHED [dbmanager_server 5/9] RUN apt-get install -y default-libmysqlclient-dev                                             0.0s\n => [dbmanager_server 6/9] RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com mysqlc  4.7s\n => [dbmanager_server 7/9] RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com SQLAlc  7.0s\n => [dbmanager_server 8/9] COPY app.py /opt/app.py                                                                              0.1s\n => [dbmanager_server 9/9] WORKDIR /opt/                                                                                        0.0s\n => [dbmanager_server] exporting to image                                                                                       6.6s\n => => exporting layers                                                                                                         6.6s\n => => writing image sha256:8cea6473ccddbca8135c6c55eab4151d8414a019820618b97c02d468d2487062                                    0.0s\n => => naming to docker.io/library/dbmanager                                                                                    0.0s\n[+] Running 3/3\n ✔ Network docker_dbmanager_default  Created                                                                                    0.1s\n ✔ Container mysql_server            Created                                                                                    0.1s\n ✔ Container dbmanager_server        Created                                                                                    0.1s\nAttaching to dbmanager_server, mysql_server\nmysql_server      | 2024-01-27 14:17:26+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\nmysql_server      | 2024-01-27 14:17:26+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\nmysql_server      | 2024-01-27 14:17:26+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\nmysql_server      | '/var/lib/mysql/mysql.sock' -> '/var/run/mysqld/mysqld.sock'\nmysql_server      | 2024-01-27T14:17:27.000913Z 0 [System] [MY-015015] [Server] MySQL Server - start.\nmysql_server      | 2024-01-27T14:17:29.465711Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 1\nmysql_server      | 2024-01-27T14:17:29.600266Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.\nmysql_server      | 2024-01-27T14:17:30.775812Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.\nmysql_server      | 2024-01-27T14:17:32.112855Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.\nmysql_server      | 2024-01-27T14:17:32.112944Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.\nmysql_server      | 2024-01-27T14:17:32.117128Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location '/var/run/mysqld' in the path is accessible to all OS users. Consider choosing a different directory.\nmysql_server      | 2024-01-27T14:17:32.180029Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock\nmysql_server      | 2024-01-27T14:17:32.180109Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: '8.3.0'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server - GPL.\ndbmanager_server  | Traceback (most recent call last):\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py\", line 145, in __init__\ndbmanager_server  |     self._dbapi_connection = engine.raw_connection()\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py\", line 3293, in raw_connection\ndbmanager_server  |     return self.pool.connect()\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 452, in connect\ndbmanager_server  |     return _ConnectionFairy._checkout(self)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 1269, in _checkout\ndbmanager_server  |     fairy = _ConnectionRecord.checkout(pool)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 716, in checkout\ndbmanager_server  |     rec = pool._do_get()\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/impl.py\", line 169, in _do_get\ndbmanager_server  |     with util.safe_reraise():\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/util/langhelpers.py\", line 146, in __exit__\ndbmanager_server  |     raise exc_value.with_traceback(exc_tb)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/impl.py\", line 167, in _do_get\ndbmanager_server  |     return self._create_connection()\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 393, in _create_connection\ndbmanager_server  |     return _ConnectionRecord(self)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 678, in __init__\ndbmanager_server  |     self.__connect()\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 902, in __connect\ndbmanager_server  |     with util.safe_reraise():\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/util/langhelpers.py\", line 146, in __exit__\ndbmanager_server  |     raise exc_value.with_traceback(exc_tb)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 898, in __connect\ndbmanager_server  |     self.dbapi_connection = connection = pool._invoke_creator(self)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/create.py\", line 645, in connect\ndbmanager_server  |     return dialect.connect(*cargs, **cparams)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/default.py\", line 616, in connect\ndbmanager_server  |     return self.loaded_dbapi.connect(*cargs, **cparams)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/MySQLdb/__init__.py\", line 123, in Connect\ndbmanager_server  |     return Connection(*args, **kwargs)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/MySQLdb/connections.py\", line 185, in __init__\ndbmanager_server  |     super().__init__(*args, **kwargs2)\ndbmanager_server  | MySQLdb.OperationalError: (1049, \"Unknown database 'mydb'\")\ndbmanager_server  |\ndbmanager_server  | The above exception was the direct cause of the following exception:\ndbmanager_server  |\ndbmanager_server  | Traceback (most recent call last):\ndbmanager_server  |   File \"/opt/app.py\", line 11, in <module>\ndbmanager_server  |     with engine.connect() as conn:\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py\", line 3269, in connect\ndbmanager_server  |     return self._connection_cls(self)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py\", line 147, in __init__\ndbmanager_server  |     Connection._handle_dbapi_exception_noconnection(\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py\", line 2431, in _handle_dbapi_exception_noconnection\ndbmanager_server  |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py\", line 145, in __init__\ndbmanager_server  |     self._dbapi_connection = engine.raw_connection()\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/base.py\", line 3293, in raw_connection\ndbmanager_server  |     return self.pool.connect()\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 452, in connect\ndbmanager_server  |     return _ConnectionFairy._checkout(self)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 1269, in _checkout\ndbmanager_server  |     fairy = _ConnectionRecord.checkout(pool)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 716, in checkout\ndbmanager_server  |     rec = pool._do_get()\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/impl.py\", line 169, in _do_get\ndbmanager_server  |     with util.safe_reraise():\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/util/langhelpers.py\", line 146, in __exit__\ndbmanager_server  |     raise exc_value.with_traceback(exc_tb)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/impl.py\", line 167, in _do_get\ndbmanager_server  |     return self._create_connection()\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 393, in _create_connection\ndbmanager_server  |     return _ConnectionRecord(self)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 678, in __init__\ndbmanager_server  |     self.__connect()\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 902, in __connect\ndbmanager_server  |     with util.safe_reraise():\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/util/langhelpers.py\", line 146, in __exit__\ndbmanager_server  |     raise exc_value.with_traceback(exc_tb)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/pool/base.py\", line 898, in __connect\ndbmanager_server  |     self.dbapi_connection = connection = pool._invoke_creator(self)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/create.py\", line 645, in connect\ndbmanager_server  |     return dialect.connect(*cargs, **cparams)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/sqlalchemy/engine/default.py\", line 616, in connect\ndbmanager_server  |     return self.loaded_dbapi.connect(*cargs, **cparams)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/MySQLdb/__init__.py\", line 123, in Connect\ndbmanager_server  |     return Connection(*args, **kwargs)\ndbmanager_server  |   File \"/usr/local/lib/python3.10/dist-packages/MySQLdb/connections.py\", line 185, in __init__\ndbmanager_server  |     super().__init__(*args, **kwargs2)\ndbmanager_server  | sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (1049, \"Unknown database 'mydb'\")\ndbmanager_server  | (Background on this error at: https://sqlalche.me/e/20/e3q8)\ndbmanager_server exited with code 1\n\n```\n\n我们不关闭这个，重新开一个终端\n\n```shell\nroot@ubuntu-server:~/dockerProject/docker_dbmanager# docker ps -a\nCONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS                     PORTS                 NAMES\n0d96a20ca121   dbmanager   \"python3 app.py\"         7 minutes ago   Exited (1) 6 minutes ago                         dbmanager_server\nda8ce1fc7a59   mysql       \"docker-entrypoint.s…\"   7 minutes ago   Up 7 minutes (healthy)     3306/tcp, 33060/tcp   mysql_server\nroot@ubuntu-server:~/dockerProject/docker_dbmanager# docker inspect da8ce1fc7a59 | grep \"IPAddress\"\n            \"SecondaryIPAddresses\": null,\n            \"IPAddress\": \"\",\n                    \"IPAddress\": \"172.20.0.2\",\nroot@ubuntu-server:~/dockerProject/docker_dbmanager# mysql -h 172.20.0.2 -u root -p123456\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 23\nServer version: 8.3.0 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| db_in_opt          |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n| wordpressdb        |\n+--------------------+\n6 rows in set (0.06 sec)\n\nmysql> create database mydb;\nQuery OK, 1 row affected (0.02 sec)\n\nmysql>\n```\n\n然后重新执行一次拉起操作\n\n```shell\nroot@ubuntu-server:~/dockerProject/docker_dbmanager# docker compose up --build\n[+] Building 0.1s (14/14) FINISHED                                                                                    docker:default\n => [dbmanager_server internal] load build definition from Dockerfile                                                           0.0s\n => => transferring dockerfile: 492B                                                                                            0.0s\n => [dbmanager_server internal] load metadata for docker.io/library/ubuntu:latest                                               0.0s\n => [dbmanager_server internal] load .dockerignore                                                                              0.0s\n => => transferring context: 2B                                                                                                 0.0s\n => [dbmanager_server 1/9] FROM docker.io/library/ubuntu:latest                                                                 0.0s\n => [dbmanager_server internal] load build context                                                                              0.0s\n => => transferring context: 28B                                                                                                0.0s\n => CACHED [dbmanager_server 2/9] RUN apt update                                                                                0.0s\n => CACHED [dbmanager_server 3/9] RUN apt-get install -y python3 python3-pip                                                    0.0s\n => CACHED [dbmanager_server 4/9] RUN apt-get install -y pkg-config                                                             0.0s\n => CACHED [dbmanager_server 5/9] RUN apt-get install -y default-libmysqlclient-dev                                             0.0s\n => CACHED [dbmanager_server 6/9] RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com  0.0s\n => CACHED [dbmanager_server 7/9] RUN pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com  0.0s\n => CACHED [dbmanager_server 8/9] COPY app.py /opt/app.py                                                                       0.0s\n => CACHED [dbmanager_server 9/9] WORKDIR /opt/                                                                                 0.0s\n => [dbmanager_server] exporting to image                                                                                       0.0s\n => => exporting layers                                                                                                         0.0s\n => => writing image sha256:8cea6473ccddbca8135c6c55eab4151d8414a019820618b97c02d468d2487062                                    0.0s\n => => naming to docker.io/library/dbmanager                                                                                    0.0s\n[+] Running 2/2\n ✔ Container mysql_server      Created                                                                                          0.1s\n ✔ Container dbmanager_server  Created                                                                                          0.1s\nAttaching to dbmanager_server, mysql_server\nmysql_server      | 2024-01-27 14:30:00+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\nmysql_server      | 2024-01-27 14:30:00+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\nmysql_server      | 2024-01-27 14:30:00+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.3.0-1.el8 started.\nmysql_server      | '/var/lib/mysql/mysql.sock' -> '/var/run/mysqld/mysqld.sock'\nmysql_server      | 2024-01-27T14:30:00.772229Z 0 [System] [MY-015015] [Server] MySQL Server - start.\nmysql_server      | 2024-01-27T14:30:01.134172Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.3.0) starting as process 1\nmysql_server      | 2024-01-27T14:30:01.143974Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.\nmysql_server      | 2024-01-27T14:30:01.392854Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.\nmysql_server      | 2024-01-27T14:30:01.675451Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.\nmysql_server      | 2024-01-27T14:30:01.676409Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.\nmysql_server      | 2024-01-27T14:30:01.679979Z 0 [Warning] [MY-011810] [Server] Insecure configuration for --pid-file: Location '/var/run/mysqld' in the path is accessible to all OS users. Consider choosing a different directory.\nmysql_server      | 2024-01-27T14:30:01.716925Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: '8.3.0'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server - GPL.\nmysql_server      | 2024-01-27T14:30:01.716968Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock\ndbmanager_server  | MySQL version:\ndbmanager_server  | ('8.3.0',)\ndbmanager_server exited with code 0\n\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1706365857717-d9367d1e-8dd1-42cf-bbc9-b652c89e13a2.png)\n\n最后可以停掉这个多容器\n\n```shell\nroot@ubuntu-server:~/dockerProject/docker_dbmanager# docker compose down\n[+] Running 3/3\n ✔ Container dbmanager_server        Removed                                                                                    0.0s\n ✔ Container mysql_server            Removed                                                                                    1.4s\n ✔ Network docker_dbmanager_default  Removed                                                                                    0.2s\nroot@ubuntu-server:~/dockerProject/docker_dbmanager# docker ps -a\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nroot@ubuntu-server:~/dockerProject/docker_dbmanager#\n```\n\n# Docker Image 相关命令速查\n\n- `docker search [镜像名称]` 查找镜像信息\n- `docker pull [镜像名称]` 拉取镜像\n- `docker image ls` `docker images` 查看镜像列表\n- `docker rmi [镜像名称/镜像ID]` 删除镜像\n- `docker save -o [输出文件名] [镜像名称/镜像ID]` 将镜像保存为文件，便于传输镜像\n- `docker save --output [输出文件名] [镜像名称/镜像ID]`\n- `docker save [镜像名称/镜像ID] > [输出文件名]`\n- `docker load -i [镜像文件]` 将文件加载为镜像 Image\n- `docker load --input [镜像文件]`\n- `docker load < [镜像文件]`\n- `docker build . -t [构建的镜像名称]` 自定义镜像 默认找当前目录下 Dockerfile\n- `docker build -f [Dockerfile文件名] -t [构建的镜像名称] [Dockerfile所在目录]`\n\n# Docker Container 相关命令速查\n\n- `docker run`\n  - `--pull [missing/never/always]`\n    - missing 每次运行时候如果没有镜像就拉去 如果有就不拉取 默认也就是 missing 模式\n    - never 每次运行的时候都不去拉取镜像\n    - always 每次运行的时候都去拉取一次镜像\n  - `-i` 以交互的方式运行\n  - `-t` 输出到控制台\n  - `-it` 经常这样用\n  - `-rm` 容器停止以后直接删除\n  - `-v [主机路径]:[容器内部路径]` 做目录映射的，MySQL 常用避免容器删除后数据清空了\n  - `-p [主机端口]:[容器端口]` 端口映射，通过主机的端口来访问容器端口的服务\n  - `-e(--env) [环境变量]` 配置环境变量，如 MySQL 的登录名、端口、密码等\n  - `--env-file [环境变量定义文件]` 配置环境变量定义文件\n  - `--network [加入的网络名称] --network-alias [容器在网络中的别名]` 网络与别名\n  - `--name [容器名称]`\n  - `[镜像名称]`\n  - `[命令]` 容器启动后的命令\n- `docker ps` 查看本地运行的容器\n- `docker ps -a` 查看本地所有的容器\n- `docker stop [容器ID]` 停止一个正在运行的容器\n- `docker start [容器ID]` 启动一个已经停止了的容器\n- `docker restart [容器ID]` 重启一个容器\n- `docker kill [容器ID]`\n- `docker rm [容器ID]` 删除容器\n- `docker attach [容器ID]` 重新在控制台显示容器输出的内容 有时候以-d 运行的容器 后续内容不会打印\n- `docker history [容器名称]` 查看执行该容器的历史命令\n- `docker exec -d [容器名称/容器ID] [要执行的命令]` 对某个容器执行一条命令，但看不见后续内容\n- `docker exec -it [容器名称/容器ID] [要执行的命令(常用bash进入交互)]`\n- `docker export -o [导出的容器文件名称] [容器ID]` 导出容器\n- `docker import [要导入的容器文件]` 导入容器\n- `docker cp [源文件] [目标文件]` 在主机与容器之间复制文件\n\n> 更新: 2024-02-01 02:30:01  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/oxlyrpyvo0ylgtio>\n","tags":["Docker"],"categories":["Docker"]},{"title":"Python - 单元测试","url":"/blog/4042161217/","content":"\n# 单元测试\n\n# 基础知识\n\n## 单元测试概念\n\n- 单元测试是一个自动化的测试\n  - 用于验证代码的正确性\n  - 在独立环境中快速执行\n\n## unittest 模块\n\n- 测试文件以`test_`开头\n- 测试文件中的类以`Test`开头\n- 类中的测试方法以`test_`开头\n- 测试类需要继承`unittest.TestCase`\n\n创建目录结构\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1705787473624-0819e28b-8373-43a0-8f8f-ae55f3c7d0b0.png)\n\n```python\nclass Calculator:\n    def add(self, *args):\n        result = 0\n        for arg in args:\n            result += arg\n        return result\n```\n\n```python\nimport unittest\nfrom myProject.basic_knowledge.calculator import Calculator\n\n\nclass TestCalculator(unittest.TestCase):\n    def test_add(self):\n        # Setup\n        cal = Calculator()\n        excepted_result = 10\n\n        # Action\n        actual_result = cal.add(5, 5)\n\n        # Assert\n        self.assertEqual(excepted_result, actual_result)\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1705788712426-bac6ce7f-b791-4001-ac8a-98062e8e34f1.png)\n\n## 批量测试\n\n- 安装`nose`模块和`coverage`模块\n- 运行方法\n  - 运行单个测试文件 `python3 -m unittest -v myTest.basic_knowledge.test_calculator`\n  - 运行所有测试文件 `nosetests -v myTest/*`\n  - 统计测试覆盖率 `nosetests --with-coverage --cover-erase -v myTest/*`\n\n# 断言 assert\n\n- `assertEqual()`\n- `assertTrue()`\n- `assertFalse()`\n- `assertRaises()` 支持上下文管理器\n\n```python\nclass Downloads:\n    def get_downloads(self, url: str):\n        if url and url == \"https://www.baidu.com\":\n            return True\n        elif url:\n            return False\n        else:\n            raise Exception(\"url is empty\")\n```\n\n```python\nimport unittest\nfrom myProject.assert_func.downloads import Downloads\n\n\nclass TestDownloads(unittest.TestCase):\n    def test_get_downloads_true(self):\n        # Setup\n        down = Downloads()\n        url = \"https://www.baidu.com\"\n        excepted_result = True\n\n        # Action\n        actual_result = down.get_downloads(url)\n\n        # Assert\n        self.assertEqual(excepted_result, actual_result)\n\n    def test_get_downloads_false(self):\n        # Setup\n        down = Downloads()\n        url = \"www.google.com\"\n        excepted_result = False\n\n        # Action\n        actual_result = down.get_downloads(url)\n\n        # Assert\n        self.assertEqual(excepted_result, actual_result)\n```\n\n```shell\n(venv) ➜  pythonUnitTest nosetests --with-coverage --cover-erase -v myTest/*\ntest_get_downloads_false (myTest.assert_func.test_downloads.TestDownloads) ... ok\ntest_get_downloads_true (myTest.assert_func.test_downloads.TestDownloads) ... ok\ntest_add (myTest.basic_knowledge.test_calculator.TestCalculator) ... ok\ntest_add2 (myTest.basic_knowledge.test_calculator.TestCalculator) ... ok\n\nName                                      Stmts   Miss  Cover\n-------------------------------------------------------------\nmyProject/__init__.py                         0      0   100%\nmyProject/assert_func/__init__.py             0      0   100%\nmyProject/assert_func/downloads.py            7      1    86%\nmyProject/basic_knowledge/__init__.py         0      0   100%\nmyProject/basic_knowledge/calculator.py       6      0   100%\nmyTest/__init__.py                            0      0   100%\nmyTest/assert_func/__init__.py                0      0   100%\nmyTest/basic_knowledge/__init__.py            0      0   100%\n-------------------------------------------------------------\nTOTAL                                        13      1    92%\n----------------------------------------------------------------------\nRan 4 tests in 0.002s\n\nOK\n```\n\n修改了 test_downloads.py 后\n\n```python\nimport unittest\nfrom myProject.assert_func.downloads import Downloads\n\n\nclass TestDownloads(unittest.TestCase):\n    def test_get_downloads_true(self):\n        # Setup\n        down = Downloads()\n        url = \"https://www.baidu.com\"\n        excepted_result = True\n\n        # Action\n        actual_result = down.get_downloads(url)\n\n        # Assert\n        self.assertEqual(excepted_result, actual_result)\n\n    def test_get_downloads_false(self):\n        # Setup\n        down = Downloads()\n        url = \"www.google.com\"\n\n        # Action\n        actual_result = down.get_downloads(url)\n\n        # Assert\n        self.assertFalse(actual_result)\n\n    def test_get_downloads_exception(self):\n        # Setup\n        down = Downloads()\n        url = \"\"\n\n        # Action and Assert\n        with self.assertRaises(Exception):\n            down.get_downloads(url)\n```\n\n```shell\n(venv) ➜  pythonUnitTest nosetests --with-coverage --cover-erase -v myTest/*\ntest_get_downloads_exception (myTest.assert_func.test_downloads.TestDownloads) ... ok\ntest_get_downloads_false (myTest.assert_func.test_downloads.TestDownloads) ... ok\ntest_get_downloads_true (myTest.assert_func.test_downloads.TestDownloads) ... ok\ntest_add (myTest.basic_knowledge.test_calculator.TestCalculator) ... ok\ntest_add2 (myTest.basic_knowledge.test_calculator.TestCalculator) ... ok\n\nName                                      Stmts   Miss  Cover\n-------------------------------------------------------------\nmyProject/__init__.py                         0      0   100%\nmyProject/assert_func/__init__.py             0      0   100%\nmyProject/assert_func/downloads.py            7      0   100%\nmyProject/basic_knowledge/__init__.py         0      0   100%\nmyProject/basic_knowledge/calculator.py       6      0   100%\nmyTest/__init__.py                            0      0   100%\nmyTest/assert_func/__init__.py                0      0   100%\nmyTest/basic_knowledge/__init__.py            0      0   100%\n-------------------------------------------------------------\nTOTAL                                        13      0   100%\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nOK\n```\n\n# Test Fixtures\n\n在执行测试方法之前或者之后的内容称为 Test Fixtures\n\n比如说需要给每个测试方法写一个数据库连接，断开 会很麻烦和造成较大开销\n\n## 模块级别的 Fixtures\n\n- `setUpModule()`\n- `tearDownModule()`\n\n```python\nclass BankAccount:\n\n    def __init__(self, balance: float):\n        self.balance = balance\n\n    @property\n    def balance(self):\n        return self.__balance\n\n    @balance.setter\n    def balance(self, value: float):\n        if value < 0:\n            raise ValueError(\"Balance cannot be negative\")\n        self.__balance = value\n\n    def deposit(self, amount: float):\n        if amount <= 0:\n            raise ValueError(\"Amount must be positive\")\n        self.balance += amount\n\n    def withdraw(self, amount: float):\n        if amount <= 0:\n            raise ValueError(\"Amount must be positive\")\n        if amount > self.balance:\n            raise ValueError(\"Insufficient funds\")\n        self.balance -= amount\n```\n\n```python\nimport unittest\nfrom myProject.fixtures.bank_account import BankAccount\n\n\ndef setUpModule():\n    print(\"calling setup module\")\n\n\ndef tearDownModule():\n    print(\"calling teardown module\")\n\n\nclass TestBankAccount(unittest.TestCase):\n    def test_deposit(self):\n        account = BankAccount(100)\n        account.deposit(50)\n        self.assertEqual(150, account.balance)\n\n    def test_withdraw(self):\n        account = BankAccount(100)\n        account.withdraw(50)\n        self.assertEqual(50, account.balance)\n```\n\n```shell\n(venv) ➜  pythonUnitTest python3 -m unittest -v myTest.fixtures.test_bank_account\ncalling setup module\ntest_deposit (myTest.fixtures.test_bank_account.TestBankAccount) ... ok\ntest_withdraw (myTest.fixtures.test_bank_account.TestBankAccount) ... ok\ncalling teardown module\n\n----------------------------------------------------------------------\nRan 2 tests in 0.000s\n\nOK\n```\n\n## 类级别的 Fixtures\n\n- `setUpClass(cls)`\n- `tearDownClass(cls)`\n\n```python\n@classmethod\ndef setUpClass(cls) -> None:\n    print(\"calling setup class\")\n\n@classmethod\ndef tearDownClass(cls) -> None:\n    print(\"calling teardown class\")\n```\n\n```shell\n(venv) ➜  pythonUnitTest python3 -m unittest -v myTest.fixtures.test_bank_account\ncalling setup module\ncalling setup class\ntest_deposit (myTest.fixtures.test_bank_account.TestBankAccount) ... ok\ntest_withdraw (myTest.fixtures.test_bank_account.TestBankAccount) ... ok\ncalling teardown class\ncalling teardown module\n\n----------------------------------------------------------------------\nRan 2 tests in 0.000s\n\nOK\n```\n\n## 方法级别的 Fixtures\n\n- `setUp()`\n- `tearDown()`\n\n```python\nimport unittest\nfrom myProject.fixtures.bank_account import BankAccount\n\n\ndef setUpModule():\n    print(\"calling setup module\")\n\n\ndef tearDownModule():\n    print(\"calling teardown module\")\n\n\nclass TestBankAccount(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls) -> None:\n        print(\"calling setup class\")\n\n    @classmethod\n    def tearDownClass(cls) -> None:\n        print(\"calling teardown class\")\n\n    def setUp(self) -> None:\n        self.account = BankAccount(100)\n        print(\"calling setup\")\n\n    def tearDown(self) -> None:\n        self.account = None\n        print(\"calling teardown\")\n\n    def test_deposit(self):\n        self.account.deposit(50)\n        self.assertEqual(150, self.account.balance)\n\n    def test_withdraw(self):\n        self.account.withdraw(50)\n        self.assertEqual(50, self.account.balance)\n```\n\n```shell\n(venv) ➜  pythonUnitTest python3 -m unittest -v myTest.fixtures.test_bank_account\ncalling setup module\ncalling setup class\ntest_deposit (myTest.fixtures.test_bank_account.TestBankAccount) ... calling setup\ncalling teardown\nok\ntest_withdraw (myTest.fixtures.test_bank_account.TestBankAccount) ... calling setup\ncalling teardown\nok\ncalling teardown class\ncalling teardown module\n\n----------------------------------------------------------------------\nRan 2 tests in 0.000s\n\nOK\n```\n\n# Mock\n\nmock 即模拟函数、方法、类的功能，在运行测试代码的时候，有哪些不是真的想要调用的代码块或方法，可以使用 mock 进行模拟调用\n\n`unittest.mock`模块提供了`Mock` 和`MagicMock`两个类\n\n- `Mock`用于模拟指定的`方法`或`属性`\n- `MagicMock`是 Mock 的子类，用于模拟`Magic方法`\n\n```python\nclass Student:\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n```\n\n```python\nfrom myProject.mock_test.Student import Student\n\n\ndef find_by_stu_id(stuid: int) -> Student:\n    pass\n\n\ndef save_stu(stu: Student):\n    pass\n\n\ndef s(stid: int, stuname: str):\n    stu = find_by_stu_id(stid)\n    if stu is not None:\n        stu.name = stuname\n        save_stu(stu)\n```\n\n现在要测试上面`alter_stu_name`方法中的代码逻辑，但不调用其他方法包括：`find_by_stu_id`、\n\n`save_stu`\n\n```python\nimport unittest\nfrom unittest.mock import Mock\n\nfrom myProject.mock_test import student_service\n\n\nclass TestStudentService(unittest.TestCase):\n    def test_alter_stu_name_with_student(self):\n        # Setup\n        student_service.find_by_stu_id = Mock()\n        student = Mock(id=1, name=\"Zachary\")\n        student_service.find_by_stu_id.return_value = student\n        student_service.save_stu = Mock()\n\n        # Action\n        student_service.alter_stu_name(1, \"Zach\")\n\n        # Assert\n        self.assertEqual(\"Zach\", student.name)\n        student_service.save_stu.assert_called()\n\n    def test_alter_stu_name_without_student(self):\n        # Setup\n        student_service.find_by_stu_id = Mock()\n        student_service.find_by_stu_id.return_value = None\n        student_service.save_stu = Mock()\n\n        # Action\n        student_service.alter_stu_name(1, \"Zach\")\n\n        # Assert\n        student_service.save_stu.assert_not_called()\n```\n\n# patch\n\n帮助我们使用 Mock 替换测试代码块中的某些方法、类的调用\n\n- patch 可以替换的目标\n  - 目标必须是可以 import 的\n  - 是在调用的地方替换，原先的定义不进行替换\n\n## patch 装饰器\n\n```python\nimport unittest\nfrom unittest.mock import patch, Mock\n\nfrom myProject.mock_test import student_service\n\n\nclass TestStudentService(unittest.TestCase):\n\n    @patch(\"myProject.mock_test.student_service.save_stu\")\n    @patch(\"myProject.mock_test.student_service.find_by_stu_id\")\n    def test_alter_stu_name_with_student_decorator(self, mock_find_by_stu_id, mock_save_stu):\n        # Setup\n        student = Mock(id=1, name=\"Zachary\")\n        mock_find_by_stu_id.return_value = student\n\n        # Action\n        student_service.alter_stu_name(1, \"Zach\")\n\n        # Assert\n        self.assertEqual(\"Zach\", student.name)\n        mock_save_stu.assert_called()\n```\n\n## 上下文管理器\n\n```python\nimport unittest\nfrom unittest.mock import patch, Mock\n\nfrom myProject.mock_test import student_service\n\n\nclass TestStudentService(unittest.TestCase):\n    @patch(\"myProject.mock_test.student_service.find_by_stu_id\")\n    def test_alter_stu_name_with_student_context_manager(self, mock_find_by_stu_id):\n        # Setup\n        student = Mock(id=1, name=\"Zachary\")\n        mock_find_by_stu_id.return_value = student\n\n        with patch(\"myProject.mock_test.student_service.save_stu\") as mock_save_stu:\n            # Action\n            student_service.alter_stu_name(1, \"Zach\")\n\n            # Assert\n            self.assertEqual(\"Zach\", student.name)\n            mock_save_stu.assert_called()\n```\n\n## 手动调用\n\n```python\nimport unittest\nfrom unittest.mock import patch, Mock\n\nfrom myProject.mock_test import student_service\n\n\nclass TestStudentService(unittest.TestCase):\n\n    @patch(\"myProject.mock_test.student_service.find_by_stu_id\")\n    def test_alter_stu_name_with_student_manual(self, mock_find_by_stu_id):\n        # Setup\n        student = Mock(id=1, name=\"Zachary\")\n        mock_find_by_stu_id.return_value = student\n\n        patcher = patch(\"myProject.mock_test.student_service.save_stu\")\n        patcher.start()\n        # Action\n        student_service.alter_stu_name(1, \"Zach\")\n\n        # Assert\n        self.assertEqual(\"Zach\", student.name)\n        patcher.stop()\n```\n\n# 测试实例\n\n```python\nimport os.path\nfrom urllib.request import Request, urlopen\n\n\nclass ProductService:\n    def download_img(self, url: str):\n        site_url = Request(url, headers={'User-Agent': 'Mozilla/5.0'})\n        with urlopen(site_url) as response:\n            image_date = response.read()\n\n        if not image_date:\n            raise Exception(\"Error: No image data from url: \" + url)\n\n        filename = os.path.basename(url)\n        with open(filename, 'wb') as f:\n            f.write(image_date)\n\n        return f\"Downloaded {filename}\"\n```\n\n```python\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nfrom myProject.test_example.product_service import ProductService\n\n\nclass TestProductService(unittest.TestCase):\n    def setUp(self) -> None:\n        self.service = ProductService()\n\n    def tearDown(self) -> None:\n        self.service = None\n\n    @patch('myProject.test_example.product_service.urlopen')\n    @patch('myProject.test_example.product_service.Request.__new__')\n    def test_download_img_with_exception(self, mock_request, mock_urlopen):\n        # Setup\n        url = \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\"\n        return_mock_urlopen = MagicMock()\n        response_mock = MagicMock()\n        mock_urlopen.return_value = return_mock_urlopen\n        return_mock_urlopen.__enter__.return_value = response_mock\n        response_mock.read.return_value = None\n\n        with self.assertRaises(Exception):\n            self.service.download_img(url)\n\n    @patch('builtins.open')\n    @patch('os.path.basename')\n    @patch('myProject.test_example.product_service.urlopen')\n    @patch('myProject.test_example.product_service.Request.__new__')\n    def test_download_img_with_success(self, mock_request, mock_urlopen, mock_basename, mock_open):\n        # Setup\n        url = \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\"\n        return_mock_urlopen = MagicMock()\n        response_mock = MagicMock()\n        mock_urlopen.return_value = return_mock_urlopen\n        return_mock_urlopen.__enter__.return_value = response_mock\n        response_mock.read.return_value = \"value\"\n        mock_basename.return_value = \"filename\"\n        excepted_result = f\"Downloaded {mock_basename.return_value}\"\n\n        # Action\n        result = self.service.download_img(url)\n\n        # Assert\n        self.assertEqual(excepted_result, result)\n```\n\n# 测试覆盖率\n\n统计的是在单元测试中有多少代码行被执行了\n\n覆盖率 = 执行的代码行/总代码行\n\n- 统计测试覆盖率 `python -m coverage run -m unittest`\n\n```shell\n(venv) ➜  pythonUnitTest python -m coverage run -m unittest\n.....calling setup module\ncalling setup class\ncalling setup\ncalling teardown\n.calling setup\ncalling teardown\n.calling teardown class\ncalling teardown module\n.......\n----------------------------------------------------------------------\nRan 14 tests in 0.009s\n\nOK\n```\n\n- 查看覆盖率报告 `python -m coverage report`\n\n```shell\n(venv) ➜  pythonUnitTest python -m coverage report\nName                                          Stmts   Miss  Cover\n-----------------------------------------------------------------\nmyProject/__init__.py                             0      0   100%\nmyProject/assert_func/__init__.py                 0      0   100%\nmyProject/assert_func/downloads.py                7      0   100%\nmyProject/basic_knowledge/__init__.py             0      0   100%\nmyProject/basic_knowledge/calculator.py           6      0   100%\nmyProject/fixtures/__init__.py                    0      0   100%\nmyProject/fixtures/bank_account.py               20      4    80%\nmyProject/mock_test/Student.py                    4      2    50%\nmyProject/mock_test/__init__.py                   0      0   100%\nmyProject/mock_test/student_service.py           10      2    80%\nmyProject/test_example/__init__.py                0      0   100%\nmyProject/test_example/product_service.py        13      0   100%\nmyTest/__init__.py                                0      0   100%\nmyTest/assert_func/__init__.py                    0      0   100%\nmyTest/assert_func/test_downloads.py             19      0   100%\nmyTest/basic_knowledge/__init__.py                0      0   100%\nmyTest/basic_knowledge/test_calculator.py        13      0   100%\nmyTest/fixtures/__init__.py                       0      0   100%\nmyTest/fixtures/test_bank_account.py             25      0   100%\nmyTest/mock_test/__init__.py                      0      0   100%\nmyTest/mock_test/test_student_service.py         18      0   100%\nmyTest/patch_test/__init__.py                     0      0   100%\nmyTest/patch_test/test_student_service.py        26      0   100%\nmyTest/test_example/__init__.py                   0      0   100%\nmyTest/test_example/test_product_service.py      32      0   100%\n-----------------------------------------------------------------\nTOTAL                                           193      8    96%\n```\n\n- 生成 web 格式的报告 `python -m coverage html`\n\n```python\n(venv) ➜  pythonUnitTest python -m coverage html\nWrote HTML report to htmlcov/index.html\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1705868542593-977ac619-bc91-4964-884e-0c623d4776bd.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1705868573094-438ca5f2-8167-46de-8167-95d634ce3e38.png)\n\n可以点击查看具体哪里没有测试到\n\n![](https://cdn.nlark.com/yuque/0/2024/png/38881094/1705868596803-762b5367-4a80-45e3-b113-da4ed517dc29.png)\n\n# PyTest\n\n基于 Python 的第三方测试框架\n\n## 安装\n\n`pip install pytest`\n\n## 运行\n\n- 在项目路径下使用 `pytest`命令\n  - 自动查找所有`test_*.py`或者`*_test.py`的测试文件\n  - 自动查找所有`test_`开头的文件，`Test`开头的类中`test_`开头的方法\n\n```shell\n(venv) ➜  pythonUnitTest pytest\n====================================================== test session starts =======================================================\nplatform darwin -- Python 3.7.7, pytest-7.4.4, pluggy-1.2.0\nrootdir: /Users/zachary/Documents/PythonCode/pythonUnitTest\ncollected 14 items\n\nmyTest/assert_func/test_downloads.py ...                                                                                   [ 21%]\nmyTest/basic_knowledge/test_calculator.py ..                                                                               [ 35%]\nmyTest/fixtures/test_bank_account.py ..                                                                                    [ 50%]\nmyTest/mock_test/test_student_service.py ..                                                                                [ 64%]\nmyTest/patch_test/test_student_service.py ...                                                                              [ 85%]\nmyTest/test_example/test_product_service.py ..                                                                             [100%]\n\n======================================================= 14 passed in 0.14s =======================================================\n```\n\n- 使用 `pytest -v`获得更多详细信息\n\n```shell\n(venv) ➜  pythonUnitTest pytest -v\n====================================================== test session starts =======================================================\nplatform darwin -- Python 3.7.7, pytest-7.4.4, pluggy-1.2.0 -- /Users/zachary/Documents/PythonCode/pythonUnitTest/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/zachary/Documents/PythonCode/pythonUnitTest\ncollected 14 items\n\nmyTest/assert_func/test_downloads.py::TestDownloads::test_get_downloads_exception PASSED                                   [  7%]\nmyTest/assert_func/test_downloads.py::TestDownloads::test_get_downloads_false PASSED                                       [ 14%]\nmyTest/assert_func/test_downloads.py::TestDownloads::test_get_downloads_true PASSED                                        [ 21%]\nmyTest/basic_knowledge/test_calculator.py::TestCalculator::test_add PASSED                                                 [ 28%]\nmyTest/basic_knowledge/test_calculator.py::TestCalculator::test_add2 PASSED                                                [ 35%]\nmyTest/fixtures/test_bank_account.py::TestBankAccount::test_deposit PASSED                                                 [ 42%]\nmyTest/fixtures/test_bank_account.py::TestBankAccount::test_withdraw PASSED                                                [ 50%]\nmyTest/mock_test/test_student_service.py::TestStudentService::test_alter_stu_name_with_student PASSED                      [ 57%]\nmyTest/mock_test/test_student_service.py::TestStudentService::test_alter_stu_name_without_student PASSED                   [ 64%]\nmyTest/patch_test/test_student_service.py::TestStudentService::test_alter_stu_name_with_student_context_manager PASSED     [ 71%]\nmyTest/patch_test/test_student_service.py::TestStudentService::test_alter_stu_name_with_student_decorator PASSED           [ 78%]\nmyTest/patch_test/test_student_service.py::TestStudentService::test_alter_stu_name_with_student_manual PASSED              [ 85%]\nmyTest/test_example/test_product_service.py::TestProductService::test_download_img_with_exception PASSED                   [ 92%]\nmyTest/test_example/test_product_service.py::TestProductService::test_download_img_with_success PASSED                     [100%]\n\n======================================================= 14 passed in 0.14s =======================================================\n```\n\n- 使用 `pytest 指定文件路径` 对单独某个文件进行测试\n\n```shell\n(venv) ➜  pythonUnitTest pytest -v myTest/test_example/test_product_service.py\n====================================================== test session starts =======================================================\nplatform darwin -- Python 3.7.7, pytest-7.4.4, pluggy-1.2.0 -- /Users/zachary/Documents/PythonCode/pythonUnitTest/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/zachary/Documents/PythonCode/pythonUnitTest\ncollected 2 items\n\nmyTest/test_example/test_product_service.py::TestProductService::test_download_img_with_exception PASSED                   [ 50%]\nmyTest/test_example/test_product_service.py::TestProductService::test_download_img_with_success PASSED                     [100%]\n\n======================================================= 2 passed in 0.05s ========================================================\n```\n\n- 使用 `pytest -s`输出调试信息，比如 print 等的打印信息\n- 使用 `pytest -x`在遇到错误测试的时候 会立即停止\n- 跳过指定测试内容\n  - `@pytest.mark.skip`\n  - `@pytest.mark.skipif`\n\n```python\nimport sys\nimport unittest\n\nimport pytest\n\nfrom myProject.mock_test.Student import Student\n\n\ndef skip_condition_macos():\n    return sys.platform.casefold() == 'darwin'.casefold()\n\n\ndef skip_condition_linux():\n    return sys.platform.casefold() == 'linux'.casefold()\n\n\nclass TestStudent(unittest.TestCase):\n    def setUp(self) -> None:\n        self.student = Student(1, \"Zach\")\n\n    def tearDown(self) -> None:\n        self.student = None\n\n    @pytest.mark.skip(reason=\"testing case expired\")\n    def test_alter_stu_name(self):\n        self.student.name = \"Zachary\"\n        self.assertEqual(\"Zachary\", self.student.name)\n\n    @pytest.mark.skipif(condition=skip_condition_macos(), reason=\"currently platform not supported\")\n    def test_alter_stu_id(self):\n        self.student.id = 2\n        self.assertEqual(2, self.student.id)\n```\n\n```python\n(venv) ➜  pythonUnitTest pytest -v myTest/pytest/test_student.py\n====================================================== test session starts =======================================================\nplatform darwin -- Python 3.7.7, pytest-7.4.4, pluggy-1.2.0 -- /Users/zachary/Documents/PythonCode/pythonUnitTest/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/zachary/Documents/PythonCode/pythonUnitTest\ncollected 2 items\n\nmyTest/pytest/test_student.py::TestStudent::test_alter_stu_id SKIPPED (currently platform not supported)                   [ 50%]\nmyTest/pytest/test_student.py::TestStudent::test_alter_stu_name SKIPPED (testing case expired)                             [100%]\n\n======================================================= 2 skipped in 0.01s =======================================================\n```\n\n## Fixtures\n\n- 通过`@pytest.fixture`定义\n\n```python\nclass Student:\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n\n    def alter_name(self, name: str) -> bool:\n        if 3 < len(name) < 8:\n            self.name = name\n            return True\n        return False\n\n    def is_valid_name(self) -> bool:\n        if self.name:\n            return 3 < len(self.name) < 8\n        return False\n```\n\n```python\nimport pytest\n\nfrom myProject.pytest_fixture.Student import Student\n\n\nclass TestStudent:\n    @pytest.fixture\n    def valid_student(self):\n        student = Student(1, \"Zach\")\n        # 使用yield的好处是：yield前后分别可以执行不同内容，在测试结果前后执行\n        yield student\n\n    def test_alter_stu_name_false(self, valid_student):\n        # Setup\n        new_name = \"ZacharyBlock\"\n        expected_result = False\n\n        # Action\n        actual_result = valid_student.alter_name(new_name)\n\n        # Assert\n        assert actual_result == expected_result\n```\n\n- 使用 `pytest.fixture`实现一个`fixture`引用另一个`fixture`\n\n```python\nimport pytest\n\nfrom myProject.pytest_fixture.Student import Student\n\n\nclass TestStudent:\n    @pytest.fixture\n    def valid_student(self):\n        student = Student(1, \"Zach\")\n        yield student\n\n    @pytest.fixture\n    def invalid_student(self, valid_student):\n        valid_student.name = \"ZacharyBlock\"\n        yield valid_student\n\n    def test_valid_name_false(self, invalid_student):\n        # Setup\n        expected_result = False\n\n        # Action\n        actual_result = invalid_student.is_valid_name()\n\n        # Assert\n        assert actual_result == expected_result\n```\n\n- 使用 `pytest.fixture`实现引用多个`fixture`\n\n```python\nimport pytest\n\nfrom myProject.pytest_fixture.Student import Student\n\n\nclass TestStudent:\n    @pytest.fixture\n    def valid_student(self):\n        student = Student(1, \"Zach\")\n        yield student\n\n    @pytest.fixture\n    def invalid_student(self):\n        student = Student(1, \"ZacharyBlock\")\n        yield student\n\n    def test_valid_student(self, valid_student, invalid_student):\n        # Setup\n        expected_result_valid = True\n        expected_result_invalid = False\n\n        # Action\n        actual_result_valid = valid_student.is_valid_name()\n        actual_result_invalid = invalid_student.is_valid_name()\n\n        # Assert\n        assert expected_result_valid == actual_result_valid \\\n               and expected_result_invalid == actual_result_invalid\n```\n\n## conftest.py\n\n`conftest.py`使得复用`pytest.fixture`成为可能\n\n首先在 myProj 文件夹下创建一个 pytest_conftest/student.py\n\n```python\nclass Student:\n    def __init__(self, id, name, gender):\n        self.id = id\n        self.name = name\n        self.gender = gender\n\n    def vaild_gender(self) -> bool:\n        return self.gender and self.gender.casefold() in [\"male\", \"female\"]\n```\n\n接着在，myTest 下创建一个 pytest_conftest/male_student_fixture.py\n\n```python\nimport pytest\n\nfrom myProject.pytest_conftest.student import Student\n\n\n@pytest.fixture\ndef male_student_fixture():\n    student = Student(1, \"Zachary\", \"male\")\n    yield student\n```\n\n为了使得该`male_student_fixture`可以得到多个模块的复用\n\n需要在`myTest`文件目录下创建一个`conftest.py`文件\n\n```python\nfrom myTest.pytest_conftest.male_student_fixture import male_student_fixture\n```\n\n在这之后 任何需要使用`male_student_fixture`的模块，可以直接使用\n\n```python\nclass TestStudentGender:\n    def test_valid_gender_true(self, male_student_fixture):\n        # Setup\n        expected_result = True\n\n        # Action\n        actual_result = male_student_fixture.vaild_gender()\n\n        # Assert\n        assert expected_result == actual_result\n```\n\n**需要使用命令行运行 不知道为什么 pycharm 直接运行会有问题**\n\n```python\n(venv) ➜  pythonUnitTest pytest -v myTest/pytest_conftest/test_student_gender.py\n====================================================== test session starts =======================================================\nplatform darwin -- Python 3.7.7, pytest-7.4.4, pluggy-1.2.0 -- /Users/zachary/Documents/PythonCode/pythonUnitTest/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/zachary/Documents/PythonCode/pythonUnitTest\ncollected 1 item\n\nmyTest/pytest_conftest/test_student_gender.py::TestStudentGender::test_valid_gender_true PASSED                            [100%]\n\n======================================================= 1 passed in 0.01s ========================================================\n```\n\n## 测试用例—参数化\n\n- 使用`parameterized`实现\n  - `pip install parameterized`\n  - 实现一个判断数字是否为奇数的例子\n\n```python\nclass Judge:\n    def is_odd(self, num: int) -> bool:\n        return num % 2 != 0\n```\n\n```python\nfrom parameterized import parameterized\n\nfrom myProject.pytest_parameterized.judge import Judge\n\n\nclass TestJudge:\n    @parameterized.expand([[1, True], [2, False], [3, True]])\n    def test_is_odd(self, num, expected_result):\n        # Setup\n        judge = Judge()\n\n        # Action\n        actual_result = judge.is_odd(num)\n\n        # Assert\n        assert expected_result == actual_result\n```\n\n- 使用`pytest`实现\n\n```python\nimport pytest\n\nfrom myProject.pytest_parameterized.judge import Judge\n\n\nclass TestJudge:\n    @pytest.mark.parametrize(\"num,expected_result\", [(1, True), (2, False), (3, True)])\n    def test_is_odd(self, num, expected_result):\n        # Setup\n        judge = Judge()\n\n        # Action\n        actual_result = judge.is_odd(num)\n\n        # Assert\n        assert expected_result == actual_result\n```\n\n> 更新: 2024-01-23 06:38:01  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/dzbxl6wz2ns1pgpi>\n","tags":["Python","unittest","PyTest"],"categories":["Python 测试"]},{"title":"SQLAlchemy","url":"/blog/2691588494/","content":"\n# SQLAlchemy\n\n一个使用 Python 编写的 SQL 的 ORM（Object-orient-map）工具包，支持 MySQL、SQL Server、sqlite、Oracle\n\n# 安装\n\n`pip install sqlalchemy`\n\n若使用的是 MySQL，需要安装`pip install mysqlclient`\n\n[https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb](https://docs.sqlalchemy.org/en/20/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n\n# 连接\n\n## 连接 sqlite\n\n```python\nfrom sqlalchemy import create_engine\nengine = create_engine('sqlite:///test.db', echo=True)\nconnection = engine.connect()\n```\n\n## 连接 MySQL\n\n```python\nfrom sqlalchemy import create_engine\nengine = create_engine('mysql://user:pwd@localhost/tsetdb', echo=True)\nconnection = engine.connect()\n```\n\n- echo：是用于显示数据库执行的操作\n\n先创建一个数据库中的表\n\n```sql\ncreate table user(\n    id int not null primary key auto_increment,\n    name varchar(20),\n    age int,\n    gender char(1)\n)engine=innodb default charset=utf8;\n\n```\n\n往里面插入一些数据然后：\n\n```python\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8')\nconn = engine.connect()\n\nquery = sqlalchemy.text(\"select * from user\")\nresult = conn.execute(query)\n\nfor row in result:\n    print(row)\nconn.close()\nengine.dispose()\n```\n\n# 创建表\n\n```python\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\n\nmeta_data = sqlalchemy.MetaData()\n\nstudents = sqlalchemy.Table(\n    'students', meta_data,\n    sqlalchemy.Column('id', sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column('name', sqlalchemy.String(64), unique=True, nullable=False),\n    sqlalchemy.Column('age', sqlalchemy.Integer, nullable=False),\n    sqlalchemy.Column('gender', sqlalchemy.String(8), nullable=False),\n    sqlalchemy.Column('birthday', sqlalchemy.Date, nullable=False),\n)\n\nmeta_data.create_all(engine)\n```\n\n- metaData，用于创建映射表的元数据，为了复用 所以提前使用 sqlalchemy 的 MetaDate()声明一个变量\n\n# 插入数据\n\n- 普通 SQL 的插入 `INSERT INTO table_name values()`\n- 一次插入一条数据`conn.execute(table_name.insert().values())`\n\n```python\nstudent_insert = students.insert()\ninsert_value1 = student_insert.values(\n    name='zachary',\n    age=18,\n    gender='male',\n    birthday='2000-01-01',\n)\n\ninsert_value2 = student_insert.values(\n    name='curry',\n    age=36,\n    gender='male',\n    birthday='1980-03-01',\n)\n\nwith engine.connect() as conn:\n    conn.execute(insert_value1)\n    res = conn.execute(insert_value2)\n    print(f\"插入的values2的主键为：{res.inserted_primary_key}\")\n    conn.commit()\n```\n\n- 一次插入多条数据`conn.execute(table_name.insert(), student_list)`\n\n```python\nstudent_list = [\n    {\"name\": \"jack\", \"age\": 18, \"gender\": \"male\", \"birthday\": \"2000-01-01\"},\n    {\"name\": \"sandy\", \"age\": 25, \"gender\": \"female\", \"birthday\": \"1990-05-04\"},\n    {\"name\": \"lucy\", \"age\": 35, \"gender\": \"female\", \"birthday\": \"2002-08-13\"},\n]\nstudent_insert = students.insert()\nwith engine.connect() as conn:\n    conn.execute(student_insert, student_list)\n    conn.commit()\n```\n\n# 查询数据\n\n## 查询所有记录\n\n- 普通 SQL 的查询 `SELECT * FROM table_name`\n- 函数查询 `table_name.select()`\n\n```python\nwith engine.connect() as conn:\n    query = students.select()\n    # 方法一\n    result = conn.execute(query)\n    for row in result:\n        print(row[0],end=\" \")\n        print(row.name)\n\n    # 方法二\n    result = conn.execute(query)\n    for row in result:\n        print(row)\n\n    # 方法三\n    result = conn.execute(query)\n    result_set = result.fetchall()\n    print(result_set)\n    for i in result_set:\n        print(i)\n```\n\n## 查询一条记录\n\n```python\nwith engine.connect() as conn:\n    query = students.select()\n    result = conn.execute(query)\n    result_raw = result.fetchone()\n    print(result_raw)\n```\n\n## 条件查询\n\n- 普通 SQL 的条件查询 `SELECT * FROM table_name WHERE 条件`\n- 函数条件查询 `table_name.select().where(条件)`\n\n```python\nwith engine.connect() as conn:\n    # 单条件查询\n    query = students.select().where(students.c.gender == 'male')\n    result = conn.execute(query)\n    result_raw = result.fetchall()\n    for item in result_raw:\n        print(item)\n\n    # 多条件查询\n    query = students.select().where(students.c.gender == 'male').where(students.c.age > 20).where(students.c.birthday < '2000-01-01')\n    result = conn.execute(query)\n    result_raw = result.fetchall()\n    for item in result_raw:\n        print(item)\n```\n\n- 更复杂的条件查询 引入`and_`、`or_`( `from sqlalchemy.sql import and_, or_` )\n\n```python\nfrom sqlalchemy.sql import and_, or_\nwith engine.connect() as conn:\n    # 复杂条件查询\n    query = students.select().where(\n        or_(\n            students.c.id > 3,\n            and_(\n                students.c.gender == 'male',\n                students.c.age > 30\n            )\n        )\n    )\n    result = conn.execute(query)\n    result_set = result.fetchall()\n    for row in result_set:\n        print(row)\n```\n\n# 更新数据\n\n- 普通 SQL 的更新数据 `UPDATE table_name SET col1=value1, col2=value2 WHERE 条件`\n- 函数更新数据\n  - 更新所有数据\n    - `table_name.update().values()`\n  - 更新部分数据\n    - `table_name.update().where(条件).values()`\n    - `update(table_name).where(条件).values()`\n\n```python\nwith engine.connect() as conn:\n    update = students.update().where(students.c.id == 1).values(\n        name='zacharyBlock',\n        age=18,\n        gender='male',\n        birthday='2000-01-01',\n    )\n    conn.execute(update)\n    conn.commit()\n```\n\n# 删除数据\n\n- 普通 SQL 的删除数据 `DELETE FROM table_name WHERE 条件`\n- 函数删除数据\n  - 删除所有数据\n    - `table_name.delete()`\n  - 删除部分数据\n    - `table_name.delete().where(条件)`\n\n```python\nwith engine.connect() as conn:\n    delete = students.delete().where(students.c.id == 5)\n    conn.execute(delete)\n    conn.commit()\n```\n\n# 关联表\n\n## 定义\n\n这里举例一个简单的一对多关联表\n\n![画板](https://cdn.nlark.com/yuque/0/2024/jpeg/38881094/1705517930472-0638ada4-aea4-4e42-b795-5c1d85e574a6.jpeg)\n\n删掉之前的 students 表重新建立一个\n\n```python\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\n\nmeta_data = sqlalchemy.MetaData()\n\nstudents = sqlalchemy.Table(\n    'students', meta_data,\n    sqlalchemy.Column('id', sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column('name', sqlalchemy.String(64), unique=True, nullable=False),\n    sqlalchemy.Column('age', sqlalchemy.Integer, nullable=False),\n    sqlalchemy.Column('gender', sqlalchemy.String(8), nullable=False),\n    sqlalchemy.Column('class_id', sqlalchemy.Integer, sqlalchemy.ForeignKey('classes.id'), nullable=False),\n)\n\nclasses = sqlalchemy.Table(\n    'classes', meta_data,\n    sqlalchemy.Column('id', sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column('name', sqlalchemy.String(64), unique=True, nullable=False),\n)\n\nmeta_data.create_all(engine)\n```\n\n插入一些数据\n\n```python\n# insert data\nwith engine.connect() as conn:\n    conn.execute(classes.insert(), [\n        {\"name\": \"Python\"},\n        {\"name\": \"Java\"},\n        {\"name\": \"Go\"},\n    ])\n    conn.execute(students.insert(), [\n        {\"name\": \"zachary\", \"age\": 18, \"gender\": \"male\", \"class_id\": 1},\n        {\"name\": \"curry\", \"age\": 36, \"gender\": \"male\", \"class_id\": 1},\n        {\"name\": \"jack\", \"age\": 18, \"gender\": \"male\", \"class_id\": 2},\n        {\"name\": \"sandy\", \"age\": 25, \"gender\": \"female\", \"class_id\": 2},\n        {\"name\": \"lucy\", \"age\": 35, \"gender\": \"female\", \"class_id\": 3},\n    ])\n\n    conn.commit()\n```\n\n## 查询\n\n- 查询 Python 班级的所有学生的信息及班级信息\n\n```python\nwith engine.connect() as conn:\n    join = students.join(classes, students.c.class_id == classes.c.id)\n    query = sqlalchemy.select(join).where(classes.c.name == \"Python\")\n    result = conn.execute(query)\n    for row in result:\n        print(row)\n```\n\n- 查询 Python 班级的所有学生的信息\n\n```python\nwith engine.connect() as conn:\n    join = students.join(classes, students.c.class_id == classes.c.id)\n    # query = sqlalchemy.select(students).select_from(join).where(classes.c.name == 'Python')\n    query = students.select().select_from(join).where(classes.c.name == 'Python')\n    result = conn.execute(query)\n    for row in result:\n        print(row)\n```\n\n- 查找 curry 所在的班级\n\n```python\nwith engine.connect() as conn:\n    join = students.join(classes, students.c.class_id == classes.c.id)\n    # query = sqlalchemy.select(classes).select_from(join).where(students.c.name == 'curry')\n    query = classes.select().select_from(join).where(students.c.name == 'curry')\n    result = conn.execute(query)\n    print(result.fetchall())\n```\n\n# 映射类(这块如果讲的话 暂时不要带上 join)\n\n在 Python 中定义一个类，其中的属性对应着数据表中的字段，通过类对象进行操作从而达到操作数据表的目的\n\n## 定义\n\n- 映射类基类\n\n通过使用`from sqlalchemy.ext.declarative import declarative_base`的\n\n`Base = declarative_base()`\n\n还是得先删除掉原先创建的 students 表\n\n```python\nimport sqlalchemy\nfrom sqlalchemy.ext.declarative import declarative_base\n\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\n\nclass Student(Base):\n    __tablename__ = 'students'\n    id = sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)\n    name = sqlalchemy.Column(sqlalchemy.String(64), unique=True, nullable=False)\n    age = sqlalchemy.Column(sqlalchemy.Integer, nullable=False)\n    gender = sqlalchemy.Column(sqlalchemy.String(8), nullable=False)\n\n\n# 若没有创建表 使用Base的metadata创建表\nBase.metadata.create_all(engine)\n```\n\n## 插入\n\n- 通过`session`添加记录，代替了之前的 connection\n- 添加一条数据 `session.add(obj)`\n\n```python\nfrom sqlalchemy.orm import sessionmaker\n\n# 给Session绑定engine\nSession = sessionmaker(bind=engine)\n\nsession = Session()\nstudent = Student(name='Tony', age=18, gender='male')\nsession.add(student)\nsession.commit()\n```\n\n- 添加多条数据 `session.add_all(list)`\n\n```python\n# 给Session绑定engine\nSession = sessionmaker(bind=engine)\n\nsession = Session()\n# 添加多条记录\nstudent_list = [\n    Student(name='stack', age=36, gender='male'),\n    Student(name='jeff', age=29, gender='male'),\n    Student(name='Monica', age=18, gender='female'),\n]\nsession.add_all(student_list)\nsession.commit()\n```\n\n## 查询\n\n- 查询所有记录 `session().query(cls).all()`\n- 带条件的查询 `session().query(cls).filter(cls.attr == \"value\")`\n- 多条件查询 `session().query(cls).filter(and_(条件1, 条件2))`\n- 单条记录的查询\n  - `.first()` 调用多条记录中的第一条，若无记录，则返回 None\n  - `.one()` 结果集若为一条记录，则返回，否则抛出异常\n  - `.scalar()` 与 one()相似，区别在于 当结果集是 None 时，不抛出异常，返回 None\n\n```python\n# 若没有创建表 使用Base的metadata创建表\nBase.metadata.create_all(engine)\n\n# 给Session绑定engine\nSession = sessionmaker(bind=engine)\n\nsession = Session()\n# 查找所有学生信息\nstudents = session.query(Student).all()\nfor student in students:\n    print(\n        f'id:{student.id}, name:{student.name}, age:{student.age}, gender:{student.gender}')\n\n# 查找学生ID大于2 且 为女性的学生信息\nstudents = session.query(Student).filter(and_(Student.id > 2, Student.gender == 'female'))\nfor student in students:\n    print(student)\n\n# 查询学生ID大于3的第一条记录\nstudent = session.query(Student).filter(Student.id > 3).first()\nprint(student)\n\n# 使用one()获取结果集为1条数据的记录，否则会抛出异常\nstudent = session.query(Student).filter(Student.id == 3).one()\nprint(student)\n\n# 使用scalar()获取的结果集为1条记录，若为空则返回None，若为多条记录抛出异常\nstudent = session.query(Student).filter(Student.id == 9).scalar()\nprint(student)\n```\n\n## 更新\n\n- 更新数据\n  - 使用`obj.attr=\"value\"`，依据`one()`等 查询到某条数据后，直接通过对象属性的方式直接赋值\n  - `session().query(cls).filter(cls.id == \"value\").update({cls.attr == \"value\" })`\n\n```python\n# 给Session绑定engine\nSession = sessionmaker(bind=engine)\n\nsession = Session()\n# 学生id为4 的年龄+1\nstudent = session.query(Student).filter(Student.id == 4).one()\nstudent.age += 1\nsession.commit()\n\nstudent = session.query(Student).filter(Student.id == 4).update({Student.age: 18})\nprint(student)\nsession.commit()\n\n# 所有人年龄+1\nstudents = session.query(Student).update({Student.age: Student.age + 1})\nsession.commit()\n```\n\n# Mapped 映射\n\n由 SQLAlchemy2.0 版本提供的新映射方式\n\n- `Mapped`、`mapped_column`\n\n```python\nimport sqlalchemy\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Mapped, mapped_column\n\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\n\nclass Student(Base):\n    __tablename__ = 'students'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(sqlalchemy.String(64), unique=True, nullable=False)\n    age: Mapped[int] = mapped_column(nullable=False)\n    gender: Mapped[str] = mapped_column(sqlalchemy.String(8), nullable=False)\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}, age:{self.age}, gender:{self.gender}\"\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\nsession = Session()\nstudents = session.query(Student).all()\nfor student in students:\n    print(student)\n```\n\n- `Annotated`使 Mapped 更加便捷和得以复用\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport sqlalchemy\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Mapped, mapped_column\nfrom typing_extensions import Annotated\n\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\nint_pk = Annotated[int, mapped_column(primary_key=True)]\nstr_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]\nint_age = Annotated[int, mapped_column(nullable=False)]\nstr_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]\n\n\nclass Student(Base):\n    __tablename__ = 'students'\n    id: Mapped[int_pk]\n    name: Mapped[str_name]\n    age: Mapped[int_age]\n    gender: Mapped[str_gender]\n\n    def __repr__(self):\n\n        return f\"id:{self.id}, name:{self.name}, age:{self.age}, gender:{self.gender}\"\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\nsession = Session()\nstudents = session.query(Student).all()\nfor student in students:\n    print(student)\n\n```\n\n- 使用 sql 的`内置函数`\n\n```python\nimport datetime\n\nimport sqlalchemy\nfrom sqlalchemy import func\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Mapped, mapped_column\nfrom typing_extensions import Annotated\n\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\nint_pk = Annotated[int, mapped_column(primary_key=True)]\nstr_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]\nint_age = Annotated[int, mapped_column(nullable=False)]\nstr_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]\ntimestamp_now = Annotated[datetime.datetime, mapped_column(nullable=False, server_default=func.now())]\n\n\nclass Student(Base):\n    __tablename__ = 'students'\n    id: Mapped[int_pk]\n    name: Mapped[str_name]\n    age: Mapped[int_age]\n    gender: Mapped[str_gender]\n    create_time: Mapped[timestamp_now]\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}, age:{self.age}, gender:{self.gender}, create_time:{self.create_time}\"\n```\n\n# ORM 关联表\n\n## 一对多\n\n- `ForeignKey`定义外键\n- `relationship`创建关系字段\n  - `lazy=False`使得在查询关系字段的时候自动执行，提高查询效率（讲的时候可以试试给 T 和 F 运行效果看看）\n  - `backref=\"关系字段名\"` 给关系字段对应的类 指定关联关系字段 实现双向关联，虽然便捷 但是不推荐，因为很难直接从另一个类中看出有这个关系字段\n\n```python\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\nint_pk = Annotated[int, mapped_column(primary_key=True)]\nstr_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]\nint_age = Annotated[int, mapped_column(nullable=False)]\nstr_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]\nclass_id_fk = Annotated[int, mapped_column(sqlalchemy.ForeignKey('classes.id'), nullable=False)]\ntimestamp_now = Annotated[datetime.datetime, mapped_column(nullable=False, server_default=func.now())]\n\n\nclass Class(Base):\n    __tablename__ = 'classes'\n    id: Mapped[int_pk]\n    name: Mapped[str_name]\n    create_time: Mapped[timestamp_now]\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}, create_time:{self.create_time}\"\n\n\nclass Student(Base):\n    __tablename__ = 'students'\n    id: Mapped[int_pk]\n    name: Mapped[str_name]\n    age: Mapped[int_age]\n    gender: Mapped[str_gender]\n    class_id: Mapped[class_id_fk]\n    create_time: Mapped[timestamp_now]\n\n    # 创建一个关系字段，这并不是一个数据库字段\n    classes: Mapped[Class] = relationship(lazy=False, backref=\"students\")\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}, age:{self.age}, gender:{self.gender}, class_id:{self.class_id}, create_time:{self.create_time}\"\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\nsession = Session()\n\n# 插入操作\n# 班级对象\nclass_python = Class(name=\"Python\")\n# 学生对象 插入的时候没有使用class_id, 直接插入了一个classes关系对象\nstudent = Student(name=\"zachary\", age=18, gender=\"male\", classes=class_python)\n# 在添加数据的时候发现Class表中 还没有python班级，依据关系字段，会自动执行insert语句，因此不需要给class表插入数据\nsession.add(student)\nsession.commit()\n\n# 查询操作\nstudent = session.query(Student).filter(Student.gender == \"female\").first()\nprint(student)\n# 如果是lazy=True 则会再查询一次，否则一次就查询出结果\nprint(student.classes)\n\n# 通过backref实现双向关联\nclasses = session.query(Class).filter(Class.name == \"Python\").one()\nprint(classes)\nprint(classes.students)\n\n\n\n\n```\n\n    - `back_populates=\"关联的关系字段名\"` 建议使用该方法进行关联关系的双向映射\n\n```python\nimport datetime\nfrom typing import List\n\nimport sqlalchemy\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import declarative_base, mapped_column, Mapped, sessionmaker, relationship\nfrom typing_extensions import Annotated\n\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\nint_pk = Annotated[int, mapped_column(primary_key=True)]\nstr_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]\nint_age = Annotated[int, mapped_column(nullable=False)]\nstr_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]\nclass_id_fk = Annotated[int, mapped_column(sqlalchemy.ForeignKey('classes.id'), nullable=False)]\ntimestamp_now = Annotated[datetime.datetime, mapped_column(nullable=False, server_default=func.now())]\n\n\nclass Class(Base):\n    __tablename__ = 'classes'\n    id: Mapped[int_pk]\n    name: Mapped[str_name]\n    create_time: Mapped[timestamp_now]\n\n    # 创建一个关系字段\n    students: Mapped[List[\"Student\"]] = relationship(lazy=False, back_populates=\"classes\")\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}, create_time:{self.create_time}\"\n\n\nclass Student(Base):\n    __tablename__ = 'students'\n    id: Mapped[int_pk]\n    name: Mapped[str_name]\n    age: Mapped[int_age]\n    gender: Mapped[str_gender]\n    class_id: Mapped[class_id_fk]\n    create_time: Mapped[timestamp_now]\n\n    # 创建一个关系字段，这并不是一个数据库字段\n    classes: Mapped[Class] = relationship(lazy=False, back_populates=\"students\")\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}, age:{self.age}, gender:{self.gender}, class_id:{self.class_id}, create_time:{self.create_time}\"\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\nsession = Session()\n\n# 通过back_populates实现双向关联\nstudent = session.query(Student).filter(Student.gender == \"female\").first()\nprint(student)\nprint(student.classes)\n\nclasses = session.query(Class).filter(Class.name == \"Python\").one()\nprint(classes)\nprint(classes.students)\n```\n\n## 多对多\n\n![画板](https://cdn.nlark.com/yuque/0/2024/jpeg/38881094/1705590114712-60305c94-2c22-4da3-bd1c-da3ec5c4618f.jpeg)\n\n在用户登录注册的业务中，用户可以分为很多角色，同时用户可能拥有多重角色身份，这就需要使用多对多的关联\n\n在这样的多对多关系中，通常需要一张`中间表`，因此在实现的时候首先需要定义这张中间表，同时这张中间表不是使用 class 进行的定义，而是使用`方法定义`的\n\n```python\nengine = create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\nrelation_table = Table(\n    'user_role', Base.Metadata,\n    Column('user_id', ForeignKey('users.id'), primary_key=True),\n    Column('role_id', ForeignKey('roles.id'), primary_key=True)\n)\n```\n\n创建 role 表\n\n```python\nimport sqlalchemy\nfrom sqlalchemy import Table, create_engine, Column, ForeignKey\nfrom sqlalchemy.orm import declarative_base, mapped_column, Mapped\nfrom typing_extensions import Annotated\n\nengine = create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\nint_pk = Annotated[int, mapped_column(primary_key=True)]\nstr_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]\n\nrelation_table = Table(\n    'user_role', Base.Metadata,\n    Column('user_id', ForeignKey('users.id'), primary_key=True),\n    Column('role_id', ForeignKey('roles.id'), primary_key=True)\n)\n\n\nclass Role(Base):\n    __tablename__ = 'roles'\n    id: Mapped[int_pk]\n    name: Mapped[str_name]\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}\"\n```\n\n之后创建 user 表，需要创建单向关联字段\n\n- 使用 relationship()中的`secondary=\"中间表\"`\n\n```python\nfrom typing import List\n\nimport sqlalchemy\nfrom sqlalchemy import Table, create_engine, Column, ForeignKey\nfrom sqlalchemy.orm import declarative_base, mapped_column, Mapped, relationship\nfrom typing_extensions import Annotated\n\nengine = create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\nint_pk = Annotated[int, mapped_column(primary_key=True)]\nstr_unique_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]\nstr_pwd = Annotated[str, mapped_column(sqlalchemy.String(64), nullable=False)]\n\nrelation_table = Table(\n    'user_role', Base.Metadata,\n    Column('user_id', ForeignKey('users.id'), primary_key=True),\n    Column('role_id', ForeignKey('roles.id'), primary_key=True)\n)\n\n\nclass Role(Base):\n    __tablename__ = 'roles'\n    id: Mapped[int_pk]\n    role_name: Mapped[str_unique_name]\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}\"\n\n\nclass User(Base):\n    __tablename__ = 'users'\n    id: Mapped[int_pk]\n    account: Mapped[str_unique_name]\n    password: Mapped[str_pwd]\n\n    roles: Mapped[List[\"Role\"]] = relationship(lazy=False, secondary=relation_table)\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}\"\n\nBase.Metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n```\n\n尝试插入一些数据\n\n```python\n# 添加数据\nsession = Session()\n\nrole_1 = Role(role_name=\"admin\")\nrole_2 = Role(role_name=\"user\")\nrole_3 = Role(role_name=\"guest\")\n\nadminUser = User(account=\"Curry\", password=\"1234\")\nadminUser.roles.add(role_1)\nadminUser.roles.add(role_2)\n\nnormalUser = User(account=\"Jordan\", password=\"1234\")\nnormalUser.roles.add(role_2)\n\nguestUser = User(account=\"Harden\", password=\"1234\")\nguestUser.roles.add(role_3)\n\nsession.add_all([adminUser, normalUser, guestUser])\nsession.commit()\n```\n\n查询一下数据\n\n```python\nuser_data = session.query(User).all()\nfor item in user_data:\n    print(item)\n    print(item.roles)\n```\n\n至此 单向的关联关系是没问题的，照例实现一下从 role 关联至 user\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom typing import Set\n\nimport sqlalchemy\nfrom sqlalchemy import Table, create_engine, Column, ForeignKey\nfrom sqlalchemy.orm import declarative_base, mapped_column, Mapped, relationship, sessionmaker\nfrom typing_extensions import Annotated\n\nengine = create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\nint_pk = Annotated[int, mapped_column(primary_key=True)]\nstr_unique_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]\nstr_pwd = Annotated[str, mapped_column(sqlalchemy.String(64), nullable=False)]\n\nrelation_table = Table(\n    'user_role', Base.metadata,\n    Column('user_id', ForeignKey('users.id'), primary_key=True),\n    Column('role_id', ForeignKey('roles.id'), primary_key=True)\n)\n\n\nclass Role(Base):\n    __tablename__ = 'roles'\n    id: Mapped[int_pk]\n    role_name: Mapped[str_unique_name]\n\n    users: Mapped[Set[\"User\"]] = relationship(lazy=False, secondary=relation_table, back_populates=\"roles\")\n\n    def __repr__(self):\n        return f\"id:{self.id}, role_name:{self.role_name}\"\n\n\nclass User(Base):\n    __tablename__ = 'users'\n    id: Mapped[int_pk]\n    account: Mapped[str_unique_name]\n    password: Mapped[str_pwd]\n\n    roles: Mapped[Set[\"Role\"]] = relationship(lazy=False, secondary=relation_table, back_populates=\"users\")\n\n    def __repr__(self):\n        return f\"id:{self.id}, account:{self.account}, password:{self.password}\"\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n\n# 添加数据\nsession = Session()\n\nuser_data = session.query(User).all()\nfor item in user_data:\n    print(item)\n    print(item.roles)\n\nrole_data = session.query(Role).all()\nfor item in role_data:\n    print(item)\n    print(item.users)\n```\n\n## 一对一\n\n![画板](https://cdn.nlark.com/yuque/0/2024/jpeg/38881094/1705596862996-d23d4895-d3cd-4e3b-a889-cc994ecec750.jpeg)\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport datetime\n\nimport sqlalchemy\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import declarative_base, Mapped, mapped_column, relationship, sessionmaker\nfrom typing_extensions import Annotated\n\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\nint_pk = Annotated[int, mapped_column(primary_key=True)]\nstr_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=False, nullable=False)]\nint_age = Annotated[int, mapped_column(sqlalchemy.SmallInteger, nullable=False)]\nstr_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]\ndate_exp_license = Annotated[\n    datetime.datetime, mapped_column(sqlalchemy.Date, default=datetime.datetime.now() + datetime.timedelta(days=365))]\n\n\nclass Driver(Base):\n    __tablename__ = 'drivers'\n    id: Mapped[int_pk]\n    name: Mapped[str_name]\n    age: Mapped[int_age]\n    gender: Mapped[str_gender]\n    license_id: Mapped[str] = mapped_column(ForeignKey('licenses.id'), nullable=False)\n\n    license = relationship(\"License\", lazy=False, back_populates=\"driver\")\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}, age:{self.age}, gender:{self.gender}, license_id:{self.license_id}\"\n\n\nclass License(Base):\n    __tablename__ = 'licenses'\n    id: Mapped[int_pk]\n    l_class: Mapped[str_name]\n    expiration_date: Mapped[date_exp_license]\n\n    driver = relationship(\"Driver\", lazy=False, back_populates=\"license\")\n\n    def __repr__(self):\n        return f\"id:{self.id}, l_class:{self.l_class}, expiration_date:{self.expiration_date}\"\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\nsession = Session()\n```\n\n尝试插入数据\n\n```python\nlicense_1 = License(l_class=\"A\")\nlicense_2 = License(l_class=\"B\")\nlicense_3 = License(l_class=\"A\")\n\ndriver_1 = Driver(name=\"Tom\", age=18, gender=\"male\", license=license_1)\ndriver_2 = Driver(name=\"Jerry\", age=20, gender=\"female\", license=license_2)\ndriver_3 = Driver(name=\"Jack\", age=22, gender=\"male\", license=license_3)\n\nsession.add_all([driver_1, driver_2, driver_3])\nsession.commit()\n```\n\n查询数据\n\n```python\nlicense_1 = session.query(License).filter(License.l_class == \"A\").all()\nfor item in license_1:\n    print(item)\n    print(item.driver)\n\ndriver = session.query(Driver).all()\nfor item in driver:\n    print(item)\n    print(item.license)\n    print(\"=============================\")\n```\n\n更新数据\n\n```python\n# driver id为3 的license_id 清空\nsession.query(Driver).filter(Driver.id == 3).update({Driver.license_id: None})\nsession.commit()\n\n# 重新赋给driver id=3的license_id\nlicense_item = session.query(License).filter(License.id == 3).first()\ndriver = session.query(Driver).filter(Driver.id == 3).first()\nif license_item and driver:\n    driver.license = license_item\n    session.commit()\n```\n\n# ORM 操作\n\n## 查询\n\n这里仍旧以一对多为例，沿用之前的学生 班级表\n\n```python\nimport datetime\nfrom typing import List\n\nimport sqlalchemy\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import declarative_base, mapped_column, Mapped, sessionmaker, relationship\nfrom typing_extensions import Annotated\n\nengine = sqlalchemy.create_engine('mysql://root:980226@localhost:3306/testSql?charset=utf8', echo=True)\nBase = declarative_base()\n\nint_pk = Annotated[int, mapped_column(primary_key=True)]\nstr_name = Annotated[str, mapped_column(sqlalchemy.String(64), unique=True, nullable=False)]\nint_age = Annotated[int, mapped_column(nullable=False)]\nstr_gender = Annotated[str, mapped_column(sqlalchemy.String(8), nullable=False)]\nclass_id_fk = Annotated[int, mapped_column(sqlalchemy.ForeignKey('classes.id'), nullable=False)]\ntimestamp_now = Annotated[datetime.datetime, mapped_column(nullable=False, server_default=func.now())]\n\n\nclass Class(Base):\n    __tablename__ = 'classes'\n    id: Mapped[int_pk]\n    name: Mapped[str_name]\n    create_time: Mapped[timestamp_now]\n\n    # 创建一个关系字段\n    students: Mapped[List[\"Student\"]] = relationship(back_populates=\"classes\")\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}, create_time:{self.create_time}\"\n\n\nclass Student(Base):\n    __tablename__ = 'students'\n    id: Mapped[int_pk]\n    name: Mapped[str_name]\n    age: Mapped[int_age]\n    gender: Mapped[str_gender]\n    class_id: Mapped[class_id_fk]\n    create_time: Mapped[timestamp_now]\n\n    # 创建一个关系字段，这并不是一个数据库字段\n    classes: Mapped[Class] = relationship(back_populates=\"students\")\n\n    def __repr__(self):\n        return f\"id:{self.id}, name:{self.name}, age:{self.age}, gender:{self.gender}, class_id:{self.class_id}, create_time:{self.create_time}\"\n\n\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\nsession = Session()\n```\n\n- 查询的一些实例\n\n```python\n# 查询所有学生信息，以姓名排序\nquery = select(Student).order_by(Student.name)\nresult = session.execute(query)\nfor item in result:\n    print(item)\n\n# 查询一个表中的某几个字段 id name\nquery = select(Student.id, Student.name).select_from(Student)\nexecute_query(query)\n\n# 使用join函数做联合查询 默认是inner join\nquery = select(Student,Class).join(Student.classes)\nexecute_query(query)\n\nquery = select(Class, Student).join(Student.classes)\nexecute_query(query)\n\n# 查询多个表中的某几个字段 stu.name cls.name\nquery = select(Student.name, Class.name).join_from(Student, Class)\nexecute_query(query)\n\n# 使用outer join函数做联合查询\nquery = select(Student, Class).outerjoin(Class.students)\nexecute_query(query)\n\nquery = select(Student, Class).select_from(outerjoin(Class, Student))\nexecute_query(query)\n\nquery = select(Student, Class).outerjoin(Student.classes)\nexecute_query(query)\n\nquery = select(Student, Class).select_from(outerjoin(Student, Class))\nexecute_query(query)\n\n# 使用join函数实现outer join\nquery = select(Student, Class).join(Student.classes, isouter=True)\nexecute_query(query)\n\nquery = select(Class, Student).join(Student.classes, isouter=True)\nexecute_query(query)\n\n# where 条件查询\nquery = select(Student).where(Student.age > 18, Student.gender == 'male')\nexecute_query(query)\nquery = select(Student).where(and_(Student.age > 18, Student.gender == 'male'))\nexecute_query(query)\n\nobj_stu = session.get(Student, 1)  # 可以看看这个源码\nquery = select(Student).where(Student.name == obj_stu.name)\nexecute_query(query)\n\nquery = select(Student).where(Student.age != obj_stu.age)\nexecute_query(query)\n\nquery = select(Class).where(Class.students.contains(obj_stu))\nexecute_query(query)\n\n```\n\n## 插入\n\n- `insert()`函数插入\n\n```python\n# 使用insert()实现插入\n\n# 给classes插入数据\ncls_1 = {\"name\": \"Golang\"}\ncls_2 = {\"name\": \"C++\"}\ncls_list = [cls_1, cls_2]\nsession.execute(insert(Class).values(cls_list))\nsession.commit()\n\n\n# 给students插入数据\nstudent_1 = {\"name\": \"Tom\", \"age\": 18, \"gender\": \"male\", \"class_id\": select(Class.id).where(Class.name == \"Golang\")}\nstudent_2 = {\"name\": \"Rose\", \"age\": 20, \"gender\": \"female\", \"class_id\": select(Class.id).where(Class.name == \"C++\")}\nstudent_list = [student_1, student_2]\nsession.execute(insert(Student).values(student_list))\nsession.commit()\n\n\n\n```\n\n## 更新\n\n- `update()`函数更新\n\n```python\n# 使用update()实现更新\n\n# id为3的学生想转到Golang班 id为4的学生想转到C++班\nupdate_1 = {\"id\": 3, \"class_id\": session.execute(select(Class).where(Class.name == \"Golang\")).scalar_one().id}\nupdate_2 = {\"id\": 4, \"class_id\": session.execute(select(Class).where(Class.name == \"C++\")).scalar_one().id}\nupdate_list = [update_1, update_2]\nsession.execute(update(Student), update_list)\nsession.commit()\n\n\n```\n\n## 删除\n\n- `delete()`函数删除\n\n```python\n# 使用 delete() 实现删除\n\n# 删除id在8, 9, 10 的学生\nsession.execute(delete(Student).where(Student.id.in_([8, 9, 10])))\nsession.commit()\n```\n\n# Session 与事务\n\n- Session 默认启用事务\n\n```python\nwith Session(engine) as session: # 事务的开始\n    ...\n    session.commit()\n\n# 在session.commit()之前发生任何异常，都会rollback\n# 若无异常，提交后会关闭session\n```\n\n- 自动提交事务\n\n```python\nwith Session(engine) as session:\n    with session.begin():\n        ...\n    \t# 到这块无异常，正常自动提交\n# 自动关闭session\n\nwith Session(engine) as session, session.begin():\n    ...\n    # 到这块无异常，正常自动提交\n# 自动关闭session\n```\n\n> 更新: 2024-02-21 20:01:12  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/uigosxw6s0n5b7k8>\n","tags":["Python","MySQL","SQLAlchemy"],"categories":["Python MySQL"]},{"title":"Python - 异步IO","url":"/blog/2601309225/","content":"\n# 异步 IO\n\n# 协程\n\n类似于小学时候的一个计算任务，协程就类似于同时做多件家务，烧开水的同时 启动了洗衣机 之后拖地\n\n而不是烧开水一直等，然后拖地，然后洗衣机等着\n\n## asyncio 模块\n\n该模块通过一个线程去执行并发任务\n\n- `async`\n\n需要创建一个协程的时候，可以使用 async 关键字将一个函数声明为协程\n\n> 协程的协有协助之意，协程就是通过一个线程去执行并发，一个任务就是一个协程，也可以是多个任务通过一个协程调用多次来实现\n>\n> 协程的核心是通过事件循环实现的\n\n```python\nasync def func():\n    pass\n```\n\n- `asyncio.run()` 启动一个协程\n\n```python\nasync def multi(num1: int, num2: int):\n    res = num1 * num2\n    print(f'{num1} * {num2} = {res}')\n\n\nif __name__ == '__main__':\n    asyncio.run(multi(3,7))\n```\n\n- `await` 协程中调用另外一个协程\n\n```python\nasync def multi(num1: int, num2: int):\n    res = num1 * num2\n    print(f'{num1} * {num2} = {res}')\n\n\nasync def multi_api():\n    await multi(1, 2)\n\n\nif __name__ == '__main__':\n    asyncio.run(multi_api())\n```\n\n## 创建任务\n\n- `asyncio.create_task`\n  - 先来一个没有实现并发的调用，由时间上的统计来看，是一个串行的实现\n\n```python\nasync def process(name: str, num1: int) -> None:\n    print(f'{name} started')\n    await asyncio.sleep(1)\n    print(f'{name} processing')\n    await asyncio.sleep(num1 - 1)\n    print(f'{name} finished')\n\n\nasync def process_api():\n    start = time.perf_counter()\n    await process('task1', 1)\n    await process('task2', 2)\n    await process('task3', 3)\n    print(f'finished in {time.perf_counter() - start:.2f} seconds')\n\n\nif __name__ == '__main__':\n    asyncio.run(process_api())\n\n# task1 started\n# task1 processing\n# task1 finished\n# task2 started\n# task2 processing\n# task2 finished\n# task3 started\n# task3 processing\n# task3 finished\n# finished in 6.01 seconds\n```\n\n    - 通过`asyncio.create_task`实现并发\n        * create_task返回task对象\n        * 先不用await\n        * 再加上await 可以看出时间上运行速度的差距\n\n```python\nasync def process(name: str, num1: int) -> None:\n    print(f'{name} started')\n    await asyncio.sleep(1)\n    print(f'{name} processing')\n    await asyncio.sleep(num1 - 1)\n    print(f'{name} finished')\n\n\nasync def process_api():\n    start = time.perf_counter()\n    task_1 = asyncio.create_task(process('task1', 1))\n    task_2 = asyncio.create_task(process('task2', 2))\n    task_3 = asyncio.create_task(process('task3', 3))\n\n    # await task_1\n    # await task_2\n    # await task_3\n    print(f'finished in {time.perf_counter() - start:.10f} seconds')\n\n\nif __name__ == '__main__':\n    asyncio.run(process_api())\n```\n\n## 取消任务\n\n- `Task.done()`用于判断任务是否完成\n- `Task.cancel()`用于取消一个未完成的任务\n\n```python\nasync def process(name: str, num1: int) -> None:\n    print(f'{name} started')\n    await asyncio.sleep(1)\n    print(f'{name} processing')\n    await asyncio.sleep(num1 - 1)\n    print(f'{name} finished')\n\n\nasync def process_api():\n    start = time.perf_counter()\n    task_1 = asyncio.create_task(process('task1', 1))\n    task_2 = asyncio.create_task(process('task2', 2))\n    task_3 = asyncio.create_task(process('task3', 3))\n\n    await task_1\n    await task_2\n    if not task_3.done():\n        task_3.cancel()\n    else:\n        await task_3\n    print(f'finished in {time.perf_counter() - start:.10f} seconds')\n\n\nif __name__ == '__main__':\n    asyncio.run(process_api())\n```\n\n## 超时取消任务\n\n- `asyncio.wait_for(Task, timeout=time)` 用于设定多久未完成任务，取消任务\n\n```python\nasync def process(name: str, num1: int) -> None:\n    print(f'{name} started')\n    await asyncio.sleep(1)\n    print(f'{name} processing')\n    await asyncio.sleep(num1 - 1)\n    print(f'{name} finished')\n\n\nasync def process_api():\n    start = time.perf_counter()\n    task_1 = asyncio.create_task(process('task1', 3))\n    try:\n        await asyncio.wait_for(task_1, 1)\n    except asyncio.TimeoutError:\n        print('task1 timeout')\n    else:\n        await task_1\n    print(f'finished in {time.perf_counter() - start:.10f} seconds')\n\n\nif __name__ == '__main__':\n    asyncio.run(process_api())\n```\n\n- `asyncio.shield(Task)`给任务加盾，即使超时了也不会停止任务\n\n```python\nasync def process(name: str, num1: int) -> None:\n    print(f'{name} started')\n    await asyncio.sleep(1)\n    print(f'{name} processing')\n    await asyncio.sleep(num1 - 1)\n    print(f'{name} finished')\n\n\nasync def process_api():\n    start = time.perf_counter()\n    task_1 = asyncio.create_task(process('task1', 3))\n    try:\n        await asyncio.wait_for(asyncio.shield(task_1), 1)\n    except asyncio.TimeoutError:\n        print('task1 timeout')\n        await task_1\n    print(f'finished in {time.perf_counter() - start:.10f} seconds')\n\n\nif __name__ == '__main__':\n    asyncio.run(process_api())\n```\n\n## 等待多个任务\n\n- `asyncio.gather(Task1, Task2,...)`可以直接并行多个任务等待结束\n\n```python\nasync def process(name: str, num1: int):\n    print(f'{name} started')\n    await asyncio.sleep(1)\n    print(f'{name} processing')\n    await asyncio.sleep(num1 - 1)\n    print(f'{name} finished')\n    return f\"{name} finished\"\n\n\nasync def process_api():\n    start = time.perf_counter()\n    task_1 = process('task_1', 1)\n    task_2 = process('task_2', 2)\n    task_3 = process('task_3', 3)\n    result = await asyncio.gather(task_1, task_2, task_3)\n    print(f'finished in {time.perf_counter() - start:.10f} seconds')\n    print(result)\n\n\nif __name__ == '__main__':\n    asyncio.run(process_api())\n```\n\n## 协程异常\n\n- `return_exceptions=True` 在等待多个任务时，若有异常任务会导致整体主线程的中断，可以使用该参数保持其他任务的正常运行\n\n```python\nasync def process(name: str, num1: int):\n    print(f'{name} started')\n    await asyncio.sleep(1)\n    print(f'{name} processing')\n    await asyncio.sleep(num1 - 1)\n    print(f'{name} finished')\n    return f\"{name} finished\"\n\n\nasync def exception_process():\n    raise Exception('error')\n\n\nasync def process_api():\n    start = time.perf_counter()\n    task_1 = process('task_1', 1)\n    task_2 = process('task_2', 2)\n    task_error = exception_process()\n\n    result = await asyncio.gather(task_1, task_2, task_error,\n                                  return_exceptions=True)\n    print(f'finished in {time.perf_counter() - start:.10f} seconds')\n    print(result)\n\n\nif __name__ == '__main__':\n    asyncio.run(process_api())\n```\n\n> 更新: 2024-05-16 13:20:45  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/oau1f4oo9g509hgz>\n","tags":["Python"],"categories":["Python进阶"]},{"title":"Python - 并发","url":"/blog/2636183998/","content":"\n# 并发\n\n# 线程\n\n## 进程与线程\n\n- 一个进程是操作系统中运行的一个任务\n  - 进程拥有独立的 CPU 和内存资源\n  - 多进程是支持并发的\n- 一个线程是一个进程下运行的一个任务\n  - 线程之间共享进程的 CPU 和内存资源\n\n## 创建线程\n\n- 使用`threading`模块中的`Thread`类创建线程\n  - `start()`方法：启动线程\n  - `join()`方法： 等待线程结束\n\n```python\ndef task():\n    for i in range(5):\n        print(i)\n\n\nthread_1 = Thread(target=task)\nthread_2 = Thread(target=task)\nthread_1.start()\nthread_2.start()\n\nthread_1.join()\nprint(\"thread_1 end\")\n\nthread_2.join()\nprint(“thread_2 end”)\n```\n\n    - 带参数的方法调用使用`args`传入参数\n\n```python\ndef task(num: int):\n    for i in range(num):\n        print(i)\n\n\nthread_1 = Thread(target=task, args = (5,))\nthread_2 = Thread(target=task, args = (10,))\nthread_1.start()\nthread_2.start()\n```\n\n- 通过继承`Thread`类来创建线程类\n  - `setName()`方法可以给线程设置名字\n\n```python\nclass MyThread(Thread):\n    def __init__(self, name:str, num: int):\n        super().__init__()\n\n    \tself.setName(name)\n        self.num = num\n\n\tdef run(self) -> None:\n        for i in range(self.num):\n            print(f\"{self.getName()}: {i}\")\n            time.sleep(1)\n\nthread_1 = MyThread(\"A\", 5)\nthread_2 = MyThread(\"B\", 10)\n\nthread_1.start()\nthread_2.start()\n```\n\n## 守护线程\n\n- 当主线程结束时，守护线程自动结束\n- 主线程中有非守护线程时，会等待非守护线程执行完才结束\n- 守护线程一般用于日志等 非关键线程\n\n```python\n# 实现方法1\ndef task(num: int):\n    for i in range(num):\n        print(i)\n\nthread_1 = Thread(target=task,args=(5,), daemon=True)\nthread_1.start()\n\n# 实现方法2\nclass MyThread(Thread):\n    def __init__(self, name:str, num: int):\n        super().__init__()\n\n    \tself.setName(name)\n        self.setDaemon(True)\n        self.num = num\n\n\tdef run(self) -> None:\n        for i in range(self.num):\n            print(f\"{self.getName()}: {i}\")\n            time.sleep(1)\n\nthread_2 = MyThread(\"A\", 5)\nthread_2.start()\n```\n\n## 线程安全队列\n\nqueue 模块中 Queue 类提供了线程安全队列\n\n- `queue.put(item, block=True)`\n  - block 为 True 当 queue 满了的时候线程会等待，直到有空间 put\n  - block 为 False 当 queue 满了的时候会抛出异常\n- `queue.put(item, timeout=5)`\n  - timeout 当 queue 满了的时候等待 timeout 时长，若还是满着抛出异常，若空闲了则 put\n- `queue.get(block=True)`\n- `queue.get(timeout=5)`\n- `queue.qsize()`\n- `queue.empty()`\n- `queue.full()`\n\n通过一个生产者、消费者模型进行演示\n\n```python\nclass Producer(Thread):\n    def __init__(self, name:str, num: int, queue: Queue):\n        super().__init__()\n\n    \tself.setName(name)\n        self.num = num\n        self.queue = queue\n\n\tdef run(self) -> None:\n        for i in range(self.num):\n            item = f\"{self.getName()}: {i}\"\n            queue.put(item, block=True)\n\nclass Consumer(Thread):\n    def __init__(self, name: str, queue: Queue):\n        super().__init__()\n\n    \tself.setName(name)\n        self.queue = queue\n        self.setDaemon(True)\n\n\tdef run(self) -> None:\n        while True:\n            item = self.queue.get(block=True)\n            print(f\"{self.getName()}->{item}\\n\", end=\"\")\n\n\nqueue = Queue(3)\nthreads = []\n\nthreads.append(Producer(\"P1\", 5, queue))\nthreads.append(Producer(\"P2\", 5, queue))\nthreads.append(Producer(\"P3\", 5, queue))\n\nthreads.append(Consumer(\"C1\", queue))\nthreads.append(Consumer(\"C1\", queue))\n\nfor thread in threads:\n    thread.start()\n```\n\n# 线程锁\n\n多个线程同一时刻访问同一资源时，会出现竞争的现象，容易造成数据的丢失、覆盖等问题\n\n```python\ndef task(name: str):\n    print(f\"{name}: 1\\n\", end=\"\")\n    print(f\"{name}: 2\\n\", end=\"\")\n    print(f\"{name}: 3\\n\", end=\"\")\n\n\nthread_1 = Thread(target=task, args=(\"A\",))\nthread_2 = Thread(target=task, args=(\"B\",))\nthread_3 = Thread(target=task, args=(\"C\",))\n\nthreads = [thread_1, thread_2, thread_3]\nfor thread in threads:\n    thread.start()\n```\n\n可以使用锁来解决这一问题\n\n- Lock\n  - `lock.acquire()`获取锁，当一个锁对象中的锁被获取了，另一个需要获取的需要等待\n  - `lock.release()`释放锁\n\n```python\nlock = Lock()\n\n\ndef task(name: str):\n    global lock\n    lock.acquire()\n    print(f\"{name}: 1\\n\", end=\"\")\n    print(f\"{name}: 2\\n\", end=\"\")\n    print(f\"{name}: 3\\n\", end=\"\")\n    lock.release()\n\n\nthread_1 = Thread(target=task, args=(\"A\",))\nthread_2 = Thread(target=task, args=(\"B\",))\nthread_3 = Thread(target=task, args=(\"C\",))\n\nthreads = [thread_1, thread_2, thread_3]\nfor thread in threads:\n    thread.start()\n```\n\n- Condition\n  - `acquire()`\n  - `release()`\n  - `wait()` 等待锁的释放\n  - `notify_all()` 通知其他等待锁的线程\n\n自己实现一个线程安全队列\n\n```python\nclass MySafeQueue():\n\n    def __init__(self, size: int):\n        self.__queue = []\n        self.size = size\n        self.__lock = Condition()\n\n    def put(self, item):\n        self.__lock.acquire()\n        while len(self.__queue) >= self.size:\n            self.__lock.wait()\n        self.__queue.append(item)\n        self.__lock.notify_all()\n        self.__lock.release()\n\n    def get(self):\n        self.__lock.acquire()\n        while len(self.__queue) == 0:\n            self.__lock.wait()\n        item = self.__queue.pop(0)\n        self.__lock.notify_all()\n        self.__lock.release()\n        return item\n\n\nclass Producer(Thread):\n    def __init__(self, name: str, num: int, queue: MySafeQueue):\n        super().__init__()\n\n        self.setName(name)\n        self.num = num\n        self.queue = queue\n\n    def run(self) -> None:\n        for i in range(self.num):\n            item = f\"{self.getName()}: {i}\"\n            queue.put(item)\n\n\nclass Consumer(Thread):\n    def __init__(self, name: str, queue: MySafeQueue):\n        super().__init__()\n\n        self.setName(name)\n        self.queue = queue\n        self.setDaemon(True)\n\n    def run(self) -> None:\n        while True:\n            item = self.queue.get()\n            print(f\"{self.getName()}->{item}\\n\", end=\"\")\n\n\nqueue = MySafeQueue(3)\nthreads = []\n\nthreads.append(Producer(\"P1\", 5, queue))\nthreads.append(Producer(\"P2\", 5, queue))\nthreads.append(Producer(\"P3\", 5, queue))\n\nthreads.append(Consumer(\"C1\", queue))\nthreads.append(Consumer(\"C1\", queue))\n\nfor thread in threads:\n    thread.start()\n```\n\n锁支持上下文管理器，因此可以改成\n\n```python\nclass MySafeQueue():\n\n    def __init__(self, size: int):\n        self.__queue = []\n        self.size = size\n        self.__lock = Condition()\n\n    def put(self, item):\n        with self.__lock:\n            while len(self.__queue) >= self.size:\n                self.__lock.wait()\n            self.__queue.append(item)\n            self.__lock.notify_all()\n\n    def get(self):\n        with self.__lock:\n            while len(self.__queue) == 0:\n                self.__lock.wait()\n            item = self.__queue.pop(0)\n            self.__lock.notify_all()\n            return item\n```\n\n# 线程池\n\n- 线程的创建和销毁昂贵\n- 频繁操作（创建与销毁）造成性能低\n- 线程池的出现使得便于对 Python 的线程进行管理、提高性能\n\n## ThreadPoolExecutor\n\n- `submit()`告诉线程池执行者，启动一个任务，返回值为 future 对象，包含执行结果或者异常\n  - `result()`\n  - `exception()`\n- `map()`执行多个任务\n- `shutdown()`关闭线程池\n\n```python\ndef task(name: str):\n    print(f'{name} started')\n    time.sleep(1)\n    print(f'{name} processed')\n    return f\"{name} finished\"\n\n\nwith ThreadPoolExecutor() as executor:\n    result_1 = executor.submit(task, 'task1')\n    result_2 = executor.submit(task, 'task2')\n    print(result_1.result())\n    print(result_2.result())\n\nwith ThreadPoolExecutor() as executor:\n    result_1 = executor.map(task, ['task3', 'task4'])\n    print(list(result_1))\n```\n\n# 多进程\n\n- `multiprocessing`模块用于提供多进程的实现\n  - `multiprocessing.Process`用于创建进程\n  - `start()`用于启动进程\n  - `join()`用于等待进程结束\n\n```python\ndef task(name: str, num: int):\n    print(f'{name}:{num}->start process\\n', end=\"\")\n    res = 0\n    for i in range(num):\n        res += i\n    print(f'{name}:{num}->end process, result:{res}\\n', end=\"\")\n\n\ndef process_1():\n    task_process = multiprocessing.Process(target=task, args=(\"task1\", 10))\n    task_process.start()\n    task_process.join()\n    print(\"process_1 end\")\n\n\ndef process_2():\n    task_process_args = [(\"task2\", 10), (\"task3\", 10), (\"task4\", 10)]\n    task_processes = [multiprocessing.Process(target=task, args=arg) for arg in task_process_args]\n    for task_process in task_processes:\n        task_process.start()\n    for task_process in task_processes:\n        task_process.join()\n    print(\"process_2 end\")\n\n\nif __name__ == '__main__':\n    process_1()\n    process_2()\n```\n\n可以使用`ps -ef | grep python`来查看是否有这么多进程\n\n# 进程池\n\n- 进程的创建与销毁同样是昂贵的\n- 频繁地操作（创建与销毁）对性能影响很大\n\n## ProcessPoolExecutor\n\n- `submit()`告诉进程池执行者，启动一个任务，返回值为 future 对象，包含执行结果或者异常\n  - `result()`\n  - `exception()`\n- `map()`执行多个进程\n- `shutdown()`关闭进程池\n\n```python\ndef task(name: str):\n    print(f'{name} started')\n    time.sleep(1)\n    print(f'{name} processed')\n    return f\"{name} finished\"\n\n\nif __name__ == '__main__':\n    with ProcessPoolExecutor() as executor:\n        result_1 = executor.map(task, ['task3', 'task4'])\n        print(list(result_1))\n```\n\n> 更新: 2024-05-16 13:18:58  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/man8qrk3tugq2v5t>\n","tags":["Python"],"categories":["Python进阶"]},{"title":"Python - 正则表达式","url":"/blog/3023538148/","content":"\n# 正则表达式\n\n- 正则是用于进行字符串内容的`验证`、`匹配`或者`搜索`\n- 是一个相对独立的表达方式\n- 需要引入`re`模块 `import re`\n\n常用的几种 re 方法\n\n- `re.search()`\n\n```python\npattern = r\"\\d{4}\"\ntext = \"I was born in 1998\"\nresult = re.search(pattern, text)\nprint(result)\n```\n\n- `re.match()`\n\n```python\npattern = r\"\\d{4}\"\ntext = \"1998 year, I was born\"\nresult = re.match(pattern, text)\nprint(result)\n```\n\n- `re.fullmatch()`\n\n```python\npattern = r\"\\d{4}\"\ntext = \"1998\"\nresult = re.fullmatch(pattern, text)\nprint(result)\n```\n\n- `re.findall()`\n\n```python\npattern = r\"\\d{4}\"\ntext = \"1998 2 22, I was born. My sister was born in 2006\"\nresult = re.findall(pattern, text)\nprint(result)\n```\n\n- `re.finditer()`\n\n```python\npattern = r\"\\d{4}\"\ntext = \"1998 2 22, I was born. My sister was born in 2006\"\nresult = re.finditer(pattern, text)\nfor res in result:\n\tprint(res)\n```\n\n- `re.compile()` 可以直接生成一个 re 对象，直接调用相应方法对字符串进行校验\n\n```python\n1998 2 22, I was born. My sister was born in 2006pattern_str = r\"\\d{4}\"\npattern_obj = re.compile(pattern_str)\nprint(pattern_obj.search(\"I was born in 1998\"))\nprint(pattern_obj.findall(\"1998 2 22, I was born. My sister was born in 2006\"))\n```\n\n> 更新: 2024-01-11 23:12:10  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/qegza164lpgh11hq>\n","tags":["Python"],"categories":["Python进阶"]},{"title":"Python - dataclass-数据类","url":"/blog/267352415/","content":"\n# dataclass-数据类\n\n在通常我们设计一个类时，需要初始化一些属性，如：\n\n```python\nclass Car:\n    def __init__(self, origin, auto):\n        self.origin = origin\n        self.auto = auto\n```\n\n- 当有了 dataclass 后就可以使用装饰器`@dataclass`来实现\n\n```python\n@dataclass\nclass Car:\n    origin: str\n    auto: bool\n\nporsche = Car(\"Germany\", True)\nprint(porsche)\nbenz = Car(\"Germany\", True)\nprint(benz)\n# eq方法也给我们提供了\nprint(porsche == benz)\n```\n\n- dataclass 给属性提供缺省值\n\n```python\n@dataclass\nclass Car:\n    origin: str\n    auto: bool = True\n\nporsche = Car(\"Germany\")\nprint(porsche)\n```\n\n- 创建一个不可变对象\n\n```python\n@dataclass(frozen=True)\nclass Car:\n    origin: str\n    auto: bool\n\nporsche = Car(\"Germany\", True)\nporsche.auto = False   # 报错\n```\n\n- `field()`定制属性，可以看一下 field 的源代码\n\n```python\n@dataclass(frozen=True)\nclass Car:\n    origin: str\n    auto: bool = True\n    age: int = field(default=5, init=False, repr=False)\n\n\tdef __post_init__(self):\n        self.auto = self.age < 5\n\nporsche = Car(\"Germany\", False)\nprint(porsche)\n```\n\n- 排序，`order=True`默认按照第一个属性进行排序，\n\n```python\n@dataclass(order=True)\nclass Car:\n    origin: str\n    auto: bool\n\nporsche = Car(\"Germany\", True)\nbenz = Car(\"Germany\", False)\ncars = [porsche, benz]\nsorted(cars)\nprint(cars)\n```\n\n- 当想依照另一个属性进行排序时，有两种方法\n  - 在类中创建一个不参与 init 与 repr 的变量，并放到第一个参数位置\n\n```python\n@dataclass(order=True)\nclass Car:\n    sortIndex: int = field(init=False, repr=False)\n    origin: str\n    age: int\n    auto: bool = True\n\n\tdef __post_init__(self):\n        self.sortIndex = self.age\n\nporsche = Car(\"Germany\", 4, True)\nbenz = Car(\"Germany\", 5, False)\ncars = [porsche, benz]\ncars = sorted(cars)\nprint(cars)\n```\n\n    - 另一个方法就是直接使用`sort()`方法中的`key=operator.attrgetter('属性名')`来实现按照哪一个属性进行排序`建议使用这个`\n\n```python\n@dataclass()\nclass Car:\n    origin: str\n    age: int\n    auto: bool = True\n\nporsche = Car(\"Germany\", 4, True)\nbenz = Car(\"Germany\", 5, False)\ncars = [porsche, benz]\ncars.sort(key=operator.attrgetter('age'))\nprint(cars)\n```\n\n> 更新: 2024-01-10 21:24:23  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/ehmlkmargqm4bti5>\n","tags":["Python"],"categories":["Python进阶"]},{"title":"Python - metaclass-元类","url":"/blog/1848519379/","content":"\n# metaclass-元类\n\n- metaclass 就是一个用来创建其他 class 的类\n- type 类就是所有 class 默认的 metaclass\n- 可以在定义类时，声明 metaclass\n\n```python\nclass Car(type):\n    @staticmethod\n    def __new__(mcs, *args):\n        class_ = super().__new__(mcs, *args)\n        class_.auto = True\n        return class_\n\nclass Porsche(object, metaclass=Car):\n    pass\n\nprint(Porsche.auto)\n```\n\n- 依据传入的关键字参数，对属性进行扩展\n\n```python\nclass Car(type):\n    @staticmethod\n    def __new__(mcs, *args， **kwargs):\n        class_ = super().__new__(mcs, *args)\n        if kwargs:\n            for key, value in kwargs.items():\n                setattr(class_, key, value)\n        return class_\n\nclass Porsche(object, metaclass=Car, auto = True, origin = \"Germany\"):\n    pass\n\nprint(Porsche.auto)\nprint(Porsche.origin)\n```\n\n- 在元类中获取使用了元类的类的属性\n\n```python\nclass PropUtil:\n    def __init__(self,attr):\n        self._attr = f\"_{attr}\"  # 避免递归调用\n\n\tdef get(self,obj):\n        if not hasattr(obj, self._attr):\n            return None\n        return getattr(obj, self._attr)\n\n\tdef set(self,obj,value):\n        setattr(obj,self._attr, value)\n\nclass Car(type):\n    @staticmethod\n    def __new__(mcs, *args， **kwargs):\n        class_ = super().__new__(mcs, *args)\n        for attr in class_.attrs:\n            prop = PropUtil(attr)\n            pObj = property(fget=prop.get, fset=prop.set)\n            setattr(class_, attr, pObj)\n        return class_\n\nclass Porsche(object, metaclass=Car):\n    attrs = [\"origin\", \"auto\"]\n\npanamera = Porsche()\nprint(panamera.auto)\npanamera.auto = True\nprint(panamera.auto)\n\n# 使用装饰器实现\ndef car(cls):\n    return Car(cls.__name__, cls.__bases__, dict(cls.__dict__))\n\n@car\nclass Benz:\n    attrs = [\"origin\", \"auto\"]\n\nbenz = Benz()\nprint(benz.auto)\nprint(benz.origin)\nbenz.auto = False\nprint(benz.auto)\n```\n\n> 更新: 2024-01-10 00:47:48  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/ed59q8lf72v6ibfn>\n","tags":["Python"],"categories":["Python进阶"]},{"title":"Python - type类","url":"/blog/2733526461/","content":"\n# type 类\n\n- 任何 class 在内存中 就是一个 type()类的对象\n\n```python\nclass Person:\n    def hello(self):\n        print(\"hello world!\")\n\nprint(type(Person))\nprint(isinstance(Person,type))\n```\n\n这种一般是在写源码时还不知道需求，不知道需要具体创建什么样的类，从而在运行时动态创建类出来\n\n- 可以使用 type()来创建其他 class -> `type(class_name, parents, class_dict)`\n- 可以使用 type()来动态创建 class\n\n```python\nclass_content = \"\"\"\ndef hello(self):\n\tprint(\"hello myclass...\")\n\"\"\"\n\nclass_dict = {}\nexec(class_content, globals(), class_dict)\n\ntype(\"myClass\", (object,), class_dict)\n\nmc = myClass()\nmc.hello()\n```\n\n> 更新: 2024-01-09 21:20:07  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/qvpca56gofn7sipm>\n","tags":["Python"],"categories":["Python进阶"]},{"title":"Python - 装饰器","url":"/blog/2025075349/","content":"\n# 装饰器\n\n# 装饰器 decorator\n\n在不改变原有函数代码，且保持原函数调用方法不变的情况下，给原函数增加新的功能（或者给类增加属性和方法）\n\n## 装饰器定义与原型\n\n- 核心思想\n  - 用一个函数（或者类）去装饰一个旧函数（或者类），造出一个新函数（或者新类）\n- 语法规则\n  - 在原有的函数上加上@符号，装饰器会把下面的函数当做参数传递到装饰器中，@符又被称为语法糖\n- 应用场景\n  - 引入日志，函数执行时间的统计，执行函数前的准备工作，执行函数后的处理工作，权限校验，缓存等场景中\n\n```python\n# 装饰器的原型，利用闭包实现\ndef outer(f):\n    def inner():\n        print('这是inner函数的语句1')\n        f()\n        print('这是inner函数的语句2')\n\n    return inner\n\n\ndef demo():\n    print('这是demo函数的语句')\n\n\nobj = outer(demo)\nobj()\n# 这是inner函数的语句1\n# 这是demo函数的语句\n# 这是inner函数的语句2\n\nprint()\n\n# 改为装饰器的定义\n# 此处等同于 demo2=outer(demo2)\n\n@outer\ndef demo2():\n    print('这是使用装饰器的demo')\n\ndemo2()\n# 这是inner函数的语句1\n# 这是将要使用装饰器的demo\n# 这是inner函数的语句2\n```\n\n## 统计函数执行时间\n\n```python\nimport time\n\n\ndef cal_time(f):\n    def inner():\n        time1 = time.perf_counter()\n        f()\n        time2 = time.perf_counter()\n        elapsed = time2 - time1\n        print(f'函数运行了{elapsed}s')\n        return elapsed\n\n    return inner\n\n\n@cal_time\ndef func():\n    for i in range(5):\n        time.sleep(0.1)\n    print('func运行结束')\n\n\nfunc()\n# func运行结束\n# 函数运行了0.5152184049999999s\n```\n\n## @wraps\n\n```python\nimport time\n\ndef cal_time(f):\n    @wraps(f)\n    def inner():\n        time1 = time.perf_counter()\n        f()\n        time2 = time.perf_counter()\n        print(f'函数运行了{time2 - time1}s')\n\n    return inner\n\n@cal_time\ndef func():\n    for i in range(5):\n        time.sleep(0.1)\n    print('func运行结束')\n\nprint(func)\nprint(func.__name__)\n```\n\n## 装饰器的嵌套\n\n```python\n# 装饰器的嵌套\n\ndef outer1(func):\n    def inner1():\n        print('装饰器1————1')\n        func()\n        print('装饰器1————2')\n\n    return inner1\n\n\ndef outer2(func):\n    def inner2():\n        print('装饰器2————3')\n        func()\n        print('装饰器2————4')\n\n    return inner2\n\n\n@outer2\n@outer1\ndef demo():\n    print('这是demo函数————5')\n\n\ndemo()\n# 装饰器2————3\n# 装饰器1————1\n# 这是demo函数————5\n# 装饰器1————2\n# 装饰器2————4\n```\n\n## 装饰带有参数的函数\n\n```python\ndef outer(func):\n    def inner(name):\n        print('关于谁最美丽这件事')\n        func(name)\n\n    return inner\n\n\n@outer\ndef love(name):\n    print(f'{name}女士最美丽')\n\n\nlove('duandaun')\n# 关于谁最美丽这件事\n# duandaun女士最美丽\n```\n\n```python\nimport time\n\ndef cal_time(f):\n    def inner(li):\n        t1 = time.perf_counter()\n        f(li)\n        t2 = time.perf_counter()\n        print(f'函数{f}执行了{t2-t1}s')\n    return inner\n\n@cal_time\ndef sort_fun(li):\n    for i in range(len(li)-1):\n        for j in range(len(li)-1-i):\n            if li[j] > li[j+1]:\n                li[j],li[j+1] = li[j+1],li[j]\n    return li\n\n\nli = [5,4,3,2,1]\nsort_fun(li)\nprint(li)\n```\n\n## 装饰带有多参数的函数\n\n```python\ndef outer(func):\n    def inner(who, name, *args, **kwargs):\n        print(f'{name}回来啦')\n        func(who, name, *args, **kwargs)\n\n    return inner\n\n\n@outer\ndef date(who, name, *args, **kwargs):\n    print(f'{who}今天和{name}出门约会啦')\n    print(f'我们吃了{args[0]}')\n    print(f'还一起看了电影{kwargs}')\n\n\ndate('huanghuang', 'duandaun', '烤肉', movie='笨小孩')\n# duandaun回来啦\n# huanghuang今天和duandaun出门约会啦\n# 我们吃了烤肉\n# 还一起看了电影{'movie': '笨小孩'}\n```\n\n## 带有参数的装饰器\n\n```python\n# 如果你的装饰器需要有参数，那么给当前的装饰器套一个壳，用于接收装饰器的参数\ndef extend_m(var):\n    def outer(func):\n        def inner1(name):\n            print(f'今天和{name}一起吃烤肉')\n            func(name)\n\n        def inner2(name):\n            print(f'今天和{name}一起吃火锅')\n            func(name)\n\n        if var == '烤肉':\n            return inner1\n        else:\n            return inner2\n\n    return outer\n\n\n@extend_m('烤肉')\ndef date(name):\n    print(f'和{name}约会啦，很开心!')\n\n\ndate('duanduan')\n# 今天和duanduan一起吃烤肉\n# 和duanduan约会啦，很开心!\n```\n\n## 类装饰器修饰函数\n\n```python\n# 类装饰器装饰函数\nclass Outer():\n\n    # 魔术方法：当把该类的对象当做函数调用时，自动触发obj()\n    def __call__(self, func):\n        self.func = func\n        return self.inner\n\n    def inner(self, who):\n        print(f'和{who}一起看电影啦')\n        self.func(who)\n        print('约会吃烤肉啦哇')\n\n\n# 注意这里应该是Outer()\n# Outer() ===> obj,  @obj ===>obj(date) , call （date）===> inner()\n@Outer()\ndef date(who):\n    print(f'今天和{who}约会啦')\n\n\ndate('duanduan')\n# 和duanduan一起看电影啦\n# 今天和duanduan约会啦\n# 约会吃烤肉啦哇\n\nclass Outer:\n    def __init__(self,func):\n        self.func = func\n\n\tdef __call__(self,*args, **kwargs):\n        print(\"今天出门啦\")\n        result = self.func(*args, **kwargs)\n        print(\"今天结束啦\")\n        return result\n\n@Outer\ndef date(who):\n    print(f\"今天和{who}出门约会啦\")\n    print(\"出门看电影、吃烤肉啦\")\n    return success\n\nprint(date(\"duanduan\"))\n```\n\n## 带有参数的类装饰器\n\n```python\nclass Outer:\n    def __init__(self, name):\n        self.name = name\n\n\tdef __call__(self,func):\n        def inner(*args, **kwargs):\n        \tprint(\"今天出门啦\")\n            print(f\"和{self.name}出门约会啦\")\n        \tresult = func(*args, **kwargs)\n        \tprint(\"今天结束啦\")\n        \treturn result\n        return inner\n\n@Outer(\"duanduan\")\ndef date(place:str):\n    print(f\"今天去{place}\")\n    print(\"出门看电影、吃烤肉啦\")\n    return success\n\nprint(date(\"北京\"))\n```\n\n## 用类方法装饰函数\n\n```python\nclass Outer():\n    def newinner(func):\n        Outer.func = func  # 把传递进来的函数定义为类方法\n        return Outer.inner  # 同时返回一个新的类方法\n\n    def inner(who):\n        print(f'和{who}一起看电影啦')\n        Outer.func(who)\n        print(f'约会吃烤肉啦哇')\n\n\n@Outer.newinner  # Outer.newinner(date) ===> Outer.inner\ndef date(who):\n    print(f'今天和{who}约会啦')\n\n\ndate('duanduan')\n```\n\n## 使用函数装饰器装饰类\n\n```python\ndef extend_c(cls):\n    def func2():\n        print('在装饰器中扩展的新方法func2')\n\n    cls.func2 = func2  # 将刚才定义的方法赋值给类\n    cls.name = '在装饰器中追加的新属性'\n\n    # 返回时，把追加类新成员的类返回\n    return cls\n\n\n@extend_c     # extend_c(Demo) ===> cls  ===> Demo\nclass Demo():\n    # 定义一个类方法\n    def func():\n        print('Demo类中的func方法')\n\n\nDemo.func()  # Demo类中的func方法\nDemo.func2()  # 在装饰器中扩展的新方法func2\nprint(Demo.name)  # 在装饰器中追加的新属性\n```\n\n## 使用类装饰器装饰类\n\n```python\nclass Extend_c():\n    def __call__(self, cls):\n        self.cls = cls\n        return self.newfunc\n\n    def newfunc(self):\n        self.cls.name = '在类装饰器中追加的新属性'\n        self.cls.func2 = self.func2\n        # 返回\n        return self.cls()\n\n    def func2(self):\n        print('在类装饰器中追加的新方法 func2')\n\n\n@Extend_c()  # Extend_c() ===> obj ===> @obj(Demo)  ===> __call__(Demo) ===> newfunc()\nclass Demo():\n    # 定义一个普通的方法\n    def func(self):\n        print('Demo类中的一个普通的方法')\n\n\nobj = Demo()\nobj.func()  # Demo类中的一个普通的方法\nobj.func2()  # 在类装饰器中追加的新方法 func2\nprint(obj.name)  # 在类装饰器中追加的新属性\nprint(obj)  # <__main__.Demo object at 0x10e77ddd0>\n```\n\n> 更新: 2024-05-16 12:24:07  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/fas3gy4akb8thh3c>\n","tags":["Python"],"categories":["Python进阶"]},{"title":"Python - 上下文管理器","url":"/blog/4030205442/","content":"\n# 上下文管理器\n\n**什么是上下文管理器**\n\n- context manager\n- 是一个对象\n- 定义了运行时的上下文\n- 使用`with`语句来执行\n\n格式：\n\n```python\nwith context as ct:\n    # 对上下文对象ct的使用\n\n# 上下文对象已经被清除\n```\n\n文件的读写\n\n```python\n# 不用上下文管理器\nfileObj = open(\"file.txt\",\"w\")\nfileObj.write(\"This is my file\")\nfileObj.close()\n\n# 使用上下文管理器\nwith open(\"file.txt\",\"w\") as fileObj:\n    fileObj.write(\"This is my file\")\n```\n\n- 使用`with`语句，会在代码块结束时，自动帮我们关闭文件，无需手动触发 close()方法\n- 在`with`语句，开始前会触发`__enter__(self)`\n- 在`with`语句结束后会触发`__exit__(self, exc_type, exc_val, exc_tb)`\n- `as`后面的对象 实际是在调用完`__enter__`后获取到的返回值\n\n使用上下文管理器实现一个耗时计算函数\n\n```python\n# 不使用上下文管理\nnums = [i for i in range(10000)]\nrandom.shuffle(nums)\nstart = time.perf_counter()\nsorted(nums)\nend = time.perf_counter()\nelapsed = end - start\nprint(elapsed)\n\n# 使用上下文管理\n# 创建一个Timer 上下文管理类\nclass Timer:\n    def __init__(self):\n        self.elapsed = 0\n\n\tdef __enter__(self):\n        self.start = time.perf_counter()\n        return self\n\n\tdef __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time.perf_counter()\n        self.elapsed = self.end - self.start\n\nwith Timer() as timer:\n    sorted(nums)\n\nprint(timer.elapsed)\n```\n\n- 应用场景：\n  - 文件的开-关\n  - 加锁-释放\n  - 启动-停止\n\n> 更新: 2024-01-09 02:16:57  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/ofmfwtiq1h6wysmp>\n","tags":["Python"],"categories":["Python进阶"]},{"title":"PyMySQL","url":"/blog/2532370537/","content":"\n# PyMySQL\n\n# Python 操作 MySQL\n\n使用 pymysql 进行 python 与 mysql 的操作\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nimport pymysql\n\nconn = pymysql.connect(user='root', password='980226', host='localhost', database='tlxy', charset='utf8mb4',\n                       cursorclass=pymysql.cursors.DictCursor)\ntry:\n    cursor = conn.cursor()\n\n    sql = 'select * from users'\n    cursor.execute(sql)\n    conn.commit()\n\n    data = cursor.fetchall()\n\nexcept:\n    conn.rollback()\nfinally:\n    conn.close()\n\nprint(data)\n```\n\n# Web 版的在线留言板\n\n## 1.flask 框架实现 web 的基本搭建\n\n### 安装 flask 框架\n\n- **pip3 install flask=1.1.1**\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016399656-5931006c-9b08-45ab-8cf6-71a685727c0c.png)\n\n### 使用 flask 框架实现 web 的基本搭建\n\n由于使用的是 flask 1.1.1 的版本所以会报错一个东西 只需要在命令行中键入 **pip3 install itsdangerous==2.0.1**\n\n新建一个 flask 代码\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello, World!\"\n\nif __name__ == '__main__':\n    app.run(debug=False,host='127.0.0.1',port='8080')\n```\n\n运行代码后\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016399763-bf7f22a8-06be-40eb-a7f1-0639b65f0446.png)\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016399737-7ab71059-2fe2-4191-8d6f-0cb6ec668443.png)\n\n在浏览器中输入相应的 ip 及端口号\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016399646-f46e3515-65a5-42e7-90cf-5a4d710ee62b.png)\n\n修改一下代码变成这样子\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello, World!\"\n\n@app.route(\"/love\")\ndef love():\n    return \"love duandaun\"\n\nif __name__ == '__main__':\n    app.run(debug=False,host='127.0.0.1',port='8080')\n```\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016399695-815c41c0-994f-46bc-ac1a-317c59329557.png)\n\n## 2.留言板数据库的设计与创建\n\n- 留言板的数据需要包括 id nickname 昵称 info 留言信息 date 留言时间\n\n```plain\nCREATE TABLE lyb(\n    id int unsigned not null auto_increment primary key,\n    nickname varchar(6) not null,\n    info text not null,\n    date datetime not null\n)engine=Innodb default charset=utf8mb4;\n```\n\n- 添加测试数据\n\n```plain\nmysql> INSERT INTO lyb values(null,'duan','我要吃火锅!','2022-04-25 21:26:55');\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from lyb;\n+----+----------+------------------+---------------------+\n| id | nickname | info             | date                |\n+----+----------+------------------+---------------------+\n|  1 | duan     | 我要吃火锅!      | 2022-04-25 21:26:55 |\n+----+----------+------------------+---------------------+\n1 row in set (0.00 sec)\n\nmysql> INSERT INTO lyb values(null,'huang','走！我带你去','2022-04-25 21:30:10');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from lyb;\n+----+----------+--------------------+---------------------+\n| id | nickname | info               | date                |\n+----+----------+--------------------+---------------------+\n|  1 | duan     | 我要吃火锅!        | 2022-04-25 21:26:55 |\n|  2 | huang    | 走！我带你去       | 2022-04-25 21:30:10 |\n+----+----------+--------------------+---------------------+\n2 rows in set (0.00 sec)\n```\n\n- 封装 MySQL 连接，进行测试\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import Flask\nimport pymysql\n\napp = Flask(__name__)\n\n# 留言板列表\n@app.route(\"/\")\ndef hello():\n    # 1.获取所有的留言板数据\n\n    # 2.把数据分配到模板中（Html页面渲染）\n    data = model('select * from lyb')\n    print(data)\n\n    return \"Hello, World!\"\n\n# 封装MySQL操作方法\ndef model(sql):\n    conn = pymysql.connect(user='root', password='980226', host='localhost', database='tlxy', charset='utf8mb4',\n                           cursorclass=pymysql.cursors.DictCursor)\n    try:\n        cursor = conn.cursor()\n\n        row = cursor.execute(sql)\n        conn.commit()\n\n        # 返回结果，如果有数据则返回，没有数据则返回影响的行数\n        data = cursor.fetchall()\n        if data:\n            return data\n        else:\n            return row\n\n    except:\n        conn.rollback()\n    finally:\n        conn.close()\n\n\nif __name__ == '__main__':\n    app.run(debug=False,host='127.0.0.1',port='8080')\n```\n\n运行代码之后，可以看到网页的\"Hello, World!\"，还能在控制端看到\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016400416-a7b7cb05-dccf-4ea8-83e9-b7c5095c6000.png)\n\n## 3.web 留言板列表显示\n\n- 使用 flask 中的 **render_template** 渲染模板\n\n首先在当前项目路径下创建一个 Python package 名称为 **templates**\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016400473-d10eb8c7-1934-4121-bc31-454624e249c1.png)\n\n紧接着 在这个 package 下创建一个 **index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>留言板列表</title>\n  </head>\n  <body>\n    <h1 style=\"color: orangered\">Hello World</h1>\n  </body>\n</html>\n```\n\n使用 Python 的 render 测试一下\n\n```python\n# -*- coding:utf-8 -*-\n# Author: Zachary\nfrom flask import Flask,render_template\nimport pymysql\n\napp = Flask(__name__)\n\n# 留言板列表\n@app.route(\"/\")\ndef hello():\n    # 1.获取所有的留言板数据\n\n    # 2.把数据分配到模板中（Html页面渲染）\n    data = model('select * from lyb')\n\n    return render_template('index.html',data=data)\n\n# 封装MySQL操作方法\ndef model(sql):\n    conn = pymysql.connect(user='root', password='980226', host='localhost', database='tlxy', charset='utf8mb4',\n                           cursorclass=pymysql.cursors.DictCursor)\n    try:\n        cursor = conn.cursor()\n\n        row = cursor.execute(sql)\n        conn.commit()\n\n        # 返回结果，如果有数据则返回，没有数据则返回影响的行数\n        data = cursor.fetchall()\n        if data:\n            return data\n        else:\n            return row\n\n    except:\n        conn.rollback()\n    finally:\n        conn.close()\n\n\nif __name__ == '__main__':\n    app.run(debug=False,host='127.0.0.1',port='8080')\n```\n\n运行之后会出现错误\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016400459-c9739e57-a995-4f60-8569-a8d0bbe87994.png)\n\n安装一下这个 cryptography 库 **pip3 install cryptography**\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016400657-62eaecfd-bc59-4c3b-ac70-ae68f7098895.png)\n\n之后再运行代码\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016400684-b98cb91b-26a1-4de2-ba4f-4d267051ba99.png)\n\n- 举例 显示表格\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>留言板列表</title>\n  </head>\n  <body>\n    <center>\n      <h1 style=\"color: orangered\">Hello World</h1>\n      <table border=\"1\" width=\"800\">\n        <tr>\n          <th>ID编号</th>\n          <th>昵称</th>\n          <th>留言信息</th>\n          <th>留言时间</th>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>张三</td>\n          <td>我想吃火锅</td>\n          <td>2022-04-26 12:12:00</td>\n        </tr>\n      </table>\n    </center>\n  </body>\n</html>\n```\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016401433-2ca57f07-6075-4a53-9ffb-0229a4f75129.png)\n\n- html 中加入循环 显示数据库的数据\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>留言板列表</title>\n  </head>\n  <body>\n    <center>\n      <h1 style=\"color: darkred\">Hello World</h1>\n      <table border=\"1\" width=\"800\">\n        <tr>\n          <th>ID编号</th>\n          <th>昵称</th>\n          <th>留言信息</th>\n          <th>留言时间</th>\n        </tr>\n        {% for i in data %}\n        <tr>\n          <td>{{ i.id }}</td>\n          <td>{{ i.nickname }}</td>\n          <td>{{ i.info }}</td>\n          <td>{{ i.date }}</td>\n        </tr>\n        {% endfor %}\n      </table>\n    </center>\n  </body>\n</html>\n```\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016401544-31ad72f1-3304-4c4a-9bf0-5372e52b66d4.png)\n\n## 4.web 留言板的添加表单\n\n- 首先创建一个新的 html --> add.html\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>添加留言</title>\n  </head>\n  <body>\n    <center>\n      <table>\n        <form action=\"/insert\" method=\"post\">\n          <tr>\n            <td>昵称：</td>\n            <td><input type=\"text\" name=\"nickname\" /></td>\n          </tr>\n          <tr>\n            <td>留言信息：</td>\n            <td>\n              <textarea name=\"info\" id=\"\" cols=\"30\" rows=\"10\">\n请留下你的信息\n\n                        </textarea\n              >\n            </td>\n          </tr>\n          <tr>\n            <th colspan=\"2\">\n              <button>添加</button>\n            </th>\n          </tr>\n        </form>\n      </table>\n    </center>\n  </body>\n</html>\n```\n\n- 接着在代码中添加视图\n\n```python\n# 定义视图 显示留言添加的页面\n@app.route(\"/add\")\ndef add():\n    return render_template('add.html')\n```\n\n- 修改 index.html，添加一个发布按钮\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>留言板列表</title>\n  </head>\n  <body>\n    <center>\n      <h1 style=\"color: darkred\">留言列表</h1>\n      <h3><a href=\"/add\">发布留言</a></h3>\n      <table border=\"1\" width=\"800\">\n        <tr>\n          <th>ID编号</th>\n          <th>昵称</th>\n          <th>留言信息</th>\n          <th>留言时间</th>\n        </tr>\n        {% for i in data %}\n        <tr>\n          <td>{{ i.id }}</td>\n          <td>{{ i.nickname }}</td>\n          <td>{{ i.info }}</td>\n          <td>{{ i.date }}</td>\n        </tr>\n        {% endfor %}\n      </table>\n    </center>\n  </body>\n</html>\n```\n\n- 添加一个视图函数，实现填写完表单提交之后的跳转\n\n```python\n# 定义视图函数，接收表单数据，完成数据的入库\n@app.route('/insert',methods=['POST'])\ndef insert():\n    # 1.接收表单数据\n    data = request.form.to_dict()\n    print(data)\n\n    # 2.把数据添加到数据库\n\n    # 3.成功后页面跳转回到留言列表中\n    return '接收表单数据，成功！'\n```\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016401615-d74dd2b6-fecf-4b43-b916-b6b8f0af45f5.png)\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704016401685-199b3779-3a14-48c9-b058-bba2dba3e900.png)\n\n## 5.web 留言板的留言入库\n\n定义视图，提供一个添加留言的链接\n\n```python\n# 定义视图 显示留言添加的页面\n@app.route(\"/add\")\ndef add():\n    return render_template('add.html')\n\n# 定义视图函数，接收表单数据，完成数据的入库\n@app.route('/insert',methods=['POST'])\ndef insert():\n    # 1.接收表单数据\n    data = request.form.to_dict()\n\n    # 2.处理数据 加入时间\n    data['date'] = time.strftime('%Y-%m-%d %H:%M:%S')\n\n    # 3.把数据添加到数据库\n    sql = f\"insert into lyb values(null ,'{data['nickname']}','{data['info']}','{data['date']}')\"\n    res = model(sql)\n\n    # 4.成功后页面跳转回到留言列表中\n    if res:\n        # 跳转到列表页\n        return '<script>alert(\"留言成功\");location.href=\"/\"</script>'\n    else:\n        # 跳转到添加页\n        return '<script>alert(\"留言发布失败\");location.href=\"/add/\"</script>'\n```\n\nadd.html 修改为\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>添加留言</title>\n  </head>\n  <body>\n    <center>\n      <table>\n        <form action=\"/insert\" method=\"post\">\n          <tr>\n            <td>昵称：</td>\n            <td><input type=\"text\" name=\"nickname\" /></td>\n          </tr>\n          <tr>\n            <td>留言信息：</td>\n            <td>\n              <textarea name=\"info\" id=\"\" cols=\"30\" rows=\"10\">\n请留下你的信息</textarea\n              >\n            </td>\n          </tr>\n          <tr>\n            <th colspan=\"2\">\n              <button>添加</button>\n            </th>\n          </tr>\n        </form>\n      </table>\n    </center>\n  </body>\n</html>\n```\n\nindex.html 修改为\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>留言板列表</title>\n  </head>\n  <body>\n    <center>\n      <h1 style=\"color: darkred\">留言列表</h1>\n      <h3><a href=\"/add\">发布留言</a></h3>\n      <table border=\"1\" width=\"800\">\n        <tr>\n          <th>ID编号</th>\n          <th>昵称</th>\n          <th>留言信息</th>\n          <th>留言时间</th>\n        </tr>\n        {% for i in data %}\n        <tr>\n          <td>{{ i.id }}</td>\n          <td>{{ i.nickname }}</td>\n          <td>{{ i.info }}</td>\n          <td>{{ i.date }}</td>\n        </tr>\n        {% endfor %}\n      </table>\n    </center>\n  </body>\n</html>\n```\n\n![]()\n\n![]()\n\n## 6.web 留言板的删除\n\n添加一个删除操作\n\n```python\n# 定义视图函数，接收id，完成数据删除\n@app.route('/delete')\ndef delete():\n    # 1.接收id\n    id = request.args.get('id')\n    # 2.准备sql语句\n    sql = f'delete from lyb where id = {id}'\n    # 3.执行sql语句\n    res = model(sql)\n    # 4.判断结果跳转\n    if res:\n        # 跳转到列表页\n        return '<script>alert(\"留言删除成功\");location.href=\"/\"</script>'\n    else:\n        # 删除失败\n        return '<script>alert(\"留言删除失败\");location.href=\"/\"</script>'\n```\n\n再修改一下 index.html\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>留言板列表</title>\n  </head>\n  <body>\n    <center>\n      <h1 style=\"color: darkred\">留言列表</h1>\n      <h3><a href=\"/add\">发布留言</a></h3>\n      <table border=\"1\" width=\"800\">\n        <tr>\n          <th>ID编号</th>\n          <th>昵称</th>\n          <th>留言信息</th>\n          <th>留言时间</th>\n          <th>操作</th>\n        </tr>\n        {% for i in data %}\n        <tr>\n          <td>{{ i.id }}</td>\n          <td>{{ i.nickname }}</td>\n          <td>{{ i.info }}</td>\n          <td>{{ i.date }}</td>\n          <td><a href=\"/delete?id={{ i.id }}\">删除</a></td>\n        </tr>\n        {% endfor %}\n      </table>\n    </center>\n  </body>\n</html>\n```\n\n![]()\n\n![]()\n\n> 更新: 2024-01-23 06:41:07  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/gbi35gelzgfknekv>\n","tags":["Python","MySQL"],"categories":["Python MySQL"]},{"title":"DML 与 DQL","url":"/blog/2739483575/","content":"\n# DML 与 DQL\n\n# DML 操作-数据的增删改\n\n## 添加数据\n\n格式 **insert into 表名[(字段列表)] values(值列表);**\n\n```plain\n-- 标准添加（指定所有字段，给定所有的值）\nmysql> insert into users(id,name,age,gender) values(4,'duan',23,'女');\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n+----+--------+------+--------+\n4 rows in set (0.00 sec)\n\n-- 指定部分字段添加值\nmysql> insert into users(name,age) values('zach',23);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n|  5 | zach   |   23 | NULL   |\n+----+--------+------+--------+\n5 rows in set (0.00 sec)\n\n-- 不指定字段值添加\nmysql> insert into users values(null,'user',18,'男');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n|  5 | zach   |   23 | NULL   |\n|  6 | user   |   18 | 男     |\n+----+--------+------+--------+\n6 rows in set (0.00 sec)\n\n-- 批量添加值\nmysql> insert into users values\n    -> (null,'stu1',16,'女'),\n    -> (null,'stu2',16,'男'),\n    -> (null,'stu3',16,'女');\nQuery OK, 3 rows affected (0.01 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n|  5 | zach   |   23 | NULL   |\n|  6 | user   |   18 | 男     |\n|  7 | stu1   |   16 | 女     |\n|  8 | stu2   |   16 | 男     |\n|  9 | stu3   |   16 | 女     |\n+----+--------+------+--------+\n9 rows in set (0.00 sec)\n```\n\n## 修改数据\n\n格式 **update 表名 set 字段 1=值 1，字段 2=值 2 (where 条件);** 不加条件默认修改所有的\n\n```plain\n-- 将id为6的age修改为25，gender改为女\nmysql> update users set age=25,gender='女' where id=6;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n|  5 | zach   |   23 | NULL   |\n|  6 | user   |   25 | 女     |\n|  7 | stu1   |   16 | 女     |\n|  8 | stu2   |   16 | 男     |\n|  9 | stu3   |   16 | 女     |\n+----+--------+------+--------+\n9 rows in set (0.00 sec)\n\n-- 将id为7,8,9的数据年龄+1\nmysql> update users set age=age+1 where id=7 or id=8 or id=9;\nQuery OK, 3 rows affected (0.00 sec)\nRows matched: 3  Changed: 3  Warnings: 0\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n|  5 | zach   |   23 | NULL   |\n|  6 | user   |   25 | 女     |\n|  7 | stu1   |   17 | 女     |\n|  8 | stu2   |   17 | 男     |\n|  9 | stu3   |   17 | 女     |\n+----+--------+------+--------+\n9 rows in set (0.00 sec)\n```\n\n## 删除数据\n\n格式 **delete from 表名 (where 条件);** 不写条件就会删除表中所有数据\n\n```plain\n-- 删除users表中gender为空的数据\nmysql> delete from users where gender is NULL;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n|  6 | user   |   25 | 女     |\n|  7 | stu1   |   17 | 女     |\n|  8 | stu2   |   17 | 男     |\n|  9 | stu3   |   17 | 女     |\n+----+--------+------+--------+\n8 rows in set (0.00 sec)\n\n-- 删除users表中年龄在15到20之间的数据\nmysql> delete from users where age between 15 and 20;\nQuery OK, 3 rows affected (0.01 sec)\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n|  6 | user   |   25 | 女     |\n+----+--------+------+--------+\n5 rows in set (0.00 sec)\n```\n\n# DQL-MySQL 数据查询 SQL\n\n语法格式： **select 字段列表|\\* from 表名\\*\\***[where 条件]\\***\\*[group by 分组字段 [having 分组条件]]\\*\\***[order by 排序字段 排序规则]\\***\\*[limit 分页参数]**\n\n## 基础查询\n\n```plain\n-- 查询表中所有的列 所有数据\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n|  6 | user   |   25 | 女     |\n+----+--------+------+--------+\n5 rows in set (0.00 sec)\n\n-- 查询表中的指定字段\nmysql> select name,age from users;\n+--------+------+\n| name   | age  |\n+--------+------+\n| 段段   |   24 |\n| 黄黄   |   23 |\n| 图图   |    1 |\n| duan   |   23 |\n| user   |   25 |\n+--------+------+\n5 rows in set (0.00 sec)\n```\n\n## where 条件查询\n\n- 可以在 where 子句中指定任何条件\n- 可以使用 and or 等指定多个条件\n- where 条件也可以应用在 update 和 delete 语句的后面\n- where 子句类似程序语言中 if 条件，根据 MySQL 表中的字段值来进行数据的过滤\n\n```plain\n-- 查询users表中 age>20的数据\nmysql> select * from users where age > 20;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  4 | duan   |   23 | 女     |\n|  6 | user   |   25 | 女     |\n+----+--------+------+--------+\n4 rows in set (0.00 sec)\n\n-- 查询users表中，name是段段的数据\nmysql> select * from users where name = '段段';\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n+----+--------+------+--------+\n1 row in set (0.00 sec)\n\n-- 查询在users表中 年龄在22-24的数据\nmysql> select * from users where age between 22 and 24;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  4 | duan   |   23 | 女     |\n+----+--------+------+--------+\n3 rows in set (0.00 sec)\n\n-- 查询在users表中 年龄在22-24的女生数据\nmysql> select * from users where gender = '女' and age between 22 and 24;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  4 | duan   |   23 | 女     |\n+----+--------+------+--------+\n2 rows in set (0.01 sec)\n```\n\n### and 和 or 使用注意\n\n举个例子\n\n```plain\n-- 查询在users表中 年龄为22或23的女生信息\nmysql> select * from users where gender = '女' and age = 22 or age =23;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  2 | 黄黄   |   23 | 男     |\n|  4 | duan   |   23 | 女     |\n+----+--------+------+--------+\n2 rows in set (0.00 sec)\n```\n\n可以看出 实际查询结果并不符合要求，这时的结果是：查询年龄为 22 的人，或者年龄为 23 的女生\n\n- and 与 or 同时存在时，sql 语句执行的顺序是 and > or\n- 解决办法：实用小括号\n\n```plain\nmysql> select * from users where gender = '女' and (age = 22 or age =23);\n+----+------+------+--------+\n| id | name | age  | gender |\n+----+------+------+--------+\n|  4 | duan |   23 | 女     |\n+----+------+------+--------+\n1 row in set (0.00 sec)\n```\n\n### like 子句\n\n可以使用 like 语句进行某个字段的模糊搜索 **like 可以等价于 =** 可以使用 % 进行模糊匹配，**%可以代表任意字符** 可以使用 **\\_ 表示一个任意字符**\n\n```plain\n-- 查询姓名是duan的数据\nmysql> select * from users where name like 'duan';\n+----+------+------+--------+\n| id | name | age  | gender |\n+----+------+------+--------+\n|  4 | duan |   23 | 女     |\n+----+------+------+--------+\n1 row in set (0.00 sec)\n\n-- 查询姓名中 包含n字符的数据\nmysql> select * from users where name like '%n%';\n+----+------+------+--------+\n| id | name | age  | gender |\n+----+------+------+--------+\n|  4 | duan |   23 | 女     |\n+----+------+------+--------+\n1 row in set (0.00 sec)\n\n-- 查询姓名中姓段的数据\nmysql> select * from users where name like '段%';\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n+----+--------+------+--------+\n1 row in set (0.00 sec)\n\n-- 查询姓名中最后一个字为黄的\nmysql> select * from users where name like '%黄';\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  2 | 黄黄   |   23 | 男     |\n+----+--------+------+--------+\n1 row in set (0.00 sec)\n\n-- 查询姓名中 第二个字符为 n 的\nmysql> select * from users where name like '_u%';\n+----+------+------+--------+\n| id | name | age  | gender |\n+----+------+------+--------+\n|  4 | duan |   23 | 女     |\n+----+------+------+--------+\n1 row in set (0.00 sec)\n\n-- 查询姓名是 两个字符的数据\nmysql> select * from users where name like '__';\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n+----+--------+------+--------+\n3 rows in set (0.00 sec)\n```\n\n**注意：where 子句中的 like 的\\_或者% 进行模糊搜索时，效率不高**\n\n- 尽可能不去使用\\_或%\n- 如果需要使用，也尽可能不要把通配符放在开头处\n\n## MySQL 中的聚合函数（统计函数）\n\n- max()\n- min()\n- count()\n- sum()\n- avg()\n\n```plain\n-- 计算users表中 最大年龄，最小年龄，年龄和，平均年龄\nmysql> select max(age),min(age),sum(age),avg(age) from users;\n+----------+----------+----------+----------+\n| max(age) | min(age) | sum(age) | avg(age) |\n+----------+----------+----------+----------+\n|       25 |        1 |       96 |  19.2000 |\n+----------+----------+----------+----------+\n1 row in set (0.01 sec)\n\n-- 美化字段名\nmysql> select max(age) as max_age , min(age) min_age,sum(age) as sum_age,avg(age\n) avg_age from users;\n+---------+---------+---------+---------+\n| max_age | min_age | sum_age | avg_age |\n+---------+---------+---------+---------+\n|      25 |       1 |      96 | 19.2000 |\n+---------+---------+---------+---------+\n1 row in set (0.00 sec)\n\n-- 统计users表中数据量\nmysql> select count(*) from users;\n+----------+\n| count(*) |\n+----------+\n|        5 |\n+----------+\n1 row in set (0.05 sec)\n\nmysql> select count(id) from users;\n+-----------+\n| count(id) |\n+-----------+\n|         5 |\n+-----------+\n1 row in set (0.00 sec)\n```\n\n两个统计的区别\n\n- **count(\\*)** 按照表中所有的列进行数据统计，只要其中一列上有数据，就可以计算\n- **count(id)** 是按照指定的 id 字段进行统计，也可以使用别的字段进行统计，但是注意，如果指定的列上出现了 NULL 值，那么为 NULL 的这个数据不会被统计\n\n```plain\nmysql> update users set age = NULL where id = 6;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n|  6 | user   | NULL | 女     |\n+----+--------+------+--------+\n5 rows in set (0.00 sec)\n\nmysql> select count(age) from users;\n+------------+\n| count(age) |\n+------------+\n|          4 |\n+------------+\n1 row in set (0.01 sec)\n```\n\n## Group BY 分组\n\ngroup by 语句根据一个或者多个列对结果集进行分组 一般情况下，用于数据的统计或计算，配合聚合函数使用\n\n```plain\nmysql> update users set age = 28 where id = 6;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n|  4 | duan   |   23 | 女     |\n|  6 | user   |   28 | 女     |\n+----+--------+------+--------+\n5 rows in set (0.00 sec)\n\n-- 统计 users 表中 男生女生人数 使用分组统计\nmysql> select gender,count(*) from users group by gender;\n+--------+----------+\n| gender | count(*) |\n+--------+----------+\n| 女     |        4 |\n| 男     |        1 |\n+--------+----------+\n2 rows in set (0.00 sec)\n\n-- 分别统计每个班级的男女生人数\nmysql> select class_id,gender,count(*) from users group by class_id,gender;\n+----------+--------+----------+\n| class_id | gender | count(*) |\n+----------+--------+----------+\n|        1 | 女     |        1 |\n|        1 | 男     |        1 |\n|        2 | 女     |        2 |\n|        2 | 男     |        1 |\n+----------+--------+----------+\n4 rows in set (0.00 sec)\n```\n\n注意啦！一般在使用 group by 语句的时候，除了聚合函数，其他在 select 后面出现的字段列都需要出现在 group by 后面\n\n**having** 的用法 在分组聚合计算之后，对结果再一次进行过滤，类似于 where where 过滤的是行数据，having 过滤的是分组数据\n\n```plain\n-- 统计班级人数，并且找出班级超过2人的班级\nmysql> select class_id,count(*) from users group by class_id having count(*)>2;\n+----------+----------+\n| class_id | count(*) |\n+----------+----------+\n|        2 |        3 |\n+----------+----------+\n1 row in set (0.00 sec)\n```\n\n## order by 排序\n\n在 MySQL 中使用 select 的语句查询的数据结果是根据数据在底层文件的结构来排序的 首先不要依赖默认的排序，另外在需要排序时，要使用 order by 对返回的结果进行排序\n\n- **asc 升序**\n- **desc 降序**\n\n```plain\n-- 按照年龄对结果进行排序 从大到小\nmysql> select * from users order by age desc;\n+----+--------+------+--------+----------+\n| id | name   | age  | gender | class_id |\n+----+--------+------+--------+----------+\n|  6 | user   |   28 | 男     |        2 |\n|  1 | 段段   |   24 | 女     |        1 |\n|  2 | 黄黄   |   23 | 男     |        1 |\n|  4 | duan   |   23 | 女     |        2 |\n|  3 | 图图   |    1 | 女     |        2 |\n+----+--------+------+--------+----------+\n5 rows in set (0.01 sec)\n\n-- 按照年龄对结果进行排序 从小到大\nmysql> select * from users order by age;\n+----+--------+------+--------+----------+\n| id | name   | age  | gender | class_id |\n+----+--------+------+--------+----------+\n|  3 | 图图   |    1 | 女     |        2 |\n|  2 | 黄黄   |   23 | 男     |        1 |\n|  4 | duan   |   23 | 女     |        2 |\n|  1 | 段段   |   24 | 女     |        1 |\n|  6 | user   |   28 | 男     |        2 |\n+----+--------+------+--------+----------+\n5 rows in set (0.00 sec)\n\n-- 多个字段的排序，先按照age字段从小到大排序，age相同的情况下，按照id排序 从小到大\nmysql> select * from users order by age,id;\n+----+--------+------+--------+----------+\n| id | name   | age  | gender | class_id |\n+----+--------+------+--------+----------+\n|  3 | 图图   |    1 | 女     |        2 |\n|  2 | 黄黄   |   23 | 男     |        1 |\n|  4 | duan   |   23 | 女     |        2 |\n|  1 | 段段   |   24 | 女     |        1 |\n|  6 | user   |   28 | 男     |        2 |\n+----+--------+------+--------+----------+\n5 rows in set (0.00 sec)\n\n-- 多个字段的排序，按照age从小到大排序，在age相同的情况下 按照id从大到小排序\nmysql> select * from users order by age,id desc;\n+----+--------+------+--------+----------+\n| id | name   | age  | gender | class_id |\n+----+--------+------+--------+----------+\n|  3 | 图图   |    1 | 女     |        2 |\n|  4 | duan   |   23 | 女     |        2 |\n|  2 | 黄黄   |   23 | 男     |        1 |\n|  1 | 段段   |   24 | 女     |        1 |\n|  6 | user   |   28 | 男     |        2 |\n+----+--------+------+--------+----------+\n5 rows in set (0.00 sec)\n```\n\n## limit 数据分页\n\n- **limit n** 提取 n 条数据\n- **limit m,n** 跳过 m 条数据 提取 n 条数据\n\n```plain\n-- 查询users表中的前三条数据\nmysql> select * from users limit 3;\n+----+--------+------+--------+----------+\n| id | name   | age  | gender | class_id |\n+----+--------+------+--------+----------+\n|  1 | 段段   |   24 | 女     |        1 |\n|  2 | 黄黄   |   23 | 男     |        1 |\n|  3 | 图图   |    1 | 女     |        2 |\n+----+--------+------+--------+----------+\n3 rows in set (0.00 sec)\n\n-- 查询users表中跳过前两条，取三条数据\nmysql> select * from users limit 2,3;\n+----+--------+------+--------+----------+\n| id | name   | age  | gender | class_id |\n+----+--------+------+--------+----------+\n|  3 | 图图   |    1 | 女     |        2 |\n|  4 | duan   |   23 | 女     |        2 |\n|  6 | user   |   28 | 男     |        2 |\n+----+--------+------+--------+----------+\n3 rows in set (0.00 sec)\n\n-- limit的应用，\n-- 每页显示10条数据\nlimit 0,10\nlimit 10,10\nlimit 20,10\nlimit 30,10\n\n-- 提取 users表中年龄最大的三个用户数据\nmysql> select * from users order by age desc limit 3;\n+----+--------+------+--------+----------+\n| id | name   | age  | gender | class_id |\n+----+--------+------+--------+----------+\n|  6 | user   |   28 | 男     |        2 |\n|  1 | 段段   |   24 | 女     |        1 |\n|  2 | 黄黄   |   23 | 男     |        1 |\n+----+--------+------+--------+----------+\n3 rows in set (0.00 sec)\n```\n\n课后练习题\n\n1. class_id 为 2 的男女生人数\n2. 获取每个 class 平均年龄，并按照平均年龄从大到小排序\n3. 统计每个班级的人数 按照从大到小排序\n4. 获取班级人数最多的，班级 id 信息\n\n```plain\n-- 1\nmysql> select class_id,gender,count(*) from users where class_id = 2 group by ge\nnder;\n+----------+--------+----------+\n| class_id | gender | count(*) |\n+----------+--------+----------+\n|        2 | 女     |        2 |\n|        2 | 男     |        1 |\n+----------+--------+----------+\n2 rows in set (0.00 sec)\n\n-- 2\nmysql> select class_id,avg(age) from users group by class_id order by avg(age) desc;\n+----------+----------+\n| class_id | avg(age) |\n+----------+----------+\n|        1 |  23.5000 |\n|        2 |  17.3333 |\n+----------+----------+\n2 rows in set (0.00 sec)\n\n-- 3\nmysql> select class_id,count(*) from users group by class_id order by count(*) desc;\n+----------+----------+\n| class_id | count(*) |\n+----------+----------+\n|        2 |        3 |\n|        1 |        2 |\n+----------+----------+\n2 rows in set (0.00 sec)\n\n-- 4\nmysql> select class_id,count(*) from users group by class_id order by count(*) desc limit 1;\n+----------+----------+\n| class_id | count(*) |\n+----------+----------+\n|        2 |        3 |\n+----------+----------+\n1 row in set (0.00 sec)\n```\n\n# MySQL 数据库导入导出和授权 (CCL)\n\n## 数据的导出\n\n### 1.数据库的导出\n\n语法格式： **mysqldump -u root -p 数据库名 > 要保存的路径/tlxy.sql**\n\n```plain\nzachary@MacBook-Pro ~ % mysqldump -u root -p tlxy > /Users/zachary/Desktop/tlxy.sql\nEnter password:\nzachary@MacBook-Pro ~ %\n```\n\n### 2.数据表的导出\n\n语法格式： **mysqldump -u root -p 数据库名 数据表名 > 要保存的路径/tlxy.sql**\n\n```plain\nzachary@MacBook-Pro ~ % mysqldump -u root -p tlxy users > /Users/zachary/Desktop/tlxy.sql\nEnter password:\nzachary@MacBook-Pro ~ %\n```\n\n## 数据的导入\n\n### 1.数据库的导入\n\n将导出的数据库的所有的表，导入到本地的一个数据库内 语法格式： **mysql -u root -p 新数据库 < 要导入的数据库路径**\n\n### 2.数据表的导入\n\n将导出的一张数据包，导入到某个已存在的数据库中 **mysql -u root -p 数据库 < 要导入的数据表**\n\n## 权限管理\n\nmysql 中的 root 用户是数据库中权限最高的用户，千万不要用在项目中 可以给不同的用户，或者项目，创建不同的 MySQL 用户，并适当的授权，完成数据库的相关操作 这样就一定程度上保证了数据库的安全\n\n- 查看数据库中所有的用户\n\n```plain\nmysql> use mysql\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql> select host,user from user;\n+-----------+------------------+\n| host      | user             |\n+-----------+------------------+\n| %         | zachary          |\n| localhost | mysql.infoschema |\n| localhost | mysql.session    |\n| localhost | mysql.sys        |\n| localhost | root             |\n+-----------+------------------+\n5 rows in set (0.00 sec)\n```\n\n创建用户的语法格式： **grant 授权的操作 on 授权的库.授权的表 to 账户@登录地址 identified by '密码'**\n\n```plain\n-- 在mysql中 创建一个 zachary 用户， 授权可以对tlxy这个库的所有表进行添加和查询的权限\ngrant select,insert on tlxy.* to zachary@'%' identified by '123456';\n\n-- 给duan授权对tlxy这个库的所有表的所有权限\ngrant all on tlxy.* to duan@'%' identified by '123456';\n\n-- 删除用户\ndrop user 'zachary'@'%';\n```\n\n> 更新: 2024-01-23 06:39:32  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/lidc7icq01wycq94>\n","tags":["MySQL"],"categories":["MySQL"]},{"title":"数据库基础","url":"/blog/3942895021/","content":"\n# 数据库基础\n\n# MySQL 数据库基本介绍\n\n- 数据库的分类\n  - 磁盘管理型\n  - 内存管理型\n- 什么是数据库\n  - 数据库(Database)是按照数据结构来组织、存储和管理数据的一个仓库\n  - 专业的数据库是专门对数据进行创建、访问、管理和搜索等操作，比起我们自己用文件读写的方式对数据进行管理更加方便、快速、安全\n- 数据库的作用\n  - 对数据进行持久化的保存\n  - 方便数据的存储和查询，速度快、安全、方便\n  - 可以处理并发访问\n  - 更加安全的权限管理访问机制\n- 常见的数据库\n  - 关系型数据库\n    - MySQL\n    - Oracle\n    - PostgreSQL\n    - SqlServer\n  - 非关系型数据库\n    - Redis 内存数据库\n    - MongoDB 文档数据库\n- 关于数据库的概念\n  - 数据库 Databases\n  - 数据表 Tables\n  - 数据字段\n  - 行 row\n  - 列 column\n\n# Windows 下安装 MySQL\n\n1. 在 MySQL 官网下载 zip 安装包（Windows x86，64bit）ZIP Archive\n2. 下载完成后解压，将其放到想要安装的目录下面 例如：D:\\MySQL5.7\\mysql-5.7.17-winx64\n3. 新建一个 my.ini 配置文件，内容如下：\n\n```plain\n[mysql]\ndefault-character-set=utf8\n\n[mysqld]\nport = 3306\nbasedir=D:\\MySQL5.7\\mysql-5.7.17-winx64\ndatadir=D:\\MySQL5.7\\mysql-5.7.17-winx64\\data\nmax_connections=200\ncharacter-set-server=utf8\ndefault-storage-engine=INNODB\nexplicit_defaults_for_timestamp=true\n```\n\n1. 在安装路径下新建一个空的 data 文件夹\n2. 以管理员身份运行 cmd，进入安装目录下的 bin 目录，执行 **mysqld --initialize-insecure --user=mysql** 命令。\n3. 依然在管理员窗口 cmd 下运行 **mysqld install**\n4. 继续执行命令 **net start mysql** 启动 MySQL 服务\n5. 修改环境变量，在环境变量中添加 **D:\\MySQL5.7\\mysql-5.7.17-winx64\\bin**\n6. 在普通的 cmd 窗口下 进入 bin 目录 执行 **mysql -u root -p** 命令 默认没有密码\n\n# Mac 下安装 MySQL\n\n## 下载安装 MySQL\n\n**brew install mysql@5.7**\n\n## 启动 MySQL\n\n**sudo mysql.server start**\n\n## 关闭 MySQL\n\n**sudo mysql.server stop**\n\n## 登录 MySQL\n\n**mysql -u root -p**\n\n# 认识和操作一下 MySQL 的基本命令\n\n## 查看数据库\n\n在登录 MySQL 之后，使用命令 **show databases;** 查看当前所有数据库\n\n```plain\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| db4                |\n| django_bbs         |\n| djangoblog         |\n| information_schema |\n| mysql              |\n| Mysql_Pro          |\n| performance_schema |\n| students           |\n| sys                |\n+--------------------+\n9 rows in set (0.02 sec)\n```\n\n## 选择数据库\n\n当想要选择使用某个数据库的时候使用 **use XXX;** 命令\n\n```plain\nmysql> use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\n```\n\n## 查看表\n\n在进入一个数据库之后，可以先使用 **show tables;** 命令查看一下当前数据库下面所有的表\n\n```plain\nmysql> show tables;\n+------------------------------------------------------+\n| Tables_in_mysql                                      |\n+------------------------------------------------------+\n| columns_priv                                         |\n| component                                            |\n| db                                                   |\n| default_roles                                        |\n| engine_cost                                          |\n| func                                                 |\n| general_log                                          |\n| global_grants                                        |\n| gtid_executed                                        |\n| help_category                                        |\n| help_keyword                                         |\n| help_relation                                        |\n| help_topic                                           |\n| innodb_index_stats                                   |\n| innodb_table_stats                                   |\n| password_history                                     |\n| plugin                                               |\n| procs_priv                                           |\n| proxies_priv                                         |\n| replication_asynchronous_connection_failover         |\n| replication_asynchronous_connection_failover_managed |\n| role_edges                                           |\n| server_cost                                          |\n| servers                                              |\n| slave_master_info                                    |\n| slave_relay_log_info                                 |\n| slave_worker_info                                    |\n| slow_log                                             |\n| tables_priv                                          |\n| time_zone                                            |\n| time_zone_leap_second                                |\n| time_zone_name                                       |\n| time_zone_transition                                 |\n| time_zone_transition_type                            |\n| user                                                 |\n+------------------------------------------------------+\n35 rows in set (0.00 sec)\n```\n\n## 查看表数据\n\n想要查询表中的数据，使用 **select \\* from XXX;** 命令\n\n```plain\nmysql> select * from user;\nn| Host      | User             | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | Create_tablespace_priv | ssl_type | ssl_cipher             | x509_issuer              | x509_subject               | max_questions | max_updates | max_connections | max_user_connections | plugin                | authentication_string                                                  | password_expired | password_last_changed | password_lifetime | account_locked | Create_role_priv | Drop_role_priv | Password_reuse_history | Password_reuse_time | Password_require_current | User_attributes |\nn| %         | zachary          | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            | N                      |          | NULL                   | NULL                     | NULL                       |             0 |           0 |               0 |                    0 | caching_sha2_password | $A$005$B?<M[emkFiH6r2qdU1jhF3ONtn8Pjzx.2mGkUGv24EjzSFpo6J6qZzZm9 | N                | 2021-07-01 21:15:28   |              NULL | N              | N                | N              |                   NULL |                NULL | NULL                     | NULL            |\n| localhost | mysql.infoschema | Y           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            | N                      |          | NULL                   | NULL                     | NULL                       |             0 |           0 |               0 |                    0 | caching_sha2_password | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | N                | 2021-02-16 20:09:44   |              NULL | Y              | N                | N              |                   NULL |                NULL | NULL                     | NULL            |\n| localhost | mysql.session    | N           | N           | N           | N           | N           | N         | N           | Y             | N            | N         | N          | N               | N          | N          | N            | Y          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            | N                      |          | NULL                   | NULL                     | NULL                       |             0 |           0 |               0 |                    0 | caching_sha2_password | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | N                | 2021-02-16 20:09:44   |              NULL | Y              | N                | N              |                   NULL |                NULL | NULL                     | NULL            |\n| localhost | mysql.sys        | N           | N           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            | N                      |          | NULL                   | NULL                     | NULL                       |             0 |           0 |               0 |                    0 | caching_sha2_password | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | N                | 2021-02-16 20:09:44   |              NULL | Y              | N                | N              |                   NULL |                NULL | NULL                     | NULL            |\n| localhost | root             | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          | NULL                   | NULL                     | NULL                       |             0 |           0 |               0 |                    0 | caching_sha2_password | $A$005$[v3;mqn}dytE6eHf1cnInBjCR5s.3TE1uHerOPadrzC83pYLSQCfO1y4 | N                | 2021-02-16 20:13:33   |              NULL | N              | Y                | Y              |                   NULL |                NULL | NULL                     | NULL            |\nn5 rows in set (0.00 sec)\n```\n\n## 表数据精确查看\n\n但是这样数据太多又很乱，我们可以只选择其中一部分字段 **select host,user from user;**\n\n```plain\nmysql> select host,user from user;\n+-----------+------------------+\n| host      | user             |\n+-----------+------------------+\n| %         | zachary          |\n| localhost | mysql.infoschema |\n| localhost | mysql.session    |\n| localhost | mysql.sys        |\n| localhost | root             |\n+-----------+------------------+\n5 rows in set (0.00 sec)\n```\n\n## 创建自己的数据库\n\n使用以下格式创建自己的数据库结构 **create database 库名 default charset=utf8;** 例如创建一个名为 tlxy 的数据库\n\n```plain\nmysql> create database tlxy default charset=utf8;\nQuery OK, 1 row affected, 1 warning (0.00 sec)\n```\n\n这是查看一下数据库，就会发现新增了一个数据库\n\n```plain\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| db4                |\n| django_bbs         |\n| djangoblog         |\n| information_schema |\n| mysql              |\n| Mysql_Pro          |\n| performance_schema |\n| students           |\n| sys                |\n| tlxy               |\n+--------------------+\n10 rows in set (0.00 sec)\n```\n\n## 创建自己的数据表\n\n首先进入自己创建的数据库 **use XXX;**\n\n```plain\nmysql> use tlxy;\nDatabase changed\n```\n\n然后使用以下格式创建自己想要的表结构 create table 表名(字段名 类型 字段约束，字段名 类型 字段约束，字段名 类型 字段约束，)engine==innodb default charset=utf8;\n\n例如创建一个 user 表\n\n```plain\ncreate table user(\n    name varchar(20),\n    age int,\n    gender char(1)\n)engine=innodb default charset=utf8;\nQuery OK, 0 rows affected, 1 warning (0.02 sec)\n```\n\n查看一下是否创建成功\n\n```plain\nmysql> show tables;\n+----------------+\n| Tables_in_tlxy |\n+----------------+\n| user           |\n+----------------+\n1 row in set (0.00 sec)\n```\n\n## 显示表的字段结构\n\n可以使用 **desc XXX;** 查看表的字段结构\n\n```plain\nmysql> desc user;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| name   | varchar(20) | YES  |     | NULL    |       |\n| age    | int         | YES  |     | NULL    |       |\n| gender | char(1)     | YES  |     | NULL    |       |\n+--------+-------------+------+-----+---------+-------+\n3 rows in set (0.01 sec)\n```\n\n## 往表中添加数据\n\n使用以下格式对已经创建好的表进行数据添加 **insert into 表名(字段 1,字段 2,...) values(v1,v2,...)**\n\n例如，插入如下信息\n\n```plain\nmysql> insert into user(name,age,gender) values('admin',24,'男');\nQuery OK, 1 row affected (0.01 sec)\n```\n\n查看一下表中数据\n\n```plain\nmysql> select * from user;\n+-------+------+--------+\n| name  | age  | gender |\n+-------+------+--------+\n| admin |   24 | 男     |\n+-------+------+--------+\n1 row in set (0.00 sec)\n```\n\n```plain\nmysql> insert into user(name,age,gender) values('duan',24,'女');\nQuery OK, 1 row affected (0.00 sec)\n```\n\n```plain\nmysql> select * from user;\n+-------+------+--------+\n| name  | age  | gender |\n+-------+------+--------+\n| admin |   24 | 男     |\n| duan  |   24 | 女     |\n+-------+------+--------+\n2 rows in set (0.00 sec)\n```\n\n# MySQL 基础操作命令\n\n使用方法： 方式一：通过在命令行敲命令来操作（有助于命令的掌握） 方式二：通过图形界面工具，如 Navicat 等（在熟练掌握后在使用） 方式三：通过编程语言执行 MySQL 命令\n\n**SQL（Structure query language）结构化查询语言**\n\nSQL 语言分为 4 个部分：DDL(定义)、DML(操作)、DQL(查询)、DCL(控制)\n\n**SQL 语句中的快捷键**\n\n\\G 格式化输出（文本式，竖立显示） \\s 查看服务器端信息 \\c 结束命令输入操作 \\q 退出当前 sql 命令行模式 \\h 查看帮助\n\n## 操作数据库的步骤\n\n**连接、打开库、操作、关闭退出**\n\n### 1. 通过命令行连接 MySQL\n\n**mysql -h localhost -u root -p**\n\n-h 跟服务器地址 -u 为要登录的账号 -p 为密码 -P 为端口号\n\n### 2. 数据库操作\n\n查看数据库 **show databases;** 创建数据库 **create database 库名 default charset=utf8;** 删除数据库 **drop database 库名;** 打开数据库 **use 库名;**\n\n### 3. 数据表操作\n\n数据库管理系统中，可以有很多个库，每个库可以有很多个数据表\n\n查看表 **show tables;** 创建表 **create table 表名(字段名 1 类型, 字段名 2 类型)engine=innodb default charset=utf8;**\n\n创建表的时候，如果表不存在就执行这一条，如果表不存在就不执行这一条命令 **create table if not exists 表名(字段名 1 类型, 字段名 2 类型)engine=innodb default charset=utf8;**\n\n```sql\ncreate table if not exists users(\n  id int not null primary key auto_increment,\n  name varchar(4) not null,\n  age tinyint,\n  gender enum('男','女')\n)engine=innodb default charset=utf8;\n```\n\n删除表 **drop table 表名;** 表结构 **desc 表名;** 查看建表语句 **show create table 表名;**\n\n### 4. 数据操作 增删改查——CRUD\n\n插入 **insert into 表名(字段 1,字段 2,字段 3) values(值 1,值 2,值 3);\\*\\***insert into 表名(字段 1,字段 2,字段 3) values(a 值 1,a 值 2,a 值 3), (b 值 1,b 值 2,b 值 3);\\***\\*insert into 表名 values(值 1,值 2,值 3);**\n\n查询 **select \\* from 表名;\\*\\***\\*\\***\\*\\***select 字段 1,字段 2,字段 3 from 表名;\\*\\*\n\n修改 **update 表名 set 字段=某个值 where 条件;\\*\\***update 表名 set 字段 1=值 1,字段 2=值 2 where 条件;\\***\\*update 表名 set 字段=字段+值 where 条件;**\n\n删除 **delete from 表名 where 字段=某个值**\n\n### 5. 退出 MySQL\n\n**exit;\\*\\***\\*\\***\\*\\***quit;\\*\\*\n\n# MySQL 的基本常用数据类型\n\n数据类型：整型、浮点型、字符串、日期等\n\n## 1. 字符串数据类型\n\n最常用的数据类型，可以用来存储名字、地址、电话、邮编\n\n- **定长串\\*\\***CHAR\\*\\*\n\n1. 接收长度固定的字符串，其长度是在创建表的时候指定的\n2. 指定长度后，就会分配固定的存储空间用于存放数据，如 CHAR(7)不管实际插入多少字符，都会占用 7 个字符位置\n\n- **变长串\\*\\***VARCHAR\\*\\*\n\nVARCHAR(7) 如果实际插入 4 个字符，那么它只占 4 个字符位置，当然长度不能超过 7 个字符\n\n| 数据类型   | 说明                                                                                                         |\n| ---------- | ------------------------------------------------------------------------------------------------------------ |\n| CHAR       | 1~255 个字符的定长串。它的长度必须在创建时指定，否则 MySQL 假定为 CHAR(1)                                    |\n| ENUM       | 接受最多 64K 个串组成的一个预定义集合的某个串                                                                |\n| LONGTEXT   | 与 TEXT 相同，但最大长度为 4GB                                                                               |\n| MEDIUMTEXT | 与 TEXT 相同，但最大长度为 16K                                                                               |\n| SET        | 接受最多 64 个串组成的一个预定义集合的零个或多个串                                                           |\n| TEXT       | 最大长度为 64K 的变长文本                                                                                    |\n| TINYTEXT   | 与 TEXT 相同，但最大长度为 255 字节                                                                          |\n| VARCHAR    | 长度可变，最多不超过 255 字节。如果在创建时指定为 VARCHAR(n)，则可以存储 0 到 n 个字符的变长串（其中 n≤255） |\n\n## 2. 数值类型\n\n| 数据类型      | 说明                                                                                                         |\n| ------------- | ------------------------------------------------------------------------------------------------------------ |\n| BIT           | 位字段，1~64 位（在 MySQL5 之前，BIT 在功能上等价于 TINYINT）                                                |\n| BIGINT        | 整数值，支持 -9223372036854775808~~~~~~9223372036854775807（如果是 UNSIGNED,为 0~~18446744073709551615）的数 |\n| BOOLEAN(BOOL) | 布尔标志，或者为 0 或者为 1，主要用于开关（on/off）标志                                                      |\n| DECIMAL(DEC)  | 精度可变的浮点值                                                                                             |\n| DOUBLE        | 双精度浮点值                                                                                                 |\n| FLOAT         | 单精度浮点值                                                                                                 |\n| INT(INTEGER)  | 整数值，支持-2147483648~~~~~~2147483647（如果是 UNSIGNED，为 0~~4294967295）的数                             |\n| MEDIUMINT     | 整数值，支持-8388608~~~~~~8388607（如果是 UNSIGNED，为 0~~16777215）的数                                     |\n| REAL          | 4 字节的浮点值                                                                                               |\n| SMALLINT      | 整数值，支持-32768~~~~~~32767（如果是 UNSIGNED，0~~65535）的数                                               |\n| TINYINT       | 整数值，支持-128~~~~~~127（如果是 UNSIGNED，为 0~~255）的数                                                  |\n\ndecimal(5,2) 表示数值总共 5 位，小数 2 位 tinyint 1 字节（8 位） int 4 字节（32 位）\n\n## 3. 日期和时间类型\n\n| 数据类型  | 说明                                                                                               |\n| --------- | -------------------------------------------------------------------------------------------------- |\n| DATE      | 表示 1000-01-01~9999-12-31 的日期，格式为 YYYY-MM-DD                                               |\n| DATETIME  | DATE 和 TIME 的组合                                                                                |\n| TIMESTAMP | 功能和 DATETIME 相同，范围更小                                                                     |\n| TIME      | 格式为 HH:MM:SS                                                                                    |\n| YEAR      | 用 2 位数字表示，范围是 70（1970 年）~~~~~~69（2069 年），用 4 位数字表示，范围是 1901 年~~2155 年 |\n\n练习 首先在 tlxy 数据库下创建了上面的 users 表格，相对的插入一些数据\n\n```plain\nmysql> insert into users(name,age,gender) values('段段',22, '女'),('黄黄',23,' 男'),('图图',1,'女');\nQuery OK, 3 rows affected (0.00 sec)\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   22 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n+----+--------+------+--------+\n3 rows in set (0.00 sec)\n\nmysql> update users set age=24 where name='段段';\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from users;\n+----+--------+------+--------+\n| id | name   | age  | gender |\n+----+--------+------+--------+\n|  1 | 段段   |   24 | 女     |\n|  2 | 黄黄   |   23 | 男     |\n|  3 | 图图   |    1 | 女     |\n+----+--------+------+--------+\n3 rows in set (0.00 sec)\n```\n\n# MySQL 的数据类型约束和主键\n\n## 表的字段约束\n\n- **unsigned** 无符号(给数值类型使用，表示为正数，不写表示正负数都可以)\n- 字段后面加括号，可以限制宽度\n  - char(5)、varchar(7) 在字符后面加限制表示字符串的长度\n  - int(4) 没有意义，默认无符号的 int 为 int(11)，有符号 int(10)\n  - int(4) 只有在设置了前导零的时候才有意义，如 int(4) unsigned zerofill\n- **not null** 不能为空，在操作数据库的时候，如果输入该字段数据为空的时候就会报错\n- **default** 设置默认值\n- **primary key** 主键，不能为空 并且唯一，一般和自动递增配合使用\n- **auto_increment** 定义列为自增属性，一般用于主键，数值会自动加 1\n- **unique** 唯一索引（数据不能重复：用户名），可以增加查询速度，但是会降低插入和更新速度\n\n## MySQL 的运算符\n\n- 算术运算符： **+\\*\\***、\\***\\*-\\*\\***、\\***\\*\\*\\*\\***、\\***\\*/**\\*\\*\\***\\* 、**\\*\\*\\*\\*\\*\\*%\\*\\*\n- 比较运算符： **=\\*\\***、\\***\\*＞\\*\\***、\\***\\*＜\\*\\***、\\***\\*＞=\\*\\***、\\***\\*＜=\\*\\***、\\***\\*!=**\n- 数据库特有的比较： **in\\*\\***、\\***\\*not in\\*\\***、\\***\\*is null\\*\\***、\\***\\*is not null\\*\\***、\\***\\*like\\*\\***、\\***\\*between\\*\\***、\\***\\*and**\n- 逻辑运算符： **and\\*\\***、\\***\\*or\\*\\***、\\***\\*not**\n- **like** 支持特殊符号 **%\\*\\***、\\***\\*\\_** ，用于模糊搜索\n  - **%** ： 可以表示任意数量的任意字符\n  - **\\_** ： 表示任意一位字符\n  - 例如： **select \\* from users where name like '\\_段';**\n\n## 主键\n\n表中的每一行应该都有可以唯一标识自己的一列，用于记录两条不重复的记录，任意两行都不具有相同的主键值，便于后续的数据操纵和管理\n\n要求：\n\n- 一旦插入表中，不要更改\n- 不允许 NULL\n- 不在主键列中使用可能会被更改的值\n- 自增整数类型\n- 可以使用多个列作为联合主键，但联合主键并不常用，实用多列作为主键时，所有列值的组合必须是唯一的\n\n# MySQL 数据库与数据表操作 数据表结构的修改\n\n再来复习一次叭\n\n## 创建一个数据库的流程\n\n### 1.数据库的创建\n\n```plain\n# 链接MySQL数据库后，进入MySQL后可以操作数据\n\n# 1. 创建库\ncreate database if not exists tlxy default charset=utf8;\n\n-- 1. 数据库 tlxy 如果不存在则创建数据库，存在则不创建\n-- 2. 创建 tlxy 数据库，并设置字符集为utf8\n-- 3. 无特殊情况都要求字符集为utf8或者utf8mb4的字符编码\n```\n\n### 2.查看数据库\n\n```plain\n# 1.查看所有数据库\nshow databases;\n```\n\n### 3.打卡库、进入库、选择库\n\n```plain\n# use 库名\nuse tlxy;\n```\n\n### 4.删除库\n\n删库有风险\n\n```plain\n# 删除库 库中所有的数据都在磁盘中被删除\ndrop database 库名\n```\n\n## 在库中操作表的流程\n\n### 1.创建表\n\n语法格式为 **create table 表名(字段名, 类型, 【字段约束】, ...)**\n\n实例\n\n```plain\n# 创建一个 users 表\ncreate table users(\n    -- 创建ID字段，为正整数，不允许为空 主键，自动递增\n    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    -- 创建 存储 名字的字段 为字符串类型，最大长度五个字符，不允许为空\n    username VARCHAR(5) NOT NULL,\n    -- 创建 存储 密码的字段， 固定长度为32位字符，不允许为空\n    password CHAR(32) NOT NULL,\n    -- 创建 年龄 字段，不允许为空， 默认值为20\n    age TINYINT UNSIGNED NOT NULL DEFAULT 20\n)engine=innodb default charset=utf8;\n\n# 查看表结构\ndesc users;\n\n# 查看建表语句\nshow create table users;\n```\n\n在这里的 password 使用的是 char(32)位字符，这是因为在数据库中 md5 的加密方式，不管密码多大加密的结果都是 32 位\n\n创建表的原则\n\n表名和字段名 尽可能的符合命名规范 并且最好能够见名知意 表中数据必须有唯一标识，即主键。无特殊情况，都为数字并自增即可 表中字段所对应的类型设置合理，并限制合理长度 表引擎推荐使用 innodb，无特殊情况都要求字符集为 utf8 或者 utf8mb4 的字符编码\n\n### 2.修改表结构\n\n语法格式为 **alter table 表名 action(更改的选项)**\n\n实例\n\n#### 添加字段\n\n语法： **alter table 表名 add 添加的字段信息**\n\n```plain\n-- 在 users 中 追加一个 num 字段\nalter table users add num int not null;\n\n-- 在 指定字段后 users 中 age字段后面 添加一个 email字段\nalter table users add email varchar(50) after age;\n\n-- 在 指定字段后 users 中 email字段后 添加一个 phone字段\nalter table users add phone char(11) not null after age;\n\n-- 在 表的最前面添加一个字段\nalter table users add title int first;\n```\n\n#### 删除字段\n\n```plain\n# 删除字段 alter table 表名 drop 被删除的字段名\nalter table users drop title;\n```\n\n#### 修改字段\n\n语法格式 alter table 表名 change|modify 被修改的字段信息``change：可以修改字段名 modify：不能修改字段名\n\n```plain\n# 修改表中的 num 字段 类型\nalter table users modify num tinyint not null default 12;\n\n# 修改表中的 num 字段 为 int 类型 并且字段名更新为number\nalter table users change num mm int;\n```\n\n### 3.修改表名\n\n语法格式 alter table 原表名 rename as 新表名;\n\n### 4.更改表中的自增的值\n\n```plain\n# 在常规情况下，auto_increment默认从1开始继续递增\nalter table users auto_increment = 1000;\n```\n\n### 5.修改表引擎\n\n```plain\n# 推荐在定义表时候，表引擎为innodb\n\n# 可以使用建表语句来查看当前表引擎\n\nmysql> show create table users\\G;\n*************************** 1. row ***************************\n       Table: users\nCreate Table: CREATE TABLE `users` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `name` varchar(4) NOT NULL,\n  `age` tinyint DEFAULT NULL,\n  `gender` enum('男','女') DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n\nERROR:\nNo query specified\n\n\n# 直接查看当前表引擎\nmysql> show table status from tlxy where name = 'users'\\G;\n*************************** 1. row ***************************\n           Name: users\n         Engine: InnoDB\n        Version: 10\n     Row_format: Dynamic\n           Rows: 3\n Avg_row_length: 5461\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: 4\n    Create_time: 2022-04-10 16:10:12\n    Update_time: NULL\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options:\n        Comment:\n1 row in set (0.01 sec)\n\nERROR:\nNo query specified\n\n\n# 修改表引擎语句\nalter table users engine = 'myisam';\n```\n\n### 6.删除表\n\n语法格式 **drop table 表名;**\n\n# 详解 MySQL 存储引擎\n\n## 客户端向服务器发送的各类增删查改的请求\n\n```plain\ngraph TD\nA[客户端] --> B(处理连接)\nB --> C(查询缓存)\nC --> D(语法解析)\nD --> E{查询优化}\nE --> F[MyISAM]\nE --> G[InnoDB]\nE --> H[Memory]\nE --> I[...]\nG --> J(文件系统)\n```\n\nMySQL 服务器把数据的存储和提取都封装到了一个叫存储引擎的模块里。我们知道表是由一行一行的记录组成，但这只是一个逻辑上的概念，物理上如何表示记录，怎么从表中读取数据，怎么把数据写入具体的物理存储器上，这都是存储引擎负责的事情。为了实现不同的功能，MySQL 提供了各式各样的存储引擎，不同的存储引擎管理的表具体的存储结构可能不同，采用的存取算法也可能不同。\n\n## 存储引擎\n\n存储引擎以前叫做表处理器，它的功能就是接收上层传下来的指令，然后对表中的数据进行提取或写入操作。\n\n为了管理方便，人们把 连接管理、查询缓存、语法解析、查询优化这些并不涉及在真实数据存储的功能划分为 MySQL server 的功能，把真实存储数据的功能划分为存储引擎的功能。各种不同的存储引擎向上边的 MySQL server 层提供统一的调用接口（即 存储引擎 API），包含了几十个底层函数，像“读取索引第一条内容”、“读取索引下一条内容”、“插入记录”等等。\n\n所以在 MySQL server 完成了查询优化之后，只需要按照生成的执行计划调用底层存储引擎提供的 API，获取到数据后返回给客户端就好啦\n\nMySQL 支持非常多种存储引擎\n\n| 存储引擎  | 描述                               |\n| --------- | ---------------------------------- |\n| ARCHIVE   | 用于数据存档（行被插入后不能修改） |\n| BLACKHOLE | 丢弃写操作，读操作会返回空内容     |\n| CSV       | 在存储数据时，以逗号分隔各个数据项 |\n| FEDERATED | 用来访问远程表                     |\n| InnoDB    | 具备外键支持功能的事务存储引擎     |\n| MEMORY    | 置于内存的表                       |\n| MERGE     | 用来管理多个 MyISAM 表构成的表集合 |\n| MyISAM    | 主要的非事务处理存储引擎           |\n| NDB       | MySQL 集群专用存储引擎             |\n\n## MyISAM 和 InnoDB 表引擎的区别\n\n### 1)事务支持\n\nMyISAM 不支持事务操作，而 InnoDB 支持\n\n事务：访问并更新数据库中数据的执行单元，事务操作中，要么都执行要么都不执行\n\n举个例子，黄黄给段段转钱，执行的语句是 黄黄扣钱，然后段段增加钱；那么如果发生了服务器断电的事件，因为有事务这一特性不会造成，黄黄扣钱之后，段段也没有增加钱这样的情况。\n\n### 2)存储结构\n\nMyISAM：每个 MyISAM 在磁盘上存储成三个文件\n\n- .frm 文件 存储表结构\n- .MYD 文件 存储数据\n- .MYI 文件 存储索引\n\nInnoDB：主要分为两种文件进行存储\n\n- .frm 存储表结构\n- .ibd 存储数据和索引（也可能是多个.ibd 文件，或者是独立的表空间文件）\n\n### 3)表锁差异\n\nMyISAM：**只支持表级锁**，用户在操作 MyISAM 表时，select、update，delete，insert 语句都会给表自动加锁，如果加锁以后的表满足 insert 并发的情况下，可以在表的尾部插入新的数据。\n\nInnoDB：**支持事务和行级锁，是 InnoDB 的最大特色**，行锁大幅度提高了多用户并发操作的性能，但是 InnoDB 的行锁，只是在 WHERE 的主键是有效的，而非主键的 WHERE 都会锁全表的。\n\n### 4)表主键\n\nMyISAM：允许没有任何索引和主键的表存在，索引都是保存行的地址 InnoDB：如果没有设定主键或者非空唯一索引，就会自动生成一个 6 字节的主键（用户不可见），数据是主索引的一部分，附加索引保存的是主索引的值。InnoDB 的主键范围更大，最大是 MyISAM 的 2 倍。\n\n### 5)表的具体行数\n\nMyISAM：保存有表的总行数，如果 select count() from table;会直接取出改值 InnoDB：没有保存表的总行数(只能遍历)，如果使用 select count() from table;就会遍历整个表，消耗相当大，但是在加了 where 条件之后，MyISAM 和 InnoDB 处理的方式是一样的\n\n### 6)CURD 操作\n\nMyISAM：如果执行大量的 SELECT，MyISAM 是更好地选择 InnoDB：如果你的数据执行大量的 INSERT 或 UPDATE，出于性能方面考虑，应该使用 InnoDB 表。DELETE 从性能上 InnoDB 更优，但 DELETE FROM table 时，InnoDB 不会重新建立表，而是一行一行删除，在 InnoDB 上如果要清空保存有大量数据的表，最好使用 truncate table 这个命令\n\n### 7)外键\n\nMyISAM：不支持 InnoDB：支持\n\n### 8)查询效率\n\n推荐使用 InnoDB\n\n### 9)MyISAM 和 InnoDB 两者的应用场景\n\n- MyISAM 管理非事务表，它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的 SELECT 查询，推荐使用 MyISAM\n- InnoDB 用于事务处理应用程序，具有众多特性，包括 ACID 事务支持。如果应用中需要执行大量的 INSERT 或者 UPDATE 操作，则应该使用 InnoDB 这样可以提高多用户并发操作的性能，现在默认使用 InnoDB\n\n# 了解字符集中 utf8 和 utf8mb4 的区别\n\n正常的 utf8 使用的是 1~4 字节的表示方式 但是在 MySQL 中，设计者设计了两个概念\n\n- utf8，即 utf8mb3：使用的是阉割版 utf8，只使用了 1~3 个字节表示字符\n- utf8mb4：就是上面正宗的 utf8，使用 1~4 个字节表示 当需要使用到类似于 emoji 等表情，就需要使用 utf8mb4\n\n## 字符集的查看\n\n使用命令 show character set;或者 show charset;\n\n```plain\nmysql> show character set;\n+----------+---------------------------------+---------------------+--------+\n| Charset  | Description                     | Default collation   | Maxlen |\n+----------+---------------------------------+---------------------+--------+\n| armscii8 | ARMSCII-8 Armenian              | armscii8_general_ci |      1 |\n| ascii    | US ASCII                        | ascii_general_ci    |      1 |\n| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |\n| binary   | Binary pseudo charset           | binary              |      1 |\n| cp1250   | Windows Central European        | cp1250_general_ci   |      1 |\n| cp1251   | Windows Cyrillic                | cp1251_general_ci   |      1 |\n| cp1256   | Windows Arabic                  | cp1256_general_ci   |      1 |\n| cp1257   | Windows Baltic                  | cp1257_general_ci   |      1 |\n| cp850    | DOS West European               | cp850_general_ci    |      1 |\n| cp852    | DOS Central European            | cp852_general_ci    |      1 |\n| cp866    | DOS Russian                     | cp866_general_ci    |      1 |\n| cp932    | SJIS for Windows Japanese       | cp932_japanese_ci   |      2 |\n| dec8     | DEC West European               | dec8_swedish_ci     |      1 |\n| eucjpms  | UJIS for Windows Japanese       | eucjpms_japanese_ci |      3 |\n| euckr    | EUC-KR Korean                   | euckr_korean_ci     |      2 |\n| gb18030  | China National Standard GB18030 | gb18030_chinese_ci  |      4 |\n| gb2312   | GB2312 Simplified Chinese       | gb2312_chinese_ci   |      2 |\n| gbk      | GBK Simplified Chinese          | gbk_chinese_ci      |      2 |\n| geostd8  | GEOSTD8 Georgian                | geostd8_general_ci  |      1 |\n| greek    | ISO 8859-7 Greek                | greek_general_ci    |      1 |\n| hebrew   | ISO 8859-8 Hebrew               | hebrew_general_ci   |      1 |\n| hp8      | HP West European                | hp8_english_ci      |      1 |\n| keybcs2  | DOS Kamenicky Czech-Slovak      | keybcs2_general_ci  |      1 |\n| koi8r    | KOI8-R Relcom Russian           | koi8r_general_ci    |      1 |\n| koi8u    | KOI8-U Ukrainian                | koi8u_general_ci    |      1 |\n| latin1   | cp1252 West European            | latin1_swedish_ci   |      1 |\n| latin2   | ISO 8859-2 Central European     | latin2_general_ci   |      1 |\n| latin5   | ISO 8859-9 Turkish              | latin5_turkish_ci   |      1 |\n| latin7   | ISO 8859-13 Baltic              | latin7_general_ci   |      1 |\n| macce    | Mac Central European            | macce_general_ci    |      1 |\n| macroman | Mac West European               | macroman_general_ci |      1 |\n| sjis     | Shift-JIS Japanese              | sjis_japanese_ci    |      2 |\n| swe7     | 7bit Swedish                    | swe7_swedish_ci     |      1 |\n| tis620   | TIS620 Thai                     | tis620_thai_ci      |      1 |\n| ucs2     | UCS-2 Unicode                   | ucs2_general_ci     |      2 |\n| ujis     | EUC-JP Japanese                 | ujis_japanese_ci    |      3 |\n| utf16    | UTF-16 Unicode                  | utf16_general_ci    |      4 |\n| utf16le  | UTF-16LE Unicode                | utf16le_general_ci  |      4 |\n| utf32    | UTF-32 Unicode                  | utf32_general_ci    |      4 |\n| utf8     | UTF-8 Unicode                   | utf8_general_ci     |      3 |\n| utf8mb4  | UTF-8 Unicode                   | utf8mb4_0900_ai_ci  |      4 |\n+----------+---------------------------------+---------------------+--------+\n41 rows in set (0.01 sec)\n```\n\n> 更新: 2024-01-23 06:40:42  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/ovcglbg23nxq6bkh>\n","tags":["MySQL"],"categories":["MySQL"]},{"title":"Python - ATM 项目","url":"/blog/984112988/","content":"\n# ATM 项目\n\n# ATM 系统项目说明文档\n\n运用基础阶段所学的 Python 知识，来模拟出银行的 ATM 系统。 要求：使用面向对象编程来完成这个项目\n\nATM 系统的主要功能：\n\n1. 注册：用户名，手机号，身份证号（18 位），密码（两次确认，长度 6 位）\n2. 查询：账号必须存在，密码（3 次机会，不对就锁卡）\n3. 取款：账号必须存在，密码（3 次机会，不对就锁卡），取款金额不能大于存款\n4. 存款：账号必须存在，存款金额不能低于 0 元\n5. 转账：您的账户，转款账户都必须存在，密码（3 次机会，不对就锁卡），转账金额不能超过余额\n6. 锁卡：账号必须存在，可以使用密码冻结，还可以使用身份证号冻结\n7. 解卡：账号必须存在，只能使用身份证号进行解锁\n8. 补卡：使用身份证进行补卡，每个身份证只能有一张卡，之前的卡作废\n9. 改密：原密码进行改密，也可以使用身份证进行改密\n10. 退出：保存数据\n\n## 项目分析\n\n根据需求进行分析，思考如何对项目进行设计和架构\n\n### 思考问题一：如何使用面向对象编程思想来完成\n\n当前的项目功能和项目演示中，有几个对象？\n\n#### 银行卡对象: Card 存储银行卡信息\n\n- 卡号: cardid\n- 密码: password\n- 余额: money\n- 是否锁卡: islock\n\n#### 用户对象: Person 存储用户信息\n\n- 用户名: name\n- 身份证号: userid\n- 手机号: phone\n- 卡号: card\n\n#### 控制器对象: Controller 具体的操作控制类\n\n控制器对象中主要就是去实现 ATM 这个系统中的操作 在上面定义的呐十个方法\n\n- 注册：register\n- 查询：query\n- 取款：get_money\n- 存款：add_money\n- 转账：save_money\n- 锁卡：lock\n- 解卡：unlock\n- 补卡：new_card\n- 改密：change_pwd\n- 退出：save\n\n#### 视图对象：Views 显示操作界面\n\n欢迎界面，操作界面\n\n### 思考问题二：如何存储数据\n\n肯定是用文件进行存储\n\n- 卡号：用户 ===> user_dict ===> user.txt\n- 身份证：卡号 ===> user_id_dict ===> userid.txt\n\n## 项目基本结构搭建\n\n# ATM\n\n项目说明文档\n\n## 项目基本功能\n\n当前的 ATM 系统模拟实现银行 ATM 机的操作系统功能\n\n- 注册：register\n- 查询：query\n- 取款：get_money\n- 存款：add_money\n- 转账：save_money\n- 锁卡：lock\n- 解卡：unlock\n- 补卡：new_card\n- 改密：change_pwd\n- 退出：save\n\n## 项目基本结构\n\n```python\n├── ATM/                        # 项目目录\n│   ├── README.md               # 项目文档\n│   ├── databases/              # 数据存储目录\n│   │   ├── user.txt            # 卡号\n│   │   └── userid.txt          # 身份证\n│   ├── main.py                 # 程序单入口文件\n│   └── packages/               # 包\n│       ├── __init__.py\n│       ├── cardclass.py        # 银行卡类\n│       ├── controllerclass.py  # 操作控制类\n│       ├── personclass.py      # 用户类\n│       └── viewsclass.py       # 视图显示类\n```\n\n## 运行环境\n\n- 系统：windows、Mac OS、Linux\n- 版本：python3.5+\n- 其他：无\n\n## 迭代计划\n\n- 增加银行操作日志\n- 将数据存储更改为数据库 MySQL\n\n## 详细内容见代码\n\n[https://github.com/BlockZachary/Python_oop/tree/master/ATM](https://github.com/BlockZachary/Python_oop/tree/master/ATM)\n\n> 更新: 2024-01-10 22:46:43  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/ozwmftr5d8430maz>\n","tags":["Python","项目"],"categories":["Python面向对象"]},{"title":"Python - 异常、模块、包","url":"/blog/1817629786/","content":"\n# 异常、模块、包\n\n# 异常处理\n\n## 什么是异常\n\n异常就是 非正常 没有达到预期目标 的非语法错误，会影响程序正常执行，Python 解释器不能正常处理的问题\n\n- 异常分两种：\n  - 语法错误导致的异常\n  - 逻辑错误导致的异常\n- 对于不可预知的异常错误，可以使用 try...except...对异常进行处理\n\n常用的异常类继承关系\n\n![](https://cdn.nlark.com/yuque/__puml/22ab22e4bbe5119fc89ca6ff8c61ea37.svg)\n\n```python\ntry:\n    可能发生异常错误的代码\nexcept:\n    如果发生了异常则进入except代码块\n```\n\n```python\n# 异常例子\nvarlist = [1,2,3]\nprint(varlist[3])\n\n\"\"\"\n运行结果为：\nTraceback (most recent call last):\n  File \"/Users/zachary/PycharmProjects/Python教程阶段1/code_oop/41什么是异常.py\", line 6, in <module>\n    print(varlist[3])\nIndexError: list index out of range\n\n其中：\nIndexError  异常类\nlist index out of range  异常信息\n\"\"\"\n\n# 异常处理除法\nval = input(\"请输入一个数字:\")\ntry:\n    num = int(val)\n    res = 10 / num\n    print(res)\nexcept ValueError as e:\n    print(\"not input number value\")\nexcept ZeroDivisionError as e:\n    print(\"can not input 0\")\n\n\n\n\n# 异常处理文件\ntry:\n    with open('./user.txt', 'r') as file:\n        res = file.read()\n        print(res)\nexcept:\n    print('file not exist')\n\nprint('other program')\n# file not exist\n# other program\n```\n\n## try_except_else_finally\n\n- try 执行可能会引发错误的代码块\n- except 捕获异常并输出\n- else 如果 try 代码块没有出错就会执行\n- finally 无论 try 有无错误都会执行\n- raise 可以抛出一个异常\n- assert 断言，后面的表达式如果正确 什么也不做，如果表达式错误，则抛出异常\n\n```python\n# 1.处理指定的异常，引发了非指定的异常，无法处理\ntry:\n    varlist = [1, 2, 3]\n    print(varlist[3])\nexcept IndexError as e:\n    print(e)  # list index out of range\n\n# 2.多分支处理异常\ntry:\n    s = 'duanduan'\n    res = int(s)\nexcept ValueError as e:\n    print('ValueError', e)\nexcept KeyError as e:\n    print('KeyError', e)\nexcept IndexError as e:\n    print('IndexError', e)\n# ValueError invalid literal for int() with base 10: 'duanduan'\n\n\n# 3.通用异常类 Exception\ntry:\n    s = 'duanduan'\n    res = s[10]\nexcept Exception as e:\n    print('Exception', e)\n# Exception string index out of range\n\n\n# 4.多分支异常类+通用异常类\ntry:\n    s = 'duanduan'\n    res = int(s)\nexcept KeyError as e:\n    print('KeyError', e)\nexcept IndexError as e:\n    print('IndexError', e)\nexcept Exception as e:\n    print('Exception', e)\n# Exception invalid literal for int() with base 10: 'duanduan'\n\n\n# 5.try except else\ntry:\n    s = 'duandaun'\n    res = str(s)\nexcept KeyError as e:\n    print('KeyError', e)\nexcept IndexError as e:\n    print('IndexError', e)\nexcept Exception as e:\n    print('Exception', e)\nelse:\n    print('try中没有错误')\n# try中没有错误\n\n\n# 6.try except else finally\ntry:\n    s = 'duandaun'\n    res = str(s)\nexcept KeyError as e:\n    print('KeyError', e)\nexcept IndexError as e:\n    print('IndexError', e)\nexcept Exception as e:\n    print('Exception', e)\nelse:\n    print('try中没有错误')\nfinally:\n    print('代码执行完毕，这句肯定输出')\n# try中没有错误\n# 代码执行完毕，这句肯定输出\n\n\n# 7. 主动抛出异常 raise\ntry:\n    raise Exception()\nexcept Exception as e:\n    print('Exception', e)\n# Exception\n\n\n# 8. assert 断言 后面的表达式正确什么耶不做 错误的话 抛出异常\ntry:\n    assert 1 == 2\nexcept AssertionError as e:\n    print('AssertionError', e)\n# AssertionError\n```\n\n## 自定义异常类\n\n```python\nclass InvalidInputArgument(Exception):\n    def __init__(self,*args):\n        super().__init__(args)\n```\n\n当异常出现时，对异常信息写入日志\n\n```python\n\"\"\"\n在出现异常后，对异常进行处理，并且把异常信息写入日志\n日志的基本格式：\n    日期时间 异常的级别\n    异常信息：引发的异常类，异常的信息，文件及行号\n\"\"\"\n\nimport traceback\nimport logging\n\nclass Myexception():\n    def __init__(self):\n        # logging 基本配置\n        logging.basicConfig(\n            filename='./error.log', # 日志存储的文件目录\n            format='%(asctime)s %(levelname)s \\n %(message)s',\n            datefmt='%Y-%m-%d %H:%M:%S'\n        )\n\n        # 写入日志\n        logging.error(traceback.format_exc())\n\n\ntry:\n    res = int('duanduan')\nexcept:\n    Myexception()\n```\n\n# 模块与包\n\n定义的一个 python 文件，[后缀名为.py](http://xn--siqu5lca0905b.py) 这个文件被称为模块 模块中通常会定义一些相似的类，函数等代码内容，提供给别的程序引入后使用\n\n- 系统模块\n  - 系统模块就是一个 python 的程序脚本，专门提供给我们自己的程序使用。\n  - 它们是安装好 python 环境的时候，就已经存在的，需要的时候可以使用 import 导入到程序中使用\n  - import logging, json, math, time\n- 自定义模块\n  - 就是自己创建的一个 python 脚本，定义一些类或方法，供别的脚本导入后使用\n\n## 自定义模块的使用\n\n```python\n# 使用方式之一\nimport Exception\n\ntry:\n    res = int('duanduan')\nexcept:\n    Exception.MyException()\n    Exception.output()\n    print(Exception.var)\n\n# 使用方式之二\nfrom Exception import *\n\ntry:\n    res = int('duanduan')\nexcept:\n    MyException()\n    output()\n    print(var)\n```\n\n## 自定义包和使用\n\n包可以理解为是一个文件夹，里面包含了多个 python 文件\n\n- 包的结构\n\n```python\n└── package_fa\n    ├── __init__.py   # 包的标志性文件（可以有内容，也可以没有）\n    ├── a.py         # a模块（文件）\n    ├── b.py         # b模块（文件）\n    └── package_son\n        ├── __init__.py\n        ├── c.py\n        └── d.py\n```\n\n实际上，\\***\\*init**.py 可以实现一个功能在导入包的时候，想要使用**from package_fa import **\\*的时候**需要在 package_fa**下的\\***\\*init**.py**下写入：\\*\\***all** = ['module1','module2',...]**这里的**module1，2 指的就是在 package_fa**下的模块名称\\*\\*\n\n来做一个测试叭，首先在当前项目文件夹下创建一个类似上述的目录结构 之后编写代码进行测试\n\n```python\n# 使用1：导入指定的包中的模块\nfrom package_fa import a\n\na.funca()  # funca\n\n# 使用2：从指定包的指定模块导入指定的内容\nfrom package_fa.b import funcb\n\nfuncb()  # funcb\n\n# 使用3：从指定包的子包中导入模块\nfrom package_fa.package_son import c\n\nc.funcc()  # funcc\n\n# 使用4：从指定包的子包的指定模块导入指定内容\nfrom package_fa.package_son.d import funcd\n\nfuncd()  # funcd\n\n\n# 使用5: 需要在package_fa 中的__init__.py写入模块列表\n# 格式为: __init__.py ===>  __all__ = ['a','b']\nfrom package_fa import *\na.funca()\n```\n\n可以讲一下：**name** = **main**,\n\n## 导入方式的分类\n\n### 绝对导入\n\n- 会使用[搜索路径]去查找和导入指定的包或模块 import module import package import package.module from module import content from package import module from package.module import content\n\n### 相对导入\n\nfrom .package/module import module/content from ..package/module import module/content\n\n. 表示当前目录 .. 表示上一级目录\n\n```python\ndef funcc():\n    print('funcc')\n\n\n# 假设在c.py中需要d.py 可以使用相对导入，但是不要直接运行c.py\nfrom .d import funcd\nfuncd()\n\n\n# 假设想要在c中使用上一级的a\nfrom .. import a\na.funca()\n```\n\n```python\nfrom package_fa.package_son import c\n# funcd\n# funca\n```\n\n## 单入口程序\n\n单入口程序指的是整个程序都是经过一个主程序文件在运行，其他程序都封装成了包或模块\n\n```python\nATM\n└── main.py   # 当前程序的主入口文件，单入口文件，唯一直接运行的文件\n├── package/   # 主要程序模块包\n    ├── __init__.py     # 包的初始化文件\n    ├── View.py         # 视图函数模块\n    ├── Controller.py    # 控制器模块\n    ├── Card.py         # 银行卡模块\n    └── User.py         # 用户模块\n└── databases/  # 数据存储文件夹\n    ├── user.txt\n    └── user_id_card.txt\n```\n\n# Python 中的第三方库的管理 pip\n\n第三方库的管理网站[https://pypi.org/](https://pypi.org/)\n\npip 的使用\n\n- 查看 pip 版本 `pip -V`\n- 安装 `pip install -i <仓库镜像的地址> 包名(库名)`\n  - `pip3 install -i [http://mirrors.aliyun.com/pypi/simple/](http://mirrors.aliyun.com/pypi/simple/) --trusted-host mirrors.aliyun.com mysqlclient==2.1.1`\n- 常用镜像地址\n  - 阿里云 `http://mirrors.aliyun.com/pypi/simple/`\n  - 豆瓣 `http://pypi.douban.com/simple/`\n  - 清华大学 `https://pypi.tuna.tsinghua.edu.cn/simple/`\n  - 中国科学技术大学 `http://pypi.mirrors.ustc.edu.cn/simple/`\n  - 华中科技大学 `http://pypi.hustunique.com/`\n- 安装指定版本的包 `pip install <package>==<版本>`\n- 查看已经安装的 package `pip list`\n- 检查 package 是否已经过期 `pip list outdated`\n- 卸载 package `pip uninstall <包名>`\n- 查看 package 的依赖 `pip show <包名>`\n\n# Python 中的虚拟环境 venv\n\n虚拟环境就是在当前的系统环境中，去配置另外一个 python 的运行环境，是可以创建多个不同的虚拟环境 python 的虚拟环境相互独立，互不影响\n\n- 虚拟环境中可以在没有权限的情况下安装库（Linux 系统中可能会出现的问题）\n- 不同的应用可以使用不同的库或者不同的版本\n- 虚拟环境中的库升级也不影响其他环境\n- 虚拟环境可以作为一个项目的专有环境，在需要部署的时候，可以一键导出项目所需要的包\n- 如何创建一个虚拟环境\n  - 使用 pycharm 创建\n  - 自己安装独立的虚拟环境\n    - 安装虚拟环境工具 `pip install virtualenv`\n    - 创建虚拟环境 `python3 -m venv <虚拟环境名称>`\n    - 激活虚拟环境 `source <虚拟环境名称>/bin/activate`\n    - 退出虚拟环境 `deactivate`\n    - 导出当前环境项目包 `pip freeze > ./requirements.txt`\n    - 通过 requirement 安装依赖包 `pip install -r requirement.txt`\n\n> 更新: 2024-01-27 22:21:03  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/ql4zdyscp3ffck91>\n","tags":["Python"],"categories":["Python面向对象"]},{"title":"Python - 面向对象高阶","url":"/blog/3938337518/","content":"\n# 面向对象高阶\n\n# 内置成员\n\n- 获取当前类\\对象的所属成员，返回一个字典包含类或对象的成员\n  - 类名.**dict**\n  - 对象名.**dict**\n- 获取类的文档信息，就是定义类后对类的一个说明\n  - 类名.**doc**\n  - 对象名.**doc**\n- 获取类名称，结果返回字符串\n  - 类名.**name**\n- 获取类所在的文件名称，如果是当前文件就会返回**main**\n  - 类名.**module**\n- 获取当前类的父类或者父类列表列表\n  - 类名.**base**\n  - 类名.**bases**\n- 获取类的继承关系\n  - 类名.**mro**\n\n```python\nclass A():\n    pass\n\n\nclass B():\n    pass\n\n\nclass Demo(A, B):\n    \"\"\"\n    这是类的说明文档\n    \"\"\"\n    name = None\n    age = None\n\n    def func(self):\n        print('这是一个方法')\n\n\nres = Demo.__dict__\nprint(\n    res)  # {'__module__': '__main__', '__doc__': '\\n    这是类的说明文档\\n    ', 'name': None, 'age': None, 'func': <function Demo.func at 0x10076b560>, '__dict__': <attribute '__dict__' of 'Demo' objects>, '__weakref__': <attribute '__weakref__' of 'Demo' objects>}\n\nd = Demo()\nres = d.__dict__\nprint(res)  # {}\n\nres = Demo.__doc__\nprint(res)\n#\n#    这是类的说明文档\n#\nres = d.__doc__\nprint(res)\n#\n#    这是类的说明文档\n#\n\nres = Demo.__name__\nprint(res)  # Demo\n\nres = Demo.__module__\nprint(res)  # __main__\n\nres = Demo.__base__\nprint(res)  # <class '__main__.A'>\nres = Demo.__bases__\nprint(res)  # (<class '__main__.A'>, <class '__main__.B'>)\n\nprint(Demo.mro())  # [<class '__main__.Demo'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>]\nprint(Demo.__mro__)  # (<class '__main__.Demo'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)\n```\n\n# 方法的分类\n\n## 对象方法\n\n在类中定义的方法，含有 self 参数 含有 self 的方法，只能使用对象进行调用 该方法会把调用的对象传递进来\n\n```python\n# 对象方法\nclass Demo():\n    def fun(self):\n        print(self)\n        print('this is func')\n\nd = Demo()\nd.fun()\n# <__main__.Demo object at 0x10cc92150>\n# this is object method\n```\n\n## 类方法\n\n在类中定义的方法，使用了装饰器@classmethod 进行装饰的类 方法中有 cls 这个形参，不需要实例化对象就可以直接用类调用的方法 会把调用这个方法的类传递进来\n\n```python\n# 类方法\nclass Cdemo():\n    @classmethod\n    def fun(cls):\n        print(cls)\n        print('this is class method')\n\n\nCdemo.fun()\n# <class '__main__.Cdemo'>\n# this is class method\n```\n\n## 绑定类方法\n\n绑定类方法就是在类中，不带有形参 self 的一个方法 调用的时候直接使用类调用，无法使用对象调用 不会传递任何参数进来\n\n```python\n# 绑定类方法\nclass Bdemo():\n    def func():\n        print('this is bind class func')\n\n\nBdemo.func()\n# this is bind class func\n```\n\n## 静态方法\n\n在类中定义的方法，使用了装饰器@staticmethod 进行装饰的类 类中，不带有形参 self 的一个方法,也没有其他参数 可以使用类或者对象直接调用 不会传递任何参数\n\n静态方法只是定义在类范围内的一个函数而已\n\n```python\n# 静态方法\nclass Sdemo():\n    @staticmethod\n    def func():\n        print('this is a static method')\n\n\ns = Sdemo()\ns.func()  # this is a static method\nSdemo.func()  # this is a static method\n```\n\n# 常用函数\n\n- 检测一个类是否为另一个类的子类\n  - issubclass(son,fa)\n- 检测一个对象是否是一个类的实例化\n  - isinstance(obj,cls)\n- 检测一个类/对象是否具有一个成员属性\n  - hasattr(obj/cls,attr)\n- 获取类/对象成员的值\n  - getattr(obj/cls,attr)\n- 设置类/对象成员的值\n  - setattr(obj/cls,attr,value)\n- 删除类/对象的成员属性\n  - delattr(obj/cls,attr)\n- dir() 获取当前对象所可以访问的成员列表\n\n```python\nclass A():\n    def hello(self):\n        print('hello')\n\n\nclass B(A):\n    pass\n\n\nclass C(A):\n    pass\n\n\nclass D(B, C):\n    name = None\n\n    def get_hello(self):\n        print('hello')\n\n\nprint(issubclass(D, B))  # True\n\nd = D()\nprint(isinstance(d, D))  # True\nprint(isinstance(d, B))  # True\n\nprint(hasattr(d, 'hello'))  # True\nprint(hasattr(d, 'get_hello'))  # True\nprint(hasattr(d, 'name'))  # True\n\nres = getattr(d, 'name')\nprint(res)  # None\n\nsetattr(d, 'name', 'zachary')\nprint(d.name)  # zachary\n\ndelattr(d,'name')\n\nprint(d.name) # None\n\nres = dir(d)\nprint(res)\n```\n\n# 魔术方法\n\n魔术方法就是不需要手动调用就可以自动执行的方法\n\n## **init** 初始化方法\n\n- 触发机制：当实例化对象之后就会立即触发的方法\n- 作用：为当前创建的对象完成一些初始化的操作，比如：成员属性的赋值，方法的调用，打开或创建一些资源\n- 参数：一个 self，接受当前对象，其他参数根据需求进行定义即可\n- 返回值：无\n- 注意事项：无\n\n## **new** 构造方法\n\n构造一个对象的过程是：\n\n```python\nperson = Person(\"Jack\")\n实际上做了两件事情\n1. person = object.__new__(Person, \"Jack\")\n2. person.__init__(\"Jack\")\n```\n\n- 触发机制：实例化对象时自动触发（在**init**之前触发）\n- 作用：管理控制对象创建的过程\n- 参数：一个 cls 接受当前类，其他参数根据初始化方法的参数进行决定\n- 返回值：必须返回 object.**new**(cls)进行对象的创建，如果没有返回值，则实例化的对象的结果为 None\n- 注意事项：\n  - **new**方法的参数和**init**方法的参数要保持一致，除了第一个参数\n  - 必须返回 object.**new**(cls)进行对象的创建，如果没有返回值，则实例化对象的结果为 None\n  - 通常情况下，定义了**new**，就不用再定义**init**方法了\n- 应用场景：设计模式中的单例设计模式\n\n```python\nclass Square(int):\n    def __new__(cls,value:int):\n        return super().__new__(cls,value**2)\n\nnum = Square(2)\nprint(num)\nprint(type(num))\nprint(isinstance(num, int))\n\n\nclass Student:\n    def __new__(cls,name,gender):\n        obj = super().__new__(cls)\n        obj.name = name\n        obj.gender = gender\n        return obj\n\nstudent = Student(\"zachary\",\"male\")\nprint(student.name)\nprint(student.gender)\n```\n\n## **del** 析构方法\n\n- 触发机制：当该类对象被销毁时，自动触发\n- 作用：关闭或释放对象创建时打开或创建的一些资源\n- 参数：一个 self，接受当前对象\n- 返回值：无\n- 注意事项：无\n\n## **call**\n\n- 触发机制：把对象当做函数直接调用时自动触发\n- 作用：一般用于归纳类或对象的操作步骤，方便调用\n- 参数：一个 self 接收当前对象，其他参数根据调用需求确定\n- 返回值：可有可无\n\n```python\nclass Person():\n\n    # 构造方法\n    def __new__(cls, *args, **kwargs):\n        print('触发了构造方法')\n        print(args)\n        return object.__new__(cls)\n        # 必须要有这一句才能返回object对象,才能触发init\n\n    # 初始化方法\n    def __init__(self, name, age, gender):\n        print('触发了初始化方法')\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    def __call__(self, *args, **kwargs):\n        print('你把对象当成了函数进行调用')\n\n    # 析构方法\n    def __del__(self):\n        print('触发了析构方法')\n\n\n# 实例化对象\nduanduan = Person('duandaun', 23, 'female')\nduanduan()\n# 触发了构造方法\n# ('duandaun', 23, 'female')\n# 触发了初始化方法\n# 你把对象当成了函数进行调用\n# 触发了析构方法\n```\n\n## **len**\n\n可以代替对象使用 len 函数，并返回一个指定的整型\n\n- 触发机制：当使用 len 函数去检测当前对象的时候自动触发\n- 作用：可以使用 len 函数检测当前对象中某个数据的信息\n- 参数：一个 self 接收当前对象\n- 返回值：必须有，并且必须是一个整数\n- 注意事项：len 要获取什么属性的值，就在返回值中返回那个属性的长度即可\n\n## **str**\n\n可以代替对象进行 str 或者 print 的字符串信息返回\n\n- 触发机制：当使用 str 或者 print 函数对对象进行操作时自动触发\n- 作用：代码对象进行字符串的返回，可以自定义打印的信息；该描述面向用户\n- 参数：一个 self，接受当前对象\n- 返回值：必须有，而且必须是字符串类型的值\n\n## **repr**\n\n- 触发机制：在使用 repr 方法对当前对象进行转换时自动触发，某种情况 print 也可以触发\n- 作用：可以设置 repr 函数操作对象的结果；该描述的主要目标是机器或者开发者\n- 参数：一个 self 接受当前对象\n- 返回值：必须有，而且必须是字符串类型的值\n- 注意：正常情况下，如果没有**str**这个魔术方法，**repr**方法就会代替**str**魔术方法，可以使用 print 进行触发\n\n## **bool**\n\n- 触发机制：当使用 bool 函数转换当前对象时，自动触发\n- 作用：可以代替对象进行布尔类型的转换，可以转换任何数据\n- 参数：一个 self 接收对象\n- 返回值：必须是一个布尔类型的返回值，如果没有实现**bool**方法，会去掉用**len**的结果求解 bool 值\n\n## **eq**\n\n- 触发机制：当使用`==`比较两个对象的内容是否相同的时候\n- 作用：对比两个对象是否相等的逻辑\n- 参数：一个 self 接收对象，other 接收另一个对象\n- 返回值：必须有 Bool 类型\n\n## **hash**\n\n- 触发机制：使用`hash()`方法 或者 将该对象加入到 set、dict 等需要调用 hash()方法的时候会调用\n- 作用：根据对象生成 hash 值的逻辑\n- 参数：一个 self 接收对象\n- 返回值：hash 值\n\n```python\nclass Demo():\n    listurl = []\n\n    def __len__(self):\n        return len(self.listurl)\n\n    def __str__(self):\n        return '这是当前脚本中的一个对象'\n\n    def __repr__(self):\n        return '这是一个对象'\n\n\nobj = Demo()\nres = len(obj)\nprint(res)  # 0\n\n# 使用__str__\nprint(obj)  # 这是当前脚本中的一个对象\nres = str(obj)\nprint(res)  # 这是当前脚本中的一个对象\n\n# 注释掉__str__, 只使用__repr__\nprint(obj)  # 这是一个对象\n\n# 不用注释掉__str__, 使用__repr__\nres = repr(obj)\nprint(res)  # 这是一个对象\n\n\n# 使用bool without __bool__\nres = bool(obj)\nprint(res) # False  因为listurl是空的，若listurl有值，则为True\n\nclass MyDate():\n    def __init__(self,year,month,day):\n        self.year = year\n        self.month = month\n        self.day = day\n\n\n\tdef __eq__(self,other):\n        if not isinstance(other,MyDate):\n            return False\n\n    \treturn self.year == other.year and self.month == other.month and self.day == other.day\n\n\n    def __hash__(self):\n        print(\"__hash__被调用了\")\n        return hash(self.year + self.month * 41 + self.day * 41)\n\n\n# eq\nmydate1 = MyDate(2023,1,4)\nmydate2 = MyDate(2023,1,4)\nmydate3 = mydate1\nprint(mydate1 is mydate2)\nprint(mydate1 is mydate3)\nprint(mydate1 == mydate2)\nprint(mydate1 == mydate3)\n\n# hash\ntest_set = set()\ntest_set.add(mydate1)\nprint(hash(mydate2))\n```\n\n## str 与 repr\n\nstr 和 repr 函数都能够把其他类型的数据转化为字符串类型 str 函数会把对象 转为 更适合人类阅读的形式 repr 函数会把对象 转为 更适合解释器读取的形式 如果数据对象并没有明显的区别的话，str 和 repr 结果是一样的\n\n# 成员相关魔术方法\n\n1. **getattribute**(self, item)\n\n- 触发机制：当访问对象成员时，自动触发，无论当前成员是否存在，也无论当前成员是否有值\n- 作用：可以在获取对象成员时，对数据进行一些处理\n- 返回值：可有可无，返回的值就是访问的结果\n- 注意事项：\n  - 在当前的魔术方法中，禁止使用 对象.成员 的方式进行成员访问，会触发递归\n  - 如果想要在当前魔术方法中访问对象的成员必须使用 object 来进行访问\n    - 格式：\n    - object.**getattribute**(self, item)\n\n2. **getattr**\n\n- 触发机制：当访问对象中不存在的成员时，自动触发\n- 作用：防止访问不存在的成员时报错，也可以为不存在的成员进行赋值操作\n- 参数：一个 self 接收当前对象，一个 item 接收当前访问的成员名称\n- 返回值：可有可无\n- 注意事项：\n  - 如果有**getattribute**存在，就会无法使用**getattr**，会直接调用到**getattribute**\n  - 也要注意，不要在当前的方法中再次去访问这个不存在的成员，会触发递归操作\n\n3. **setattr**\n\n- 触发机制：当给对象的成员进行赋值操作时会自动触发（包括添加、修改）\n- 作用：可以限制或管理对象成员的添加和修改操作\n- 参数：1.self 接收当前对象 2.设置的成员名 3.设置的成员值\n- 返回值：无\n- 注意事项：\n  - 在当前的魔术方法中禁止给当前对象的成员直接进行赋值操作，会触发递归操作，\n  - 如果想要给当前对象的成员进行赋值，需要借助 object\n    - 格式：object.**setattr**(self,key,value)\n  - 该方法中如果没有给对象成员进行赋值，那么对象成员赋值失败\n\n4. **delattr**\n\n- 触发机制：当删除对象成员时自动触发\n- 作用：可以去限制对象成员的删除，还可以删除不存在成员时的报错\n- 参数：1.self 接收当前对象 2.item 删除的成员名称\n- 返回值：无\n- 注意事项：\n  - 在当前魔术方法中禁止直接删除对象的成员，会触发递归操作\n  - 如果想要删除当前对象的成员，那么需要借助 object\n    - 格式：object.**delattr**(self,item)\n\n## 访问一个成员的顺序\n\n1. 调用 **getattribute**魔术方法\n2. 调用数据描述符\n3. 调用当前对象的成员属性\n4. 调用当前类的成员\n5. 调用非数据描述符\n6. 调用父类的成员\n7. 调用**getattr**魔术方法\n\n```python\nclass Person():\n    name = '名字'\n    age = '年龄'\n    gender = '性别'\n\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    def say(self):\n        print('聊一聊，倾诉一下')\n\n    def sing(self):\n        print('庄先生，高歌一曲')\n\n    # 获取成员对象时候 自动触发\n    def __getattribute__(self, item):\n        try:\n            # 在方法中只能使用object获取属性值\n            res = object.__getattribute__(self, item)\n            return res[0] + '*' + res[-1]\n        except:\n            return False\n\n    def __getattr__(self, item):\n        print(item)\n        return False\n\n    def __setattr__(self, key, value):\n        object.__setattr__(self, key, value)\n\n    def __delattr__(self, item):\n        object.__delattr__(self, item)\n\n\nduan = Person('duanduan', 23, 'female')\nprint(duan.name)  # d*n\nprint(duan.salary)  # False\n\n# 把 __getattribute__ 注释掉\nprint(duan.name)  # duanduan\nprint(duan.salary)\n# salary\n# False\n\n# 把 __getattribute__ 注释掉\nduan.salary = 10000\nprint(duan.salary)  # 10000\n\n# 把 __getattribute__ 注释掉\ndel duan.salary\nprint(duan.salary)  # salary\ndel duan.name\nprint(duan.name)\n# False\n# 名字\n```\n\n# 描述符与 property\n\n当一个类中，包含了三个魔术方法（**get**,**set**,**delete**）之一，或者全部，那么这个类就被称为描述符类\n\n## 基本语法\n\n描述符的作用：\n\n- 描述符的作用就是对一个类中的某个成员进行一个详细的管理操作（获取、赋值、删除）\n- 描述符就是代理了一个类中的成员的操作，描述符属于类，只能定义为类的属性\n\n一个类中的成员的值是另一个描述符类的对象() 那么当对这个类中的成员进行操作时，可以理解为就是对另一个对象的操作 使用格式：把当前的描述符类赋值给一个需要代理的类中的成员属性\n\n```python\nclass PersonName():\n    __name = 'duanduan'\n\n    def __get__(self, instance, owner):\n        # print(self,instance,owner)\n        return self.__name\n\n    def __set__(self, instance, value):\n        # print(self,instance,value)\n        self.__name = value\n\n    def __delete__(self, instance):\n        del self.__name\n\n\nclass Person():\n    # 把类中的成员属性交给描述符来实现\n    name = PersonName()\n\n\nduan = Person()\nprint(duan.name)  # duanduan\nduan.name = 'duanxiaozhu'\nprint(duan.name)  # duanxiaozhu\ndel duan.name\nprint(duan.name)  # duanduan\n```\n\n实际上真正的用法应该是下面这个例子，还需要额外使用一个\n\n`__set_name__(self, owner, name)`方法 给属性赋值\n\n```python\nclass PersonName:\n    def __set_name__(self, owner, name):\n        self.__property_name = name\n\n\tdef __set__(self, instance, value):\n        # 做一些校验\n        if not isinstance(value, str):\n            raise Exception(f\"{self.__property_name} is not a str type\")\n        if len(value) == 0:\n            raise Exception(f\"{self.__property_name} is empty\")\n        instance.__dict__[self.__property_name] = value\n\n\tdef __get__(self, instance, owner):\n        if self.__property_name in instance.__dict__:\n       \t\treturn instance.__dict__[self.__property_name]\n        return None\n\n```\n\n## 应用案例\n\n```python\n'''\n定义一个学生类，需要记录，学员的id、名字、分数\n解决方法：\n    1. 在__init__方法中检测当前分数范围的合法性\n    但是这个方法只能在初始化的时候有效，之后修改的话就无效了\n    2. 定义一个__setattr__的魔术方法进行检测\n    检测给分数进行赋值的时候的一个合法性\n\n假如 学员的分数不止一个时怎么办，比如 语文分数、数学分数、英语分数 甚至类中的代码比较多的情况\n解决方法：\n    3. 可以使用描述符来代理我们分数这个属性\n\n'''\n# 定义一个学生类，需要记录，学员的id、名字、分数\n# 解决方法：1. 2.\nclass Student():\n    def __init__(self,id,name,score):\n        self.id = id\n        self.name = name\n        if score >= 0 and score <=100:\n            self.score = score\n        else:\n            print('当前分数出错啦')\n\n    def returnShe(self):\n        info =  f'''\n        学号：{self.id}\n        姓名：{self.name}\n        分数：{self.score}\n        '''\n        print(info)\n\n    def __setattr__(self, key, value):\n        # 检测是否是给score进行赋值操作\n        if key == 'score':\n            if value >= 0 and value <= 100:\n                object.__setattr__(self,key,value)\n            else:\n                print('当前分数出错啦')\n        else:\n            object.__setattr__(self,key,value)\n\nduan = Student(2022,'duanduan',100)\nduan.returnShe()\nduan.score = 1000\nduan.returnShe()\n\n\n#解决方法： 3. 使用描述符来代理我们分数这个属性\n\n# 定义描述符类\nclass Score():\n    def __set__(self, instance, value):\n        if value >= 0 and value <= 100:\n            self.__score = value\n        else:\n            print('当前分数出错啦')\n\n    def __get__(self, instance, owner):\n        return self.__score\n\n    def __delete__(self, instance):\n        pass\n\nclass Student():\n    score = Score()\n    def __init__(self,id,name,score):\n        self.id = id\n        self.name = name\n        self.score = score\n\n\n\n    def returnShe(self):\n        info =  f'''\n        学号：{self.id}\n        姓名：{self.name}\n        分数：{self.score}\n        '''\n        print(info)\n\n\nduan = Student(2022,'duanduan',100)\nduan.returnShe()\nduan.score = 1000\nduan.returnShe()\n```\n\n## 三种定义方式\n\n- **数据描述符**(完整)\n  - 同时具备三个魔术方法的类就是 **数据描述符**\n- **非数据描述符** （不完整）\n  - 没有同时具备三个魔术方法的类就是 **非数据描述符类**\n\n### 第一种\n\n```python\n# 格式一 通过定义描述符类来实现\n\nclass ScoreManage():\n    def __get__(self, instance, owner):\n        pass\n    def __set__(self, instance, value):\n        pass\n    def __delete__(self, instance):\n        pass\n\nclass Student():\n    score = ScoreManage()\n```\n\n### 第二种\n\n```python\n# 格式二 使用property函数来实现\nclass Studebnt():\n\n    def getscore(self):\n        print('getscore')\n\n    def setscore(self, value):\n        print('setscore', value)\n\n    def deletescore(self):\n        print('deletescore')\n\n    # 在property函数中指代对应的三个方法,并且参数要按顺序对应上\n    # 1.__get__ 2.__set__ 3.__delete__\n    score = property(getscore, setscore, deletescore)\n\n\nxs = Studebnt()\nprint(xs.score)\n# getscore\n# None  因为上面的getscore没有返回值\nxs.score = 100  # setscore 100\nprint(xs.score)\n# getscore\n# None  因为上面的getscore没有返回值\ndel xs.score # deletescore\n```\n\n### 第三种\n\n```python\n# 格式三 使用装饰器 @property 语法来实现\nclass Student():\n    __score = None\n\n    @property\n    def score(self):\n        print('get')\n        return self.__score\n\n    @score.setter\n    def score(self, value):\n        print('set')\n        self.__score = value\n\n    @score.deleter\n    def score(self):\n        print('delete')\n        del self.__score\n\n\nxs = Student()\nprint(xs.score)\n# get\n# None\nxs.score = 100  # set\nprint(xs.score)\n# get\n# 100\ndel xs.score  # delete\n```\n\n# 设计模式\n\n设计模式是前人为了完成某个功能或需求，根据经验和总结，对实现的代码步骤和代码设计进行了总结和归纳。成为了实现某种需求的经典模式 设计模式并不是固定的，而是一种面向对象编程的设计\n\n## 单例(单态)设计模式\n\n在当前脚本中，同一个类只能创建出一个对象去使用，这种情况就称为单例(单态)\n\n- 数据库连接对象\n- 共享对象\n-\n\nPython 中的单例模式设计思路，\n\n- 1、需要有一个方法，可以去控制当前对象的创建\n  - 构造方法 **new**\n- 2、需要有一个标识来存储和表示是否有对象\n  - 创建一个属性，进行存储，默认值为 None\n- 3、在创建对象的方法中去检测和判断是否有对象？\n  - 如果没有对象，则创建对象，并且把对象存储起来\n  - 如果存储的是对象，则直接返回对象，就不需要创建新的对象了\n\n### 这个代码很重要\n\n```python\nclass Demo():\n    # 2.定义私有属性存储对象，默认值为None\n    __obj = None\n\n    # 1.定义构造方法\n    def __new__(cls, *args, **kwargs):\n        # 3.在创建对象的过程中,判断是否有对象\n        if not cls.__obj:\n            cls.__obj = object.__new__(cls)\n\n        return cls.__obj\n\n\na = Demo()\nb = Demo()\nprint(a)  # <__main__.Demo object at 0x10344e1d0>\nprint(b)  # <__main__.Demo object at 0x10344e1d0>\n```\n\n使用装饰器来实现的话\n\n```python\ndef singleton(cls):\n    _obj = {}\n\n\tdef inner(*args, **kwargs):\n        if cls in _obj:\n            return _obj[cls]\n\n        obj = cls(*args, **kwargs)\n        _obj[cls] = obj\n        return obj\n\n\treturn inner\n\n@singleton\nclass Demo:\n    pass\n\na = Demo()\nb = Demo()\nprint(a is b)\n```\n\n装饰器模式-2\n\n```python\ndef singleton(cls):\n    def inner():\n    \tif hasattr(cls,\"__obj\"):\n            return getattr(cls,\"__obj\")\n\n        obj = cls()\n        setattr(cls,\"__obj\",obj)\n        return obj\n\treturn inner\n\n@singleton\nclass Demo:\n    pass\n\na = Demo()\nb = Demo()\nprint(a is b)\n```\n\n装饰器模式-3，使用元类来设计\n\n```python\nclass SingletonMeta(type):\n    def __call__(cls, *args, **kwargs):\n        if hasattr(cls,\"__obj\"):\n            return getattr(cls,\"__obj\")\n\n        obj = super().__call__(*args, **kwargs)\n        setattr(cls,\"__obj\",obj)\n        return obj\n\nclass Demo(metaclasss=SingletonMeta):\n    pass\n\na = Demo()\nb = Demo()\nprint(a is b)\n\n```\n\n## mixin 混合设计模式\n\n继承需要一个必要的前提，继承应该是一个‘is-a’的关系 例如：苹果可以去继承水果，因为苹果是一个水果\n\n- Minin 表示混合\n  - Minin 必须是表示一种功能，而不是一个对象\n  - Minin 的功能必须单一，如果有多个功能，那就多定义 Minin 类\n  - Python 中的 Minin 是通过多继承实现的\n  - Minin 这个类通常不单独使用,而是混合到其他类中,去增加功能\n  - Minin 类不依赖子类的实现,即便子类没有继承这个 Minin,子类也能正常运行,就是可能会缺少了一些功能\n- 使用 Minin 混合类的好处\n  - 在不对类的内容修改的前提下，扩展了类的功能\n  - Minin 混合类为了提高代码的重用性，使得代码结构更加简单清晰\n  - 可以根据开发需求任意调整功能（创建新的 Minin 类）\n  - 避免设计多层次的复杂继承关系\n- 解决方案使用的还是多继承，但是给飞行器这个类的名称定义成为一个 Minin 混合类\n- 这样的一个 Minin 混合类，功能单一、并且不会单独使用：只有一个飞行器的功能，在继承的时候不会单一继承这一个，作为一个扩展的功能\n\n```python\n# 解决方案使用的还是多继承，但是给飞行器这个类的名称定义成为一个 Minin 混合类\n# 这样的一个Minin混合类，功能单一、并且不会单独使用：只有一个飞行器的功能，在继承的时候不会单一继承这一个，作为一个扩展的功能\n\n# 交通工具类\nclass vehicle():\n\n    def huo(self):\n        print('运输货物')\n\n    def ren(self):\n        print('搭载乘客')\n\n# 飞行器类\nclass flyingMixin():\n    def fly(self):\n        print('可以起飞啦')\n\n\n# 定义汽车类\nclass cart(vehicle):\n    pass\n\n\n# 定义飞机类\nclass airplane(vehicle,flyingMixin):\n    pass\n\n# 定义直升机\nclass helicopter(airplane,flyingMixin):\n    pass\n```\n\n实现一个具体的列子\n\n```python\nclass ItemMixin:\n    def __getitem__(self, key):\n        return self.__dict__[key]\n\n\tdef __setitem__(self, key, value):\n        self.__dict__[key] = value\n\nclass Car(ItemMixin):\n    def __init__(self, origin, auto):\n        self.origin = origin\n        self.auto = auto\n\ncar = Car(\"Germany\", True)\nprint(car[\"origin\"])\n```\n\n练习：把一个对象转换成 dict 和 json 格式，使用 mixin 设计模式\n\n```python\nclass DictMixin:\n    def to_dict(self):\n        return self.__dictConvert(self.__dict__)\n\n\tdef __dictConvert(self, dicAttrs: dict):\n        resDict = {}\n        for key, value in dicAttrs.items():\n            resDict[key] = self.__valueConvert(value)\n\n    \treturn resDict\n\n    def __valueConvert(self, value):\n        if isinstance(value, DictMixin):\n            return value.to_dict()\n        elif isinstance(value, dict):\n            return self.__dictConvert(value)\n        elif isinstance(value, list):\n            return [self.__valueConvert(i) fot i in list]\n        elif hasattr(value,'__dict__):\n            return self.__dictConvert(value)\n\t\telse:\n            return value\n\n\nclass JSONMixin:\n    def to_json(self):\n        return json.dumps(self.to_dict())\n\nclass Car(DictMixin, JSONMixin):\n    def __init__(self, origin, auto):\n        self.origin = origin\n        self.auto = auto\n\n\ncar = Car(\"Germany\",True)\nprint(car.to_dict())\nprint(car.to_json())\n```\n\n## 抽象类\n\n- 抽象类是一个特殊的类\n  - 抽象类不能用，不能直接实例化成为一个对象\n  - 抽象类中包含了抽象方法，抽象方法就是没有实现的代码的方法\n  - 抽象类需要子类继承，并重写父类的抽象方法，才可以使用\n- 如果要定义一个抽象类，需要继承`metaclass=abc.ABCMeta`类 或者 `ABC`\n- 如果要定义一个抽象方法，需要使用装饰器进行装饰`@abc.abstractmethod`\n- 抽象类不能直接实例化\n- 想要实现一个抽象类，需要定义一个子类去继承抽象类，然后实现抽象类中的抽象方法\n\n```python\nimport abc\n\n\nclass AbsCls(metaclass=abc.ABCMeta):\n\n    @abc.abstractmethod\n    def absmethod(self):\n        pass\n\n    def othermethod(self):\n        print('这是一个实现了的方法')\n\n\nclass sonclass(AbsCls):\n\n    def absmethod(self):\n        print('son实现了抽象类的抽象方法')\n\n\nclass daughterclass(AbsCls):\n    def absmethod(self):\n        print('daughter实现了抽象类的抽象方法')\n\n\ndef method_call(abscls: AbsCls):\n    abscls.absmethod()\n\n\nobj = sonclass()\nobj.absmethod()\nobj.othermethod()\n# 实现了抽象类的抽象方法\n# 这是一个实现了的方法\n\nson = sonclass()\ndaughter = daughterclass()\nmethod_call(son)\nmethod_call(daughter)\n```\n\n# 枚举\n\n## 基本用法\n\n作用：代码中的数值，不便于阅读和查错\n\n```python\nclass Student:\n    def __init__(self):\n        self.gender = 1 # male 1 female 0\n```\n\n定义枚举类：通过继承 `enum.Enum`实现一个枚举类\n\n- 可以通过字符串 用[]获取到对应的枚举类型\n- 可通过整数类型转换 用()获取到对应的枚举类型\n- 枚举类本身是可以迭代的（比如 下拉列表，需要获取全部选项）\n\n```python\nfrom enum import Enum\n\nclass Gender(Enum):\n    MALE = 1\n    FEMALE = 2\n\nclass Student:\n    def __init__(self):\n        self.gender = Gender.MALE\n\n\nprint(Gender.MALE.name)\nprint(Gender.MALE.value)\n\n# 可以通过字符串 用[]获取到对应的枚举类型\ngender_str = \"MALE\"\nstudent = Student()\nstudent.gender = Gender[gender_str]\nprint(student.gender)\n\n# 也可通过整数类型转换 用()获取到对应的枚举类型\ngender_int = 2\nstudent.gender = Gender(gender_int)\nprint(student.gender)\n\n# 遍历枚举成员\nfor gender in Gender:\n    print(gender)\n\n\n```\n\n## 枚举成员的别名\n\n- 枚举类中的多个成员具有同一个 value 时，只有一个能成为主要成员，其余是别名\n- 可以通过`__members__`获取枚举类的所有成员\n- 唯一枚举装饰器 `@enum.unique`（为了避免 不允许重复 value 的情况下出错，比如有时候复制粘贴会写出两个相同 value 的枚举 然后忘记修改的情况，可以使用唯一枚举装饰器进行处理）\n\n```python\nclass ResStatus(Enum):\n    SUCCESS = 1\n    OK = 1\n    FAIL = 2\n    NO = 2\n\nfor rs in ResStatus:\n    print(rs.name)\n\n\n#获取枚举类所有成员\nprint(ResStatus.__members__)\nprint(ResStatus.SUCCESS == ResStatus.OK)\nprint(ResStatus.SUCCESS is ResStatus.OK)\n\n@num.unique\nclass Status(Enum):\n    SUCCESS = 1\n    OK = 1\n    FAIL = 2\n    NO = 2\n\n```\n\n## 枚举的扩展\n\n1. `__str__`\n\n```python\nclass ResStatus(Enum):\n    SUCCESS = 1\n    OK = 1\n    FAIL = 2\n    NO = 2\n\n\tdef __str__(self):\n        print(f\"{self.name}({self.value})\")\n\nprint(ResStatus.OK)\n```\n\n2. `__eq__`\n\n```python\nclass ResStatus(Enum):\n    SUCCESS = 1\n    OK = 1\n    FAIL = 2\n    NO = 2\n\n\tdef __eq__(self,other):\n        if isinstance(other,int):\n            return self.value == other\n\n        if isinstance(other,str):\n            return self.name == other.upper()\n\n    \tif isinstance(other,ResStatus):\n            return self is other\n\n    \treturn False\n\nprint(ResStatus.OK == 1)\n```\n\n3. `__lt__`\n\n需要使用`@total_ordering`\n\n```python\n@total_ordering\nclass OrderOfProcess(Enum):\n    START = 1\n    PROCESSING = 2\n    TEST = 3\n    END = 4\n\n\tdef __lt__(self):\n        if isinstance(other,int):\n            return self.value < other\n\n    \tif isinstance(other,OrderOfProcess):\n            return self.value < other.value\n\n    \treturn False\n\nprint(OrderOfProcess.PROCESSING < 2)\nprint(OrderOfProcess.END < OrderOfProcess.TEST)\n```\n\n4. `auto()`\n\n按顺序给枚举成员赋值\n\n```python\nclass ResStatus(Enum):\n    SUCCESS = auto()\n    FAIL = auto()\n```\n\n> 更新: 2024-01-11 22:37:47  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/yke47fm8vxrh2w6g>\n","tags":["Python"],"categories":["Python面向对象"]},{"title":"Python - 面向对象基础","url":"/blog/138858063/","content":"\n# 面向对象基础\n\n# 课程介绍\n\n- 面向对象基础\n- 面向对象高阶\n- 异常\n- 模块与包\n- 项目（ATM/Library）\n\n# 面向对象是什么\n\n面向对象编程 ——（Object Oriented Programming，简称 OOP），是一种以对象为中心的程序设计思想\n\n面向过程编程 ——（Procedure Oriented Programming，简称 POP），是一种以过程为中心的程序设计思想\n\n# 面向对象的总结和类与对象\n\n## 面向过程\n\n面向过程的核心是**过程**，过程就是只解决问题的步骤\n\n- 优缺点\n  - 优点：将负责的问题流程化，进而实现简单化\n  - 缺点：扩展性差（更新、维护、迭代）\n\n总结：再去完成一些简单的程序时，可以使用面向过程去解决，但是如果有复杂的程序或任务，而且需要不断的进行迭代和维护，那么肯定是优先选择面向对象的编程思想\n\n## 面向对象\n\n面向对象的核心是对象，是一个特征和功能的综合体\n\n- 优缺点\n  - 优点：可扩展性高\n  - 缺点：变成复杂度相对面向过程高一些，指的是在计算机在执行面向对象的程序时的性能表现\n\n### 面向对象中的一些名称(术语)\n\n- 类：类是对象的一个抽象的概念\n- 对象：对象是类创建的一个实例\n- 类和对象的关系就是：模具和铸件\n  - 类是由对象总结而来的，总结的这个过程叫做抽象\n  - 对象是由类具体实施出来的，这个过程叫做实例化\n\n# 面向对象-基本实现\n\n如果需要实例一个对象，那么需要先抽象一个类\n\n- 类名的书写规范：使用驼峰命名法\n  - 大驼峰：MyCar、XiaoMi\n  - 小驼峰：myCar、xiaoMi\n\n例如需要创建一个汽车对象，先要创建一个汽车类\n\n- 使用 class 定义一个类\n- 一个类中有属性和方法\n  - 属性：就是特征，即变量，类中称为属性；分为类属性和实例属性\n  - 方法：就是功能，即函数，在类中称为方法；分为类方法和实例方法\n- 类中的属性一般定义在方法前面\n\n```python\nclass Cart():\n    # 属性\n    color = '白色'\n    brand = 'Audi'\n    pailiang = 2.4\n\n    # 方法\n    def lahuo(self):\n        print(f'{self.color}的{self.brand}能拉货')\n\n    def doufeng(self):\n        print(f'排量{self.pailiang}能兜风')\n\n\nmycar = Cart()\nprint(mycar, type(mycar))  # <__main__.Cart object at 0x100b338d0> <class '__main__.Cart'>\nprint(mycar.brand)  # Audi\nmycar.lahuo()  # 白色的Audi能拉货\nmycar.doufeng()  # 排量2.4能兜风\n```\n\n# 对象成员的操作\n\n什么是对象的成员？ 一个对象通过实例化之后，在类中定义的属性和方法，可以使用实例化的对象进行操作 类中定义的属性就是成员属性，类中定义的方法就是成员方法\n\n## 对象的成员操作：\n\n- 在类的外部，使用对象操作成员\n  - 通过对象访问类中的属性\n    - 先访问对象自己的属性\n    - 若对象自己没有这个属性，就去访问对象的类的属性\n  - 修改对象访问的类的属性\n    - 实际上修改的并不是对象的类的属性\n    - 而是创建了一个对象自己的属性并赋值\n  - 给对象添加属性\n    - 这是给对象创建了自己的属性 不是对象的类的属性\n  - 删除属性\n    - 只能删除对象属性，不能删除对象访问的类属性\n- 在类的外部 通过对象，访问类中的方法\n  - 访问对象的方法\n    - 先访问对象自己的方法\n    - 若对象自己没有这个方法，则访问对象的类的方法\n  - 修改对象的方法\n    - 实际上修改的并不是对象的类方法\n    - 而是创建了一个对象的方法并调用\n  - 给对象添加方法\n    - 这创建的是对象的新方法，并没有给对象的类创建方法\n  - 删除对象的方法\n    - 同样只能删除对象的方法，对象的类的方法无法删除\n- 总结：一个类定义类成员属性和成员方法，那么通过这个类实例化的对象，也具备这些方法和属性嘛？\n  - 实际上，在创建对象的时候，并不会把类中的属性和方法也复制一份给对象，实际上是在对象中引用类的方法，所以不同对象调用同一个属性或方法，是相通的。\n  - 因此在访问对象的属性时，会先去寻找对象自己的属性，如果没有去找类的属性和方法\n  - 而如果给对象的属性或方法进行修改或者添加的时候，等于给对象创建了一个自己的属性和方法，并不调用类的，而且删除的时候也只能删除对象本身的添加或修改的那个属性和方法。\n\n```python\nclass Cart():\n    # 属性\n    color = '白色'\n    brand = 'Audi'\n    pailiang = 2.4\n\n    # 方法\n    def lahuo(self):\n        print(f'{self.color}的{self.brand}能拉货')\n\n    def doufeng(self):\n        print(f'排量{self.pailiang}能兜风')\n\n\na = Cart()\nb = Cart()\nprint(a)  # <__main__.Cart object at 0x104e27250>\nprint(b)  # <__main__.Cart object at 0x104e31450>\n\n# 通过对象访问类中的属性\nres = a.color\nprint(res)  # 白色\nres = b.color\nprint(res)  # 白色\n\n# 修改对象的属性\na.color = '黑色'\nprint(a.color)  # 黑色\nprint(b.color)  # 白色\n\n# 给对象添加属性\na.name = 'A6L'\nprint(a.name)  # A6L\ntry:\n    print(b.name)  # b不存在\nexcept:\n    print('b不存在')\n\n# 删除属性，只能删除对象属性，不能删除对象访问的类属性\ntry:\n    del a.name\n    print('成功')  # 成功\nexcept:\n    print('不成功')\n\ntry:\n    del a.brand  # 不能删除对象的类属性\nexcept:\n    print('不能删除对象的类属性')\n\n# 访问对象的方法\na.doufeng()  # 排量2.4能兜风\n\n\n# 修改对象的方法\ndef newfunc():\n    print('这是一个新的方法')\n\n\na.doufeng = newfunc\na.doufeng()  # 这是一个新的方法\n\n# 给对象添加方法\na.xiuche = newfunc\na.xiuche()  # 这是一个新的方法\n\n# 删除对象的方法\ntry:\n    del a.brand  # 不能删除类方法\n    print('可以删除类方法')\nexcept:\n    print('不能删除类方法')\n\ntry:\n    del a.xiuche  # 可以删除对象的方法\n    print('可以删除对象的方法')\nexcept:\n    print('不能删除对象的方法')\n```\n\n# 类成员的操作\n\n- 访问类成员属性、方法\n  - 使用类名.类属性进行访问\n  - 使用 `getattr()`方法\n  - 使用类名.类方法(类名)进行访问\n- 修改类成员属性、方法\n  - 使用类名.类属性=新值进行修改\n  - 使用 `setattr()`方法\n  - 使用类名.类方法=新方法()进行修改\n  - 修改后的类成员属性、方法就会彻底更新，创建一个新的对象调用类属性、方法，属性、方法会更新\n- 添加类成员属性、方法\n  - 使用类名.新类属性=新值进行新增\n  - 使用 `setattr()`方法\n  - 使用类名.新类方法=新方法()进行新增\n  - 新增的类属性、类方法，可以被创建的对象访问到\n- 删除类成员属性、方法\n  - 使用 del 类名.类属性删除类成员属性\n  - 使用 `delattr()`方法\n  - 使用 del 类名.类方法删除类成员方法\n  - 删除之后再使用对象访问类属性、方法会访问不到\n\n```python\nclass Cart():\n    # 属性\n    color = '白色'\n    brand = 'Audi'\n    pailiang = 2.4\n\n    # 方法\n    def lahuo(self):\n        print(f'{self.color}的{self.brand}能拉货')\n\n    def doufeng(self):\n        print(f'排量{self.pailiang}能兜风')\n\n\n# 访问类成员属性\nprint(Cart.brand)  # Audi\n\n# 修改类成员属性\nCart.brand = '宝马'\nprint(Cart.brand)  # 宝马\nopp = Cart()\nprint(opp.brand)  # 宝马\n\n# 添加类成员属性\nCart.name = 'A7'\nprint(Cart.name)  # A7\nopp = Cart()\nprint(opp.name)  # A7\n\n# 删除类成员属性\ndel Cart.brand\ntry:\n    opp = Cart()\n    print(opp.brand)  # opp没有brand\nexcept:\n    print('opp没有brand')\n\n# 访问类成员方法\nCart.doufeng(Cart)  # 排量2.4能兜风\n\n\n# 修改类成员方法\ndef newm(self):\n    print('这是一个新的方法')\n\n\nCart.doufeng = newm\nCart.doufeng(Cart)  # 这是一个新的方法\nopp = Cart()\nopp.doufeng()  # 这是一个新的方法\n\n# 添加类成员方法\nCart.xinfangfa = newm\nCart.xinfangfa(Cart)  # 这是一个新的方法\nopp = Cart()\nopp.xinfangfa()  # 这是一个新的方法\n\n# 删除类成员方法\ndel Cart.doufeng\ntry:\n    Cart.doufeng()  # 类的成员对象已删除\n    print('类的成员对象')\nexcept:\n    print('类的成员对象已删除')\n\nopp = Cart()\ntry:\n    opp.doufeng()  # 对象没有doufeng\n    print('对象还有doufeng')\nexcept:\n    print('对象没有doufeng')\n```\n\n# 类与对象的总结\n\n- 一个类可以实例化出多个对象，每个对象在内存中都独立存在\n- 当通过类实例化对象时，并不会把类中的成员复制一份给对象，而去给对象了一个引用\n- 访问对象成员的时候，如果对象自己没有这个成员，对象会向实例化它的类去查找\n- 对象成员的添加和修改，都只会影响当前对象自己，不会影响类和其他对象\n- 删除对象的成员时，必须是该对象自己具备的成员才可以\n- 对类的成员操作，会影响通过这个类创建的对象，包括之前创建的\n\n# self 详解\n\n- self 在方法中只是一个形参，并不是关键字\n- self 在方法中代表的是当前这个对象自身\n- self 在方法中代表对象可以去操作成员，可以使用 self 在类的内部访问成员\n- 只要是对象能完成的事情，self 都可以\n- 在类中定义的方法，都需要有一个形参 self，\n  - 这样的方法称为非绑定类方法\n  - 可以使用对象和类去访问\n- 否则，类中的方法没有形参 self，对象将无法调用这个方法，但是可以使用类去调用\n  - 这样的方法称为绑定类方法\n  - 只能使用类去访问\n\n```python\nclass Person():\n    name = 'xiaoduan'\n    age = 23\n\n    # 非绑定类方法\n    def introduce(self):\n        print(f'i am {self.name} {self.age} years old')\n\n    # 绑定类方法\n    def func():\n        print('这是一个绑定类方法')\n\n\nduan = Person()\nduan.introduce()  # i am xiaoduan 23 years old\nPerson.func()  # 这是一个绑定类方法\n```\n\n# 初始化方法\\_魔术方法\n\n魔术方法：\n\n魔术方法也和普通方法一样都是类中定义的成员方法 就是不需要去手动调用的，会在某种情况下自动触发（自动执行） 特殊点：多数的魔术方法 前后都有两个连续的下划线 魔术方法不是我们自己定义的，是系统定义好的，我们使用\n\n- **init** 初始化方法\n  - 通过类实例化对象之后，自动触发的一个方法\n  - 作用：可以在对象实例化之后完成对象的初始化（属性的赋值，方法的调用）\n  - 应用场景：文件的打开，数据的获取\n\n```python\nclass Person():\n    name = 'xiaoduan'\n    age = 23\n\n    def __init__(self):\n        print('这是一个初始化方法')\n        self.introduce()\n\n    def introduce(self):\n        print(f'i am {self.name} {self.age} years old')\n\n\nclass Person2():\n    name = None\n    age = None\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        print(f'i am {self.name} {self.age} years old')\n\n\nduan = Person()  # 这是一个初始化方法\n# i am xiaoduan 23 years old\nhuang = Person2('huang', 24)  # i am huang 24 years old\n```\n\n# 析构方法\n\n- **del** 析构方法\n  - 当前类实例化的对象被销毁时，自动触发\n  - 作用：可以在析构方法中完成一些特殊任务，关闭一些打开的资源，比如在初始化方法中打开的文件，可以在析构方法中关闭\n  - 注意：对象被销毁时，触发了这个方法，而不是这个方法销毁了对象\n  - 对象在哪些情况会被销毁：\n    - 当程序执行完毕，内存中所有的资源都会被销毁\n    - 使用 del 删除对象\n    - 对象不再被引用时，会自动销毁\n\n```python\nclass writeLog():\n    # 成员属性\n    # 文件的路径\n    fileurl = './'\n    # 文件的名称\n    filename = '2022-3-9'\n\n    def __init__(self):\n        print('写入日志初始化方法')\n        self.fileobj = open(self.fileurl+self.filename,'a+',encoding='utf-8')\n\n    def log(self,s):\n        print(f'日志内容为：{s}')\n        self.fileobj.write(s)\n\n    def __del__(self):\n        print('析构方法触发')\n        self.fileobj.close()\n\nobj = writeLog()\nobj.log('今天温度适宜出行')\n```\n\n# 日志类的封装\n\n- 日志类\n  - class Mylog\n  - 功能：能够随时写入一个日志信息\n- 分析\n  - 日志文件在什么地方？ 默认在当前目录\n  - 日志文件名是什么？ 当前日期 2022-03-11.log\n  - 日志的格式是什么样的？ 2022-03-11 12:12:12 错误信息\n  - 属性：成员属性的作用就是存储信息，供成员方法来使用\n    - fileurl 日志文件的地址\n    - filename 日志文件的名称\n    - fileobj 打开的文件对象\n  - 方法：具体完成的一个功能的过程\n    - **init**() ==> 初始化方法，完成对象的初始化，并打开文件\n    - wlog() ==> 负责接受用户给的日志信息，并写入到日志文件中\n    - **del**() ==> 析构方法，在对象被销毁时，关闭打开的文件\n\n```python\nimport time\n\nclass Mylog():\n    fileurl = './'\n    filename = str(time.strftime('%Y-%m-%d')) + '.log'\n    fileobj = None\n\n    def __init__(self):\n        # 打开文件\n        self.fileobj = open(self.fileurl+self.filename,'a+',encoding='utf-8')\n\n    def wlog(self,s):\n        date = time.strftime('%Y-%m-%d %H:%M:%S')\n        msg = date+' '+s+'\\n'\n        self.fileobj.write(msg)\n\n    def __del__(self):\n        # 关闭打开的文件\n        self.fileobj.close()\n\nlog = Mylog()\nlog.wlog('变量赋值错误')\n```\n\n# 面向对象的三大特性：封装、继承、多态\n\n## 封装\n\n封装就是使用特殊的语法,对成员属性和成员方法进行包装，达到保护和隐藏的目的 但是封装是为了限制一些访问和操作，但是不能全部都限制（不能不让使用） 被封装的成员只是限制了访问权限，并不是不让访问 通常情况下，被封装的成员主要是供内部使用\n\n### 封装的级别\n\n- 公有的 public\n  - 就是类中普通的成员属性\n- 受保护的 protected\n  - 在类中的成员属性前 加一个 \\_ 受保护的成员\n- 私有的 private\n  - 在类中的成员属性前 加两个 \\_\\_ 私有的成员\n\n| 封装的级别 | 公有的 public | 受保护的 protected | 私有的 private |\n| ---------- | ------------- | ------------------ | -------------- |\n| 在类的内部 | OK            | OK                 | OK             |\n| 在类的外部 | OK            | NO(Python 可以)    | NO             |\n\n实际上私有是这么实现的 对于**成员属性 ===> \\_类名**成员属性 进行了改写\n\n```python\nclass Resume():\n    # 成员属性\n    name = None\n    _age = None\n    __gender = None\n\n    def __init__(self, name, age, gender):\n        self.name = name\n        self._age = age\n        self.__gender = gender\n\n    # 成员方法\n    def introduce(self):\n        print(f'This is {self.name}')\n        print(self.__gender)\n\n    def _experience(self):\n        print(f'I am {self._age} years old')\n\n    def __superior(self):\n        print(f'I am a {self.__gender}')\n\n\n# 实例化对象\nduanduan = Resume('duanduan', 23, 'female')\n# 查看对象的所有属性\nprint(duanduan.__dict__)\n\ntry:\n    print(duanduan.name)\n    print(duanduan._age)\n    # print(duanduan.__gender) # 在类的外部不能操作私有成员\nexcept:\n    print('NO')\n\nduanduan._experience()  # I am 23 years old\n# duanduan.__superior()  # 在类的外部不能操作私有成员\nduanduan.introduce()\n# This is duanduan\n# female\n```\n\n## 继承\n\n### 单继承\n\n什么是继承？ 在面向对象中，一个类去继承父类，这个类就拥有了父类的所有成员(除了私有成员)\n\n概念\n\n- 被其他类继承的类，这个类称为父类 也叫做基类 或者 超类\n- 继承其他类的类，这个类称为子类 也叫做派生类\n- 子类可以有自己独立的成员，也可以没有\n- 在不指定继承的父类时，所有类都继承自 object 类（系统提供）\n- 子类继承了父类之后，就拥有了父类中所有的成员包括魔术方法（除了私有成员）\n- 子类继承父类后，重新定义了父类中的方法，这种情况称为对父类方法的重写\n  - 在子类中可以直接调用父类中定义的方法`super().父类方法名()`\n- 子类继承父类后，定义了父类中没有的方法，这种情况称为对父类的扩展\n- 一个父类可以被多个子类继承\n- 子类调用父类方法时，如果该方法有参数要求，也需要传递参数\n\n继承的意义 提高代码的重用性，建立新的类与类的关系，方便其他逻辑的操作\n\n继承语法格式\n\n```python\nclass 父类():\n    pass\n\nclass 子类(父类):\n    pass\n```\n\n```python\nclass maoke():\n    # 属性\n    maose = '猫纹'\n    sex = 'm'\n\n    # 方法\n    def pao(self):\n        print('走猫步')\n\n    def pa(self):\n        print('能上树')\n\n\n# 定义猫类 继承 猫科\nclass mao(maoke):\n\n    def zhua(self):\n        print('喜欢抓老鼠')\n\n    def pa(self):\n        super().pa()\n        print('可以上树很快')\n\n\nclass bao(maoke):\n    pass\n\n\nh = mao()\nprint(h.__dict__)  # {}\nprint(h.maose)  # 猫纹\nh.zhua()  # 喜欢抓老鼠\nh.pa()\n# 能上树\n# 可以上树很快\n\nb = bao()\nb.pa()  # 能上树\n```\n\n### 多继承\n\n- 单继承\n  - 一个类只能继承一个父类\n- 多继承\n  - 一个类可以去继承多个父类\n\n多继承语法格式\n\n```python\nclass 父亲():\n    pass\n\nclass 母亲():\n    pass\n\nclass 子类(父亲,母亲):\n    pass\n```\n\n- 如果在多继承的时候使用了`super()`，这个时候继承的方法优先是是第一个父类的，若第一个父类没有，寻找下一个父类\n- 同时，在多继承时，若想指定某个父类的方法，使用`父类.方法名(self)`\n\n```python\n# 父亲类\nclass F():\n    def eat(self):\n        print('魁梧、强壮')\n\n\tdef hello(self):\n        print(\"F hello\")\n\n\n# 母亲类\nclass M():\n    def eat(self):\n        print('温文、尔雅')\n\n\tdef hello(self):\n        print(\"M hello\")\n\n\n# 子类\nclass C(F, M):\n    def eat(self):\n        super().eat()  # 魁梧、强壮\n        print('挑食、闹腾')\n\n\tdef hello(self):\n        # 指定使用父类的hello方法\n        F.hello(self)\n        print(\"C hello\")\n\n\nc = C()\nc.eat()  # 挑食、闹腾\nc.hello()\n```\n\n### 菱形继承（钻石继承）\n\n```plain\nA\nB   C\n  D\n```\n\n- 可以使用 mro 方法获取 MRO 列表，就是类的继承关系\n  - 使用 super 去调用父级的方法时，实际上是在用 super 调用 MRO 列表中的上一级中的方法\n  - 使用 super 去访问父级的属性时，实际上是在用 super 访问 MRO 列表中的上一级中的属性\n- super()本身调用父级方法时，传递的 self 对象，就是这个方法中的那个 self 对象自己\n\n```python\n# 人类\nclass Human():\n    num = 1\n\n    def eat(self):\n        print(self.num)\n        print('最最年长')\n\n\n# 父亲类\nclass F(Human):\n    num = 2\n\n    def eat(self):\n        super().eat()\n        print(super().num)\n        print('魁梧、强壮')\n\n\n# 母亲类\nclass M(Human):\n    num = 3\n\n    def eat(self):\n        super().eat()\n        # print(super().num)\n        print('温文、尔雅')\n\n\n# 子类\nclass C(F,M):\n    num = 4\n\n    def eat(self):\n        super().eat()  # 魁梧、强壮\n        print(super().num)  # 2\n        print('挑食、闹腾')\n\n\nc = C()\nc.eat()\n# 4\n# 最最年长\n# 温文、尔雅\n# 3\n# 魁梧、强壮\n# 2\n# 挑食、闹腾\n\nprint(C.mro()) #[<class '__main__.C'>, <class '__main__.F'>, <class '__main__.M'>, <class '__main__.Human'>, <class 'object'>]\n```\n\n### 继承关系检测\n\n在实现继承的语法之后，程序会自动生成一个继承的列表(MRO（Method Realtion Order) 方法关系列表\n\n- MRO 列表生成原则：\n\n1. 子类永远在父类前\n2. 同一等级的类，按照子类中的继承顺序摆放\n3. 先子类，后父类的顺序原则，最终的类是系统提供的 object 类\n\n[<class '**main**.C'>, <class '**main**.F'>, <class '**main**.M'>, <class '**main**.Human'>, <class 'object'>]\n\nsuper()在调用的时候，并不是查找父类，而是去 MRO 列表上找上一个类 super()方法在调用时，会自动把当前 self 传入到上一级的类的方法中\n\n类关系检测 issubclass() issubclass() 是一个类是否是另一个类的子类\n\n```python\n# 沿用之前的类\nprint(\n    C.mro())  # [<class '__main__.C'>, <class '__main__.F'>, <class '__main__.M'>, <class '__main__.Human'>, <class 'object'>]\n\nprint(issubclass(C, (F, M)))  # True\nprint(issubclass(F, M))  # False\nprint(issubclass(C, Human))  # True\n```\n\n## 多态\n\n对于同一个方法，由于调用的对象不同，产生了不同形态的结果\n\n```python\nclass Computer():\n\n    def usb(self, obj):\n        obj.start()\n\n\nclass Mouse():\n    def start(self):\n        print('鼠标启动成功')\n\n\nclass KeyBoard():\n    def start(self):\n        print('键盘启动成功')\n\n\nclass Udisk():\n    def start(self):\n        print('U盘启动了')\n\n\nc = Computer()\nm = Mouse()\nk = KeyBoard()\nu = Udisk()\n\nc.usb(m)  # 鼠标启动成功\nc.usb(k)  # 键盘启动成功\nc.usb(u)  # U盘启动了\n```\n\n### 多态——继承版\n\n```python\nclass USB():\n    # 在USB类中定义一个规范的接口方法，但是不实现任何功能\n    def start(self):\n        pass\n\n\nclass Mouse(USB):\n    def start(self):\n        print('鼠标启动成功')\n\n\nclass KeyBoard(USB):\n    def start(self):\n        print('键盘启动成功')\n\n\nclass Udisk(USB):\n    def start(self):\n        print('U盘启动了')\n\n\nm = Mouse()\nk = KeyBoard()\nu = Udisk()\n\nm.start()  # 鼠标启动成功\nk.start()  # 键盘启动成功\nu.start()  # U盘启动了\n```\n\n> 更新: 2024-01-23 06:42:42  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/vak1xgsu38h6xhbv>\n","tags":["Python"],"categories":["Python面向对象"]},{"title":"Python - 内置模块","url":"/blog/2123167896/","content":"\n# 内置模块\n\n系统内置模块就是安装 Python 解释器之后，系统给提供的模块，在需要的时候可以导入使用\n\n## 序列化模块\n\n序列化模块指的是可以把 Python 中的数据，以文本或二进制的方式进行转换，并且还能反序列化为原来的数据 为什么需要序列化：一般来说数据在程序与网络中进行传输和存储时，需要以更加方便的形式进行存储和传输，因此需要对数据进行序列化\n\n- 文本序列化模块 json\n- 二进制序列化模块 pickle\n\n### pickle 序列化\n\n- pickle 模块提供的函数\n  - dumps() 序列化，返回一个序列化后的结果，可以把一个 Python 的任意对象序列化成为一个二进制\n  - loads() 反序列化，返回一个反序列化后的 Python 对象，可以把一个序列化后的二进制数据反序列化为 Python 对象\n  - dump(var,fp) 序列化，把一个数据对象进行序列化并写入到文件中\n    - 参数 1 var 需要序列化的数据对象\n    - 参数 2 fp 写入的文件对象\n  - load(fp) 反序列化，在一个文件中读取序列化的数据，并且完成一个反序列化\n    - fp 带读取的文件对象\n\n```python\nimport pickle\n\nvar = 'I miss you'\nres1 = pickle.dumps(var)\nprint(res1, type(res1))  # b'\\x80\\x03X\\n\\x00\\x00\\x00I miss youq\\x00.' <class 'bytes'>\n\nvar = [1, 2, 3, 4]\nres2 = pickle.dumps(var)\nprint(res2)  # b'\\x80\\x03]q\\x00(K\\x01K\\x02K\\x03K\\x04e.'\n\nres1 = pickle.loads(res1)\nres2 = pickle.loads(res2)\nprint(res1)  # I miss you\nprint(res2)  # [1, 2, 3, 4]\n\n# 把一个Python数据进行序列化后写入文件\n# 使用普通的dumps方法完成\nvar = {'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'}\nres = pickle.dumps(var)\nwith open('./data.txt', 'wb') as fp:\n    fp.write(res)\n\n# 读取一个反序列化的二进制文件读取处理，并完成反序列化\n# 使用普通的loads方法完成\nwith open('./data.txt', 'rb') as fp:\n    res = fp.read()\n    res = pickle.loads(res)\n    print(res)  # {'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'}\n\n# 把一个Python数据进行序列化后写入文件\n# 使用dump方法完成\nvar = {'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'}\nwith open('./data2.txt', 'wb') as fp:\n    pickle.dump(var, fp)\n# 使用load方法读取\nwith open('./data2.txt', 'rb') as fp:\n    newdict = pickle.load(fp)\nprint(newdict)  # {'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'}\n```\n\n### json 序列化\n\nJSON(JavaScript Object Notation) 是一个轻量级数据交换格式 JSON 在 JavaScript 中是一个对象的表示方法，和 Python 中的字典的定义规则和语法都很像 在互联网中是一种通用的数据交换、数据传输、数据定义的一种数据格式\n\n- Python 中提供 json 模块，可以把一些符合转换的 python 数据对象，转换为 json 格式的数据\n  - json.dumps() 将一个 Python 数据序列化为 json 格式\n  - json.loads() 将一个序列化后的 json 对象反序列化为 Python 格式\n  - json.dump() 将一个 Python 数据序列化为 json 格式并写入文件\n  - json.load() 将一个 json 序列化后的文件反序列化回 Python 的格式\n\n```python\nimport json\n\nvardict = {'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'}\nprint(vardict, type(vardict))  # {'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'} <class 'dict'>\n\n# json序列化\nres = json.dumps(vardict)\nprint(res, type(res))  # {\"name\": \"duanduan\", \"age\": 24, \"boyfriend\": \"huanghuang\"} <class 'str'>\n\n# json反序列化\nres = json.loads(res)\nprint(res, type(res))  # {'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'}\n\n# 使用json写文件\nvardict = [{'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'},\n           {'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'}]\nwith open('./data3.json', 'w') as fp:\n    json.dump(vardict, fp)\n\nwith open('./data3.json', 'r') as fp:\n    newdict = json.load(fp)\n\nprint(\n    newdict)  # [{'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'}, {'name': 'duanduan', 'age': 24, 'boyfriend': 'huanghuang'}]\n```\n\n## 数学模块-math\n\n- math 模块下的一些函数\n  - math.ceil() 向上取整 内置函数中的 round() 是四舍五入\n  - math.floor() 向下取整\n  - math.pow() 计算数值的 n 次方，结果是浮点\n  - math.sqrt() 开平方运算，结果是浮点\n  - math.fabs() 计算绝对值，结果是浮点\n  - math.modf() 把一个数值拆分成小数和整数组成的元组\n  - math.copysign() 将第二个参数的正负号，赋值给第一个参数\n  - math.fsum() 对一个容器类型数据进行求和，结果是浮点数\n\n```python\nimport math\n\nr1 = math.ceil(2.25)\nr2 = round(2.25)\nprint(r1, r2)  # 3 2\n\nr1 = math.floor(2.25)\nprint(r1, r2)  # 2 2\n\nres = math.pow(2, 3)\nprint(res)  # 8.0\n\nres = math.sqrt(16)\nprint(res)  # 4.0\n\nres = math.fabs(-3.14)\nprint(res)  # 3.14\n\nres = math.modf(3.14)\nprint(res)  # (0.14000000000000012, 3.0)\n\nres = math.copysign(3.14, -9.9)\nprint(res)  # -3.14\n\nres = math.fsum([1.14, 2.35, 3.46, 4, 5])\nprint(res)  # 15.95\n```\n\n## 随机模块-random\n\n导入 random 模块之后\n\n- random.random() 返回 0-1（左闭右开） 之间的随机小数\n- random.randrange(开始值,结束值[,步进值]) 随机获取指定范围内的整数\n- random.randint() 随机产生指定范围内的随机整数\n- random.uniform() 随机产生指定范围内的随机小数\n- random.choice() 随机获取容器类型中的值\n- random.shuffle() 随机打乱一个容器的值，无返回值\n\n```python\nimport random\n\nres = random.random()\nprint(res)\n\nres = random.randrange(5)\nprint(res)\nres = random.randrange(5,10)\nprint(res)\nres = random.randrange(5,10,2)\nprint(res)\n\nres = random.randint(2,8)\nprint(res)\n\nres = random.uniform(3,9)\nprint(res)\n\nvarlist = [1,2,3,4,5,6,7]\nres = random.choice(varlist)\nprint(res)\n\nrandom.shuffle(varlist)\nprint(varlist)\n```\n\n## 系统接口模块-os\n\n- os.getcwd() 返回当前文件工作目录/路径\n- os.chdir() 修改当前工作目录，类似于 linux 的 cd 命令\n- os.listdir() 查看指定目录下所有文件 类似于 ls 命令，不指定目录时候，即当前目录下的\n- os.mkdir(path,mode=0o777,dir_fd=None) 在指定位置创建一个文件夹，只能一个，若不指定位置，则在当前目录下创建一个文件夹\n  - path:为所要创建的文件夹名称，默认在当前工作目录下，但也可以先使用 os.chdir()，修改工作目录，可以是直接在 name 处写入要新建文件夹的位置路径带上新建文件夹名称\n  - mode=0o777:这个是一个系统权限，分别代表着文件所有人（user）、文件所属组（group）、其他人（other），所有数字加起来就是 777，参数必须带上 0o\n  - 但是这里有问题，无法真的给到权限 777，因为 python 无法传讲一个比自己这个进程权限还要高的文件\n  - 可以使用 linux 命令 sudo chmod -R 777 文件名\n- os.makedirs(name,mode)\n  - name：所要创建的文件路径 这次可以递归创建啦，就算存在没有的文件夹，也可以迭代创建好\n  - mode：同样是权限\n- os.rmdir() 删除空文件夹，不能递归调用，否则报错\n- os.removedirs() 递归删除空文件夹，若叶子目录被删除掉，会尝试删除父目录，若父目录也是空的目录，则会删除，直到该目录不是空的\n  - 但是！！ 因为 mac 系统下创建一个文件夹后会在该目录下创建一个.DS_Store 隐藏文件，因此这个文件夹不再是空文件夹了\n- os.remove() 删除文件\n- os.rename() 修改文件或文件夹的名字\n  - os.rename('./a','./AAA')\n- os.system() 可以执行系统命令比如 linux 下的 ls cd 命令等等\n\n```python\nimport os\n\nres = os.getcwd()\nprint(res)  # /Users/zachary/PycharmProjects/Python教程阶段1/code\n\nos.chdir('/Users/zachary')\nres = os.getcwd()\nprint(res)  # /Users/zachary\n\nres = os.listdir()\nprint(res)\nres = os.listdir(path='/Users/zachary/PycharmProjects/Python教程阶段1/code')\nprint(res)\n\nos.mkdir(path='/Users/zachary/PycharmProjects/Python教程阶段1/code/newdir',mode=0o777)\n\nos.makedirs('/Users/zachary/PycharmProjects/Python教程阶段1/code/newdir/a/b/c')\n\nos.system('ls')\n```\n\n关于系统中的权限 -rw-r--r-- 1 zachary staff 120 2 28 21:24 data3.txt drwxr-xr-x 5 zachary staff 160 2 28 15:22 file 第一位 d 代表这个是一个文件夹/目录，如果是-代表是一个文件 前三位代表文件所有人（user） 中间三位代表文件所属组（group） 最后三位代表其他人（other） 其中 r w x 代表不同的操作权限 r 表示可读 ==== 4 w 表示可写 ==== 2 x 表示可执行 === 1\n\n## 系统接口模块-os.path\n\n- os.path 是系统模块中的路径\n  - os.path.abspath() 该方法可以把一个相对路径转换成一个绝对路径\n  - os.path.basename() 返回路径中的最后一个部分\n  - os.path.dirname() 获取路径中的路径部分 返回路径中最后一个部分之前的部分\n  - os.path.join() 链接多个路径、组成一个新的路径\n  - os.path.split() 将一个路径拆分成主体和最后两个部分，以元组返回\n  - os.path.splitext() 将一个路径拆分成主体和后缀两部分，后缀为文件后缀\n  - os.path.getsize() 将返回路径所在文件的文件大小，返回值为字节\n  - os.path.isdir() 检测文件夹是否存在\n  - os.path.isfile() 检测文件是否存在\n  - os.path.exists() 检测文件或者路径是否存在\n  - os.path.samefile() 检测两个文件路径是否指向同一个目标位置(两个路径必须真实)\n\n```python\nimport os\n\nres = os.path.abspath('./')\nprint(res)  # /Users/zachary/PycharmProjects/Python教程阶段1/code\n\nres = os.path.basename('/Users/zachary/PycharmProjects/Python教程阶段1/code')\nprint(res)  # code\n\nres = os.path.dirname('/Users/zachary/PycharmProjects/Python教程阶段1/code')\nprint(res)  # /Users/zachary/PycharmProjects/Python教程阶段1\n\nres = os.path.join('./newdir/a/', '2.jpg')\nprint(res)  # ./newdir/a/2.jpg\n\nres = os.path.split('./newdir/a/b/c')\nprint(res)  # ('./newdir/a/b', 'c')\n\nres = os.path.splitext('./newdir/a/2.jpg')\nprint(res)  # ('./newdir/a/2', '.jpg')\n\nres = os.path.getsize('./83系统接口模块-os.py')\nprint(res)  # 534\n\nres = os.path.isdir('./newdir/a/b/c')\nprint(res)  # True\n\nres = os.path.isfile('./83系统接口模块-os.py')\nprint(res)  # True\n\nres = os.path.exists('./newdir/a/b/c')\nprint(res)  # True\n\na = './newdir/a/b/c'\nb = './newdir/a/../a/b/c'\nres = os.path.samefile(a, b)\nprint(res)  # True\n```\n\n## 高级文件操作模块-shutil\n\n- shutil.copy(A,B) 将路径 A 下的文件 copy 到路径 B 下的文件，在 B 下可以重命名\n- shutil.copy2(A,B) 与 copy 方法相似，但是会将原文件的信息(操作时间和权限等)一并复制\n- shutil.copyfile(A,B) 功能类似上述方法，但是 过程是打开文件 A，读取 A 中内容，并且写入到新的文件 B 中\n- shutil.copytree(A,B) 将整个 A 的目录结构和文件，拷贝到 B 去，B 必须不存在\n- shutil.rmtree() 删除整个文件夹\n- shutil.move(A,B) 将整个 A 移动到 B 去\n- shutil.make_archive(A,B,C)\n  - A: 创建的压缩文件名称\n  - B: 指定压缩格式（zip、tar）\n  - C: 要压缩的文件或者文件夹路径\n  - 例子: shutil.make_archive('a','zip','./')\n\n```python\nshutil.copy('./data3.json','./newdir/a/data3_copy.json')\n\nshutil.copy2('./data3.json','./newdir/a/b/data3_same.json')\n\nres = shutil.copyfile('./data3.json','./newdir/a/b/data3_same.json')\nprint(res)\n```\n\n## 压缩模块-zipfile\n\n- zipfile.ZipFile(路径包名，模式，压缩或打包)\n  - 压缩的使用格式\n    - zipfile.ZipFile('data.zip','w',zipfile.ZIP_DEFLATED)\n  - 解压缩的使用格式\n    - zipfile.ZipFile('data.zip','r')\n\n```python\nimport os\nimport zipfile\n\n# 压缩文件\nwith zipfile.ZipFile('data.zip','w',zipfile.ZIP_DEFLATED) as myzip:\n    myzip.write('data.txt')\n    myzip.write('data2.txt')\n    myzip.write('data3.json')\n\n# 解压缩文件\nwith zipfile.ZipFile('data.zip','r') as myzip:\n    myzip.extractall('./')\n\n# 压缩文件夹下全部文件\nwith zipfile.ZipFile('data.zip','w',zipfile.ZIP_DEFLATED) as myzip:\n    arr = os.listdir('./')\n    for i in arr:\n        myzip.write(i)\n```\n\n## 时间模块-time\n\n- time.time() 时间戳，返回从 1970 年 1 月 1 日至此时此刻的秒数,可以加参数给定时间戳，返回对应时间\n- time.ctime() 返回系统时间，字符串,可以加参数给定时间戳，返回对应时间\n- time.localtime() 返回系统时间，元组,可以加参数给定时间戳，返回对应时间\n- time.strftime() 格式化输出时间\n- time.sleep(s) 可以暂停当前线程的执行\n- time.perf_counter() 计算一个程序的执行时间\n\n```python\nimport time\n\nres = time.time()\nprint(res)  # 1646289842.415093\n\nres = time.ctime()\nprint(res)  # Thu Mar  3 14:46:59 2022\n\nres = time.localtime()\nprint(\n    res)  # time.struct_time(tm_year=2022, tm_mon=3, tm_mday=3, tm_hour=14, tm_min=49, tm_sec=29, tm_wday=3, tm_yday=62, tm_isdst=0)\n\nt = 1640000009.7300968\nres = time.ctime(t)\nprint(res)  # Mon Dec 20 19:33:29 2021\nres = time.localtime(t)\nprint(\n    res)  # time.struct_time(tm_year=2021, tm_mon=12, tm_mday=20, tm_hour=19, tm_min=33, tm_sec=29, tm_wday=0, tm_yday=354, tm_isdst=0)\n\nres = time.strftime('%Y-%m-%d %H:%M:%S %w')\nprint(res)  # 2022-03-03 15:02:04 4\n\nprint('start')\ntime.sleep(5)\nprint('over')\n\ncount = 0\nstart = time.perf_counter()\nfor i in range(10000000):\n    count += 1\nend = time.perf_counter()\nprint(end - start)  # 0.9241935030000006\n```\n\n## 日历模块-calendar\n\n```python\nimport calendar\n\n# 返回指定年月的数据 月份的第一天是周几，和月份的总天数\ndef calendar_my(year,month):\n    res = calendar.monthrange(year, month)\n    print(res)  # (1,31)\n\n    week = res[0] + 1\n    days = res[1]\n    print('一\\t二\\t三\\t四\\t五\\t六\\t日')\n\n    d = 1\n    count = 0\n\n    while count < week - 1:\n        print('\\t', end='')\n        count += 1\n    while d <= days:\n\n        for i in range(1, 8):\n            if d > days:\n                print('\\t', end='')\n            else:\n                print(d, end='\\t')\n                count += 1\n            d += 1\n            if count % 7 == 0:\n                print('')\n\ncalendar_my(2022,3)\n```\n\n> 更新: 2023-12-31 17:28:38  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/zo1eq941xoagbnig>\n","tags":["Python"],"categories":["Python基础"]},{"title":"Python - 文件","url":"/blog/256934058/","content":"\n# 文件\n\n## 基础操作-文件写入、文件打开的模式详解\n\n针对磁盘中的文件的读写。文件 I/O I-input O-output\n\n文件操作步骤 1.打开文件 2.读写文件 3.关闭文件\n\n- 写入文件的操作\n  - 1.打开文件 open()\n  - 2.写入内容 write()\n  - 3.关闭文件 close()\n- 读取文件的操作\n  - 1.打开文件 open()\n  - 2.读取内容 read()\n  - 3.关闭文件 close()\n\n### open()打开文件\n\n格式：open(文件的路径，打开的方式，[字符集])\n\n参数\n\n- 文件路径：\n  - 路径 url 统一资源定位符\n  - 相对路径：相当于给别人指路的时候，在那条街对面\n    - 针对文件的相对路径表示，从当前目录开始计算\n      - 1.txt ===> 没有具体指明的话与./1.txt 是一个位置\n      - ./1.txt ===> ./代表当前目录中的 1.txt\n      - ../1.txt ===> ../代表当前目录中的上一级目录下的 1.txt\n  - 绝对路径：类似于地址，具体到某个省市区街道小区门牌号\n    - windows: c:/users/appdata/1.txt\n    - linux: /user/home/1.txt\n- 打开方式：\n  - 基础模式： w r x a\n    - **w** w 模式 write 写入\n      - 文件如果不存在，则创建这个文件\n      - 文件如果存在，则打开这个文件，并清空里面的东西\n      - 文件打开后，文件的指针在文件的最前面\n    - **r** r 模式 read 读取\n      - 文件如果不存在，则报错\n      - 文件如果存在，则打开文件\n      - 文件指针在文件的最前面\n    - **x** x 模式 xor 异或模式\n      - 文件如果不存在，则创建这个文件\n      - 文件如果存在，则报错（防止覆盖）\n      - 文件指针在文件的最前面\n    - **a** a 模式 append 追加模式\n      - 文件如果不存在，则创建文件\n      - 文件如果存在，则打开文件\n      - 文件指针在文件的最后\n  - 扩展模式： b\n    - **b** b 模式 bytes 二进制\n    - **+** +模式 plus 增强模式（可读可写）\n  - 文件操作模式的组合\n    - w,r,a,x\n    - wb,rb,ab,xb\n    - w+,r+,a+,x+\n    - wb+,rb+,ab+,xb+\n- 可选参数：字符集 encoding 设置文件的字符集\n  - 如果是一个二进制的文件，不需要设置字符集\n  - encoding='utf-8'\n\n```python\nfp = open('./1.txt','w',encoding='utf-8')\nprint(fp,type(fp)) # <_io.TextIOWrapper name='./1.txt' mode='w' encoding='utf-8'> <class '_io.TextIOWrapper'>\n\nfp.write(\"Hello Python file\")\nfp.close()\n```\n\n结果会在当前目录下出现一个 1.txt 的文件，内容就是有一行 Hello Python file\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704014832612-814d27c0-a70f-44ca-95ca-a07ce558a397.png)\n\n## 打开模式的演示操作\n\n```python\n# 写入文件操作\nfp = open('./1.txt','a',encoding='utf-8')\nfp.write('\\n你好')\nfp.close()\n```\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704014832611-9f858891-5a4a-4a52-ac96-229ec96c9e47.png)\n\n**文件操作的高级写法**\n\n```plain\nwith open(文件路径，打开方式) as 变量:\n    变量.操作\n```\n\n```python\nwith open('./1.txt','r+') as fp:\n    res = fp.read()\n    print(res)\n    fp.write(res)\n```\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704014832613-6814e397-e4b8-488a-af66-8e6d3a346ee9.png)\n\n设置指针的位置 seek(0) 设置在最开始的位置\n\n## 文件操作的相关函数\n\n#### write() 写入文件\n\n格式：文件对象.write(内容)\n\n- write() 写入文件\n  - 内容必须是字符串类型\n- writeline() 写入文件\n  - 内容是一个容器,容器中的数据类型也必须是字符串\n\n```python\nvarlist = ['hello','this','is','content']\n\nwith open('./file/1.txt','w',encoding='utf-8') as fp:\n    fp.writelines(varlist)\n```\n\n#### read() 读取文件\n\n- read()\n  - 格式：文件对象.read() 从当前指针位置读取到最后\n  - 格式：文件对象.read(读取的字节数) 可以读取指定长度的字符\n- readline() 读取一行\n  - 格式：文件对象.readline() 一次读取一行\n  - 格式：文件对象.readline(读取的字节数) 可以读取一行指定的字符个数\n- readlines() 读取多行后，保存成一个列表返回\n\n```python\nwith open('./file/2.txt', 'r', encoding='utf-8') as fp:\n    res1 = fp.read()\n    fp.seek(3)\n    res2 = fp.read()\n\nprint(res1)  # newmessage\nprint(res2)  # message\n\nwith open('./file/3.txt', 'r', encoding='utf-8') as fp:\n    res = fp.readline()\n    print(res)  # Pycharm是一款开发Python常用\n    res = fp.readline(3)\n    print(res)  # 并且十\n\nwith open('./file/3.txt', 'r', encoding='utf-8') as fp:\n    res = fp.readlines()\n    print(res)  # ['Pycharm是一款开发Python常用\\n', '并且十分便捷的集成开发环境\\n']\n```\n\n#### seek() 文件指针\n\n- 可以使用文件指针 seek 设置指针位置\n  - seek(0)：在开头位置\n  - seek(0,2)：在末尾位置\n  - seek(num)：在 num 位置\n\n#### truncate() 截断文件内容\n\n- 按照所需要的数据，截断文件的内容\n\n#### close() 关闭文件\n\n格式：文件对象.close() 关闭打开的文件\n\n## 访问文件夹\n\n- 获取当前路径 `os.getcwd()`\n- 改变当前路径 `os.chdir()`\n- 创建新文件夹 `os.mkdir()`\n- 修改文件夹名称 `os.rename()`\n- 删除文件夹 `os.rmdir()`\n- 遍历文件夹 `os.walk()`\n-\n\n## 练习题-注册和登录功能\n\n- 注册功能\n  - 需要用户名和密码以及确认密码\n  - 注册时如果用户名已经存在，则不能再次注册\n- 登录功能\n  - 需要使用已经注册的用户信息登录\n  - 密码输入错误 3 次后，锁定账户信息（不能再使用该账户进行操作）\n\n### 注册功能\n\n```python\nuserlist = []\npwdlist = []\n\nwith open('./user.txt','a+',encoding='utf-8') as fp:\n    fp.seek(0)\n    res = fp.readlines()\n    for i in res:\n        r = i.strip()  # 去掉了左右两侧的多余空格和换行\n        arr = r.split(':')\n        userlist.append(arr[0])\n        pwdlist.append(arr[1])\n\ndef register():\n    # 输入用户名\n    flag = True\n    while flag:\n        username = input('欢迎注册，请输入要注册的用户名：')\n        if username in userlist:\n            print('用户已存在，请登录或重新输入用户名')\n        else:\n            # 输入密码\n            while True:\n                pwd = input('请设置用户名密码：')\n                if len(pwd) >= 3:\n                    repwd = input('请确认密码：')\n                    if pwd == repwd:\n                        print('注册成功')\n                        flag = False\n                        print(username, pwd, repwd)\n                        # 打开文件写入数据\n                        with open('./user.txt','a+',encoding='utf-8') as fp:\n                            fp.write(f'{username}:{pwd}\\n')\n                        break\n                    else:\n                        print('两次密码不一致，请重新输入')\n                else:\n                    print('密码长度过短，请重新输入')\n\nregister()\n```\n\n### 登录功能\n\n```python\nblacklist = []\n\nwith open('./black.txt', 'a+', encoding='utf-8') as fp:\n    fp.seek(0)\n    result = fp.readlines()\n    for i in result:\n        r = i.strip()  # 去掉了左右两侧的多余空格和换行\n        blacklist.append(r)\n\ndef login():\n    flag = True\n    while flag:\n        username = input('欢迎登录，请输入要登录的用户名：')\n        if username in blacklist:\n            print('您的账号已被锁定请联系管理员')\n            flag = False\n        elif username in userlist:\n            i = userlist.index(username)\n            count = 3\n            while count:\n                pwd = input('请输入密码：')\n                if pwd == pwdlist[i]:\n                    print('登录成功！')\n                    flag = False\n                    break\n                else:\n                    count -= 1\n                    if count == 2:\n                        print('密码输入错误，还有2次重新输入机会')\n                    elif count == 1:\n                        print('粗心大意咯，只剩1次输入密码的机会啦')\n                    else:\n                        print('登录失败啦，账号被你锁定啦')\n                        with open('./black.txt','a+',encoding='utf-8') as fp:\n                            fp.write(f'{username}\\n')\n                        flag = False\n                        break\n        else:\n            print('用户名输入错误，请重新输入')\n\nlogin()\n```\n\n### 登录与注册功能的合并\n\n```python\ndef register():\n    # 输入用户名\n    flag = True\n    while flag:\n        username = input('欢迎注册，请输入要注册的用户名：')\n        if username in userlist:\n            print('用户已存在，请登录或重新输入用户名')\n        else:\n            # 输入密码\n            while True:\n                pwd = input('请设置用户名密码：')\n                if len(pwd) >= 3:\n                    repwd = input('请确认密码：')\n                    if pwd == repwd:\n                        print('注册成功')\n                        flag = False\n                        print(username, pwd, repwd)\n                        # 打开文件写入数据\n                        with open('./user.txt','a+',encoding='utf-8') as fp:\n                            fp.write(f'{username}:{pwd}\\n')\n                        break\n                    else:\n                        print('两次密码不一致，请重新输入')\n                else:\n                    print('密码长度过短，请重新输入')\n\n\ndef login():\n    flag = True\n    while flag:\n        username = input('欢迎登录，请输入要登录的用户名：')\n        if username in blacklist:\n            print('您的账号已被锁定请联系管理员')\n            flag = False\n        elif username in userlist:\n            i = userlist.index(username)\n            count = 3\n            while count:\n                pwd = input('请输入密码：')\n                if pwd == pwdlist[i]:\n                    print('登录成功！')\n                    flag = False\n                    break\n                else:\n                    count -= 1\n                    if count == 2:\n                        print('密码输入错误，还有2次重新输入机会')\n                    elif count == 1:\n                        print('粗心大意咯，只剩1次输入密码的机会啦')\n                    else:\n                        print('登录失败啦，账号被你锁定啦')\n                        with open('./black.txt','a+',encoding='utf-8') as fp:\n                            fp.write(f'{username}\\n')\n                        flag = False\n                        break\n        else:\n            print('用户名输入错误，请重新输入')\n\n\nif __name__ == '__main__':\n\n\n    while True:\n        userlist = []\n        pwdlist = []\n        blacklist = []\n\n        with open('./user.txt', 'a+', encoding='utf-8') as fp:\n            fp.seek(0)\n            res = fp.readlines()\n            for i in res:\n                r = i.strip()  # 去掉了左右两侧的多余空格和换行\n                arr = r.split(':')\n                userlist.append(arr[0])\n                pwdlist.append(arr[1])\n\n        with open('./black.txt', 'a+', encoding='utf-8') as fp:\n            fp.seek(0)\n            result = fp.readlines()\n            for i in result:\n                r = i.strip()  # 去掉了左右两侧的多余空格和换行\n                blacklist.append(r)\n        choice = input('欢迎来到我的网站，请输入你的要进行的功能\\n1.注册\\n2.登录\\n3.退出\\n')\n        if choice == '1':\n            register()\n        elif choice == '2':\n            login()\n        else:\n            break\n```\n\n> 更新: 2024-01-03 23:56:04  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/gbqyc0puv2x9dims>\n","tags":["Python"],"categories":["Python基础"]},{"title":"Python - 函数","url":"/blog/2855414916/","content":"\n# 函数\n\n# 认识函数\n\n模块化编程指的是把程序进行封装（函数封装、面向对象、文件）\n\n- 函数 函数是具有特定功能的代码块 function 函数就是把代码进行封装、以提高代码的重用性、提高开发效率、降低了后期的维护成本\n- 函数的定义和使用\n\n```python\n# 定义函数\ndef 函数名(参数列表):\n    具体功能代码\n\n# 函数的调用\n函数名()\n```\n\n函数封装并不会执行，只是把函数定义了而已 如果想使用定义的函数，就用语法来进行函数调用 函数定义后，不调用不执行 不能在函数定义前调用函数 函数的调用不受次数影响 函数的命名要遵守命名规范\n\n# 函数的参数\n\n- 函数在定义时，可以在参数列表的位置定义 形式参数（形参）\n- 如果函数有形参，那么在调用的时候必须传递参数 实际参数（实参）\n- 实参将数值传递给形参的过程，就是变量的赋值操作\n- 函数定义了几个参数，调用的时候就要按指定顺序进行参数的传递\n\n## 普通参数、默认参数\n\n- 即**位置参数**，也叫顺序参数，也是必须传递的参数\n\n```python\ndef cook(food:str):\n    print(f\"今晚吃{food}\")\n\n\ncook(\"noodle\")  # 今晚吃noodle\n```\n\n- 在有多个参数的时候，靠后的称为默认参数，默认参数可以指定默认值，在调用的时候可以不传实参\n- 默认参数只能靠后\n\n```python\ndef cook(food, dirnk=\"wine\", snack=\"chips\"):\n    print(f\"今晚吃{food}，今晚喝{dirnk}，饭后甜点是{snack}\")\n\n\ncook(\"rice\" )  # 今晚吃rice，今晚喝wine，饭后甜点是chips\n```\n\n## 收集参数\n\n定义一个形参，专门收集多余的实参，或者说是不确定需要接受多少个实参的情况下，使用一个实参来接收,这个形参用**\\*args**\n\n- args 接收的参数以元组的形式存储\n- 这个变量不一定非得是 args，可以是 num 等等，但是记得是一个星号\n\n```python\ndef calc(x='+', *args):\n    print(type(args))  # <class 'tuple'>\n    res = 0\n    if x == '+':\n        for i in args:\n            res += i\n        print(f\"{args}求和得{res}\")\n    elif x == '-':\n        res = 2 * args[0]\n        for i in args:\n            res -= i\n        print(f\"{args}求差得{res}\")\n    else:\n        print(\"符号错误\")\n\n\ncalc(\"+\", 200, 100, 300)  # (200, 100, 300)求和得600\ncalc(\"-\", 200, 100, 300)  # (200, 100, 300)求差得-200\n```\n\n## 命名关键字参数\n\n- 命名关键字参数，定义在**收集参数**后面\n- 关键字参数必须通过形参的名字来传递\n\n```python\ndef cook(food, *other, time):\n    print(f\"we are going to eat {food} and {other} at {time}\")\n\n\ncook(\"rice\", \"wine\", \"snack\", time=\"dinner\")  # we are going to eat rice and ('wine', 'snack') at dinner\ncook(\"rice\", \"wine\", \"snack\", \"dinner\")  # TypeError: cook() missing 1 required keyword-only argument: 'time'\n```\n\n## 关键词收集参数\n\n- 普通收集参数\\*args 会把接收到的参数收集成为 元组\n- 关键词收集参数\\*\\*kwargs 会将接收到的关键字参数收集成为 字典\n\n```python\ndef cook(food, *other, time, **kwargs):\n    print(f\"we are going to eat {food} and {other} at {time} with {kwargs}\")\n\n\ncook(\"rice\", \"wine\", \"snack\", time=\"dinner\", data='2.2', year='2022')\n# we are going to eat rice and ('wine', 'snack') at dinner with {'data': '2.2', 'year': '2022'}\n```\n\n形参声明的位置 **<font style=\"background-color:#FBDE28;\">普通参数、默认参数、收集参数、关键字参数、关键字收集参数</font>**\n\n# 函数的返回值\n\n一个函数除了可以完成一定功能外，还可以按需要返回一定内容 函数中使用 return 关键字来指定返回数据，可以返回任何类型的数据 函数的返回值，会把数据返回到调用的位置\n\n```python\ndef calc_plus(*args):\n    res = 0\n    for i in args:\n        res += i\n    return res\n\n\nresult = calc_plus(123, 234, 345, 456)\nprint(f\"所有数值计算结果是：{result}\")\n```\n\n- 函数中可以使用 return 返回数据或任意内容\n- return 意味着函数的结束，return 之后的代码不再执行\n- 函数的返回值可以有，可以没有，当没有返回值的时候，返回的是 None\n\n# 变量的作用域\n\n作用域就是当前起作用、可用的范围区域 变量的有效范围\n\n- **全局变量**：在函数内外都可以使用的变量\n- **局部变量**：在函数内部可以使用的变量\n\n**在函数内部可以获取函数外部的变量(即全局变量)中的不可变数据类型，仅能访问，不能修改**\n\n```python\nnum = 10\ndef func():\n    print(num)\nfunc()   # 10\n\n\n\nnum = 10\ndef func():\n    num += 20\n    print(num)\nfunc()   # UnboundLocalError: local variable 'num' referenced before assignment\n```\n\n**在函数内部可以对全局变量的可变数据类型(列表、字典)，进行修改和访问**\n\n```python\nvarl = [1, 2, 3]\ndef func():\n    print(varl)  # [1, 2, 3]\n\n    varl.append(4)\n    print(varl)  # [1, 2, 3, 4]\n\n    varl[2] = 'a'\n    print(varl)  # [1, 2, 'a', 4]\nfunc()  # 30\nprint(varl)  # [1, 2, 'a', 4]\n```\n\n**在函数内部定义的变量，只能在函数内部使用，可获取，可修改，函数外部无法访问**\n\n```python\ndef func():\n    res = 20\n    res += 10\n    print(res)\nfunc()  # 30\nprint(res)  # NameError: name 'res' is not defined\n```\n\n**在函数内部使用**_**global**_**声明的变量，可将其改为全局变量**\n\n```python\ndef func():\n    global res\n    res = 20\n    res += 10\n    print(res)\nfunc()  # 30\nprint(res)  # 30\n```\n\n**在函数外部定义的变量，想要在函数内部修改，可以在函数内部将其声明为全局变量**\n\n```python\nnum = 10\ndef func():\n    global num\n    num += 20\n    print(num)\nfunc()   # 30\n```\n\n- **两个函数**\n  - `globals()`：获取全局数据\n\n```python\ndef outer():\n    print(\"This is a outer function...\")\n    def inner():\n        print(\"This is a inner function...\")\n    inner()\n\nouter()\nprint(globals())\n# {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader object at 0x108786550>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, '__file__': '/Users/zachary/PycharmProjects/Python教程阶段1/code/30变量的作用域.py', '__cached__': None, 'outer': <function outer at 0x1087f9710>}\n```\n\n    - `locals()`：获取局部数据\n\n- **局部函数：在函数内部定义的函数，称为局部函数**\n- **全局函数：相对于局部函数的外部函数**\n\n```python\ndef outer():\n    print(\"This is a outer function...\")\n    def inner():\n        print(\"This is a inner function...\")\n    inner()\n\nouter()\n# This is a outer function...\n# This is a inner function...\n```\n\n- 关于函数的文档 以上述的 globals()为例\n\n```python\n{\n'__name__': '__main__',\n'__doc__': None,\n'__package__': None,\n'__loader__': <_frozen_importlib_external.SourceFileLoader object at 0x108786550>,\n'__spec__': None,\n'__annotations__': {},\n'__builtins__': <module 'builtins' (built-in)>,\n'__file__': '/Users/zachary/PycharmProjects/Python教程阶段1/code/30变量的作用域.py',\n'__cached__': None, 'outer': <function outer at 0x1087f9710>}\n```\n\n**main**：当前脚本如果作为主程序，那么值是**main**，如果是当做一个模块，在另外一个脚本中引用去使用模块的名字。\n\n**doc**：当前脚本的文档说明 在当前脚本当中的第一个三引号''''''注释的就是当前脚本的说明文档\n\n# nonlocal 关键字\n\n- 在内函数中，使用上一层函数中的局部变量，可以在内函数中，使用 nonlocal 声明一下变量，即可以在内函数中使用外函数的局部变量\n\n```python\ndef outer():\n    num = 10\n    print(\"This is a outer function...\")\n    def inner():\n        nonlocal num\n        num += 10\n        print(\"This is a inner function...\")\n        print(num)\n\n    inner()\n\nouter()\n# This is a outer function...\n# This is a inner function...\n# 20\n```\n\n# 函数封装的练习题\n\n```python\n# 封装九九乘法表\ndef jiujiu(n=0):\n    '''\n    打印九九乘法表\n    :param n: 控制打印输出顺序，n默认为0时，正向输出；否则，逆向输出\n    :return: 无返回值\n    '''\n    if n == 0:\n        r = range(1,10)\n    else:\n        r = range(9,0,-1)\n    for i in r:\n        for j in range(1,i+1):\n            print(f\"{j}×{i}={i*j}\\t\",end=\"\")\n        print()\n    print()\n\njiujiu()\njiujiu(-1)\n```\n\n练习二\n\n```python\n# 封装打印矩形\ndef juxing(n=0, x=10, y=10):\n    '''\n    :param n: 当n为默认值0时候。打印实心矩形，否则打印空心的矩形\n    :param x: 控制矩形行数\n    :param y: 控制矩形列数\n    :return: 无返回值\n    '''\n    for i in range(x):\n        if i == 0 or i == x - 1:\n            print(\"# \" * y)\n        else:\n            if n == 0:\n                print(\"# \" * y)\n            else:\n                print(\"# \" + \"  \" * (y - 2) + \"#\")\n    print()\n\n\njuxing(x=9, y=16)\njuxing(n=-1,x=10,y=10)\n```\n\n# 递归函数\n\n递归函数就是定义了一个函数，这个函数内部自己调用函数本身 递归函数内必须要有结束条件，否则会一直调用直至栈溢出 递归函数会一层一层进入，再一层一层返回\n\n```python\ndef jiecheng(n):\n    print(n)\n    if n == 0:\n        return\n    jiecheng(n-1)\n    print(n)\n\n\njiecheng(5)\n```\n\n## 实现阶乘\n\n```python\n# 实现阶乘\n\ndef jiecheng(n):\n    if n == 1:\n        return 1\n    return int(n) * jiecheng(n-1)\n\nres = jiecheng(10)\nprint(res)**\n```\n\n## 实现斐波那契数列\n\n```python\ndef fibo(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibo(n - 1) + fibo(n - 2)\n\n\nprint(fibo(5))  # 3\n\nres = 0\nfor i in range(5):\n    res += fibo(i + 1)\n\nprint(res)  # 7\n```\n\n# 回调函数\n\n如果一个函数中要求传递的参数是一个函数，并且在函数中使用了传递进来的函数，那么这个被调用的函数就是回调函数\n\n```python\n# 带有回调函数的函数\ndef func(f):\n    print(\"func这是调用了回调函数的函数\")\n    f()\n\n# 回调函数\ndef cal():\n    print(\"cal这是一个回调函数\")\n\nfunc(cal)\n# func这是调用了回调函数的函数\n# cal这是一个回调函数\n```\n\n再来一个例子\n\n```python\ndef fun(x,y,f):\n    print(f(x,y))\n\nfun(2,3,pow) # 8\n```\n\n# 闭包函数\n\n如果在一个函数中，返回了一个函数。并且这个函数是内函数，该内函数使用了外函数中的局部变量**（这意味着需要使用 nonlocal）**，这就是闭包函数 保护了外函数中的局部变量，既可以使用，也不会被破坏 可以使用**closure**魔术方法查看是否闭包函数\n\n```python\ndef person():\n    money = 0 # 函数中定义了一个局部变量\n\n    # 工作 在外函数中定义内函数\n    def work():\n        nonlocal money\n        money += 100\n        print(money)\n\n    # 在外函数中返回了内函数，这个内函数就是闭包函数\n    return work\n\n\nres = person()  # 这里的res 就等同于work\nres()  # 100\nres()  # 200\nres()  # 300\n\nprint(res.__closure__)  # (<cell at 0x1058d0250: int object at 0x1058afdd0>,)\nprint(person.__closure__)  # None\n```\n\n# 匿名函数——lambda 表达式\n\n匿名函数即，可以不使用 def 定义，并且这个函数也没有名字 在 Python 中使用 lambda 表达式来定义匿名函数 lambda 仅仅是一个表达式，不是一个代码块 lambda 表达式也有形参，并且不能访问除了自己的形参以外的任何变量（包括全局变量） 功能相对单一，不能写太复杂的形式 lambda [参数列表]:返回值\n\n```python\nres = lambda x, y: x + y\nprint(res(4, 4))  # 8\n```\n\n同样的，lambda 表达式也可以用于封装带有分支结构的函数，很便捷\n\n```python\ndef func(gender):\n    if gender == 'male':\n        return '男性'\n    else:\n        return '女性'\n\nres = func(\"female\")\nprint(res)\n\n# 以下代码等同于上述代码\nres = lambda gender:'男性' if gender=='male' else '女性'\nprint(res(\"female\"))\n```\n\n# 迭代器\n\n迭代器是 Python 中的特色功能，用于访问元素的一种方式 迭代器是一个可以记住访问遍历的位置的对象 从集合的第一个元素开始访问，直到集合中的所有元素被访问完毕 迭代器只能从前往后一个一个遍历的，不能后退 迭代器是一个能被**next()函数**调用，并不断返回下一个值的对象称为迭代器(Iterator)对象\n\n- **Iter()函数**\n\n功能：把可迭代对象，转为一个迭代器对象 参数：可迭代的对象(str、list、tuple、dict、set、range...) 返回值：迭代器对象 注意：迭代器对象一定是可迭代对象，但是可迭代对象不一定是迭代器对象\n\n---\n\n- 通过使用**next()方法**获取迭代器内部数据\n\n```python\nplayer = ['Curry', 'Kobe', 'James', 'Irving']\nres = iter(player)\n\n# 使用next()函数获取数据\np = next(res)\nprint(p)  # Curry\np = next(res)\nprint(p)  # Kobe\np = next(res)\nprint(p)  # James\np = next(res)\nprint(p)  # Irving\np = next(res)\nprint(p)  # StopIteration 超出了可迭代范围\n```\n\n- 通过使用 list()方法直接取出迭代器中的所有数据\n\n```python\nplayer = ['Curry', 'Kobe', 'James', 'Irving']\nres = iter(player)\n\n# 使用list()取值\nli = list(res)\nprint(li)  # ['Curry', 'Kobe', 'James', 'Irving']\n```\n\n- 通过 for 循环进行数据的遍历\n\n```python\nplayer = ['Curry', 'Kobe', 'James', 'Irving']\nres = iter(player)\n\n# 使用for循环进行遍历\nfor i in res:\n    print(i)\n```\n\n- 迭代器有一个特点，无论是使用上述三种方法哪一种取，取过一次数据后，数据就丢失去了,想要再次使用就不行了\n\n```python\nplayer = ['Curry', 'Kobe', 'James', 'Irving']\nres = iter(player)\n\n# 使用for循环进行遍历\nfor i in res:\n    print(i)\n\n#第二次打印就失效了\nfor i in res:\n    print(i)\n# Curry\n# Kobe\n# James\n# Irving\n```\n\n---\n\n- 判断一个对象是否是可迭代的或者是否迭代器对象，需要使用 from collections.abc import Iterable，Iterator\n- 当需要判断一个对象类型的时候,可以使用 type()\n- 当需要判断一个对象是否某一类型的时候可以使用 isinstance()\n\n```python\nfrom collections.abc import Iterable, Iterator\n\ns = \"abdef\"\nr1 = isinstance(s, int)\nr2 = isinstance(s, str)\nprint(r1, r2)  # False True\n\nplayer = ['Curry', 'Kobe', 'James', 'Irving']\ni = iter(player)\nr1 = isinstance(s, Iterator) # 字符串不是迭代器\nr2 = isinstance(s, Iterable) # 字符串是可迭代对象\nr3 = isinstance(i, Iterator) # 迭代器对象是迭代器\nr4 = isinstance(i, Iterable) # 迭代器对象是可迭代对象\nprint(r1, r2, r3, r4)  # False True True True\n```\n\n# 生成器\n\n## yield 关键字\n\n使用了`yield`关键字的函数——生成器函数\n\n```python\ndef output():\n    print(\"res 1\")\n    yield 1\n    print(\"res 2\")\n    yield 2\n    print(\"res 3\")\n    yield 3\n\n#生成器对象\no = output()\nres = next(o)\nprint(res)\nres = next(o)\nprint(res)\nres = next(o)\nprint(res)\n\n#可以使用for遍历\nfor res in o:\n    print(res)\n```\n\n可以将该函数理解为一个 可迭代对象\n\n- **yield**关键字使用在 生成器函数中\n  - yield 和函数中的 return 相似\n  - 共同点：都会返回结果\n  - 不同点：\n    - return 会返回结果，并结束当前函数的调用，后面的代码不再执行\n    - yield 会返回结果，并记住当前代码的执行位置，下一次调用的时候会从上一次离开的位置继续向下执行\n    - 调用函数后结果是一个生成器，需要使用收集迭代器的方法进行数据收集\n\n```python\n# return在函数中\ndef hello():\n    print('Hello sen1')\n    return 1\n    print('Hello sen2')\n    return 2\n\nres = hello()  # Hello sen1\nprint(res)  # 1\nres = hello()  # Hello sen1\nprint(res)  # 1\n\n\n# yield在函数中\ndef hello_y():\n    print('Hello sen1')\n    yield 1\n    print('Hello sen2')\n    yield 2\nres = hello_y()\nprint(res)\ntemp = next(res)  # Hello sen1\nprint(temp) # 1\ntemp = next(res)  # Hello sen2\nprint(temp) # 2\n\n# 也可以使用list类似函数收集起来 或者用 for\nres = hello_y()\nprint(list(res)) # [1, 2]\n\nres = hello_y()\nfor i in res:\n    print(i)\n# Hello sen1\n# 1\n# Hello sen2\n# 2\n```\n\n## yield from\n\n- 在生成器中 yield 另一个生成器的内容\n\n```python\ndef yield_func(num: int):\n    for i in range(num):\n        yield square(i+1)\n\n\ndef call_yield_func():\n    yield from yield_func(3)\n    yield from yield_func(5)\n\n\nfor item in call_yield_func():\n    print(item)\n```\n\n- 生成器 send 相当于使用 next，并将数据送回给生成器(有种协程的感觉)\n\n```python\ndef yield_send_func():\n    number = yield \"welcome a square function\"\n    while True:\n        number = yield square(number)\n        if number is None:\n            break\n\n\ngenerator = yield_send_func()\nprint(next(generator))\nfor i in range(1,11):\n    if i == 10:\n        try:\n            generator.send(None)\n        except StopIteration:\n            break\n    print(generator.send(i))\n```\n\n- yield from 结合 send\n\n```python\ndef yield_square_func():\n    number = yield \"welcome a square function\"\n    while True:\n        number = yield square(number)\n        if number is None:\n            break\n\n\ndef yield_cube_func():\n    number = yield \"welcome a cube function\"\n    while True:\n        number = yield number ** 3\n        if number is None:\n            break\n\n\ndef choose_func():\n    item = yield \"please choose 1 for square or 2 for cube\"\n    while True:\n        if item == 1:\n            yield from yield_square_func()\n        elif item == 2:\n            yield from yield_cube_func()\n        else:\n            break\n\n\ngenerator = choose_func()\nprint(next(generator))\nprint(generator.send(int(input())))\nfor i in range(1, 11):\n    if i == 10:\n        try:\n            generator.send(None)\n        except StopIteration:\n            break\n    else:\n        print(generator.send(i))\n```\n\n## 练习题\n\n使用生成器改写斐波那契数列\n\n```python\ndef fibo(x):\n    a, b = 0, 1\n    yield a\n    for i in range(x - 1):\n        yield b\n        a, b = b, a + b\n\ni = int(input(\"请输入一个整数：\"))\nres = fibo(i)\nfor i in res:\n    print(i,end=',')\n\n# 请输入一个整数：8\n# 0,1,1,2,3,5,8,13,\n```\n\n# 内置函数\n\n内置函数就是在系统安装完 Python 解释器时，由解释器提供好的函数\n\n## range 函数\n\nrange 函数功能：能够生成一个指定的数字序列 参数：[start,stop,(step)] start：开始的值，默认为 0 stop：结束的值，对于[start,stop)是一个左闭右开区间，stop 选不到的 step：默认为 1，负数为倒着步进 返回值：可迭代对象，数字序列\n\n```python\nfrom collections.abc import Iterable\nfrom collections.abc import Iterator\n\nres = range(10)\nprint(res)  # range(0, 10)\nprint(isinstance(res, Iterable))  # True 可迭代对象\nprint(isinstance(res,Iterator))  # False 不是迭代器，故不能使用next直接访问\n\n# 输出\n# 转化为list\nprint(list(res))\n\n# 使用for\nfor i in res:\n    print(i)\n\n\nit = iter(res)\nprint(next(it)) # 0\nfor i in it:\n    print(i) # 1 2 3 4 5 6 7 8 9\n```\n\n## zip()函数\n\nzip()函数功能：可以接收多个可迭代对象，然后把每个可迭代对象中第 i 个元素组合在一起，形成一个新的迭代器（元组），当输入的可迭代对象中，最短的一个被耗尽时，迭代器将停止迭代。 参数：\\*iterables，任意个的可迭代对象 返回值：返回一个元组的迭代器 既然使用 zip 生成的结果是一个迭代器，那么获取数据的时候就可以使用 next、for、list 等方法获取，依旧是使用一次 少一次\n\n```python\nvar1 = \"1234\"\nvar2 = ['a', 'b', 'c', 'd']\nvar3 = ('A', 'B', 'C', 'D')\n\nres = zip(var1, var2, var3)\nprint(res, type(res))\n\n# 获取数据的方法1\nprint(next(res)) # ('1', 'a', 'A')\nprint(next(res)) # ('2', 'b', 'B')\n\n# 获取数据的方法2\nres = zip(var1, var2, var3)\nfor i in res:\n    print(i)\n\"\"\"\n('1', 'a', 'A')\n('2', 'b', 'B')\n('3', 'c', 'C')\n('4', 'd', 'D')\n\"\"\"\n\n# 获取数据的方法3\nres = zip(var1, var2, var3)\nprint(list(res))  # [('1', 'a', 'A'), ('2', 'b', 'B'), ('3', 'c', 'C'), ('4', 'd', 'D')]\n```\n\n可以使用 zip(\\*zip)执行一个反向操作\n\n```python\n# zip与*zip\nx = [1, 2, 3]\ny = [4, 5, 6]\nzipped = zip(x, y)\nprint(list(zipped))  # [(1, 4), (2, 5), (3, 6)]\nx2, y2 = zip(*zip(x, y))\nprint(x2, y2)  # (1, 2, 3) (4, 5, 6)\n```\n\n## 其他内置函数\n\n### 数据类型转换相关内置函数\n\n- int() 将其他数据类型转为整型\n- float() 转为浮点类型\n- bool() 转为布尔类型\n- complex() 转为复数\n- str() 转为字符串类型\n- list() 转为列表类型\n- tuple() 转为元组类型\n- dict() 转为字典类型\n- set() 转为集合类型\n\n### 变量相关函数\n\n- id() 获取当前数据的 ID 标识\n- type() 获取当前数据的类型字符串\n- print() 数据的打印\n- input() 获取输入的数据\n- isinstance() 检测是否为指定的数据类型\n\n### 数学相关函数\n\n- abs() 返回一个数的绝对值，如果是复数，返回模\n- sum() 从左向右对一个 iterable 对象中的项求和并返回，开始值不允许为字符串\n- max() 获取最大值\n- min() 获取最小值\n- pow() 次幂运算\n- round() 四舍五入\n\n```python\nprint(abs(-99.99))  # 99.99\n\nprint(sum([1, 2, 3]))  # 6\n\nprint(max(9, 90, 999))  # 999\n\nprint(min(9, 90, -99))  # -99\n\nprint(pow(2, 3))  # 8\n\nr = 3.1415926\nprint(round(r))  # 3\nprint(round(r, 4))  # 3.1416\n```\n\n## 进制相关函数及字符集\n\n进制转换\n\n- bin() 将数值类型转换为二进制\n- int() 将二进制转换为整型\n- oct() 将数值类型转换为八进制\n- hex() 将数值类型转为十六进制\n\n```python\nprint(bin(123))  # 0b1111011\n\nprint(int(0b1111011))  # 123\n\nprint(oct(123))  # 0o173\n\nprint(int(0o173))  # 123\n\nprint(hex(123))  # 0x7b\n\nprint(int(0x7b))  # 123\n```\n\nAscii 码是 基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，共计 128 个字符 常用的包括：GB2312-80、GBK、GBK18030、Unicode（UTF-8） ascii 字符转换 A-Z：65-90 a-z：97-122 0-9：48-57\n\n- 将字符转为 ASCII：ord()\n- 将 ASCII 转为字符：chr()\n\n```python\na = ord('a')\nprint(a)  # 97\n\nc = chr(97)\nprint(c)  # a\n```\n\n## 高阶函数——sorted()\n\n- **sorted(iterable,[reverse,key])**\n  - 运行原理：把可迭代数据里面的元素，一个一个取出来，放到 key 这个函数中进行处理，并按照函数中 return 的结果进行排序，返回一个新的列表\n- 功能：排序\n- 参数：\n  - iterable 可迭代的数据（容器类型数据，range 数据序列，迭代器）\n  - reverse 可选，是否反转，默认为 False，不反转，True 反转\n  - key 可选，函数，可以是自定义函数，也可以是内置函数\n\n```python\narr = [3, 7, 1, -9, 20, 10]\nprint(sorted(arr))  # [-9, 1, 3, 7, 10, 20]\n\nprint(sorted(arr, reverse=True))  # [20, 10, 7, 3, 1, -9]\n\nprint(sorted(arr, key=abs))  # [1, 3, 7, -9, 10, 20]\n\n\n# 自定义函数\ndef func(num):\n    return num % 2\n\n\narr = [3, 2, 4, 6, 5, 7, 9]\nres = sorted(arr, key=func)\nprint(res)  # [2, 4, 6, 3, 5, 7, 9]\n\n# 优化版\nres = sorted(arr, key=lambda x: x % 2)\nprint(res)\n```\n\n## 高阶函数——map()\n\n- \\*_map(func, \\_\\_iterables)_\n- 功能：对传入的可迭代数据中的每个元素进行处理，返回一个新的迭代器\n- 参数：\n  - func 函数：自定义函数|内置函数\n  - iterables：可迭代的数据\n- 返回值：迭代器\n\n```python\n# 实现一个将 ['1','2','3','4'] 转换为===> [1,2,3,4] 的功能\n\n# 方法一\narrlist = ['1', '2', '3', '4']\nnewlist = []\nfor i in arrlist:\n    newlist.append(int(i))\nprint(newlist)  # [1, 2, 3, 4]\n\n# 方法二\nres = map(int, arrlist)  # 这里的res是一个可迭代对象\nprint(list(res))  # [1, 2, 3, 4]\n\n# 实现一个将 [1,2,3,4] 转换为===> [1,4,9,16] 的功能\n\n# 方法一\narrlist = [1, 2, 3, 4]\nnewlist = []\nfor i in arrlist:\n    newlist.append(i ** 2)\nprint(newlist)  # [1, 4, 9, 16]\n\n\n# 方法二\ndef power(num):\n    return num ** 2\n\n\narrlist = [1, 2, 3, 4]\nres = map(power, arrlist)\nprint(list(res))  # [1, 4, 9, 16]\n\n# 方法三 优化版\narrlist = [1, 2, 3, 4]\nres = map(lambda x: x ** 2, arrlist)\nprint(list(res))  # [1, 4, 9, 16]\n\n# 实现 ['a','b','c','d'] ===> [65,66,67,68]\narrlist = ['a', 'b', 'c', 'd']\nres = map(lambda x: ord(x.upper()), arrlist)\nprint(list(res))  # [65, 66, 67, 68]\n```\n\n## 高阶函数——reduce()\n\n- **reduce(function, sequence[, initial])**\n  - 使用需要导入 from functools import reduce\n- 功能：每一次从 sequence 即一个 iterable 拿出两个元素，放入到 func 函数中进行处理，得出一个计算结果，然后把这个计算结果和 iterable 中的第三个元素，继续放到 func 函数中国进行运算，以此类推，直到所有元素都参与了运算\n- 参数\n  - function 函数：内置函数|自定义函数\n  - sequence：是一个 iterable，可迭代数据\n- 返回值：最终的运算处理结果\n\n```python\nfrom functools import reduce\n\n# 实现一个对数组内的数字进行求和的功能\nnumlist = [1, 2, 3, 4, 5]\nres = reduce(lambda x, y: x + y, numlist)\nprint(res)  # 15\n\n# 实现这样一个功能，给了数组[5,2,1,1]  ===> 5211\n\n# 方法一\nnumlist = [5, 2, 1, 1]\nnum = ''\nfor i in numlist:\n    num += str(i)\nres = int(num)\nprint(res, type(res))  # 5211 <class 'int'>\n\n\n# 方法二\ndef func(x, y):\n    return x * 10 + y\n\n\nres = reduce(func, numlist)\nprint(res, type(res))  # 5211 <class 'int'>\n\n# 方法三\nres = reduce(lambda x, y: x * 10 + y, numlist)\nprint(res, type(res))  # 5211 <class 'int'>\n\n# 把字符串'456' ===> 456, 不能使用int\nnum = '456'\nstrdict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\nres1 = map(lambda x: strdict[x], num)\nres2 = reduce(lambda x, y: x * 10 + y, res1)\nprint(res2)  # 456\n\n# 简化版本\nnum = '456'\nstrdict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\nprint(reduce(lambda x, y: x * 10 + y, map(lambda x: strdict[x], num)))  # 456\n```\n\n## 高阶函数——filter()\n\n- **filter(func,iterable)**\n- 功能：过滤数据，将 iterable 中的每个元素拿到 fun 函数中进行处理，如果函数返回 True 则保留这个数据，返回 False 则，丢弃这个数据\n- 参数\n  - func 函数：自定义函数|内置函数\n  - iterable：可迭代的数据\n- 返回值：保留下来的迭代器数据\n\n```python\n# 实现 保留所有偶数，丢弃所有奇数的功能\nnumlist = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nres = filter(lambda x: True if x % 2 == 0 else False, numlist)\nprint(list(res))\n```\n\n> 更新: 2024-01-16 03:26:11  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/iygqmxqyo52f37yc>\n","tags":["Python"],"categories":["Python基础"]},{"title":"Python - 容器","url":"/blog/1411293093/","content":"\n# 容器\n\n# 字符串\n\n- 回顾字符串的定义方式\n- 了解转义字符\n- 字符串相关的运算\n- 字符串相关函数\n- 字符串格式化的方法\n\n## 详解字符串-转义字符\n\n### 字符串的定义方式\n\n1. 单引号''\n2. 双引号定义字符串\"\"\n3. 三引号定义字符串''''''或者\"\"\"\"\"\"\n4. 字符串定义时，引号可以互相嵌套\n\n### 转义字符\n\n一个普通的字符出现在转义符\\后面时候，实现了另一种意义\n\n- \\ 转义符，续行符。\n  - 作为转义符时，在\\后面出现的字符可能会实现另外一种意义\n  - 作为续行符时，在行尾使用了\\后，可以继续换行书写内容\n- \\n 代表换行\n- \\r \\r 代表光标的位置，从\\r 出现的位置作为光标的起点\n- \\t 水平制表符\n- \\b 退格符\n- \\ 就是打出一个单独的\\\n- r 在字符串前＋ r 可以取消转义符的效果，原文字输出\n\n```python\n# \\ 作为续行符\nvar = \"123\" \\\n      \"456\" \\\n      \"789\"\nprint(var)  # 123456789  打印结果仍旧是一行\n\n# \\ 作为转义符\nvar = \"你要多耐心一点，美好的事物通常来的都慢一些\"\nprint(var)  # 你要多耐心一点，美好的事物通常来的都慢一些\n\nvar = \"你要多耐心一点，\\n美好的事物通常来的都慢一些\"\nprint(var)\n# 你要多耐心一点，\n# 美好的事物通常来的都慢一些\n\n\nvar = \"你要多耐心一点，\\r美好的事物通常来的都慢一些\"\nprint(var)  # 美好的事物通常来的都慢一些\n\nvar = \"你要多耐心一点，\\t美好的事物通常来的都慢一些\"\nprint(var)  # 你要多耐心一点，  美好的事物通常来的都慢一些\n\nvar = \"你要多耐心一点，\\b美好的事物通常来的都慢一些\"\nprint(var)  # 你要多耐心一点美好的事物通常来的都慢一些\n\nvar = \"abcde\\\\nabcde\"\nprint(var)  # abcde\\nabcde\n\nvar = r\"abcde\\nabcde\"\nprint(var)  # abcde\\nabcde\n```\n\n## 字符串相关操作\n\n- 字符串 +操作： 加法在字符串之间起到拼接作用\n- 字符串 \\*操作：乘法与字符串使用，会重复指定倍数的字符串\n- 字符串 []切片操作：只能使用[]下标的方式访问，但是不能修改\n\n```python\n# 加法在字符串之间起到拼接作用\nvara = \"你要稍微等一等,\"\nvarb = \"美好的事物都来得慢一些\"\nres = vara + varb\nprint(res)  # 你要稍微等一等,美好的事物都来得慢一些\n\n# 乘法操作\nvar = \"虎年大吉，\" * 3\nprint(var)  # 虎年大吉，虎年大吉，虎年大吉，\n\n# 切片操作\nprint(res[4:7])  # 等一等\nprint(res[8:10])  # 美好\nprint(res[::2])  # 你稍等等美的物来慢些\nprint(res[::-1])  # 些一慢得来都物事的好美,等一等微稍要你\n```\n\n## 字符串格式化\n\nformat() 格式化字符串 f 方法\n\n```python\n# 普通方式\nname = \"duanduan\"\nmoney = 10\nsen = \"今天{}花了{}块钱💰\".format(name, money)\nprint(sen)  # 今天duanduan花了10块钱💰\n\n# 通过索引的方法\nsen = \"今天{1}花了{2}块钱💰\".format(None, name, money)\nprint(sen)\n\n# 关键字传参\nsen = \"今天{who}花了{how}块钱💰\".format(who=name, how=money)\nprint(sen)\n\n# 容器类型数据传参\nd = \"duanduan:{},huanghuang:{},tutu:{}\".format(\"小猪\", \"大猪\", \"小懒猪\")\nprint(d)  # duanduan:小猪,huanghuang:大猪,tutu:小懒猪\n\nd = \"duanduan:{},huanghuang:{},tutu:{}\".format([\"小猪\"], [\"大猪\"], [\"小懒猪\"])\nprint(d)  # duanduan:['小猪'],huanghuang:['大猪'],tutu:['小懒猪']\n\nd = \"duanduan:{0[0]},huanghuang:{0[1]},tutu:{0[2]}\".format([\"小猪\", \"大猪\", \"小懒猪\"])\nprint(d)  # duanduan:小猪,huanghuang:大猪,tutu:小懒猪\n\ndata = {\"who\": \"duanduan\", \"how\": \"10\"}\nsen = \"今天{who}花了{how}块钱💰\".format(**data)\nprint(sen)  # 今天duanduan花了10块钱💰\n\n# 新增的格式化方法 f 方法\nsen = f\"今天{name}花了{money}块钱💰\"\nprint(sen)  # 今天duanduan花了10块钱💰\n\nsen = f'今天{data[\"who\"]}花了{data[\"how\"]}块钱💰'\nprint(sen)  # 今天duanduan花了10块钱💰\n\n# 限定小数位数\npi = 3.1415926\nvar = f\"圆周率是多少：{pi:.5f}\"\nprint(var) # 圆周率是多少：3.14159\n```\n\n## 英文字符与字符检测相关函数\n\n- 大小写转换\n  - str.capitalize() 返回原字符串的副本，首个字符大写，其余为小写\n  - str.title() 返回原字符串的副本，每一个英文单词的首个字符大写，其余为小写\n  - str.upper() 将字符串中的英文全部转化为大写\n  - str.lower() 将字符串中的英文全部转化为小写\n  - str.swapcase() 将字符串中的英文大小写互换\n- 字符检测\n  - str.isupper() 检查字符串是否都是大写\n  - str.islower() 检查字符串是否都是小写\n  - str.istitle() 检查字符串是否符合 title\n  - str.isalnum() 检测当前字符串是否由字符(中文、英文、数字)组成。\n  - str.isalpha() 检测当前字符串是否由字符(中文、英文)组成，不包含数字。\n  - str.isdigit() 检测当前字符串是否纯数字\n  - str.isspace() 检测当前字符串是否纯空格\n  - str.startswith() 检测当前字符串是否由指定字符开头，可以指定开始和结束的位置\n  - str.endswith() 检测当前字符串是否由指定字符结尾，可以指定开始和结束的位置\n\n```python\n# 大小写转换\nsen = \"duanDuan is a liTTle pig\"\nprint(sen.capitalize())  # Duanduan is a little pig\nprint(sen.title())  # Duanduan Is A Little Pig\nprint(sen.upper())  # DUANDUAN IS A LITTLE PIG\nprint(sen.lower())  # duanduan is a little pig\nprint(sen.swapcase())  # DUANdUAN IS A LIttLE PIG\n\n# 字符检测\nup = \"DUANDUAN\"\nlo = \"duanduan\"\nnu = \"123\"\nmix = \"word123\"\nprint(sen.isupper())  # False\nprint(up.isupper())  # True\n\nprint(sen.islower())  # False\nprint(lo.islower())  # True\n\nprint(sen.istitle())  # False\n\nprint(sen.isalnum())  # False\nprint(up.isalnum())  # True\nprint(lo.isalnum())  # True\nprint(nu.isalnum())  # True\nprint(mix.isalnum())  # True\n\nprint(sen.isalpha())  # False\nprint(up.isalpha())  # True\nprint(lo.isalpha())  # True\nprint(nu.isalpha())  # False\nprint(mix.isalpha())  # False\n\nprint(sen.isdigit())  # False\nprint(up.isdigit())  # False\nprint(lo.isdigit())  # False\nprint(nu.isdigit())  # True\nprint(mix.isdigit())  # False\n\nprint(sen.isspace())  # False\nprint(\" \".isspace())  # True\n\nprint(sen.startswith(\"d\"))  # True\nprint(sen.startswith(\"D\"))  # False\nprint(sen.startswith(\"n\", 3))  # True\nprint(sen.startswith(\"n\", 3, 8))  # True\n\nprint(sen.endswith(\"u\"))  # False\nprint(sen.endswith(\"g\"))  # True\nprint(sen.endswith(\"pig\"))  # True\nprint(sen.endswith(\"pig\", 3, 24))  # True\n```\n\n## 字符串查找相关函数\n\n- str.find(sub[,start[,end]]) 从左向右获取指定字符在字符串中的索引位置，未找到则返回-1\n- str.rfind(sub[,start[,end]]) 从右向左获取指定字符在字符串中的索引位置，未找到则返回-1\n- str.index() 和 find 方法一样，只不过如果没有找到则报错\n- str.rindex() 从右往左找，如果没有找到则报错\n- str.count() 计算一个字符串出现的次数\n\n```python\nsen = \"duanduanispig,littlepig\"\n\nprint(sen.find(\"pig\"))  # 10\nprint(sen.find(\"pig\", 14, 23))  # 20\n\nprint(sen.rfind(\"pig\"))  # 20\nprint(sen.rfind(\"pig\", 0, 14))  # 10\n\nprint(sen.index(\"pig\"))  # 10\ntry:\n    print(sen.index(\"help\"))  # ValueError: substring not found\nexcept:\n    print(\"ValueError: substring not found\")\n\nprint(sen.rindex(\"pig\"))  # 20\ntry:\n    print(sen.rindex(\"help\"))  # ValueError: substring not found\nexcept:\n    print(\"ValueError: substring not found\")\n\nprint(sen.count(\"duan\"))  # 2\nprint(sen.count(\"u\"))  # 2\nprint(sen.count(\"i\"))  # 4\n```\n\n## 字符串操作相关函数\n\n- str.split() 按照指定的字符进行分隔，把一个字符串分隔成一个列表，可以指定分隔的次数\n- str.rsplit() 按照指定的字符进行分隔，把一个字符串分隔成一个列表，同样可以指定分割的次数\n- str.join() 按照指定的字符 str，把容器类型中的数据连接成一个字符串\n- str.strip() 去除字符串左右两侧的指定字符\n- str.lstrip() 去除字符串左侧的指定字符\n- str.rstrip() 去除字符串右侧的指定字符\n- str.replace(new,old) 用 new 替换掉 str 中的 old,可以指定替换的次数\n- str.center() 给 str 的左右增加指定字符\n- str.ljust() 字符串按照指定位数向左对齐，右侧不够的补充指定字符\n- str.rjust() 同上，向右对齐\n\n```python\nsen = \"duanduanisalittlepig\"\nprint(sen.split(\"i\"))  # ['duanduan', 'sal', 'ttlep', 'g']\n\nword = \"duanduan_is_a_little_piggy\"\nprint(word.split(\"_\"))  # ['duanduan', 'is', 'a', 'little', 'piggy']\nprint(word.split(\"_\", 2))  # ['duanduan', 'is', 'a_little_piggy']\nprint(word.rsplit(\"_\"))  # ['duanduan', 'is', 'a', 'little', 'piggy']\nprint(word.rsplit(\"_\", 2))  # ['duanduan_is_a', 'little', 'piggy']\n\nli = ['user', 'duan', 'pet', 'tu']\nprint(\"_\".join(li))  # user_duan_pet_tu\n\nword = \"      Hello piggy this is tutu     \"\nprint(word.strip())  # Hello piggy this is tutu\n\nold = \"新年快乐\"\nnew = old.replace(\"快乐\", \"大吉\")\nprint(new)  # 新年大吉\n\nword = \"piggy\"\nprint(word.center(10))  #   piggy\nprint(word.center(10, \"*\"))  # **piggy***\n\nprint(word.ljust(10, '*'))  # piggy*****\nprint(word.rjust(10, '*'))  # *****piggy\n```\n\n# 列表详解\n\n列表就是一组有序的数据组合，列表中的数据可以被修改\n\n## 列表定义与基本操作\n\n### 列表的定义\n\n- 可以使用中括号定义 []\n- 可以使用 list 函数定义\n- 在定义列表中的元素时，需要在每个元素之间使用逗号，进行分割。\n- 列表中的元素可以是任意类型，通常存放同类型的\n\n### 列表的基本操作\n\n- 使用+可以对两个列表进行拼接\n- 使用\\*实现列表元素的重复\n- 使用 in 判断列表中是否存在某元素\n- 列表的索引操作\n  - 通过下标获取指定的元素\n  - 通过下标修改元素\n  - 不能通过下标添加元素\n- append()：可以用于向列表中追加元素\n- len()：获取列表的长度\n- 列表元素的删除\n  - del 可以用于通过指定下标删除元素\n  - pop()：可以使用 pop 方法出栈来删除最后一个元素\n\n```python\nvarlist1 = [1, 2, 3, 4]\nvarlist2 = ['a', 'b', 'c', 'd']\n\nres = varlist1 + varlist2\nprint(res)  # [1, 2, 3, 4, 'a', 'b', 'c', 'd']\n\nres = varlist1 * 3\nprint(res)  # [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n\nres = 1 in varlist1\nprint(res)  # True\n\nvarlist1.append(5)\nprint(varlist1)  # [1, 2, 3, 4, 5]\n\nprint(varlist1)  # [1, 2, 3, 4, 5]\ndel varlist1[3]\nprint(varlist1)  # [1, 2, 3, 5]\nres = varlist1.pop()\nprint(res)  # 5\nprint(varlist1)  # [1, 2, 3]\n```\n\n## 列表切片操作\n\n列表[开始索引:结束索引:步进值]\n\n- 列表[开始索引:] 从开始索引到列表的最后\n- 列表[:结束索引] 从开始到结束索引的前一个\n- 列表[开始索引:结束索引] 从开始索引到结束索引的前一个\n- 列表[开始索引:结束索引:步进值] 带有步进值的从开始到结束前一个\n- 列表[:] 列表全部数据\n- 列表[::] 列表全部数据\n- 列表[::-1] 列表逆序输出\n\n使用切片的方法进行列表的数据更新和删除\n\n- 从指定下标开始到指定下标结束前，替换为想要的对应的**容器类型**\n- 使用 del 进行切片删除\n\n```python\nvarlist = ['Kobe', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden']\n\nres = varlist[2:]\nprint(res)  # ['Curry', 'Tony', 'Irving', 'Thompson', 'Harden']\n\nres = varlist[:2]\nprint(res)  # ['Kobe', 'James']\n\nres = varlist[2:6]\nprint(res)  # ['Curry', 'Tony', 'Irving', 'Thompson']\n\nres = varlist[2:6:2]\nprint(res)  # ['Curry', 'Irving']\n\nvarlist[3:6] = ['All star']\nprint(varlist)  # ['Kobe', 'James', 'Curry', 'All star', 'Harden']\n```\n\n## 列表的相关函数\n\n- len() ：使用 len 方法可以计算出列表的长度\n- count() ：count 方法可以检测具体某个元素出现了多少次\n- append() ：append 方法可以在列表尾部追加元素\n- insert(i,x) ：在 i 索引位置，插入 x\n- pop() ：默认出栈一个最末尾的元素,也可以指定索引进行出栈\n- remove() ：可以指定列表中的**元素**进行删除，如果**元素**不存在会报错\n- index() ：可以查找列表中元素第一次出现的索引\n- extend() ：可以将另一个列表扩展到原来的列表上，类似于+\n- clear() ：清空列表中的元素\n- reverse() ：逆序列表\n- sort() ：对列表排序，默认由小到大排序\n  - 若 reverse=True，则按照由大到小排序\n  - 若 key=func，则按照函数处理结果进行排序\n- copy() ：可以拷贝一个列表,但是如果执行修改操作，del 会对多维列表同时修改\n\n```python\nvarlist = ['Kobe', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden']\n\nprint(len(varlist))  # 7\n\nprint(varlist.count('Curry'))  # 1\n\nvarlist.append('new star')\nprint(varlist)  # ['Kobe', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden', 'new star']\n\nvarlist.insert(1, 'Pony')\nprint(varlist)  # ['Kobe', 'Pony', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden', 'new star']\n\nres = varlist.pop()\nprint(res)  # new star\nprint(varlist)  # ['Kobe', 'Pony', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden']\n\nvarlist.remove('Tony')\nprint(varlist)  # ['Kobe', 'Pony', 'James', 'Curry', 'Irving', 'Thompson', 'Harden']\n\nprint(varlist.index('Curry'))  # 3\n\ntemp = ['nobody', 'somebody']\nvarlist.extend(temp)\nprint(varlist)  # ['Kobe', 'Pony', 'James', 'Curry', 'Irving', 'Thompson', 'Harden', 'nobody', 'somebody']\n\nvarlist.clear()\nprint(varlist)  # []\n\nvarlist = ['Kobe', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden']\nvarlist.reverse()\nprint(varlist)  # ['Harden', 'Thompson', 'Irving', 'Tony', 'Curry', 'James', 'Kobe']\n\nvarlist.sort()\nprint(varlist)  # ['Curry', 'Harden', 'Irving', 'James', 'Kobe', 'Thompson', 'Tony']\\\nvar = [6, 8, 3, 5, 9, 0, 2, 1, 4, 7]\nvar.sort()\nprint(var)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nvar = [1, 2, 3, 4, 5]\nvar_val = var.copy()\nprint(id(var), id(var_val))  # 4494320416 4493079008\ndel var[4]\nprint(var)  # [1, 2, 3, 4]\nprint(var_val)  # [1, 2, 3, 4, 5]\n\nvar = [1, 2, 3, [4, 5]]\nvar_val = var.copy()\nprint(id(var), id(var_val))  # 4559934480 4558631712\ndel var[3][1]\nprint(var)  # [1, 2, 3, [4]]\nprint(var_val)  # [1, 2, 3, [4]]\n```\n\n## 深拷贝与浅拷贝\n\n- 浅拷贝\n  - 使用的是 copy()方法\n  - 对一维列表拷贝后，与原来的列表是不同的，单独做出修改不会影响另一列表\n  - 但是如果是多维列表，使用浅拷贝之后，对多维部分进行修改，所有的都会改变\n- 深拷贝\n  - 使用的是 copy 模块下的 deepcopy()\n  - 深拷贝下的拷贝列表，是完全独立的\n\n```python\nimport copy\n\nvarlist = [1, 2, [3, 4, 5]]\nnewlist = varlist.copy()\n\nprint(varlist)  # [1, 2, [3, 4, 5]]\nprint(newlist)  # [1, 2, [3, 4, 5]]\nprint(id(varlist) == id(newlist))  # False\nprint(id(varlist[2]) == id(newlist[2]))  # True\ndel varlist[2][0]\nprint(varlist)  # [1, 2, [4, 5]]\nprint(newlist)  # [1, 2, [4, 5]]\n\nvarlist = [1, 2, [3, 4, 5]]\nnewlist = copy.deepcopy(varlist)\nprint(varlist)  # [1, 2, [3, 4, 5]]\nprint(newlist)  # [1, 2, [3, 4, 5]]\nprint(id(varlist) == id(newlist))  # False\nprint(id(varlist[2]) == id(newlist[2]))  # False\ndel varlist[2][0]\nprint(varlist)  # [1, 2, [4, 5]]\nprint(newlist)  # [1, 2, [3, 4, 5]]\n```\n\n## 列表推导式\n\n列表推导式提供了一个更简单的创建列表的方法。常见的用法是把某种操作应用于序列或者可迭代对象的每个元素上，然后使用其结果来创建列表，或者通过满足某些特定条件元素来创造子序列\n\n- 常用方法\n- list = [想要的处理方式 for i in 容器类型数据 条件表达式]\n\n```python\n# 创建0-9的平方列表\n\n# 普通方法\nvarlist = []\nfor i in range(10):\n    varlist.append(i ** 2)\n\nprint(varlist)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n# lambda表达式+map\nvarlist = list(map(lambda x: x ** 2, range(10)))\nprint(varlist)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n# 列表推导式\nvarlist = [i ** 2 for i in range(10)]\nprint(varlist)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n# 2 实现一个字符串'1234' ===> [2，4，6，8]\n\n# 普通方法\nvarstr = '1234'\nvarlist = []\nfor i in varstr:\n    varlist.append(int(i) * 2)\nprint(varlist)  # [2, 4, 6, 8]\n\n# lambda+map\nvarlist = list(map(lambda x: int(x) * 2, varstr))\nprint(varlist)  # [2, 4, 6, 8]\n\n# 列表推导式\nvarlist = [int(i) * 2 for i in varstr]\nprint(varlist)  # [2, 4, 6, 8]\n\n# 3 实现0-9的偶数列表 ===> [0,2,4,6,8]\n\n# 普通方法\nvarlist = []\nfor i in range(10):\n    if i % 2 == 0:\n        varlist.append(i)\nprint(varlist)  # [0, 2, 4, 6, 8]\n\n# lambda+fliter\nvarlist = list(filter(lambda x: True if x % 2 == 0 else False, range(10)))\nprint(varlist)  # [0, 2, 4, 6, 8]\n\n# 列表推导式\nvarlist = [i for i in range(10) if i % 2 == 0]\nprint(varlist)  # [0, 2, 4, 6, 8]\n\n# 4 实现多循环的列表推导式\n# 实现 [1,2,3],[3,1,4]  ===> 列表中的元素两两组合，要求组合元素不能重复\n\n# 普通方法\nvarlist = []\nfor x in [1, 2, 3]:\n    for y in [3, 1, 4]:\n        if x != y:\n            varlist.append((x, y))\nprint(varlist)  # [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n\n# 列表推导式\nvarlist = [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]\nprint(varlist)  # [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n\n# 5 实现矩阵的转换\n\n# 普通方法\nmatrix = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n]\nnewlist = []\nfor i in range(len(matrix[0])):\n    newlist.append([res[i] for res in matrix])\nprint(newlist)\n\n# 列表推导式\nnewlist = [[res[i] for res in matrix] for i in range(4)]\nprint(newlist)\n```\n\n## 练习题\n\n使用列表推导式实现乘法表\n\n```python\n# 把字典中的键值对转换成 a=b的列表形式\n# {'user':'admin','age':'20','phone':'130'} ===> ['user=admin','age=20','phone=133']\n\nvardict = {'user': 'admin', 'age': '20', 'phone': '130'}\n\nvarlist = [i + '=' + vardict[i] for i in vardict]\nprint(varlist)  # ['user=admin', 'age=20', 'phone=130']\nres = '&'.join(varlist)\nprint(res)  # user=admin&age=20&phone=130\n\n# 把列表中的所有字符全部转为小写\n# ['AAAAA','BbbBB','CCCcc'] ===> ['aaaaa','bbbbb','ccccc']\nvarlist = ['AAAAA', 'BbbBB', 'CCCcc']\nnewlist = [i.lower() for i in varlist]\nprint(newlist)  # ['aaaaa', 'bbbbb', 'ccccc']\n\n# x是0-5之间的偶数，y是0-5之间的奇数，把x，y组成一个元组放进一个列表中\n\nnewlist = [(x, y) for x in range(6) for y in range(6) if x % 2 == 0 if y % 2 != 0]\nprint(newlist)\n\n# 使用列表推导式完成乘法表\n\nnewlist = [f'{i}×{j}={i * j}' for i in range(1, 10) for j in range(1, i + 1)]\nprint(newlist)\n\n# 使用列表推导式完成M与N的计算 ===> [2,4,6,12,15,18,28,32,36]\n\nM = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]\n\nN = [\n    [2, 2, 2],\n    [3, 3, 3],\n    [4, 4, 4],\n]\n\nnewlist = [M[p][q] * N[p][q] for p in range(3) for q in range(3)]\nprint(newlist)  # [2, 4, 6, 12, 15, 18, 28, 32, 36]\n```\n\n# 元组详解\n\n## 基本定义和切片操作\n\n元组和列表一样都是一组有序的数据组合 元组中的元素一旦定义了就不能修改，因此元组是不可变数据类型\n\n### 元组定义\n\n- 定义空元祖，变量名=() 或者 变量名=tuple()\n- 还可以使用 变量名=(1，2，3)的方式定义有数据的元组\n- 如果只有一个数据，数据后需要加,，如 变量名=(1,)\n- 特例，使用 变量=1,2,3 这样的方式也可以定义元组\n\n### 元组的相关操作\n\n由于元组是不可变的数据类型，因此只能使用索引进行访问，不能进行其他操作 元组可以和列表一样使用切片操作\n\n- tuple.count() 统计一个元素出现的次数\n- tuple.index() 查找一个元素的索引值\n- tuple[] 与列表一样的方式进行切片\n- 使用 +、\\* 运算，合并组成新的元组\n- in 方法检测一个元素是否在元组中\n\n```python\nvartuple = 1, 2, 3\nprint(vartuple)  # (1, 2, 3)\n\nvartuple = (1,)\nprint(vartuple)  # (1,)\n\nvartuple = (1, 2, 3, 4, 5)\nprint(len(vartuple))\n\nprint(vartuple[:])  # (1, 2, 3, 4, 5)\nprint(vartuple[::])  # (1, 2, 3, 4, 5)\nprint(vartuple[1:3])  # (2, 3)\nprint(vartuple[::-1])  # (5, 4, 3, 2, 1)\n\nvartuple = ('Kobe', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden', 'Kobe')\nprint(vartuple.count('James'))  # 1\nprint(vartuple.index('Curry'))  # 2\nprint(vartuple.index('Kobe'))  # 0\nprint(vartuple.index('Kobe', 5, 8))  # 7\n\nprint(\n    vartuple + vartuple)  # ('Kobe', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden', 'Kobe', 'Kobe', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden', 'Kobe')\nprint(\n    vartuple * 2)  # ('Kobe', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden', 'Kobe', 'Kobe', 'James', 'Curry', 'Tony', 'Irving', 'Thompson', 'Harden', 'Kobe')\n\nres = 'Irving' in vartuple\nprint(res)  # True\n```\n\n## 元组推导式 generator\n\n元组推导式 generator 也称为生成器，返回的是一个生成器 **生成器**是一个特殊的迭代器，生成器可以自定义，也可以使用元组推导式定义 生成器是按照某种算法去推算下一个数据或结果，只需要往内存中存储一个生成器，节约内存消耗，提升性能 语法： (1) 里面是推导式，外面是一个() 的结果就是一个生成器 (2) 自定义生成器，含有 yidle 关键字的函数就是生成器 含有 yield 关键字的函数，返回的结果就是一个迭代器(生成器函数就是一个返回迭代器的函数)\n\n- 如何使用生成器：生成器是迭代器的一种，所以可以使用操作迭代器的方法操作生成器\n  - 使用 next()函数调用\n  - 使用 list()函数或者 tuple()函数进行操作\n  - 使用 for 语句进行遍历\n\n```python\nvarlist = [1, 2, 3, 4, 5]\nnewtuple = (i ** 2 for i in varlist)\nprint(newtuple)  # <generator object <genexpr> at 0x101dd1f50>\n\n# 1\nprint(next(newtuple))  # 1\nprint(next(newtuple))  # 4\n\n# 2\nnewtuple = (i ** 2 for i in varlist)\nprint(list(newtuple))  # [1, 4, 9, 16, 25]\n\nnewtuple = (i ** 2 for i in varlist)\nprint(tuple(newtuple))  # (1, 4, 9, 16, 25)\n\n# 3\nnewtuple = (i ** 2 for i in varlist)\nfor i in newtuple:\n    print(i)  # 1 4 9 16 25\n```\n\n# 字典详解\n\n## 定义和基本操作\n\n字典也是一种数据的集合，由键值对组成的数据集合，字典中的键不能重复 字典中的键必须是不可变的数据类型，常用的键主要是：字符串，整型\n\n### 字典的定义\n\n- 字典可以通过大括号括起来的 键:值对 进行创建\n- 也可以使用 dict 构造器来创建\n- 数据类型的转换：可以将其他的二级容器类型（列表、元组）转换为 dict\n- 可以使用 zip()函数，将两个 list 组合成一个 dict\n\n### 字典的操作\n\n- 获取，通过索引键的方式可以获取到值\n- 修改，索引到的话可以修改值\n- 删除，使用 del 进行删除\n- 添加，使用一个新的键，进行赋值，若键存在，则会覆盖\n- 成员检测，可以使用 in 进行成员检测，但是只能检测键\n- 长度，可以用 len()，来检测有多少个键值对\n- dict.keys()：可以查询所有键\n- dict.values()：可以查询所有值\n- dict.items()：获取当前字典中所有的键值对\n- 字典的遍历：可以使用 for\n- 字典合并：new_dict = {**dict1, **dict2}\n\n```python\nvardict = {'a': 1, 'b': 2, 'c': 3}\nprint(vardict, type(vardict))  # {'a': 1, 'b': 2, 'c': 3} <class 'dict'>\n\nvardict = dict(a=1, b=2, c=3)\nprint(vardict)  # {'a': 1, 'b': 2, 'c': 3}\n\nvardict = dict([['a', 1], ['b', 2], ['c', 3]])\nprint(vardict)  # {'a': 1, 'b': 2, 'c': 3}\n\nvar1 = ['a', 'b', 'c']\nvar2 = [1, 2, 3]\nprint(dict(zip(var1, var2)))  # {'a': 1, 'b': 2, 'c': 3}\n\nres = vardict['a']\nprint(res)  # 1\n\nvardict['a'] = 'A'\nprint(vardict)  # {'a': 'A', 'b': 2, 'c': 3}\n\ndel vardict['a']\nprint(vardict)  # {'b': 2, 'c': 3}\n\nvardict['d'] = 4\nprint(vardict)  # {'b': 2, 'c': 3, 'd': 4}\n\nres = 'd' in vardict\nprint(res)  # True\nres = 'a' in vardict\nprint(res)  # False\n\nres = len(vardict)\nprint(res)  # 3\n\nres = vardict.keys()\nprint(res) #dict_keys(['b', 'c', 'd'])\nres = vardict.values()\nprint(res) # dict_values([2, 3, 4])\nres = vardict.items()\nprint(res) # dict_items([('b', 2), ('c', 3), ('d', 4)])\n\n# 字典的遍历\nfor i in vardict:\n    print(i,vardict[i])\n    # b 2\n    # c 3\n    # d 4\n\nfor k,v in vardict.items():\n    print(k,v)\n    # b 2\n    # c 3\n    # d 4\n```\n\n## 相关函数\n\n- len(dict)，来检测有多少个键值对\n- dict.keys()：可以查询所有键\n- dict.values()：可以查询所有值\n- dict.items()：获取当前字典中所有的键值对\n- iter(dict)：返回以字典的键为元素的迭代器\n- pop(key)：通过键的方式弹出键值对\n- popitem()：按照 LIFO 的方式删除键值对\n- get()：通过 get 函数获得对应键的值，若键不存在返回 None\n- update()：更新字典，在原来的基础上更新\n- setdefault()：如果 字典的键存在 则返回对应值；如果键不存在，默认存入值为 None 的键值对，返回值为值，也可以指定传入的值\n\n```python\nvardict = {'a': 1, 'b': 2, 'c': 3}\n\nres = iter(vardict)\nprint(res)  # <dict_keyiterator object at 0x102977950>\n\nfor i in res:\n    print(i)\n    # a\n    # b\n    # c\n\nvardict.pop('a')\nprint(vardict)  # # {'b': 2, 'c': 3}\n\nvardict.popitem()\nprint(vardict)  # {'b': 2}\n\nvardict = {'a': 1, 'b': 2, 'c': 3}\nres = vardict.get('a')\nprint(res)  # 1\nres = vardict.get('d')\nprint(res)  # None\n\nvardict.update(a=11, b=22)\nprint(vardict)  # {'a': 11, 'b': 22, 'c': 3}\n\nres = vardict.setdefault('d', 4)\nprint(res)  # 4\nprint(vardict)  # {'a': 11, 'b': 22, 'c': 3, 'd': 4}\n```\n\n## 字典推导式\n\n```python\nvardict = {'a': 1, 'b': 2, 'c': 3}\n\n# 把字典中的键值对位置交换\n\n# 普通方法\nnewdict = {}\nfor k, v in vardict.items():\n    newdict[v] = k\nprint(newdict)  # {1: 'a', 2: 'b', 3: 'c'}\n\n# 使用字典推导式\nnewdict = {v: k for k, v in vardict.items()}\nprint(newdict)  # {1: 'a', 2: 'b', 3: 'c'}\n\n\n# 只保留值为偶数的键值对 并且键值互换\n# 普通方法\nvardict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nnewdict = {}\nfor k,v in vardict.items():\n    if v % 2 ==0:\n        newdict[v] = k\nprint(newdict) # {2: 'b', 4: 'd'}\n\n# 列表推导式方法\nnewdict = {v:k for k,v in vardict.items() if v % 2 == 0}\nprint(newdict) # {2: 'b', 4: 'd'}\n```\n\n# 集合详解\n\n## 集合的基本操作和常规\n\n确定的一组无序的数据的组合\n\n- 确定的：当前集合中元素的值不能重复\n- 由多个数据组合的复合型数据（容器类型数据）\n- 集合中的数据没有顺序\n- 功能：成员检测、从序列中去除重复项以及数学中的集合类计算，列如交集、并集、差集与对称差集等等\n\n### 集合的定义\n\n- 可以直接使用{}来定义集合，定义空集合必须用 set()方法\n- 可以使用 set()进行集合的定义和转换\n- 使用集合推导式完成集合的定义 注意：集合中的元素不能重复，集合中存放的数据：Number、Strings、Tuple、冰冻集合\n\n### 集合的基本操作和常规函数\n\n- 无序、False 和 0 只会出现一个、True 和 1 只会出现一个、元素值不会重复\n- 成员检测：使用 in 检测是都存在某个元素\n- 元素个数：len()检测集合元素个数\n- 集合遍历：使用 for 方法进行遍历\n- 追加元素：set.add()可以向集合中追加元素，（为什么不是 append，因为 append 有扩充的思想，从尾部插入，而 add 是没有顺序的）\n- 删除元素：\n  - set.pop()可以删除集合中的元素，随机删除，并返回\n  - set.remove()指定删除集合中的元素，无返回值,如果不存在则会报错\n  - set.discard()指定删除集合中的元素，不存在也不会报错\n- 清空集合：set.clear()\n- 更新集合：set.update()\n- 集合的拷贝：set.copy()\n- 冰冻集合：frozenset()\n\n```python\nvarset = {123, 'abc', True, (1, 2, 3), 0, False, 3.1415, 123}\n\nprint(varset)  # {0, True, 3.1415, 'abc', (1, 2, 3), 123}\n\nres = 'abc' in varset\nprint(res)  # True\n\nres = len(varset)\nprint(res)  # 6\n\nfor i in varset:\n    print(i)\n    # 0\n    # True\n    # 3.1415\n    # (1, 2, 3)\n    # abc\n    # 123\n\nvarset.add('new')\nprint(varset)  # {0, True, 3.1415, 'new', (1, 2, 3), 'abc', 123}\n\n# pop是随机的删除\nr1 = varset.pop()\nr2 = varset.pop()\nr3 = varset.pop()\nr4 = varset.pop()\nprint(r1, r2, r3, r4)  # 0 True 3.1415 new\nprint(varset)  # {(1, 2, 3), 'abc', 123}\n\nvarset = {123, 'abc', True, (1, 2, 3), 0, False, 3.1415, 123}\nvarset.remove('abc')\nprint(varset)  # {0, True, 3.1415, (1, 2, 3), 123}\n\nvarset.discard(123)\nprint(varset)  # {0, True, 3.1415, (1, 2, 3)}\n\nvarset.clear()\nprint(varset)  # set()\n\nvarset = {123, 'abc', True, (1, 2, 3), 0, False, 3.1415, 123}\nvarset.update({1, 2, 3, 4, 5})\nprint(varset)  # {0, True, 2, 3.1415, 3, 4, 5, (1, 2, 3), 123, 'abc'}\n\nnewset = varset.copy()\nprint(newset)  # {0, True, 2, 3.1415, 3, 4, 5, (1, 2, 3), 'abc', 123}\n\n# 冰冻集合\nv = frozenset({1, 2, 3})\nprint(v)  # frozenset({1, 2, 3})\n```\n\n## 冰冻集合\n\n- 定义冰冻集合 只能使用 frozenset()函数进行冰冻集合的定义\n  - 冰冻集合一旦定义 就不能修改\n  - 冰冻集合只能做集合相关的运算：求并交补差集\n  - 本身就是一个强制类型转换的函数，可以把其他任何容器类型的数据转换为冰冻集合\n- 冰冻集合可以遍历：使用 for 进行遍历\n- 冰冻集合的推导式\n\n```python\nvars = frozenset({1,2,3})\nprint(vars) # frozenset({1, 2, 3})\n\nfor i in vars:\n    print(i)\n    # 1\n    # 2\n    # 3\n\n\n# 冰冻集合推导式\nres = frozenset({i<<1 for i in range(6)})\nprint(res) # frozenset({0, 2, 4, 6, 8, 10})\n```\n\n## 集合推导式\n\n```python\n# 普通推导式\nvarset = {1, 2, 3, 4}\n\nnewset = {i << 1 for i in varset}\nprint(newset)  # {8, 2, 4, 6}\n\n# 带有条件表达式的推导式\nnewset = {i << 1 for i in varset if i % 2 == 0}\nprint(newset)  # {8, 4}\n\n# 多循环的集合推导式\n# 普通方法\nvars1 = {1, 2, 3}\nvars2 = {4, 5, 6}\nnewset = set()\nfor i in vars1:\n    for j in vars2:\n        print(i, j)\n        newset.add(i + j)\nprint(newset)  # {5, 6, 7, 8, 9}\n\n# 列表推导式\nnewset = {i + j for i in vars1 for j in vars2}\nprint(newset)  # {5, 6, 7, 8, 9}\n\n# 待条件表达式的多循环的集合推导式\nnewset = {i + j for i in vars1 for j in vars2 if (i + j) % 2 == 0}\nprint(newset)  # {8, 6}\n```\n\n## 集合运算\n\n- 集合的主要运算\n  - 交集\n    - &\n    - set.intersection() 有返回值，不对原集合更新；还可以对可迭代对象进行合并\n    - set.intersection_update() 无返回值，对原集合会更新\n  - 并集\n    - | 更推荐这种，对两种数据要求高 不能太灵活\n    - set.union() 有返回值，不对原集合更新 ；还可以对可迭代对象进行合并\n    - set.update() 无返回值，对调用的集合更新\n  - 差集 (去掉集合中 另一集合有的部分)\n    - -\n    - set.difference() 有返回值，不对原集合更新\n    - set.difference_update() 无返回值，对原集合更新\n  - 对称差集 (去掉各自集合中 相同的部分)\n    - ^\n    - set.symmetric_difference() 有返回值，不对原集合更新\n    - set.symmetric_difference_update() 无返回值，对原集合更新\n- 检测超集和子集\n  - set1.issuperset(set2) 返回值为 True、False，意义为 set1 是否为 set2 的超集，也可以用 `>=`\n  - set1.issubset(set2) 检测 set1 是否为 set2 的子集，也可以使用 `<=`\n- 检测是否不相交\n  - set1.isdisjoint(set2) 有返回值，不相交返回 True、相交返回 False\n\n```python\nvars1 = {1, 2, 3, 4, 5, 6, 7}\nvars2 = {4, 5, 6, 7, 8, 9, 10}\n\n# 交集\nprint(vars1 & vars2)  # {4, 5, 6, 7}\nres = vars1.intersection(vars2)\nprint(res)  # {4, 5, 6, 7}\nprint(vars1)  # {1, 2, 3, 4, 5, 6, 7}\n\nres = vars1.intersection_update(vars2)\nprint(res)  # None\nprint(vars1)  # {4, 5, 6, 7}\n\n# 并集\nvars1 = {1, 2, 3, 4, 5, 6, 7}\nvars2 = {4, 5, 6, 7, 8, 9, 10}\nprint(vars1 | vars2)  # {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nres = vars1.union(vars2)\nprint(res)  # {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nvars1.update(vars2)\nprint(vars1)  # {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\n# 差集\nvars1 = {1, 2, 3, 4, 5, 6, 7}\nvars2 = {4, 5, 6, 7, 8, 9, 10}\nprint(vars1 - vars2)  # {1, 2, 3}\nprint(vars2 - vars1)  # {8, 9, 10}\nres = vars1.difference(vars2)\nprint(res)  # {1, 2, 3}\nvars1.difference_update(vars2)\nprint(vars1)  # {1, 2, 3}\n\n# 对称差集\nvars1 = {1, 2, 3, 4, 5, 6, 7}\nvars2 = {4, 5, 6, 7, 8, 9, 10}\nprint(vars1 ^ vars2)  # {1, 2, 3, 8, 9, 10}\nres = vars1.symmetric_difference(vars2)\nprint(res)  # {1, 2, 3, 8, 9, 10}\nvars1.symmetric_difference_update(vars2)\nprint(vars1)  # {1, 2, 3, 8, 9, 10}\n\nvars1 = {1,2,3}\nvars2 = {1,2,3,4,5,6,7}\nres = vars2.issuperset(vars1)\nprint(res) # True\n\nres = vars1.issubset(vars2)\nprint(res) # True\n\nres = vars1.isdisjoint(vars2)\nprint(res) # False\n```\n\n> 更新: 2024-01-10 22:17:18  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/an7fvuvt1unusq1w>\n","tags":["Python"],"categories":["Python基础"]},{"title":"Python - 语法","url":"/blog/1071536995/","content":"\n# 语法\n\n# 课程介绍\n\n- 语法\n- 函数\n- 容器\n- 文件\n- 内置模块\n\n# Python 环境安装\n\n包括了 Python、Pycharm、typora、语雀\n\n[https://www.python.org/](https://www.python.org/)\n\n[https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)\n\n[https://typoraio.cn/](https://typoraio.cn/)\n\n[https://www.yuque.com/](https://www.yuque.com/)\n\n# 初识 Python 脚本\n\n## 输出语句 print\n\n```python\nprint(\"Hellozachary\")\n```\n\n## 空格与缩进\n\n```python\ndef main():\n    print(\"Hello zachary\")\n    print(\"Welcome to Python\")\n```\n\n## 注释\n\nPython 的注释就是用一个 # 注释的一行话，除了# 还可以用''' '''，和\"\"\" \"\"\"\n\n```python\n# 这是一个单行注释\n\n'''\n这是一个多行注释\n'''\n\n\"\"\"\n这也是一个多行注释\n\"\"\"\n```\n\n## 语句跨行\n\n使用反斜杠是语句分行编写\n\n```python\nfor i in \\\nrange(9):\n    print(i)\n```\n\n## 变量（标识符：变量名、函数名、类名、模块名）\n\n用于记录可变化的数据\n\n```python\nnum=10\nprint(num)\n```\n\n变量的命名规范\n\n- 变量名可以使用字母、数字、下划线，\n- 但是不能以数字开头\n- 要严格区分大小写\n- 不要使用中文\n- 不要使用关键字\n\n> 关键字包括不限于：\n\n![](https://cdn.nlark.com/yuque/0/2023/png/38881094/1704017762791-c886296e-42d5-4b1c-8f7e-e9641cdbb8bc.png)\n\n# 变量定义及数据交换\n\n**变量的定义方式**\n\n```python\n#第一种\na=10\nb=20\nprint(a,b)\n\n#第二种\na,b=10,20\nprint(a,b)\n```\n\n**交换变量的数据**\n\n```python\n#普通方式交换数据\na=10\nb=20\n\nt=a\na=b\nb=t\nprint(a,b)\n\n#python独有的方法进行数据交换\na=10\nb=20\na,b=b,a\nprint(a,b)\n```\n\n# Python 的数据类型\n\n什么是数据类型——数据的表现形式，常用的包括有数字、字符串，在程序中我们常使用的包括：\n\n## 字符串类型\n\n```python\nlove='Iloveyou'\nname=\"Zachary\"\n\nprint(love)\nprint(name)\n```\n\n可以使用`type()`查看变量的数据类型\n\n```python\n#大字符串\ns='''\n比如这是一个很长的字符串\n可以换行的\n'''\nprint(s)\n```\n\n字符串中使用引号可以嵌套使用，单双引号可以互相嵌套，但是不可以嵌套自己\n\n```python\ns=\"I'mZachary\"\nprint(s)\n```\n\n关于转义字符\n\n> \\t 制表符  \n> \\r 换行符  \n> \\n 回车换行符  \n> 在字符串前面加一个`r`可以取消转义字符的效果\n\n```python\n#使用了转义字符的\ns=\"这是一段话\\n分了两行\"\nprint(s)\n\n#使用r使转义字符失效\ns=r\"这是一段话\\n没有分两行\"\nprint(s)\n```\n\n## 数字类型\n\n- 整型 int\n\n```python\nvar=520\nprint(var,type(var))\nvar=-100\nprint(var,type(var))\n```\n\n- 浮点类型 float\n\n```python\nvar=3.14\nprint(var,type(var))\n```\n\n- 复数类型 complex\n\n```python\nvar=5+6j\nprint(var,type(var))\n```\n\n- 布尔类型 bool(True\\False)\n\n```python\nvar=True\nprint(var,type(var))\nvar=False\nprint(var,type(var))\n```\n\n## list 列表类型\n\n列表用来表示一系列数据，例如需要记录一组数字或者其他数据，用中括号括起来`[]`,并且数据之间使用`,`分隔开\n\n```python\nvarlist=[192,200,43]\nprint(varlist,type(varlist))\n```\n\n- 列表中存储的数据可以是任意类型\n- 列表中存储的每一组数据，称为元素\n- 列表中存储的数据可以通过下标获取，列表的下标从 0 开始，倒着来最后一个是-1\n\n```python\nvarlist=[192,200,43]\nprint(varlist[0])\n```\n\n- 列表中元素的值，可以是一个 list，这种叫二维列表\n\n```python\nvarlist=[192,['a','b'],43]\nprint(varlist,type(varlist))\nprint(varlist[1][0])#'a'\n```\n\n## tuple 元组类型\n\n元组与列表数据类型相似，使用多个数据内容时候也可以使用元组，用括号`()`括起来，但是区别在于 tuple 的元素不可改变\n\n```python\nvart=(1,2,3,'a','b')\nprint(vart,type(vart))\n```\n\n- 注意，在定义元组时候，如果只有一个元素，需要加一个逗号`,`\n\n```python\nvart=('abc',)\nprint(vart)\n```\n\n- 列表使用中括号`[]`定义，元组使用括号`()`定义\n- 列表中的值可以被改变，**元组中的值不可以**\n\n## dict 字典类型\n\n字典也是用于存储一组或多组数据，使用大括号`{}`括起来，使用的是键-值对的存储方式\n\n- 使用键-值对的方式进行定义，{ key:value }\n- 键和值之间使用冒号`:`进行分隔，多组键-值对之间用逗号`,`分隔\n- 键-必须是字符串或者数字类型，值-可以是任意类型\n- 键-不可以重复，值-可以重复\n\n```python\nvard={\n'title':'<<无人生还>>',\n'author':'阿加莎·克里斯蒂',\n'price':'39.99'\n}\nprint(vard,type(vard))\n#通过索引键名来获得对应值，类似于list的方式\nprint(vard['title'])\n```\n\n## set 集合类型\n\n集合是一种用于存储无重复的数据，使用大括号`{}`或者 set()方法来定义\n\n- 集合是一种无序且无重复的数据类型\n- 使用 set 方法定义的时候，里面是字符串\n- 当需要定义一个空集合的时候，只能使用 set 方法，因为`{}`是一个空字典\n\n```python\nvars={1,2,3,4,'a','b',1,2,3}\nprint(vars,type(vars))#{1,2,3,4,'a','b'}<class'set'>\n\nvars=set(\"123\")\nprint(vars)#{'1','3','2'}\nvars=set()\nprint(vars,type(vars))#set()<class'set'>\nvard={}\nprint(vard,type(vard))#{}<class'dict'>\n```\n\n- 可以给集合添加元素，使用 add 方法\n- 可以删除集合中的元素，使用 discard 方法\n- 也可以用`in`检查元素是否在集合中\n\n```python\nvars={1,2,3,4,'a','b',1,2,3}\nvars.add('c')\nprint(vars)#{1,2,3,4,'b','c','a'}\nvars.discard(4)\nprint(vars)#{1,2,3,'c','b','a'}\nprint(1invars)#True\n```\n\n- 集合主要用于运算，包括交集、并集、补集，对称集合\n\n```python\na={1,2,3,7,8,9}\nb={1,2,'a','b'}\nprint(a&b)#交集{1,2}\nprint(a-b)#差集{8,9,3,7}\nprint(a|b)#并集{1,2,3,7,8,9,'a','b'}\nprint(a^b)#对称集合{3,'a',7,8,9,'b'}\n```\n\n# 基础数据类型转换\n\n数据类型总结  \n字符串 str  \n数字类型\n\n- 整型 int\n- 浮点 float\n- 复数 complex\n- 布尔 bool\n\n列表 list  \n元组 tuple  \n字典 dict  \n集合 set\n\n> 可变数据类型：列表(append)、字典(['key'])、集合(add)  \n> 不可变数据类型：字符串、数字、元组\n\n> 容器类型数据：字符串、列表、元组、集合、字典  \n> 非容器类型数据：数字、布尔类型\n\n数据类型转换：把一个数据类型转化为另一个类型  \n为什么要进行数据类型转换：因为不同数据类型之间不能进行运算  \n数据转换的类型：\n\n- 自动类型转换  \n  当两个不同类型的值进行运算时，结果会向更高的精度进行计算  \n  True ===> 整型 ===> 浮点 ===> 复数\n\n```python\n#自动类型转换\na=123\nb=True\nprint(a+b)#124\nprint(12.5+22)#34.5\nprint(True+3.14)#4.140000000000001\n```\n\n- 强制类型转换  \n  分别有：str()、int()、float()、bool()、list()、tuple()、dict()、set()\n\n1.  可以将所有类型转换为 str\n2.  字符串如果是纯数字可以转化为 int，其他类型容器不行\n3.  float 与 int 类似\n4.  bool 的强制转化，只要有非 0 值、非空值的内容、容器，结果都是 True\n\n# 容器类型数据转换\n\n容器类型转换为\n\n- list 列表\n\n> 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型  \n> 字符串可以转换，会把字符串中的每一个字符当做一个元素  \n> 集合、元组、字典都可以转换，字典会只保留键\n\n```python\n#list列表\nn='123'\nres=list(n)\nprint(n,type(n))#123<class'str'>\nprint(res,type(res))#['1','2','3']<class'list'>\nn={'a':1,'b':2}\nres=list(n)\nprint(res)#['a','b']\n```\n\n- tuple 元组\n\n> 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型  \n> 字符串可以转换，会把字符串中的每一个字符当做一个元素  \n> 集合、列表、字典也都可以转换，同上只保留键\n\n- set 集合\n\n> 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型  \n> 字符串可以转换，会把字符串中的每一个字符当做一个元素，并且是无序的  \n> 列表、元组、字典也都可以转换，字典只保留键\n\n- dict 字典\n\n> 数字不能转换，因为 int 和 float 都是不可迭代的，非容器类型  \n> 字符串不可以转换  \n> 列表转化的时候必须是嵌套的形式才可以，二级列表,并且每个元素是一个二元素的列表  \n> 元组转化的时候，同列表必须是二级元组，每一个元素是一个二元素的元组  \n> 集合不可以转为字典\n\n```python\n# 列表转化为字典\nn = [['a', 1], ['b', 2]]\nres = dict(n)\nprint(res)  # {'a': 1, 'b': 2}\n# 元组转化为字典\nn = (('a', 1), ('b', 2))\nres = dict(n)\nprint(res)  # {'a': 1, 'b': 2}\n```\n\n# 运算符\n\n## 算数运算符\n\n- - 加\n- - 减\n- - 乘\n- /   除\n- %   取余（取模）\n- // 取整\n- \\*\\* 乘方\n\n## 字符运算符\n\n- 字符串与数字不能直接进行运算\n- 字符串与字符串可以使用 `+` 进行拼接\n- 字符串如果和数字使用 `*` 那就是重复数字次的字符串\n- 在字符串中如果出现变量，可以使用`{}` 将变量括起来，然后再字符串前面加上`f`\n\n```python\nl = \"love\"\nprint(l * 3)  # lovelovelove\n\ns = f\"I {l} you\"\nprint(s)  # I love you\n```\n\n## 赋值运算符\n\n- =   简单的赋值运算符\n- +=   加法赋值运算符\n- -=   减法赋值运算符\n- \\*= 乘法赋值运算符\n- /=   除法赋值运算符\n- %=   取余赋值运算符\n- \\*\\*= 乘方赋值运算符\n- //= 取整赋值运算符\n\n```python\na = 12\na += 12\nprint(a) # 24\n```\n\n## 比较运算符\n\n- == 比较两个值是否相等，返回 True、False\n- != 比较两个值是否不相等\n- > 大于，返回 True，否则 False\n- <   小于，返回 True，否则 False\n- > = 大于等于，返回 True，否则 False\n- <= 小于等于，返回 True，否则 False\n\n```python\nb = 12\nprint(a != b) # True\n```\n\n## 逻辑运算符\n\n- and   与\n- or   或\n- not   非\n\n有一个贪心原则，当 and 的时候前一个是 False，后一个就不计算了，直接返回 False，当 or 的时候，如果前一个是 True 则返回 True，否则返回后一个的情况\n\n## 位运算\n\n位运算是在二进制上使用的，可以使用 bin()方法将其他进制转换成二进制\n\n- & 按位与运算\n- | 按位或运算\n- ^ 按位异或运算\n- ~ 按位取反运算\n- << 左移运算\n- > > 右移运算\n\n## 其他运算符\n\n- 成员运算符\n\n> in     该成员是否在该数据中  \n> not in   该成员是否不在该数据中\n\n- 身份运算符\n\n> is 检测两个标识符是否引自同一个对象  \n> not is 两个标识符不是引自同一个对象\n\nid()可以用于获取对象地址\n\n# 流程控制\n\n流程控制有顺序、分支、循环等\n\n## 分支结构\n\n- 在分支中常使用的是 if-else 语句\n\n```python\nif 条件1:\n    code1\nelse:\n    code2\n```\n\n- 该分支可以嵌套，重复等等叠加使用\n\n```python\nif 条件1:\n    code1\nelif 条件2:\n    code2\nelse:\n    code3\n```\n\n- 三元运算符\n\n```python\ncode1 if 条件1 else code2\n```\n\n## 循环结构\n\n### while 循环\n\n```python\nnum = 1\nwhile num < 10:\n    print(num)\n    num += 1\nelse:\n    print(\"循环结束啦\")\n```\n\n### for 循环\n\n```python\nfor i in range(10):\n    print(i)\n```\n\n- break 语句\n\n> 跳出循环\n\n- continue 语句\n\n> 跳出当前循环，执行下一次循环\n\n- pass 语句\n\n> 什么也不做\n\n- exit()和 quit()用于结束程序的，结束的是解释器的程序\n\n# 打印矩形\n\n打印出十行十列的符号\n\n```python\nfor i in range(10):\n    print(\"✨✨✨✨✨✨✨✨✨✨\")\n```\n\n隔一行换一个颜色\n\n```python\nfor i in range(10):\n    if i % 2 == 0:\n        print(\"❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤\")\n    else:\n        print(\"◇ ◇ ◇ ◇ ◇ ◇ ◇ ◇ ◇ ◇\")\n```\n\n# 打印乘法表\n\n```python\nfor i in range(1,10):\n    for j in range(1,i+1):\n        print(f\"{j}✖{i}={i*j}\",end=\"\\t\")\n    print()\n```\n\n# 打印斐波那契数列\n\n```python\nnum = 10\n\nres_list = [0, 1]\nfor i in range(num-2):\n    res_list.append(res_list[-1]+res_list[-2])\n\nprint(res_list)\n```\n\n# 百元买百鸡\n\n一共有 100 元，买 100 只鸡  \n公鸡=3 元  \n母鸡=1 元  \n小鸡===0.5 元  \n罗列出所有方案\n\n```python\n# 公鸡 3\n# 母鸡 1\n# 小鸡 0.5\n\nmoney = 100\ncock_price = 3\nhen_price = 1\nchick_price = 0.5\ncount = 0\n\ncock_max = money // cock_price\nhen_max = money // hen_price\nchick_max = int(money // chick_price)\nprint(cock_max, hen_max, chick_max)  # 33 100 200\n\nfor cock_num in range(1, cock_max + 1):\n    for hen_num in range(1, hen_max + 1):\n        money_res = money - cock_num * cock_price - hen_num * hen_price\n        if money_res <=0:\n            break\n        else:\n            chick_num = int(money_res // chick_price)\n            if cock_num+hen_num+chick_num == 100:\n                count += 1\n                print(f\"方案{count}————100元可以购买:{cock_num}只公鸡，{hen_num}只母鸡，{chick_num}只小鸡\")\n```\n\n# 求 1000 以内的水仙花数\n\n打印 1000 以内所有满足水仙花的数，“水仙花数”是指一个三位数其各位数字的立方和等于该数本身，例如 153 是“水仙花数”，因为：153 = 1^3 + 5^3 + 3^3\n\n```python\nfor num in range(100, 1000):\n    a = num // 100\n    b = num % 100 // 10\n    c = num % 100 % 10\n    if a*a*a+b*b*b+c*c*c == num:\n        print(num)\n```\n\n# 青蛙跳台阶问题\n\n困难：一共有 n 个台阶，一只青蛙每次只能跳一阶或是两阶，那么一共有多少种跳到顶端的方案？例如 n=2，那么一共有两种方案，一次性跳两阶或是每次跳一阶。\n\n动态规划：其实，就是利用，上次得到的结果，给下一次作参考，下一次就能利用上次的结果快速得到结果，依次类推\n\n```python\n# 方法一\nn = 10\na = 1\nb = 2\n\nfor i in range(n-2):\n    t = a\n    a = b\n    b += t\nprint(b)\n\n\n# 方法二\nnum = 10\n\nres_list = [1, 2]\nfor i in range(num-2):\n    res_list.append(res_list[-1]+res_list[-2])\n\nprint(res_list[-1])\n```\n\n---\n\n> 更新: 2024-08-01 16:25:27  \n> 原文: <https://www.yuque.com/zacharyblock/cx2om6/slzd0tdgv6rm1nk1>\n","tags":["Python"],"categories":["Python基础"]}]